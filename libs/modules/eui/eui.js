var eui;
(function (eui) {
    /**
     * 树的拖拽行为
     * @author featherJ
     */
    var TreeDragBehavior = (function () {
        function TreeDragBehavior() {
            this._dragable = false;
            this._orderable = false;
            this.rootSelectOffsetY = 20;
            this.isDataGroupMouseIn = false;
            this.isTreeMouseIn = false;
            this._isDraging = false;
            this._startMouseY = 0;
            this.moveToOrder = false;
            this.moveTop = false;
            this.canDropIn = true;
            this.canDropMove = true;
            this.itemRenderList = [];
        }
        var c=TreeDragBehavior,p=c.prototype;
        /**
         * 设置一个拖拽进入完成的回调函数
         * @param callback
         * @param thisObject
         */
        p.setOnDragInComplete = function (callback, thisObject) {
            this.onDragInComplete = callback;
            this.onDragInCompleteThis = thisObject;
        };
        /**
         * 设置一个拖拽移动完成的回调函数
         * @param callback
         * @param thisObject
         */
        p.setOnDragMoveComplete = function (callback, thisObject) {
            this.onDragMoveComplete = callback;
            this.onDragMoveCompleteThis = thisObject;
        };
        /**
         * 设置一个拖拽开始
         * @param callback
         * @param thisObject
         */
        p.setOnDragStart = function (callback, thisObject) {
            this.onDragStart = callback;
            this.onDragStartThis = thisObject;
        };
        /**
         * 得到接收拖拽的目标项，如果为空则默认为当前鼠标所指向的项。  accpetFunctionHandler(obj:Object):Object
         * @param callback
         * @param thisObject
         */
        p.setAcceptFunc = function (callback, thisObject) {
            this.acceptFunction = callback;
            this.acceptThisObject = thisObject;
        };
        /**
         * 目标项是否可以拖拽，形式如canDragFunction(dragItems:Array):Boolean
         * @param callback
         * @param thisObject
         */
        p.setCanDragFunc = function (callback, thisObject) {
            this.canDragFunction = callback;
            this.canDragThisObject = thisObject;
        };
        /**
         * 是否可以释放拖拽进入。(dropTarget:Object,dragItems:Array):Boolean
         * @param callback
         * @param thisObject
         */
        p.setCanDropInFunc = function (callback, thisObject) {
            this.canDropInFunction = callback;
            this.canDropInThisObject = thisObject;
        };
        /**
         * 是否可以释放拖拽移动。 (dropTarget:Object,dragItems:Array):Boolean
         * 或(dropTarget:Object,dragItems:Array,pos:String):Boolean,pos的值为top,in,bottom
         * @param callback
         * @param thisObject
         */
        p.setCanDropMoveFunc = function (callback, thisObject) {
            this.canDropMoveFunction = callback;
            this.canDropMoveThisObject = thisObject;
        };
        /**
         * 初始化一棵树
         * @param tree
         */
        p.init = function (tree) {
            this._tree = tree;
            this.shapeSelect = new egret.Shape();
            this.shapeSelect.visible = false;
            this.shapeSelectRoot = new egret.Shape();
            this.shapeSelectRoot.visible = false;
            this._tree.addEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStage_handler, this);
            this._tree.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.removeFromStage_handler, this);
            this._tree.addEventListener(egret.MouseEvent.ROLL_OVER, this.dataGroupRollOverHandler, this);
            this._tree.addEventListener(egret.MouseEvent.ROLL_OUT, this.dataGroupRollOutHandler, this);
        };
        p.addedToStage_handler = function (e) {
            this._tree.parent.addChild(this.shapeSelectRoot);
            this._tree.parent.addChild(this.shapeSelect);
        };
        p.removeFromStage_handler = function (e) {
            if (this.shapeSelectRoot.parent)
                this.shapeSelectRoot.parent.removeChild(this.shapeSelectRoot);
            if (this.shapeSelect.parent)
                this.shapeSelect.parent.removeChild(this.shapeSelect);
        };
        p.dataGroupRollOverHandler = function (event) {
            this.isDataGroupMouseIn = true;
            this.updateRootSelect();
        };
        p.dataGroupRollOutHandler = function (event) {
            this.isDataGroupMouseIn = false;
            this.updateRootSelect();
        };
        d(p, "dragable"
            /**
             * 是否可以拖拽
             */
            ,function () {
                return this._dragable;
            }
            ,function (value) {
                this._dragable = value;
                if (this._dragable) {
                    if (this._tree.stage) {
                        this._stage = this._tree.stage;
                        this._tree.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.treeStageMouseMoveHandler, this);
                    }
                    else {
                        this._tree.addEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
                    }
                }
                else {
                    this._tree.removeEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
                    if (this._stage) {
                        this._stage.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.treeStageMouseMoveHandler, this);
                    }
                }
            }
        );
        p.addedToStageHandler = function (event) {
            this._tree.removeEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
            this._tree.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.treeStageMouseMoveHandler, this);
            this._stage = this._tree.stage;
        };
        p.treeStageMouseMoveHandler = function (event) {
            if ((this._tree.parent.mouseX < 0) ||
                (this._tree.parent.mouseX > this._tree.width) ||
                (this._tree.parent.mouseY < -this.rootSelectOffsetY) ||
                (this._tree.parent.mouseY > this._tree.height + this.rootSelectOffsetY)) {
                this.isTreeMouseIn = false;
                this.shapeSelect.graphics.clear();
                this.shapeSelect.visible = false;
                this.shapeSelectRoot.graphics.clear();
                this.shapeSelectRoot.visible = false;
            }
            else {
                this.isTreeMouseIn = true;
            }
            this.updateRootSelect();
        };
        p.updateRootSelect = function () {
            this.shapeSelectRoot.visible = false;
            this.shapeSelectRoot.graphics.clear();
            if (this.dragItems && this._isDraging) {
                if (!this.isTreeMouseIn) {
                }
            }
            if (this.isTreeMouseIn == true && this.isDataGroupMouseIn == false) {
                this.moveToOrder = false;
                if (this.dragItems && this._isDraging) {
                    this.canDropIn = true;
                    this.parentFolder = this._tree.dataProvider.source;
                    if (this.canDropInFunction != null) {
                        if (!this.canDropInFunction.call(this.canDropInThisObject, this.parentFolder, this.dragItems)) {
                            this.canDropIn = false;
                        }
                    }
                    if (this.canDropIn) {
                        //                        if(!DragManager.isDragging) {
                        //                            if(CursorManager.cursor != Cursors.DESKTOP_DRAG) {
                        //                                CursorManager.setCursor(Cursors.DESKTOP_DRAG,1);
                        //                            }
                        //                        }
                        //                        if(DragManager.isDragging) {
                        //                            DragManager.acceptDragDrop(this._tree);
                        //                        }
                        this.shapeSelect.graphics.clear();
                        this.shapeSelect.visible = false;
                        this.shapeSelectRoot.visible = true;
                        this.shapeSelectRoot.graphics.beginFill(0x396895);
                        this.shapeSelectRoot.graphics.moveTo(this._tree.x, this._tree.y);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + this._tree.width, this._tree.y);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + this._tree.width, this._tree.y + this._tree.height);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x, this._tree.y + this._tree.height);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x, this._tree.y);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + 2, this._tree.y + 2);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + 2, this._tree.y + this._tree.height - 4);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + this._tree.width - 4, this._tree.y + this._tree.height - 4);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + this._tree.width - 4, this._tree.y + 2);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x + 2, this._tree.y + 2);
                        this.shapeSelectRoot.graphics.lineTo(this._tree.x, this._tree.y);
                        this.shapeSelectRoot.graphics.endFill();
                    }
                    else {
                    }
                }
            }
        };
        d(p, "orderable"
            /**
             * 是否支持拖拽改变顺序
             */
            ,function () {
                return this._orderable;
            }
            ,function (value) {
                this._orderable = value;
            }
        );
        p.treeMouseDownHandler = function (event) {
            if (!this.dragable)
                return;
            this._tree.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.startDragHandler, this);
            if (this._tree.stage) {
                this._tree.stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.treeMouseUpHandler, this);
            }
        };
        p.treeMouseUpHandler = function (event) {
            event.currentTarget.removeEventListener(egret.MouseEvent.MOUSE_UP, this.treeMouseUpHandler, this);
            this._tree.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.startDragHandler, this);
            this._tree.removeEventListener(egret.Event.ENTER_FRAME, this.adjustVPosHandler, this);
        };
        p.startDragHandler = function (event) {
            this._tree.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.startDragHandler, this);
            if (this._tree.selectedItems.length > 0 && this._tree.stage != null) {
                this._dragStage = this._tree.stage;
                this._dragStage.addEventListener(egret.MouseEvent.MOUSE_UP, this.dragMouseUpHandler, this);
                var arr = [];
                for (var i = 0; i < this._tree.selectedItems.length; i++) {
                    arr.push(this._tree.selectedItems[i]);
                }
                arr = this.sortSelectedItems(arr);
                this.dragItems = arr;
                if (this.canDragFunction != null) {
                    if (!this.canDragFunction.call(this.canDragThisObject, this.dragItems)) {
                        this.dragItems = null;
                        //                        if(!DragManager.isDragging) {
                        //                            if(CursorManager.cursor != Cursors.DESKTOP_DISABLE) {
                        //                                CursorManager.setCursor(Cursors.DESKTOP_DISABLE,1);
                        //                            }
                        //                        }
                        return;
                    }
                }
                if (this.onDragStart != null) {
                    this.onDragStart.call(this.onDragStartThis, this.dragItems);
                }
                this._isDraging = true;
            }
            if (this.dragItems != null && this._isDraging) {
                this._startMouseY = this._tree.parent.mouseY - this._tree.y;
                this._tree.addEventListener(egret.Event.ENTER_FRAME, this.adjustVPosHandler, this);
            }
        };
        /**
         * 排序选择项
         * @param items
         * @retur
         */
        p.sortSelectedItems = function (items) {
            var newItems = [];
            function sort(collection) {
                if (!collection)
                    return;
                for (var i = 0; i < collection.length; i++) {
                    var obj = collection.getItemAt(i);
                    if (items.indexOf(obj) != -1) {
                        newItems.push(obj);
                    }
                }
            }
            sort(this._tree.dataProvider);
            return newItems;
        };
        p.adjustVPosHandler = function (event) {
            var v;
            var mouseX = this._tree.parent.mouseX - this._tree.x;
            var mouseY = this._tree.parent.mouseY - this._tree.y;
            if (mouseY > this._startMouseY && mouseY < this._tree.height + this.rootSelectOffsetY &&
                mouseX > 0 && mouseX < this._tree.width) {
                v = Math.pow((1 - (this._tree.height - mouseY) / (this._tree.height - this._startMouseY)), 4);
                if (v > 1)
                    v = 1;
                v = Math.round(v);
                this._tree.scrollV += v * 15;
                if (this._tree.scrollV >= this._tree.contentHeight - this._tree.height)
                    this._tree.scrollV = this._tree.contentHeight - this._tree.height;
                if (this._tree.scrollV <= 0)
                    this._tree.scrollV = 0;
                this._tree.validateNow();
            }
            else if (mouseY < this._startMouseY && mouseY > -this.rootSelectOffsetY &&
                mouseX > 0 && mouseX < this._tree.width) {
                v = Math.pow((1 - (mouseY) / (this._startMouseY)), 4);
                if (v > 1)
                    v = 1;
                v = Math.round(v);
                this._tree.scrollV -= v * 15;
                if (this._tree.scrollV >= this._tree.contentHeight - this._tree.height)
                    this._tree.scrollV = this._tree.contentHeight - this._tree.height;
                if (this._tree.scrollV <= 0)
                    this._tree.scrollV = 0;
                this._tree.validateNow();
            }
        };
        p.itemDragMouseOverHandler = function (event) {
            if (event === void 0) { event = null; }
            this.shapeSelect.graphics.clear();
            this.shapeSelect.visible = false;
            this.moveToOrder = false;
            if (this.dragItems != null && this._isDraging) {
                //                if(!DragManager.isDragging) {
                //                    if(CursorManager.cursor != Cursors.DESKTOP_DISABLE) {
                //                        CursorManager.setCursor(Cursors.DESKTOP_DISABLE,1);
                //                    }
                //                }
                if (event != null)
                    this.targetRenderer = event.currentTarget;
                if (!this.targetRenderer)
                    return;
                if (this.acceptFunction != null) {
                    this.parentFolder = this.acceptFunction.call(this.acceptThisObject, this.targetRenderer.data);
                }
                else {
                    this.parentFolder = this.targetRenderer.data;
                }
                if (this.parentFolder != null) {
                    this.canDropIn = true;
                    if (this.canDropInFunction != null) {
                        if (!this.canDropInFunction.call(this.canDropInThisObject, this.parentFolder, this.dragItems)) {
                            this.canDropIn = false;
                        }
                    }
                    if (this.canDropIn)
                        this.canDropIn = !this.checkIsChildren(this.dragItems, this.parentFolder);
                    this.canDropMove = true;
                    if (this.canDropMoveFunction != null) {
                        if (this.canDropMoveFunction.length == 2) {
                            if (!this.canDropMoveFunction.call(this.canDropMoveThisObject, this.targetRenderer.data, this.dragItems)) {
                                this.canDropMove = false;
                            }
                        }
                        else if (this.canDropMoveFunction.length == 3) {
                            var pos = "in";
                            if (this.parentFolder == this.targetRenderer.data && this._orderable) {
                                if (this.targetRenderer.mouseY < this.targetRenderer.height / 3 && this.canDropMove) {
                                    pos = "top";
                                }
                                else if (this.targetRenderer.mouseY > (this.targetRenderer.height / 3) * 2 && this.canDropMove) {
                                    pos = "bottom";
                                }
                            }
                            if (!this.canDropMoveFunction.call(this.canDropMoveThisObject, this.targetRenderer.data, this.dragItems, pos)) {
                                this.canDropMove = false;
                            }
                        }
                    }
                    if (this.canDropMove)
                        this.canDropMove = !this.checkIsChildren(this.dragItems, this.parentFolder);
                    var itemRender;
                    //如果接受者本身就是文件夹，那选中这个文件夹
                    if (this.parentFolder == this.targetRenderer.data && !this._orderable && this.canDropIn) {
                        itemRender = this.getItemByData(this.parentFolder);
                        if (itemRender != null && egret.is(itemRender, "egret.DisplayObject")) {
                            this.drawDropIn(itemRender);
                            //                            DragManager.acceptDragDrop(this._tree);
                            //                            if(!DragManager.isDragging) {
                            //                                if(CursorManager.cursor != Cursors.DESKTOP_DRAG) {
                            //                                    CursorManager.setCursor(Cursors.DESKTOP_DRAG,1);
                            //                                }
                            //                            }
                            this.moveToOrder = false;
                        }
                    }
                    else if (this.parentFolder == this.targetRenderer.data && this._orderable) {
                        itemRender = this.getItemByData(this.parentFolder);
                        if (itemRender != null && egret.is(itemRender, "egret.DisplayObject")) {
                            if (this.targetRenderer.mouseY < this.targetRenderer.height / 3 && this.canDropMove) {
                                this.drawDropMove(itemRender, true);
                                this.moveToOrder = true;
                                this.moveTop = true;
                                //                                DragManager.acceptDragDrop(this._tree);
                                //                                if(!DragManager.isDragging) {
                                //                                    if(CursorManager.cursor != Cursors.DESKTOP_DRAG) {
                                //                                        CursorManager.setCursor(Cursors.DESKTOP_DRAG,1);
                                //                                    }
                                //                                }
                                this.currentData = this.targetRenderer.data;
                            }
                            else if (this.targetRenderer.mouseY > (this.targetRenderer.height / 3) * 2 && this.canDropMove) {
                                this.drawDropMove(itemRender, false);
                                this.moveToOrder = true;
                                this.moveTop = false;
                                //                                DragManager.acceptDragDrop(this._tree);
                                //                                if(!DragManager.isDragging) {
                                //                                    if(CursorManager.cursor != Cursors.DESKTOP_DRAG) {
                                //                                        CursorManager.setCursor(Cursors.DESKTOP_DRAG,1);
                                //                                    }
                                //                                }
                                this.currentData = this.targetRenderer.data;
                            }
                            else if (this.canDropIn) {
                                this.drawDropIn(itemRender);
                                this.moveToOrder = false;
                            }
                        }
                    }
                    else if (this.parentFolder != this.targetRenderer.data && !this._orderable && this.canDropIn) {
                        itemRender = this.getItemByData(this.parentFolder);
                        if (itemRender != null && egret.is(itemRender, "egret.DisplayObject")) {
                            this.drawDropIn(itemRender);
                            this.moveToOrder = false;
                        }
                    }
                    else if (this.parentFolder != this.targetRenderer.data && this._orderable && this.canDropMove) {
                        if (this.targetRenderer.mouseY > this.targetRenderer.height / 2) {
                            this.moveTop = false;
                            this.drawDropMove(itemRender, false);
                        }
                        else {
                            this.moveTop = true;
                            this.drawDropMove(itemRender, true);
                        }
                        //                        DragManager.acceptDragDrop(this._tree);
                        this.moveToOrder = true;
                        this.currentData = this.targetRenderer.data;
                    }
                }
            }
        };
        /**
         * 得到指定项的高度，把子项也算进去了
         * @param itemRenderer
         * @return
         */
        p.getRenderHeightInSameLevel = function (itemRenderer) {
            var dataArr = [];
            var treeCollection = this._tree.dataProvider;
            function getChild(data) {
                if (data.children && treeCollection.isItemOpen(data)) {
                    for (var i = 0; i < data.children.length; i++) {
                        getChild(data.children[i]);
                    }
                }
                dataArr.push(data);
            }
            getChild(itemRenderer.data);
            var itemRenderers = [];
            for (var i = 0; i < dataArr.length; i++) {
                var item = this.getItemRenderByData(dataArr[i]);
                if (item) {
                    itemRenderers.push(item);
                }
            }
            var h = 0;
            for (i = 0; i < itemRenderers.length; i++) {
                h += itemRenderers[i].height;
            }
            return h;
        };
        p.getItemRenderByData = function (data) {
            for (var i = 0; i < this.itemRenderList.length; i++) {
                if (this.itemRenderList[i].data == data) {
                    return this.itemRenderList[i];
                }
            }
            return null;
        };
        p.itemDragMouseOutHandler = function (event) {
        };
        p.dragMouseUpHandler = function (event) {
            this._dragStage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.dragMouseUpHandler, this);
            //            if(!DragManager.isDragging) {
            //                CursorManager.removeCursor(Cursors.DESKTOP_DISABLE);
            //                CursorManager.removeCursor(Cursors.DESKTOP_DRAG);
            //            }
            this._dragStage = null;
            this.shapeSelect.graphics.clear();
            this.shapeSelect.visible = false;
            this.shapeSelectRoot.graphics.clear();
            this.shapeSelectRoot.visible = false;
            if (this.dragItems != null && this._isDraging == true && this.isTreeMouseIn && this.parentFolder != null) {
                if (!this.parentFolder.children) {
                    var arr = [];
                    this.parentFolder.children = arr;
                }
                if (this.dragItems) {
                    if (this.moveToOrder == true && this.canDropMove == true) {
                        if (this.onDragMoveComplete != null && this.currentData.parent) {
                            this.onDragMoveComplete.call(this.onDragInCompleteThis, this.currentData, this.dragItems, this.moveTop);
                        }
                    }
                    else if (this.canDropIn == true) {
                        var sameObj = this.checkSameObj(this.parentFolder, this.dragItems);
                        if (!sameObj) {
                            if (this.onDragInComplete != null) {
                                this.onDragInComplete.call(this.onDragInCompleteThis, this.parentFolder, this.dragItems);
                            }
                        }
                    }
                }
            }
            this._isDraging = false;
            this.parentFolder = null;
            this.dragItems = null;
        };
        /**
         * 完成拖拽
         * @param $parentFolder
         * @param $dragItemsnumber
         */
        p.doDrag = function ($parentFolder, $dragItems) {
            for (var i = 0; i < $dragItems.length; i++) {
                this.deleteFrom($dragItems[i].parent.children, $dragItems[i]);
                $parentFolder.children.push($dragItems[i]);
                $dragItems[i].parent = $parentFolder;
            }
            this._tree.dataProvider.refresh();
            this._tree.validateNow();
        };
        /**
         * 完成移动
         * @param $parentFolder
         * @param $dragItems
         */
        p.doMove = function ($currentData, $dragItems, isTop) {
            if (!$currentData.parent)
                return;
            var parent = $currentData.parent;
            var index = parent.children.indexOf($currentData);
            var numAbove = 0;
            for (var i = 0; i < $dragItems.length; i++) {
                if ($dragItems[i].parent == parent && parent.children.indexOf($dragItems[i]) <= index) {
                    if ((parent.children.indexOf($dragItems[i]) == index && !isTop) || parent.children.indexOf($dragItems[i]) != index)
                        numAbove++;
                }
            }
            index -= numAbove;
            for (i = 0; i < $dragItems.length; i++) {
                this.deleteFrom($dragItems[i].parent.children, $dragItems[i]);
            }
            if (isTop == true) {
                index--;
            }
            var selectes = [];
            while ($dragItems.length > 0) {
                var current = $dragItems.pop();
                selectes.push(current);
                parent.children.push(current);
                for (i = parent.children.length - 1; i > index + 1; i--) {
                    parent.children[i] = parent.children[i - 1];
                }
                parent.children[index + 1] = current;
                current.parent = parent;
            }
            this._tree.dataProvider.refresh();
            this._tree.validateNow();
            this._tree.selectedItems = selectes;
        };
        /**
         * 检查相同项
         * @param source
         * @param target
         * @return
         */
        p.checkSameObj = function (source, target) {
            var isSame = false;
            for (var i = 0; i < target.length; i++) {
                if (source == target[i]) {
                    isSame = true;
                    break;
                }
            }
            return isSame;
        };
        p.deleteFrom = function (arr, target) {
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] == target) {
                    for (var j = i; j < arr.length - 1; j++) {
                        arr[j] = arr[j + 1];
                    }
                    arr.pop();
                    break;
                }
            }
        };
        p.rendererRemoved = function (renderer) {
            if (egret.is(renderer, "eui.ItemRenderer")) {
                renderer.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.treeMouseDownHandler, this);
                renderer.removeEventListener(egret.MouseEvent.ROLL_OUT, this.itemDragMouseOutHandler, this);
                renderer.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.itemDragMouseOverHandler, this);
                for (var i = 0; i < this.itemRenderList.length; i++) {
                    if (this.itemRenderList[i] == renderer) {
                        for (var j = i; j < this.itemRenderList.length - 1; j++) {
                            this.itemRenderList[j] = this.itemRenderList[j + 1];
                        }
                        this.itemRenderList.pop();
                        break;
                    }
                }
            }
        };
        p.rendererAdded = function (renderer) {
            if (egret.is(renderer, "eui.ItemRenderer")) {
                renderer.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.treeMouseDownHandler, this);
                renderer.addEventListener(egret.MouseEvent.ROLL_OUT, this.itemDragMouseOutHandler, this);
                renderer.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.itemDragMouseOverHandler, this);
                this.itemRenderList.push(renderer);
            }
        };
        /**
         * 通过内容得到渲染项
         * @param data
         * @return
         */
        p.getItemByData = function (data) {
            var target;
            for (var i = 0; i < this.itemRenderList.length; i++) {
                if (this.itemRenderList[i].data == data) {
                    target = this.itemRenderList[i];
                    break;
                }
            }
            return target;
        };
        /**
         * 判断是否是子类
         * @param parent
         * @param children
         * @return
        *
         */
        p.checkIsChildren = function (parents, child) {
            //递归函数
            function checkNode($parent, $child) {
                var tmpResult = false;
                if ($parent.children) {
                    for (var i = 0; i < $parent.children.length; i++) {
                        if ($parent.children[i] == $child) {
                            tmpResult = true;
                        }
                        else if ($parent.children[i].children) {
                            tmpResult = checkNode($parent.children[i], $child);
                        }
                    }
                }
                return tmpResult;
            }
            ;
            var result = false;
            for (var i = 0; i < parents.length; i++) {
                if (checkNode(parents[i], child)) {
                    result = true;
                    break;
                }
            }
            return result;
        };
        p.drawDropIn = function (renderer) {
            this.shapeSelect.graphics.clear();
            this.shapeSelect.graphics.beginFill(0x396895);
            this.shapeSelect.graphics.moveTo(0, 0);
            this.shapeSelect.graphics.lineTo(this._tree.width, 0);
            this.shapeSelect.graphics.lineTo(this._tree.width, renderer.height);
            this.shapeSelect.graphics.lineTo(0, renderer.height);
            this.shapeSelect.graphics.lineTo(0, 0);
            this.shapeSelect.graphics.lineTo(2, 2);
            this.shapeSelect.graphics.lineTo(2, renderer.height - 2);
            this.shapeSelect.graphics.lineTo(this._tree.width - 2, renderer.height - 2);
            this.shapeSelect.graphics.lineTo(this._tree.width - 2, 2);
            this.shapeSelect.graphics.lineTo(2, 2);
            this.shapeSelect.graphics.lineTo(0, 0);
            this.shapeSelect.graphics.endFill();
            this.shapeSelect.visible = true;
            var pos = renderer.localToGlobal(0, 0);
            pos = this.shapeSelect.parent.globalToLocal(pos.x, pos.y);
            this.shapeSelect.x = pos.x;
            this.shapeSelect.y = pos.y;
            this._tree.addChild(this.shapeSelect);
        };
        p.drawDropMove = function (renderer, isTop) {
            if (isTop === void 0) { isTop = false; }
            if (egret.is(renderer, "eui.TreeItemRenderer")) {
                var depth = renderer.disclosureButton.localToGlobal(renderer.disclosureButton.width, 0);
                depth = this.shapeSelect.parent.globalToLocal(depth.x, depth.y);
                this.shapeSelect.graphics.beginFill(0x396895);
                this.shapeSelect.graphics.drawRect(depth.x, 0, this._tree.width - depth.x, 2);
                this.shapeSelect.graphics.endFill();
                this.shapeSelect.visible = true;
                var pos = renderer.localToGlobal(0, 0);
                pos = this.shapeSelect.parent.globalToLocal(pos.x, pos.y);
                this.shapeSelect.x = pos.x;
                if (isTop)
                    this.shapeSelect.y = pos.y - 1;
                else
                    this.shapeSelect.y = pos.y - 1 + this.getRenderHeightInSameLevel(renderer);
                this._tree.addChild(this.shapeSelect);
            }
        };
        return TreeDragBehavior;
    })();
    eui.TreeDragBehavior = TreeDragBehavior;
    egret.registerClass(TreeDragBehavior,'eui.TreeDragBehavior');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Binding class defines utility methods for performing data binding.
     * You can use the methods defined in this class to configure data bindings.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/binding/BindingExample.ts
     */
    /**
     * @language zh_CN
     * 绑定工具类，用于执行数据绑定用的方法集。您可以使用此类中定义的方法来配置数据绑定。
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/binding/BindingExample.ts
     */
    var Binding = (function () {
        function Binding() {
        }
        var c=Binding,p=c.prototype;
        /**
         * @language en_US
         * Binds a property, <prop>prop</code> on the <code>target</code> Object, to a bindable property or peoperty chain.
         * @param host The object that hosts the property or property chain to be watched.
         * The <code>host</code> maintains a list of <code>targets</code> to update theirs <code>prop</code> when <code>chain</code> changes.
         * @param chain A value specifying the property or chain to be watched. For example, when watch the property <code>host.a.b.c</code>,
         * you need call the method like this: <code>indProperty(host, ["a","b","c"], ...)</code>
         * @param target The Object defining the property to be bound to <code>chain</code>.
         * @param prop The name of the public property defined in the <code>site</code> Object to be bound.
         * @returns A ChangeWatcher instance, if at least one property name has been specified
         * to the <code>chain</code> argument; null otherwise.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 绑定一个对象的属性值到要监视的对象属性上。
         * @param host 用于承载要监视的属性或属性链的对象。
         * 当 <code>host</code>上<code>chain</code>所对应的值发生改变时，<code>target</code>上的<code>prop</code>属性将被自动更新。
         * @param chain 用于指定要监视的属性链的值。例如，要监视属性 <code>host.a.b.c</code>，需按以下形式调用此方法：<code>bindProperty(host, ["a","b","c"], ...)。</code>
         * @param target 本次绑定要更新的目标对象。
         * @param prop 本次绑定要更新的目标属性名称。
         * @returns 如果已为 chain 参数至少指定了一个属性名称，则返回 Watcher 实例；否则返回 null。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Binding.bindProperty = function (host, chain, target, prop) {
            var watcher = eui.Watcher.watch(host, chain, null, null);
            if (watcher) {
                var assign = function (value) {
                    target[prop] = value;
                };
                watcher.setHandler(assign, null);
                assign(watcher.getValue());
            }
            return watcher;
        };
        /**
         * @language en_US
         * Binds a callback, <prop>handler</code> on the <code>target</code> Object, to a bindable property or peoperty chain.
         * Callback method to invoke with an argument of the current value of <code>chain</code> when that value changes.
         * @param host The object that hosts the property or property chain to be watched.
         * @param chain A value specifying the property or chain to be watched. For example, when watch the property <code>host.a.b.c</code>,
         * you need call the method like this: <code>indProperty(host, ["a","b","c"], ...)</code>
         * @param handler method to invoke with an argument of the current value of <code>chain</code> when that value changes.
         * @param thisObject <code>this</code> object of binding method
         * @returns A ChangeWatcher instance, if at least one property name has been  specified to the <code>chain</code> argument; null otherwise.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 绑定一个回调函数到要监视的对象属性上。当 host上 chain 所对应的值发生改变时，handler 方法将被自动调用。
         * @param host 用于承载要监视的属性或属性链的对象。
         * @param chain 用于指定要监视的属性链的值。例如，要监视属性 host.a.b.c，需按以下形式调用此方法：bindSetter(host, ["a","b","c"], ...)。
         * @param handler 在监视的目标属性链中任何属性的值发生改变时调用的事件处理函数。
         * @param thisObject handler 方法绑定的this对象
         * @returns 如果已为 chain 参数至少指定了一个属性名称，则返回 Watcher 实例；否则返回 null。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Binding.bindHandler = function (host, chain, handler, thisObject) {
            var watcher = eui.Watcher.watch(host, chain, handler, thisObject);
            if (watcher) {
                handler.call(thisObject, watcher.getValue());
            }
            return watcher;
        };
        return Binding;
    })();
    eui.Binding = Binding;
    egret.registerClass(Binding,'eui.Binding');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @private
     */
    var listeners = "__listeners__";
    /**
     * @private
     */
    var bindables = "__bindables__";
    /**
     * @private
     */
    var bindableCount = 0;
    /**
     * @private
     *
     * @param host
     * @param property
     * @returns
     */
    function getPropertyDescriptor(host, property) {
        var data = Object.getOwnPropertyDescriptor(host, property);
        if (data) {
            return data;
        }
        var prototype = Object.getPrototypeOf(host);
        if (prototype) {
            return getPropertyDescriptor(prototype, property);
        }
        return null;
    }
    function notifyListener(host, property) {
        var list = host[listeners];
        var length = list.length;
        for (var i = 0; i < length; i += 2) {
            var listener = list[i];
            var target = list[i + 1];
            listener.call(target, property);
        }
    }
    /**
     * @language en_US
     * The Watcher class defines utility method that you can use with bindable properties.
     * These methods let you define an event handler that is executed whenever a bindable property is updated.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/binding/WatcherExample.ts
     */
    /**
     * @language zh_CN
     * Watcher 类能够监视可绑定属性的改变，您可以定义一个事件处理函数作为 Watcher 的回调方法，在每次可绑定属性的值改变时都执行此函数。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/binding/WatcherExample.ts
     */
    var Watcher = (function () {
        /**
         * @language en_US
         * Constructor.
         * Not for public use. This method is called only from the <code>watch()</code> method.
         * See the <code>watch()</code> method for parameter usage.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数，非公开。只能从 watch() 方法中调用此方法。有关参数用法，请参阅 watch() 方法。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Watcher(property, handler, thisObject, next) {
            /**
             * @private
             */
            this.isExecuting = false;
            this.property = property;
            this.handler = handler;
            this.next = next;
            this.thisObject = thisObject;
        }
        var c=Watcher,p=c.prototype;
        /**
         * @language en_US
         * Creates and starts a Watcher instance.
         * The Watcher can only watch the property of a Object which host is instance of egret.IEventDispatcher.
         * @param host The object that hosts the property or property chain to be watched.
         * You can use the use the <code>reset()</code> method to change the value of the <code>host</code> argument
         * after creating the Watcher instance.
         * The <code>host</code> maintains a list of <code>handlers</code> to invoke when <code>prop</code> changes.
         * @param chain A value specifying the property or chain to be watched.
         * For example, to watch the property <code>host.a.b.c</code>,
         * call the method as: <code>watch(host, ["a","b","c"], ...)</code>.
         * @param handler  An event handler function called when the value of the watched property
         * (or any property in a watched chain) is modified.
         * @param thisObject <code>this</code> object of which binding with handler
         * @returns he ChangeWatcher instance, if at least one property name has been specified to
         * the <code>chain</code> argument; null otherwise.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建并启动 Watcher 实例。注意：Watcher 只能监视 host 为 egret.IEventDispatcher 对象的属性改变。若属性链中某个属性所对应的实例不是 egret.IEventDispatcher，
         * 则属性链中在它之后的属性改变将无法检测到。
         * @param host 用于承载要监视的属性或属性链的对象。
         * 创建Watcher实例后，您可以利用<code>reset()</code>方法更改<code>host</code>参数的值。
         * 当<code>prop</code>改变的时候，会使得host对应的一系列<code>handlers</code>被触发。
         * @param chain 用于指定要监视的属性链的值。例如，要监视属性 host.a.b.c，需按以下形式调用此方法：watch¬(host, ["a","b","c"], ...)。
         * @param handler 在监视的目标属性链中任何属性的值发生改变时调用的事件处理函数。
         * @param thisObject handler 方法绑定的this对象
         * @returns 如果已为 chain 参数至少指定了一个属性名称，则返回 Watcher 实例；否则返回 null。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Watcher.watch = function (host, chain, handler, thisObject) {
            if (DEBUG) {
                if (!chain) {
                    egret.$error(1003, "chain");
                }
            }
            if (chain.length > 0) {
                var property = chain.shift();
                var next = Watcher.watch(null, chain, handler, thisObject);
                var watcher = new Watcher(property, handler, thisObject, next);
                watcher.reset(host);
                return watcher;
            }
            else {
                return null;
            }
        };
        /**
         * @private
         * 检查属性是否可以绑定。若还未绑定，尝试添加绑定事件。若是只读或只写属性，返回false。
         */
        Watcher.checkBindable = function (host, property) {
            var list = host[bindables];
            if (list && list.indexOf(property) != -1) {
                return true;
            }
            var isEventDispatcher = egret.is(host, "egret.IEventDispatcher");
            if (!isEventDispatcher) {
                host[listeners] = [];
            }
            var data = getPropertyDescriptor(host, property);
            if (data && data.set && data.get) {
                var orgSet = data.set;
                data.set = function (value) {
                    if (this[property] != value) {
                        orgSet.call(this, value);
                        if (isEventDispatcher) {
                            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, property);
                        }
                        else {
                            notifyListener(this, property);
                        }
                    }
                };
            }
            else if (!data || (!data.get && !data.set)) {
                bindableCount++;
                var newProp = "_" + bindableCount + property;
                host[newProp] = data ? data.value : null;
                data = { enumerable: true, configurable: true };
                data.get = function () {
                    return this[newProp];
                };
                data.set = function (value) {
                    if (this[newProp] != value) {
                        this[newProp] = value;
                        if (isEventDispatcher) {
                            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, property);
                        }
                        else {
                            notifyListener(this, property);
                        }
                    }
                };
            }
            else {
                return false;
            }
            Object.defineProperty(host, property, data);
            eui.registerBindable(host, property);
        };
        /**
         * @language en_US
         * Detaches this Watcher instance, and its handler function, from the current host.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 从当前宿主中断开此 Watcher 实例及其处理函数。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.unwatch = function () {
            this.reset(null);
            this.handler = null;
            if (this.next) {
                this.next.handler = null;
            }
        };
        /**
         * @language en_US
         * Retrieves the current value of the watched property or property chain, or null if the host object is null.
         * @example
         * <pre>
         * watch(obj, ["a","b","c"], ...).getValue() === obj.a.b.c
         * </pre>
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 检索观察的属性或属性链的当前值，当宿主对象为空时此值为空。
         * @example
         * <pre>
         * watch(obj, ["a","b","c"], ...).getValue() === obj.a.b.c
         * </pre>
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getValue = function () {
            if (this.next) {
                return this.next.getValue();
            }
            return this.getHostPropertyValue();
        };
        /**
         * @language en_US
         * Sets the handler function.s
         * @param handler The handler function. This argument must not be null.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 设置处理函数。
         * @param handler 处理函数，此参数必须为非空。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setHandler = function (handler, thisObject) {
            this.handler = handler;
            this.thisObject = thisObject;
            if (this.next) {
                this.next.setHandler(handler, thisObject);
            }
        };
        /**
         * @language en_US
         * Resets this ChangeWatcher instance to use a new host object.
         * You can call this method to reuse a watcher instance on a different host.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 重置此 Watcher 实例使用新的宿主对象。
         * 您可以通过该方法实现一个Watcher实例用于不同的宿主。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.reset = function (newHost) {
            var oldHost = this.host;
            if (oldHost) {
                if (egret.is(oldHost, "egret.IEventDispatcher")) {
                    oldHost.removeEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.wrapHandler, this);
                }
                else {
                    var list = oldHost[listeners];
                    var index = list.indexOf(this);
                    list.splice(index - 1, 2);
                }
            }
            this.host = newHost;
            if (newHost) {
                Watcher.checkBindable(newHost, this.property);
                if (egret.is(newHost, "egret.IEventDispatcher")) {
                    newHost.addEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.wrapHandler, this, false, 100);
                }
                else {
                    var list = newHost[listeners];
                    list.push(this.onPropertyChange);
                    list.push(this);
                }
            }
            if (this.next)
                this.next.reset(this.getHostPropertyValue());
        };
        /**
         * @private
         *
         * @returns
         */
        p.getHostPropertyValue = function () {
            return this.host ? this.host[this.property] : null;
        };
        /**
         * @private
         */
        p.wrapHandler = function (event) {
            this.onPropertyChange(event.property);
        };
        /**
         * @private
         */
        p.onPropertyChange = function (property) {
            if (property == this.property && !this.isExecuting) {
                try {
                    this.isExecuting = true;
                    if (this.next)
                        this.next.reset(this.getHostPropertyValue());
                    this.handler.call(this.thisObject, this.getValue());
                }
                finally {
                    this.isExecuting = false;
                }
            }
        };
        return Watcher;
    })();
    eui.Watcher = Watcher;
    egret.registerClass(Watcher,'eui.Watcher');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Register a property for a class definition in running,
     * so that the EUI can get type of property accurate when parsing a EXML.
     * This need not be called directly in most of time. Only when you have a custom UI
     * component need to be described in EXML, you may invoke this method explicitly.
     *
     * Contains no following：
     * When the property is the basic data type(boolean, number, string or Array), you only need set a correct initial value
     * for he custom property then the EXML parser can get the correct property type in running.
     *
     * If you can not set the correct initial value (such as <code>null</code>), the EXML parser will treat this property as
     * <code>string</code>. If there is no inital value, EUI will throw an error. But you can invoked this method to register
     * a property in this case.
     *
     *
     * @param classDefinition The class definition need to be registered.
     * @param property The property need to be registered. Note that the property
     * name cannot start with "_" or "$".
     * @param type The type need to be registered,
     * such as “boolean","number","string","Array","egret.Rectangle" and so on.
     * @param asDefault Whether register this property as a default property of component.
     * One component can register only on default property. And the default property can be spare in an EXML.
     *
     * @example：
     * <pre>
     *      <s:Scroller>
     *          <s:viewport>
     *          <s:Group/>
     *          </e:viewport>
     *      </e:Scroller>
     * </pre>
     * Cuz <code>viewport</code> is the default property of Scroller. So you can write as follow:
     * <pre>
     *      <s:Scroller>
     *          <s:Group/>
     *      </e:Scroller>
     * </pre>
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 为一个类定义注册运行时属性类型，以便运行时的EXML文件解析过程能获取准确的属性类型。大多数情况下，您都不需要手动调用此方法显式注册属性类型。
     * 仅当您有一个自定义的 UI 组件，需要在EXML中用标签描述时可能需要显式注册，但以下情况除外：
     * 当属性类型为基本数据类型：boolean,number,string,Array这四种其中之一时，您只需要为自定义的属性赋值上正确的初始值，
     * 运行时EXML解析器就能通过初始值自动分析出正确的属性类型。
     * 若您无法为属性赋值上正确的初始值时(有初始值，比如null),运行时EXML解析器会把此属性当做string来处理，若完全没有初始值，将会报错找不到节点属性，
     * 这种情况下可以手动调用此方法显式注册属性类型。
     *
     * @param classDefinition 要注册的类定义。
     * @param property 要注册的属性,注意属性名不能以 _ 或 $ 符开头。
     * @param type 要注册的类型,例如：“boolean","number","string","Array","egret.Rectangle"
     * @param asDefault 是否将此属性注册为组件的默认属性,一个组件只可以设置一个默认属性。注册了组件默认属性后，在EXML中可以使用省略属性节点的写法，
     * @example：
     * <pre>
     * <s:Scroller>
     *     <s:viewport>
     *         <s:Group/>
     *     </e:viewport>
     * </e:Scroller>
     * </pre>
     * 因为 viewport 已经注册为 Scroller 的默认属性，上面的例子可以等效为：
     * <pre>
     * <s:Scroller>
     *     <s:Group/>
     * </e:Scroller>
     * </pre>
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    function registerProperty(classDefinition, property, type, asDefault) {
        if (DEBUG) {
            if (!classDefinition) {
                egret.$error(1003, "classDefinition");
            }
            if (!classDefinition.prototype) {
                egret.$error(1012, "classDefinition");
            }
            if (!property) {
                egret.$error(1003, "property");
            }
            if (!type) {
                egret.$error(1003, "type");
            }
        }
        var prototype = classDefinition.prototype;
        prototype.__meta__ = prototype.__meta__ || {};
        prototype.__meta__[property] = type;
        if (asDefault) {
            prototype.__defaultProperty__ = property;
        }
    }
    eui.registerProperty = registerProperty;
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var key = "__bindables__";
    /**
     * @language en_US
     * Register a property of an instance is can be bound.
     * This method is ususally invoked by Watcher class.
     *
     * @param instance the instance to be registered.
     * @param property the property of specified instance to be registered.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 标记实例的一个属性是可绑定的,此方法通常由 Watcher 类调用。
     *
     * @param instance 要标记的实例
     * @param property 可绑定的属性。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    function registerBindable(instance, property) {
        if (DEBUG) {
            if (!instance) {
                egret.$error(1003, "instance");
            }
            if (!property) {
                egret.$error(1003, "property");
            }
        }
        if (instance.hasOwnProperty(key)) {
            instance[key].push(property);
        }
        else {
            var list = [property];
            if (instance[key]) {
                list = instance[key].concat(list);
            }
            instance[key] = list;
        }
    }
    eui.registerBindable = registerBindable;
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../utils/registerproperty.ts" />
/// <reference path="../utils/registerbindable.ts" />
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ArrayCollection class is a wrapper class that exposes an <code>any[]</code> as a collection that can be
     * accessed and manipulated using the methods and properties of the <code>ICollection</code> interfaces.
     * ArrayCollection can notify the view to update item when data source changed.
     *
     * @event eui.CollectionEvent.COLLECTION_CHANGE Dispatched when the ArrayCollection has been updated in some way.
     *
     * @defaultProperty source
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/collections/ArrayCollectionExample.ts
     */
    /**
     * @language zh_CN
     * ArrayCollection 类是数组的集合类数据结构包装器，可使用<code>ICollection</code>接口的方法和属性对其进行访问和处理。
     * 使用这种数据结构包装普通数组，能在数据源发生改变的时候主动通知视图刷新变更数据项。
     *
     * @event eui.CollectionEvent.COLLECTION_CHANGE 当 ArrayCollection 更新的的时候会派发此事件。
     *
     * @defaultProperty source
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/collections/ArrayCollectionExample.ts
     */
    var ArrayCollection = (function (_super) {
        __extends(ArrayCollection, _super);
        /**
         * @language en_US
         * Constructor. <p/>
         * Creates a new ArrayCollection using the specified source array.
         * If no array is specified an empty array will be used.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。<p/>
         * 用指定的原始数组创建一个 ArrayCollection 实例。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ArrayCollection(source) {
            _super.call(this);
            if (source) {
                this._source = source;
            }
            else {
                this._source = [];
            }
        }
        var c=ArrayCollection,p=c.prototype;
        d(p, "source"
            /**
             * @language en_US
             * The source of data in the ArrayCollection.
             * The ArrayCollection object does not represent any changes that you make
             * directly to the source array. Always use the ICollection methods to view the collection.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 数据源
             * 通常情况下请不要直接调用Array的方法操作数据源，否则对应的视图无法收到数据改变的通知。通常都是通过ICollection的接口方法来查看数据。
             * 若对数据源进行了修改，请手动调用refresh()方法刷新数据。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._source;
            }
            ,function (value) {
                if (!value)
                    value = [];
                this._source = value;
                this.dispatchCoEvent(eui.CollectionEventKind.RESET);
            }
        );
        /**
         * @language en_US
         * Applies the sort and filter to the view.
         * The ArrayCollection does not detect source data changes automatically,
         * so you must call the <code>refresh()</code>
         * method to update the view after changing the source data.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 在对数据源进行排序或过滤操作后可以手动调用此方法刷新所有数据,以更新视图。
         * ArrayCollection 不会自动检原始数据进行了改变,所以你必须调用<code>refresh()</code>方法去更新显示。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.refresh = function () {
            this.dispatchCoEvent(eui.CollectionEventKind.REFRESH);
        };
        d(p, "length"
            //--------------------------------------------------------------------------
            //
            // ICollection接口实现方法
            //
            //--------------------------------------------------------------------------
            /**
             * @inheritDoc
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._source.length;
            }
        );
        /**
         * @language en_US
         * Adds the specified item to the end of the list.
         * Equivalent to <code>addItemAt(item, length)</code>.
         * @param item The item to add.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 向列表末尾添加指定项目。等效于 <code>addItemAt(item, length)</code>。
         * @param item 要被添加的项。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.addItem = function (item) {
            this._source.push(item);
            this.dispatchCoEvent(eui.CollectionEventKind.ADD, this._source.length - 1, -1, [item]);
        };
        /**
         * @language en_US
         * Adds the item at the specified index.
         * The index of any item greater than the index of the added item is increased by one.
         * If the the specified index is less than zero or greater than the length
         * of the list, a Error which code is 1007 is thrown.
         * @param item The item to place at the index.
         * @param index The index at which to place the item.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 在指定的索引处添加项目。
         * 任何大于已添加项目的索引的项目索引都会增加 1。
         * 如果指定的索引比0小或者比最大长度要大。则会抛出1007异常。
         * @param item 要添加的项
         * @param index 要添加的指定索引位置
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.addItemAt = function (item, index) {
            if (index < 0 || index > this._source.length) {
                DEBUG && egret.$error(1007);
            }
            this._source.splice(index, 0, item);
            this.dispatchCoEvent(eui.CollectionEventKind.ADD, index, -1, [item]);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getItemAt = function (index) {
            return this._source[index];
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getItemIndex = function (item) {
            var length = this._source.length;
            for (var i = 0; i < length; i++) {
                if (this._source[i] === item) {
                    return i;
                }
            }
            return -1;
        };
        /**
         * @language en_US
         * Notifies the view that an item has been updated.
         * @param item The item within the view that was updated.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 通知视图，某个项目的属性已更新。
         * @param item 视图中需要被更新的项。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.itemUpdated = function (item) {
            var index = this.getItemIndex(item);
            if (index != -1) {
                this.dispatchCoEvent(eui.CollectionEventKind.UPDATE, index, -1, [item]);
            }
        };
        /**
         * @language en_US
         * Removes all items from the list.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 删除列表中的所有项目。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.removeAll = function () {
            var items = this._source.concat();
            this._source.length = 0;
            this.dispatchCoEvent(eui.CollectionEventKind.REMOVE, 0, -1, items);
        };
        /**
         * @language en_US
         * Removes the item at the specified index and returns it.
         * Any items that were after this index are now one index earlier.
         * @param index The index from which to remove the item.
         * @return The item that was removed.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 删除指定索引处的项目并返回该项目。原先位于此索引之后的所有项目的索引现在都向前移动一个位置。
         * @param index 要被移除的项的索引。
         * @return 被移除的项。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.removeItemAt = function (index) {
            if (index < 0 || index >= this._source.length) {
                DEBUG && egret.$error(1007);
                return;
            }
            var item = this._source.splice(index, 1)[0];
            this.dispatchCoEvent(eui.CollectionEventKind.REMOVE, index, -1, [item]);
            return item;
        };
        /**
         * @language en_US
         * Replaces the item at the specified index.
         * @param item The new item to be placed at the specified index.
         * @param index The index at which to place the item.
         * @return The item that was replaced, or <code>null</code> if none.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 替换在指定索引处的项目，并返回该项目。
         * @param item 要在指定索引放置的新的项。
         * @param index 要被替换的项的索引位置。
         * @return 被替换的项目，如果没有该项则返回<code>null</code> 。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.replaceItemAt = function (item, index) {
            if (index < 0 || index >= this._source.length) {
                DEBUG && egret.$error(1007);
                return;
            }
            var oldItem = this._source.splice(index, 1, item)[0];
            this.dispatchCoEvent(eui.CollectionEventKind.REPLACE, index, -1, [item], [oldItem]);
            return oldItem;
        };
        /**
         * @language en_US
         * Replaces all items with a new source data, this method can not reset the scroller position of view.
         * @param newSource new source data.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 用新数据源替换原始数据源，此方法与直接设置source不同，它不会导致目标视图重置滚动位置。
         * @param newSource 新数据。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.replaceAll = function (newSource) {
            if (!newSource)
                newSource = [];
            var newLength = newSource.length;
            var oldLength = this._source.length;
            for (var i = newLength; i < oldLength; i++) {
                this.removeItemAt(newLength);
            }
            for (i = 0; i < newLength; i++) {
                if (i >= oldLength)
                    this.addItemAt(newSource[i], i);
                else
                    this.replaceItemAt(newSource[i], i);
            }
            this._source = newSource;
        };
        /**
         * @private
         * 抛出事件
         */
        p.dispatchCoEvent = function (kind, location, oldLocation, items, oldItems) {
            eui.CollectionEvent.dispatchCollectionEvent(this, eui.CollectionEvent.COLLECTION_CHANGE, kind, location, oldLocation, items, oldItems);
        };
        return ArrayCollection;
    })(egret.EventDispatcher);
    eui.ArrayCollection = ArrayCollection;
    egret.registerClass(ArrayCollection,'eui.ArrayCollection',["eui.ICollection","egret.IEventDispatcher"]);
    eui.registerProperty(ArrayCollection, "source", "Array", true);
    if (DEBUG) {
        egret.$markReadOnly(ArrayCollection, "length");
    }
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * Object的集合类数据结构包装器,通常作为Tree组件的数据源。
     * @author featherJ
     */
    var ObjectCollection = (function (_super) {
        __extends(ObjectCollection, _super);
        function ObjectCollection(childrenKey, parentKey) {
            if (childrenKey === void 0) { childrenKey = "children"; }
            if (parentKey === void 0) { parentKey = "parent"; }
            _super.call(this);
            /**
             * 要从item中获取子项列表的属性名
             */
            this.childrenKey = "children";
            /**
             * 要从item中获取父级项的属性名
             */
            this.parentKey = "parent";
            this._source = null;
            /**
             * 要显示的节点列表
             */
            this.nodeList = [];
            this._openNodes = [];
            this._showRoot = false;
            this.childrenKey = childrenKey;
            this.parentKey = parentKey;
        }
        var c=ObjectCollection,p=c.prototype;
        d(p, "source"
            /**
             * 数据源。注意：设置source会同时清空openNodes。
             * @member egret.gui.ObjectCollection#source
             */
            ,function () {
                return this._source;
            }
            ,function (value) {
                this._source = value;
                this._openNodes = [];
                this.nodeList = [];
                if (this._source) {
                    if (this._showRoot) {
                        this.nodeList.push(this._source);
                    }
                    else {
                        this._openNodes = [this._source];
                        this.addChildren(this._source, this.nodeList);
                    }
                }
                this.dispatchCoEvent(eui.CollectionEventKind.RESET);
            }
        );
        d(p, "filterFunction"
            /**
             * 一个回调函数，用于过滤集合中不符合条件的元素。设置此属性后立即开始过滤，如果要取消过滤，把这个属性设置为null。
             * 示例：filterFunction(item:any):boolean。返回false则会从集合中排除该元素。
             */
            ,function () {
                return this._filterFunction;
            }
            ,function (value) {
                if (this._filterFunction == value)
                    return;
                this._filterFunction = value;
                this.refresh();
            }
        );
        /**
         * 节点是否显示
         */
        p.isShow = function (item) {
            if (this._filterFunction != null) {
                if (this._filterFunction.length == 1)
                    return this._filterFunction(item);
                else
                    return this._filterFunction(item, this);
            }
            return true;
        };
        d(p, "openNodes"
            /**
             * 处于展开状态的节点列表
             * @member egret.gui.ObjectCollection#openNodes
             */
            ,function () {
                return this._openNodes.concat();
            }
            ,function (value) {
                this._openNodes = value ? value.concat() : [];
                this.refresh();
            }
        );
        d(p, "length"
            /**
             * @member egret.gui.ObjectCollection#length
             */
            ,function () {
                return this.nodeList.length;
            }
        );
        /**
         * @method egret.gui.ObjectCollection#getItemAt
         * @param index {number}
         * @returns {any}
         */
        p.getItemAt = function (index) {
            return this.nodeList[index];
        };
        /**
         * @method egret.gui.ObjectCollection#getItemIndex
         * @param item {any}
         * @returns {number}
         */
        p.getItemIndex = function (item) {
            var length = this.nodeList.length;
            for (var i = 0; i < length; i++) {
                if (this.nodeList[i] === item) {
                    return i;
                }
            }
            return -1;
        };
        /**
         * 通知视图，某个项目的属性已更新。
         * @method egret.gui.ObjectCollection#itemUpdated
         * @param item {any}
         */
        p.itemUpdated = function (item) {
            var index = this.getItemIndex(item);
            if (index != -1) {
                this.dispatchCoEvent(eui.CollectionEventKind.UPDATE, index, -1, [item]);
            }
        };
        /**
         * 删除指定节点
         * @method egret.gui.ObjectCollection#removeItem
         * @param item {any}
         */
        p.removeItem = function (item) {
            if (this.isItemOpen(item))
                this.closeNode(item);
            if (!item)
                return;
            var parent = item[this.parentKey];
            if (!parent)
                return;
            var list = parent[this.childrenKey];
            if (!list)
                return;
            var index = list.indexOf(item);
            if (index != -1)
                list.splice(index, 1);
            item[this.parentKey] = null;
            index = this.nodeList.indexOf(item);
            if (index != -1) {
                this.nodeList.splice(index, 1);
                this.dispatchCoEvent(eui.CollectionEventKind.REMOVE, index, -1, [item]);
            }
        };
        d(p, "showRoot"
            /**
             * 是否显示根节点,默认false。
             * @member egret.gui.ObjectCollection#showRoot
             */
            ,function () {
                return this._showRoot;
            }
            ,function (value) {
                if (this._showRoot == value)
                    return;
                this._showRoot = value;
                if (this._source) {
                    if (this._showRoot) {
                        this.nodeList.splice(0, 0, this._source);
                    }
                    else {
                        this.nodeList.shift();
                        if (this.openNodes.indexOf(this._source) == -1)
                            this.openNodes.push(this._source);
                    }
                    this.refresh();
                }
            }
        );
        /**
         * 添加打开的节点到列表
         * 递归检测自己和子项是否可显示
         */
        p.addChildren = function (parent, list) {
            if (!this.isShow(parent) || !parent.hasOwnProperty(this.childrenKey) || this._openNodes.indexOf(parent) == -1)
                return;
            var children = parent[this.childrenKey];
            var length = children.length;
            for (var i = 0; i < length; i++) {
                var child = children[i];
                if (this.isShow(child)) {
                    list.push(child);
                    this.addChildren(child, list);
                }
            }
        };
        /**
         * @method egret.gui.ObjectCollection#hasChildren
         * @param item {any}
         * @returns {boolean}
         */
        p.hasChildren = function (item) {
            if (item.hasOwnProperty(this.childrenKey))
                return item[this.childrenKey].length > 0;
            return false;
        };
        /**
         * @method egret.gui.ObjectCollection#isItemOpen
         * @param item {any}
         * @returns {boolean}
         */
        p.isItemOpen = function (item) {
            return this._openNodes.indexOf(item) != -1;
        };
        /**
         * @method egret.gui.ObjectCollection#expandItem
         * @param item {any}
         * @param open {boolean}
         */
        p.expandItem = function (item, open) {
            if (open === void 0) { open = true; }
            if (open)
                this.openNode(item);
            else
                this.closeNode(item);
        };
        /**
         * 打开一个节点
         */
        p.openNode = function (item) {
            if (this._openNodes.indexOf(item) == -1 && this.isShow(item)) {
                this._openNodes.push(item);
                var index = this.nodeList.indexOf(item);
                if (index != -1) {
                    var list = [];
                    this.addChildren(item, list);
                    var i = index;
                    while (list.length) {
                        i++;
                        var node = list.shift();
                        this.nodeList.splice(i, 0, node);
                        this.dispatchCoEvent(eui.CollectionEventKind.ADD, i, -1, [node]);
                    }
                    this.dispatchCoEvent("open", index, index, [item]);
                }
            }
        };
        /**
         * 关闭一个节点
         */
        p.closeNode = function (item) {
            var index = this._openNodes.indexOf(item);
            if (index == -1)
                return;
            var list = [];
            this.addChildren(item, list);
            this._openNodes.splice(index, 1);
            index = this.nodeList.indexOf(item);
            if (index != -1) {
                index++;
                while (list.length) {
                    var node = this.nodeList.splice(index, 1)[0];
                    this.dispatchCoEvent(eui.CollectionEventKind.REMOVE, index, -1, [node]);
                    list.shift();
                }
                index--;
                this.dispatchCoEvent(eui.CollectionEventKind.CLOSE, index, index, [item]);
            }
        };
        /**
         * @method egret.gui.ObjectCollection#getDepth
         * @param item {any}
         * @returns {number}
         */
        p.getDepth = function (item) {
            var depth = 0;
            var parent = item[this.parentKey];
            while (parent) {
                depth++;
                parent = parent[this.parentKey];
            }
            if (depth > 0 && !this._showRoot)
                depth--;
            return depth;
        };
        /**
         * 刷新数据源。
         * @method egret.gui.ObjectCollection#refresh
         */
        p.refresh = function () {
            this.nodeList = [];
            if (this._source) {
                if (this._showRoot) {
                    this.nodeList.push(this._source);
                }
                this.addChildren(this._source, this.nodeList);
            }
            this.dispatchCoEvent(eui.CollectionEventKind.REFRESH);
        };
        /**
         * 抛出事件
         */
        p.dispatchCoEvent = function (kind, location, oldLocation, items, oldItems) {
            if (kind === void 0) { kind = null; }
            if (location === void 0) { location = -1; }
            if (oldLocation === void 0) { oldLocation = -1; }
            if (items === void 0) { items = null; }
            if (oldItems === void 0) { oldItems = null; }
            eui.CollectionEvent.dispatchCollectionEvent(this, eui.CollectionEvent.COLLECTION_CHANGE, kind, location, oldLocation, items, oldItems);
        };
        /**
         * 一个工具方法，给parent的子项以及子孙项赋值父级引用。
         * @method egret.gui.ObjectCollection.assignParent
         * @param parent {any} 要遍历子项的parent对象。
         * @param childrenKey {string} 要从parent中获取子项列表的属性名,属性值为一个数组或Vector。
         * @param parentKey {string} 要给子项赋值父级引用的属性名。
         */
        ObjectCollection.assignParent = function (parent, childrenKey, parentKey) {
            if (childrenKey === void 0) { childrenKey = "children"; }
            if (parentKey === void 0) { parentKey = "parent"; }
            if (!parent.hasOwnProperty(childrenKey))
                return;
            var children = parent[childrenKey];
            var length = children.length;
            for (var i = 0; i < length; i++) {
                var child = children[i];
                try {
                    child[parentKey] = parent;
                }
                catch (e) { }
                ObjectCollection.assignParent(child, childrenKey, parentKey);
            }
        };
        return ObjectCollection;
    })(egret.EventDispatcher);
    eui.ObjectCollection = ObjectCollection;
    egret.registerClass(ObjectCollection,'eui.ObjectCollection',["eui.ICollection","egret.IEventDispatcher","eui.ITreeCollection"]);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The State class defines a view state, a particular view of a component.
     *
     * For example, a product thumbnail could have two view states;
     * a base view state with minimal information, and a rich view state with
     * additional information.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * State 类定义视图状态，即组件的特定视图。
     *
     * 例如，产品缩略图可以有两个视图状态，包含最少信息的基本视图状态和包含附加信息的丰富视图状态。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var State = (function (_super) {
        __extends(State, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @param name The name of the view state.
         * State names must be unique for a given component.
         * This property must be set.
         * @param overrides The overrides for this view state, as an Array of objects that implement
         * the IOverride interface. These overrides are applied in order when the
         * state is entered, and removed in reverse order when the state is exited.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个State实例。
         *
         * @param name 视图状态的名称。给定组件的状态名称必须唯一。必须设置此属性。
         * @param overrides 该视图状态的覆盖，表现为实现 IOverride 接口的对象的数组。
         * 这些覆盖在进入状态时按顺序应用，在退出状态时按相反的顺序删除。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function State(name, overrides) {
            if (overrides === void 0) { overrides = []; }
            _super.call(this);
            this.name = name;
            this.overrides = overrides;
        }
        var c=State,p=c.prototype;
        /**
         * @language en_US
         * Initialize this state and all of its overrides.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 初始化视图状态
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.initialize = function (host, stage) {
            var overrides = this.overrides;
            var length = overrides.length;
            for (var i = 0; i < length; i++) {
                var addItems = overrides[i];
                if (addItems instanceof eui.AddItems) {
                    var target = host[addItems.target];
                    if (target && target instanceof eui.Image && !target.$parent) {
                        stage.addChild(target);
                        stage.removeChild(target);
                    }
                }
            }
        };
        return State;
    })(egret.HashObject);
    eui.State = State;
    egret.registerClass(State,'eui.State');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        /**
         * @private
         */
        var StateClient = (function () {
            function StateClient() {
            }
            var c=StateClient,p=c.prototype;
            d(p, "states"
                /**
                 * @private
                 * 为此组件定义的视图状态。
                 */
                ,function () {
                    return this.$stateValues.states;
                }
                ,function (value) {
                    if (!value)
                        value = [];
                    var values = this.$stateValues;
                    values.states = value;
                    var statesMap = {};
                    var length = value.length;
                    for (var i = 0; i < length; i++) {
                        var state = value[i];
                        statesMap[state.name] = state;
                    }
                    values.statesMap = statesMap;
                    if (values.parent) {
                        this.commitCurrentState();
                    }
                }
            );
            d(p, "currentState"
                /**
                 * @private
                 * 组件的当前视图状态。将其设置为 "" 或 null 可将组件重置回其基本状态。
                 */
                ,function () {
                    return this.$stateValues.currentState;
                }
                ,function (value) {
                    var values = this.$stateValues;
                    values.explicitState = value;
                    values.currentState = value;
                    this.commitCurrentState();
                }
            );
            /**
             * @private
             * 应用当前的视图状态。子类覆盖此方法在视图状态发生改变时执行相应更新操作。
             */
            p.commitCurrentState = function () {
                var values = this.$stateValues;
                if (!values.parent) {
                    return;
                }
                var destination = values.statesMap[values.currentState];
                if (!destination) {
                    if (values.states.length > 0) {
                        values.currentState = values.states[0].name;
                    }
                    else {
                        return;
                    }
                }
                if (values.oldState == values.currentState) {
                    return;
                }
                var parent = values.parent;
                var state = values.statesMap[values.oldState];
                if (state) {
                    var overrides = state.overrides;
                    var length = overrides.length;
                    for (var i = 0; i < length; i++) {
                        overrides[i].remove(this, parent);
                    }
                }
                values.oldState = values.currentState;
                state = values.statesMap[values.currentState];
                if (state) {
                    overrides = state.overrides;
                    length = overrides.length;
                    for (i = 0; i < length; i++) {
                        overrides[i].apply(this, parent);
                    }
                }
            };
            /**
             * @private
             * 返回是否含有指定名称的视图状态
             * @param stateName 要检查的视图状态名称
             */
            p.hasState = function (stateName) {
                return !!this.$stateValues.statesMap[stateName];
            };
            /**
             * @private
             * 初始化所有视图状态
             */
            p.initializeStates = function (stage) {
                this.$stateValues.intialized = true;
                var states = this.states;
                var length = states.length;
                for (var i = 0; i < length; i++) {
                    states[i].initialize(this, stage);
                }
            };
            return StateClient;
        })();
        sys.StateClient = StateClient;
        egret.registerClass(StateClient,'eui.sys.StateClient');
        /**
         * @private
         */
        var StateValues = (function () {
            function StateValues() {
                /**
                 * @private
                 */
                this.intialized = false;
                /**
                 * @private
                 */
                this.statesMap = {};
                /**
                 * @private
                 */
                this.states = [];
                /**
                 * @private
                 */
                this.oldState = null;
                /**
                 * @private
                 */
                this.explicitState = null;
                /**
                 * @private
                 */
                this.currentState = null;
                /**
                 * @private
                 */
                this.parent = null;
                /**
                 * @private
                 */
                this.stateIsDirty = false;
            }
            var c=StateValues,p=c.prototype;
            return StateValues;
        })();
        sys.StateValues = StateValues;
        egret.registerClass(StateValues,'eui.sys.StateValues');
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        /**
         * @private
         * 失效验证管理器
         */
        var Validator = (function (_super) {
            __extends(Validator, _super);
            /**
             * @private
             * 创建一个Validator对象
             */
            function Validator() {
                _super.call(this);
                /**
                 * @private
                 */
                this.targetLevel = Number.POSITIVE_INFINITY;
                /**
                 * @private
                 */
                this.invalidatePropertiesFlag = false;
                /**
                 * @private
                 */
                this.invalidateClientPropertiesFlag = false;
                /**
                 * @private
                 */
                this.invalidatePropertiesQueue = new DepthQueue();
                /**
                 * @private
                 */
                this.invalidateSizeFlag = false;
                /**
                 * @private
                 */
                this.invalidateClientSizeFlag = false;
                /**
                 * @private
                 */
                this.invalidateSizeQueue = new DepthQueue();
                /**
                 * @private
                 */
                this.invalidateDisplayListFlag = false;
                /**
                 * @private
                 */
                this.invalidateDisplayListQueue = new DepthQueue();
                /**
                 * @private
                 */
                this.eventDisplay = new egret.Bitmap();
                /**
                 * @private
                 * 是否已经添加了事件监听
                 */
                this.listenersAttached = false;
            }
            var c=Validator,p=c.prototype;
            /**
             * @private
             * 标记组件属性失效
             */
            p.invalidateProperties = function (client) {
                if (!this.invalidatePropertiesFlag) {
                    this.invalidatePropertiesFlag = true;
                    if (!this.listenersAttached)
                        this.attachListeners();
                }
                if (this.targetLevel <= client.$nestLevel)
                    this.invalidateClientPropertiesFlag = true;
                this.invalidatePropertiesQueue.insert(client);
            };
            /**
             * @private
             * 验证失效的属性
             */
            p.validateProperties = function () {
                var queue = this.invalidatePropertiesQueue;
                var client = queue.shift();
                while (client) {
                    if (client.$stage) {
                        client.validateProperties();
                    }
                    client = queue.shift();
                }
                if (queue.isEmpty())
                    this.invalidatePropertiesFlag = false;
            };
            /**
             * @private
             * 标记需要重新测量尺寸
             */
            p.invalidateSize = function (client) {
                if (!this.invalidateSizeFlag) {
                    this.invalidateSizeFlag = true;
                    if (!this.listenersAttached)
                        this.attachListeners();
                }
                if (this.targetLevel <= client.$nestLevel)
                    this.invalidateClientSizeFlag = true;
                this.invalidateSizeQueue.insert(client);
            };
            /**
             * @private
             * 测量尺寸
             */
            p.validateSize = function () {
                var queue = this.invalidateSizeQueue;
                var client = queue.pop();
                while (client) {
                    if (client.$stage) {
                        client.validateSize();
                    }
                    client = queue.pop();
                }
                if (queue.isEmpty())
                    this.invalidateSizeFlag = false;
            };
            /**
             * @private
             * 标记需要重新布局
             */
            p.invalidateDisplayList = function (client) {
                if (!this.invalidateDisplayListFlag) {
                    this.invalidateDisplayListFlag = true;
                    if (!this.listenersAttached)
                        this.attachListeners();
                }
                this.invalidateDisplayListQueue.insert(client);
            };
            /**
             * @private
             * 重新布局
             */
            p.validateDisplayList = function () {
                var queue = this.invalidateDisplayListQueue;
                var client = queue.shift();
                while (client) {
                    if (client.$stage) {
                        client.validateDisplayList();
                    }
                    client = queue.shift();
                }
                if (queue.isEmpty())
                    this.invalidateDisplayListFlag = false;
            };
            /**
             * @private
             * 添加事件监听
             */
            p.attachListeners = function () {
                this.eventDisplay.addEventListener(egret.Event.ENTER_FRAME, this.doPhasedInstantiationCallBack, this);
                this.eventDisplay.addEventListener(egret.Event.RENDER, this.doPhasedInstantiationCallBack, this);
                egret.sys.$invalidateRenderFlag = true;
                this.listenersAttached = true;
            };
            /**
             * @private
             * 执行属性应用
             */
            p.doPhasedInstantiationCallBack = function (event) {
                this.eventDisplay.removeEventListener(egret.Event.ENTER_FRAME, this.doPhasedInstantiationCallBack, this);
                this.eventDisplay.removeEventListener(egret.Event.RENDER, this.doPhasedInstantiationCallBack, this);
                this.doPhasedInstantiation();
            };
            /**
             * @private
             *
             */
            p.doPhasedInstantiation = function () {
                if (this.invalidatePropertiesFlag) {
                    this.validateProperties();
                }
                if (this.invalidateSizeFlag) {
                    this.validateSize();
                }
                if (this.invalidateDisplayListFlag) {
                    this.validateDisplayList();
                }
                if (this.invalidatePropertiesFlag ||
                    this.invalidateSizeFlag ||
                    this.invalidateDisplayListFlag) {
                    this.attachListeners();
                }
                else {
                    this.listenersAttached = false;
                }
            };
            /**
             * @private
             * 使大于等于指定组件层级的元素立即应用属性
             * @param target 要立即应用属性的组件
             */
            p.validateClient = function (target) {
                var obj;
                var done = false;
                var oldTargetLevel = this.targetLevel;
                if (this.targetLevel === Number.POSITIVE_INFINITY)
                    this.targetLevel = target.$nestLevel;
                var propertiesQueue = this.invalidatePropertiesQueue;
                var sizeQueue = this.invalidateSizeQueue;
                var displayListQueue = this.invalidateDisplayListQueue;
                while (!done) {
                    done = true;
                    obj = propertiesQueue.removeSmallestChild(target);
                    while (obj) {
                        if (obj.$stage) {
                            obj.validateProperties();
                        }
                        obj = propertiesQueue.removeSmallestChild(target);
                    }
                    if (propertiesQueue.isEmpty()) {
                        this.invalidatePropertiesFlag = false;
                    }
                    this.invalidateClientPropertiesFlag = false;
                    obj = sizeQueue.removeLargestChild(target);
                    while (obj) {
                        if (obj.$stage) {
                            obj.validateSize();
                        }
                        if (this.invalidateClientPropertiesFlag) {
                            obj = (propertiesQueue.removeSmallestChild(target));
                            if (obj) {
                                propertiesQueue.insert(obj);
                                done = false;
                                break;
                            }
                        }
                        obj = sizeQueue.removeLargestChild(target);
                    }
                    if (sizeQueue.isEmpty()) {
                        this.invalidateSizeFlag = false;
                    }
                    this.invalidateClientPropertiesFlag = false;
                    this.invalidateClientSizeFlag = false;
                    obj = displayListQueue.removeSmallestChild(target);
                    while (obj) {
                        if (obj.$stage) {
                            obj.validateDisplayList();
                        }
                        if (this.invalidateClientPropertiesFlag) {
                            obj = propertiesQueue.removeSmallestChild(target);
                            if (obj) {
                                propertiesQueue.insert(obj);
                                done = false;
                                break;
                            }
                        }
                        if (this.invalidateClientSizeFlag) {
                            obj = sizeQueue.removeLargestChild(target);
                            if (obj) {
                                sizeQueue.insert(obj);
                                done = false;
                                break;
                            }
                        }
                        obj = displayListQueue.removeSmallestChild(target);
                    }
                    if (displayListQueue.isEmpty()) {
                        this.invalidateDisplayListFlag = false;
                    }
                }
                if (oldTargetLevel === Number.POSITIVE_INFINITY) {
                    this.targetLevel = Number.POSITIVE_INFINITY;
                }
            };
            return Validator;
        })(egret.EventDispatcher);
        sys.Validator = Validator;
        egret.registerClass(Validator,'eui.sys.Validator');
        /**
         * @private
         * 显示列表嵌套深度排序队列
         */
        var DepthQueue = (function () {
            function DepthQueue() {
                /**
                 * 深度队列
                 */
                this.depthBins = {};
                /**
                 * 最小深度
                 */
                this.minDepth = 0;
                /**
                 * 最大深度
                 */
                this.maxDepth = -1;
            }
            var c=DepthQueue,p=c.prototype;
            /**
             * 插入一个元素
             */
            p.insert = function (client) {
                var depth = client.$nestLevel;
                if (this.maxDepth < this.minDepth) {
                    this.minDepth = this.maxDepth = depth;
                }
                else {
                    if (depth < this.minDepth)
                        this.minDepth = depth;
                    if (depth > this.maxDepth)
                        this.maxDepth = depth;
                }
                var bin = this.depthBins[depth];
                if (!bin) {
                    bin = this.depthBins[depth] = new DepthBin();
                }
                bin.insert(client);
            };
            /**
             * 从队列尾弹出深度最大的一个对象
             */
            p.pop = function () {
                var client;
                var minDepth = this.minDepth;
                if (minDepth <= this.maxDepth) {
                    var bin = this.depthBins[this.maxDepth];
                    while (!bin || bin.length === 0) {
                        this.maxDepth--;
                        if (this.maxDepth < minDepth)
                            return null;
                        bin = this.depthBins[this.maxDepth];
                    }
                    client = bin.shift();
                    while (!bin || bin.length == 0) {
                        this.maxDepth--;
                        if (this.maxDepth < minDepth)
                            break;
                        bin = this.depthBins[this.maxDepth];
                    }
                }
                return client;
            };
            /**
             * 从队列首弹出深度最小的一个对象
             */
            p.shift = function () {
                var client;
                var maxDepth = this.maxDepth;
                if (this.minDepth <= maxDepth) {
                    var bin = this.depthBins[this.minDepth];
                    while (!bin || bin.length === 0) {
                        this.minDepth++;
                        if (this.minDepth > maxDepth)
                            return null;
                        bin = this.depthBins[this.minDepth];
                    }
                    client = bin.shift();
                    while (!bin || bin.length == 0) {
                        this.minDepth++;
                        if (this.minDepth > maxDepth)
                            break;
                        bin = this.depthBins[this.minDepth];
                    }
                }
                return client;
            };
            /**
             * 移除大于等于指定组件层级的元素中最大的元素
             */
            p.removeLargestChild = function (client) {
                var hashCode = client.$hashCode;
                var nestLevel = client.$nestLevel;
                var max = this.maxDepth;
                var min = nestLevel;
                while (min <= max) {
                    var bin = this.depthBins[max];
                    if (bin && bin.length > 0) {
                        if (max === nestLevel) {
                            if (bin.map[hashCode]) {
                                bin.remove(client);
                                return client;
                            }
                        }
                        else if (egret.is(client, "egret.DisplayObjectContainer")) {
                            var items = bin.items;
                            var length = bin.length;
                            for (var i = 0; i < length; i++) {
                                var value = items[i];
                                if (client.contains(value)) {
                                    bin.remove(value);
                                    return value;
                                }
                            }
                        }
                        else {
                            break;
                        }
                        max--;
                    }
                    else {
                        if (max == this.maxDepth) {
                            this.maxDepth--;
                        }
                        max--;
                        if (max < min)
                            break;
                    }
                }
                return null;
            };
            /**
             * 移除大于等于指定组件层级的元素中最小的元素
             */
            p.removeSmallestChild = function (client) {
                var nestLevel = client.$nestLevel;
                var min = nestLevel;
                var max = this.maxDepth;
                var hashCode = client.$hashCode;
                while (min <= max) {
                    var bin = this.depthBins[min];
                    if (bin && bin.length > 0) {
                        if (min === nestLevel) {
                            if (bin.map[hashCode]) {
                                bin.remove(client);
                                return client;
                            }
                        }
                        else if (egret.is(client, "egret.DisplayObjectContainer")) {
                            var items = bin.items;
                            var length = bin.length;
                            for (var i = 0; i < length; i++) {
                                var value = items[i];
                                if (client.contains(value)) {
                                    bin.remove(value);
                                    return value;
                                }
                            }
                        }
                        else {
                            break;
                        }
                        min++;
                    }
                    else {
                        if (min == this.minDepth)
                            this.minDepth++;
                        min++;
                        if (min > max)
                            break;
                    }
                }
                return null;
            };
            /**
             * 队列是否为空
             */
            p.isEmpty = function () {
                return this.minDepth > this.maxDepth;
            };
            return DepthQueue;
        })();
        egret.registerClass(DepthQueue,'DepthQueue');
        /**
         * @private
         * 列表项
         */
        var DepthBin = (function () {
            function DepthBin() {
                this.map = {};
                this.items = [];
                this.length = 0;
            }
            var c=DepthBin,p=c.prototype;
            p.insert = function (client) {
                var hashCode = client.$hashCode;
                if (this.map[hashCode]) {
                    return;
                }
                this.map[hashCode] = true;
                this.length++;
                this.items.push(client);
            };
            p.shift = function () {
                var client = this.items.shift();
                if (client) {
                    this.map[client.$hashCode] = false;
                    this.length--;
                }
                return client;
            };
            p.remove = function (client) {
                var index = this.items.indexOf(client);
                if (index >= 0) {
                    this.items.splice(index, 1);
                    this.map[client.$hashCode] = false;
                    this.length--;
                }
            };
            return DepthBin;
        })();
        egret.registerClass(DepthBin,'DepthBin');
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="Validator.ts" />
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        var UIComponentClass = "eui.UIComponent";
        function isDeltaIdentity(m) {
            return (m.a === 1 && m.b === 0 && m.c === 0 && m.d === 1);
        }
        var validator = new sys.Validator();
        /**
         * @private
         * EUI 显示对象基类模板。仅作为 UIComponent 的默认实现，为egret.sys.implemenetUIComponenet()方法提供代码模板。
         * 注意：在此类里不允许直接使用super关键字访问父类方法。一律使用this.$super属性访问。
         */
        var UIComponentImpl = (function (_super) {
            __extends(UIComponentImpl, _super);
            /**
             * @private
             * 构造函数
             */
            function UIComponentImpl() {
                _super.call(this);
                this._focusEnabled = false;
                this.initializeUIValues();
            }
            var c=UIComponentImpl,p=c.prototype;
            /**
             * @private
             * UIComponentImpl 定义的所有变量请不要添加任何初始值，必须统一在此处初始化。
             */
            p.initializeUIValues = function () {
                this.$UIComponent = {
                    0: NaN,
                    1: NaN,
                    2: NaN,
                    3: NaN,
                    4: NaN,
                    5: NaN,
                    6: NaN,
                    7: NaN,
                    8: NaN,
                    9: NaN,
                    10: 0,
                    11: 0,
                    12: 0,
                    13: 100000,
                    14: 0,
                    15: 100000,
                    16: 0,
                    17: 0,
                    18: NaN,
                    19: NaN,
                    20: 0,
                    21: 0,
                    22: 0,
                    23: 0,
                    24: true,
                    25: true,
                    26: true,
                    27: false,
                    28: false,
                    29: false,
                };
                this.$includeInLayout = true;
                //if egret
                this.$touchEnabled = true;
                //endif*/
            };
            d(p, "focusEnabled"
                ,function () {
                    return this._focusEnabled;
                }
                /**
                * @language en_US
                * FocusEnabled.
                * @version Egret 2.4
                * @version eui 1.0
                * @platform Web,Native
                */
                /**
                 * @language zh_CN
                 * 焦点是否可用。
                 * @version Egret 2.4
                 * @version eui 1.0
                 * @platform Web,Native
                 */
                ,function (v) {
                    this._focusEnabled = v;
                }
            );
            /**
            * @language en_US
            * SetFocus.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 设置焦点。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            p.setFocus = function () {
                if (this.stage) {
                    this.stage.focus = this;
                }
            };
            /**
             * @private
             * 子类覆盖此方法可以执行一些初始化子项操作。此方法仅在组件第一次添加到舞台时回调一次。
             * 请务必调用super.createChildren()以完成父类组件的初始化
             */
            p.createChildren = function () {
            };
            /**
             * @private
             * 子项创建完成,此方法在createChildren()之后执行。
             */
            p.childrenCreated = function () {
            };
            /**
             * @private
             * 提交属性，子类在调用完invalidateProperties()方法后，应覆盖此方法以应用属性
             */
            p.commitProperties = function () {
                var values = this.$UIComponent;
                if (values[22 /* oldWidth */] != values[10 /* width */] || values[23 /* oldHeight */] != values[11 /* height */]) {
                    this.dispatchEventWith(egret.Event.RESIZE);
                    values[22 /* oldWidth */] = values[10 /* width */];
                    values[23 /* oldHeight */] = values[11 /* height */];
                }
                if (values[20 /* oldX */] != this.$getX() || values[21 /* oldY */] != this.$getY()) {
                    eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.MOVE);
                    values[20 /* oldX */] = this.$getX();
                    values[21 /* oldY */] = this.$getY();
                }
            };
            /**
             * @private
             * 测量组件尺寸
             */
            p.measure = function () {
            };
            /**
             * @private
             * 更新显示列表
             */
            p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            };
            d(p, "includeInLayout"
                /**
                 * @private
                 * 指定此组件是否包含在父容器的布局中。若为false，则父级容器在测量和布局阶段都忽略此组件。默认值为true。
                 * 注意，visible属性与此属性不同，设置visible为false，父级容器仍会对其布局。
                 */
                ,function () {
                    return this.$includeInLayout;
                }
                ,function (value) {
                    value = !!value;
                    if (this.$includeInLayout === value)
                        return;
                    this.$includeInLayout = true;
                    this.invalidateParentLayout();
                    this.$includeInLayout = value;
                }
            );
            /**
             * @private
             *
             * @param stage
             * @param nestLevel
             */
            p.$onAddToStage = function (stage, nestLevel) {
                this.$super.$onAddToStage.call(this, stage, nestLevel);
                this.checkInvalidateFlag();
                var values = this.$UIComponent;
                if (!values[29 /* initialized */]) {
                    values[29 /* initialized */] = true;
                    this.createChildren();
                    this.childrenCreated();
                    eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CREATION_COMPLETE);
                }
            };
            /**
             * @private
             * 检查属性失效标记并应用
             */
            p.checkInvalidateFlag = function (event) {
                var values = this.$UIComponent;
                if (values[24 /* invalidatePropertiesFlag */]) {
                    validator.invalidateProperties(this);
                }
                if (values[25 /* invalidateSizeFlag */]) {
                    validator.invalidateSize(this);
                }
                if (values[26 /* invalidateDisplayListFlag */]) {
                    validator.invalidateDisplayList(this);
                }
            };
            d(p, "left"
                /**
                 * @private
                 * 距父级容器离左边距离
                 */
                ,function () {
                    return this.$UIComponent[0 /* left */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[0 /* left */] === value)
                        return;
                    values[0 /* left */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "right"
                /**
                 * @private
                 * 距父级容器右边距离
                 */
                ,function () {
                    return this.$UIComponent[1 /* right */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[1 /* right */] === value)
                        return;
                    values[1 /* right */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "top"
                /**
                 * @private
                 * 距父级容器顶部距离
                 */
                ,function () {
                    return this.$UIComponent[2 /* top */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[2 /* top */] === value)
                        return;
                    values[2 /* top */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "bottom"
                /**
                 * @private
                 * 距父级容器底部距离
                 */
                ,function () {
                    return this.$UIComponent[3 /* bottom */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[3 /* bottom */] == value)
                        return;
                    values[3 /* bottom */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "horizontalCenter"
                /**
                 * @private
                 * 在父级容器中距水平中心位置的距离
                 */
                ,function () {
                    return this.$UIComponent[4 /* horizontalCenter */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[4 /* horizontalCenter */] === value)
                        return;
                    values[4 /* horizontalCenter */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "verticalCenter"
                /**
                 * @private
                 * 在父级容器中距竖直中心位置的距离
                 */
                ,function () {
                    return this.$UIComponent[5 /* verticalCenter */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[5 /* verticalCenter */] === value)
                        return;
                    values[5 /* verticalCenter */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "percentWidth"
                /**
                 * @private
                 * 相对父级容器宽度的百分比
                 */
                ,function () {
                    return this.$UIComponent[6 /* percentWidth */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[6 /* percentWidth */] === value)
                        return;
                    values[6 /* percentWidth */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "percentHeight"
                /**
                 * @private
                 * 相对父级容器高度的百分比
                 */
                ,function () {
                    return this.$UIComponent[7 /* percentHeight */];
                }
                ,function (value) {
                    value = +value;
                    var values = this.$UIComponent;
                    if (values[7 /* percentHeight */] === value)
                        return;
                    values[7 /* percentHeight */] = value;
                    this.invalidateParentLayout();
                }
            );
            d(p, "explicitWidth"
                /**
                 * @private
                 * 外部显式指定的宽度
                 */
                ,function () {
                    return this.$UIComponent[8 /* explicitWidth */];
                }
            );
            d(p, "explicitHeight"
                /**
                 * @private
                 * 外部显式指定的高度
                 */
                ,function () {
                    return this.$UIComponent[9 /* explicitHeight */];
                }
            );
            /**
             * @private
             * 组件宽度,默认值为egret.NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
             */
            p.$getWidth = function () {
                this.validateSizeNow();
                return this.$UIComponent[10 /* width */];
            };
            /**
             * @private
             *
             * @param value
             */
            p.$setWidth = function (value) {
                value = +value;
                var values = this.$UIComponent;
                if (value < 0 || values[10 /* width */] === value && values[8 /* explicitWidth */] === value)
                    return false;
                values[8 /* explicitWidth */] = value;
                if (isNaN(value))
                    this.invalidateSize();
                this.invalidateProperties();
                this.invalidateDisplayList();
                this.invalidateParentLayout();
                return true;
            };
            /**
             * @private
             * 立即验证自身的尺寸。
             */
            p.validateSizeNow = function () {
                this.validateSize(true);
                this.updateFinalSize();
            };
            /**
             * @private
             * 组件高度,默认值为NaN,设置为NaN将使用组件的measure()方法自动计算尺寸
             */
            p.$getHeight = function () {
                this.validateSizeNow();
                return this.$UIComponent[11 /* height */];
            };
            /**
             * @private
             *
             * @param value
             */
            p.$setHeight = function (value) {
                value = +value;
                var values = this.$UIComponent;
                if (value < 0 || values[11 /* height */] === value && values[9 /* explicitHeight */] === value)
                    return false;
                values[9 /* explicitHeight */] = value;
                if (isNaN(value))
                    this.invalidateSize();
                this.invalidateProperties();
                this.invalidateDisplayList();
                this.invalidateParentLayout();
                return true;
            };
            /**
             * @private
             *
             * @param value
             * @returns
             */
            p.$setScaleX = function (value) {
                var change = this.$super.$setScaleX.call(this, value);
                if (change) {
                    this.invalidateParentLayout();
                }
                return change;
            };
            /**
             * @private
             *
             * @param value
             * @returns
             */
            p.$setScaleY = function (value) {
                var change = this.$super.$setScaleY.call(this, value);
                if (change) {
                    this.invalidateParentLayout();
                }
                return change;
            };
            d(p, "minWidth"
                /**
                 * @private
                 * 组件的最小宽度,此属性设置为大于maxWidth的值时无效。同时影响测量和自动布局的尺寸。
                 */
                ,function () {
                    return this.$UIComponent[12 /* minWidth */];
                }
                ,function (value) {
                    value = +value || 0;
                    var values = this.$UIComponent;
                    if (value < 0 || values[12 /* minWidth */] === value) {
                        return;
                    }
                    values[12 /* minWidth */] = value;
                    this.invalidateSize();
                    this.invalidateParentLayout();
                }
            );
            d(p, "maxWidth"
                /**
                 * @private
                 * 组件的最大高度。同时影响测量和自动布局的尺寸。
                 */
                ,function () {
                    return this.$UIComponent[13 /* maxWidth */];
                }
                ,function (value) {
                    value = +value || 0;
                    var values = this.$UIComponent;
                    if (value < 0 || values[13 /* maxWidth */] === value) {
                        return;
                    }
                    values[13 /* maxWidth */] = value;
                    this.invalidateSize();
                    this.invalidateParentLayout();
                }
            );
            d(p, "minHeight"
                /**
                 * @private
                 * 组件的最小高度,此属性设置为大于maxHeight的值时无效。同时影响测量和自动布局的尺寸。
                 */
                ,function () {
                    return this.$UIComponent[14 /* minHeight */];
                }
                ,function (value) {
                    value = +value || 0;
                    var values = this.$UIComponent;
                    if (value < 0 || values[14 /* minHeight */] === value) {
                        return;
                    }
                    values[14 /* minHeight */] = value;
                    this.invalidateSize();
                    this.invalidateParentLayout();
                }
            );
            d(p, "maxHeight"
                /**
                 * @private
                 * 组件的最大高度,同时影响测量和自动布局的尺寸。
                 */
                ,function () {
                    return this.$UIComponent[15 /* maxHeight */];
                }
                ,function (value) {
                    value = +value || 0;
                    var values = this.$UIComponent;
                    if (value < 0 || values[15 /* maxHeight */] === value) {
                        return;
                    }
                    values[15 /* maxHeight */] = value;
                    this.invalidateSize();
                    this.invalidateParentLayout();
                }
            );
            /**
             * @private
             * 设置测量结果。
             * @param width 测量宽度
             * @param height 测量高度
             */
            p.setMeasuredSize = function (width, height) {
                var values = this.$UIComponent;
                values[16 /* measuredWidth */] = Math.ceil(+width || 0);
                values[17 /* measuredHeight */] = Math.ceil(+height || 0);
            };
            /**
             * @private
             * 设置组件的宽高。此方法不同于直接设置width,height属性，
             * 不会影响显式标记尺寸属性
             */
            p.setActualSize = function (w, h) {
                var change = false;
                var values = this.$UIComponent;
                if (values[10 /* width */] !== w) {
                    values[10 /* width */] = w;
                    change = true;
                }
                if (values[11 /* height */] !== h) {
                    values[11 /* height */] = h;
                    change = true;
                }
                if (change) {
                    this.invalidateDisplayList();
                    this.dispatchEventWith(egret.Event.RESIZE);
                }
            };
            /**
             * @private
             *
             * @param value
             * @returns
             */
            p.$setX = function (value) {
                var change = this.$super.$setX.call(this, value);
                if (change) {
                    this.invalidateParentLayout();
                    this.invalidateProperties();
                }
                return change;
            };
            /**
             * @private
             *
             * @param value
             * @returns
             */
            p.$setY = function (value) {
                var change = this.$super.$setY.call(this, value);
                if (change) {
                    this.invalidateParentLayout();
                    this.invalidateProperties();
                }
                return change;
            };
            /**
             * @private
             * 标记属性失效
             */
            p.invalidateProperties = function () {
                var values = this.$UIComponent;
                if (!values[24 /* invalidatePropertiesFlag */]) {
                    values[24 /* invalidatePropertiesFlag */] = true;
                    if (this.$stage)
                        validator.invalidateProperties(this);
                }
            };
            /**
             * @private
             * 验证组件的属性
             */
            p.validateProperties = function () {
                var values = this.$UIComponent;
                if (values[24 /* invalidatePropertiesFlag */]) {
                    this.commitProperties();
                    values[24 /* invalidatePropertiesFlag */] = false;
                }
            };
            /**
             * @private
             * 标记提交过需要验证组件尺寸
             */
            p.invalidateSize = function () {
                var values = this.$UIComponent;
                if (!values[25 /* invalidateSizeFlag */]) {
                    values[25 /* invalidateSizeFlag */] = true;
                    if (this.$stage)
                        validator.invalidateSize(this);
                }
            };
            /**
             * @private
             * 验证组件的尺寸
             */
            p.validateSize = function (recursive) {
                if (recursive) {
                    var children = this.$children;
                    if (children) {
                        var length = children.length;
                        for (var i = 0; i < length; i++) {
                            var child = children[i];
                            if (egret.is(child, UIComponentClass)) {
                                child.validateSize(true);
                            }
                        }
                    }
                }
                var values = this.$UIComponent;
                if (values[25 /* invalidateSizeFlag */]) {
                    var changed = this.measureSizes();
                    if (changed) {
                        this.invalidateDisplayList();
                        this.invalidateParentLayout();
                    }
                    values[25 /* invalidateSizeFlag */] = false;
                }
            };
            /**
             * @private
             * 测量组件尺寸，返回尺寸是否发生变化
             */
            p.measureSizes = function () {
                var changed = false;
                var values = this.$UIComponent;
                if (!values[25 /* invalidateSizeFlag */])
                    return changed;
                if (isNaN(values[8 /* explicitWidth */]) || isNaN(values[9 /* explicitHeight */])) {
                    this.measure();
                    if (values[16 /* measuredWidth */] < values[12 /* minWidth */]) {
                        values[16 /* measuredWidth */] = values[12 /* minWidth */];
                    }
                    if (values[16 /* measuredWidth */] > values[13 /* maxWidth */]) {
                        values[16 /* measuredWidth */] = values[13 /* maxWidth */];
                    }
                    if (values[17 /* measuredHeight */] < values[14 /* minHeight */]) {
                        values[17 /* measuredHeight */] = values[14 /* minHeight */];
                    }
                    if (values[17 /* measuredHeight */] > values[15 /* maxHeight */]) {
                        values[17 /* measuredHeight */] = values[15 /* maxHeight */];
                    }
                }
                var preferredW = this.getPreferredUWidth();
                var preferredH = this.getPreferredUHeight();
                if (preferredW !== values[18 /* oldPreferWidth */] ||
                    preferredH !== values[19 /* oldPreferHeight */]) {
                    values[18 /* oldPreferWidth */] = preferredW;
                    values[19 /* oldPreferHeight */] = preferredH;
                    changed = true;
                }
                return changed;
            };
            /**
             * @private
             * 标记需要验证显示列表
             */
            p.invalidateDisplayList = function () {
                var values = this.$UIComponent;
                if (!values[26 /* invalidateDisplayListFlag */]) {
                    values[26 /* invalidateDisplayListFlag */] = true;
                    if (this.$stage)
                        validator.invalidateDisplayList(this);
                }
            };
            /**
             * @private
             * 验证子项的位置和大小，并绘制其他可视内容
             */
            p.validateDisplayList = function () {
                var values = this.$UIComponent;
                if (values[26 /* invalidateDisplayListFlag */]) {
                    this.updateFinalSize();
                    this.updateDisplayList(values[10 /* width */], values[11 /* height */]);
                    values[26 /* invalidateDisplayListFlag */] = false;
                }
            };
            /**
             * @private
             * 更新最终的组件宽高
             */
            p.updateFinalSize = function () {
                var unscaledWidth = 0;
                var unscaledHeight = 0;
                var values = this.$UIComponent;
                if (values[27 /* layoutWidthExplicitlySet */]) {
                    unscaledWidth = values[10 /* width */];
                }
                else if (!isNaN(values[8 /* explicitWidth */])) {
                    unscaledWidth = values[8 /* explicitWidth */];
                }
                else {
                    unscaledWidth = values[16 /* measuredWidth */];
                }
                if (values[28 /* layoutHeightExplicitlySet */]) {
                    unscaledHeight = values[11 /* height */];
                }
                else if (!isNaN(values[9 /* explicitHeight */])) {
                    unscaledHeight = values[9 /* explicitHeight */];
                }
                else {
                    unscaledHeight = values[17 /* measuredHeight */];
                }
                this.setActualSize(unscaledWidth, unscaledHeight);
            };
            /**
             * @private
             * 立即应用组件及其子项的所有属性
             */
            p.validateNow = function () {
                if (this.$stage)
                    validator.validateClient(this);
            };
            /**
             * @private
             * 标记父级容器的尺寸和显示列表为失效
             */
            p.invalidateParentLayout = function () {
                var parent = this.$parent;
                if (!parent || !this.$includeInLayout || !egret.is(parent, UIComponentClass))
                    return;
                parent.invalidateSize();
                parent.invalidateDisplayList();
            };
            /**
             * @private
             * 设置组件的布局宽高
             */
            p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
                layoutHeight = +layoutHeight;
                layoutWidth = +layoutWidth;
                if (layoutHeight < 0 || layoutWidth < 0) {
                    return;
                }
                var values = this.$UIComponent;
                var maxWidth = values[13 /* maxWidth */];
                var maxHeight = values[15 /* maxHeight */];
                var minWidth = Math.min(values[12 /* minWidth */], maxWidth);
                var minHeight = Math.min(values[14 /* minHeight */], maxHeight);
                var width;
                var height;
                if (isNaN(layoutWidth)) {
                    values[27 /* layoutWidthExplicitlySet */] = false;
                    width = this.getPreferredUWidth();
                }
                else {
                    values[27 /* layoutWidthExplicitlySet */] = true;
                    width = Math.max(minWidth, Math.min(maxWidth, layoutWidth));
                }
                if (isNaN(layoutHeight)) {
                    values[28 /* layoutHeightExplicitlySet */] = false;
                    height = this.getPreferredUHeight();
                }
                else {
                    values[28 /* layoutHeightExplicitlySet */] = true;
                    height = Math.max(minHeight, Math.min(maxHeight, layoutHeight));
                }
                var matrix = this.$getMatrix();
                if (isDeltaIdentity(matrix)) {
                    this.setActualSize(width, height);
                    return;
                }
                var fitSize = sys.MatrixUtil.fitBounds(layoutWidth, layoutHeight, matrix, values[8 /* explicitWidth */], values[9 /* explicitHeight */], this.getPreferredUWidth(), this.getPreferredUHeight(), minWidth, minHeight, maxWidth, maxHeight);
                if (!fitSize) {
                    fitSize = egret.Point.create(minWidth, minHeight);
                }
                this.setActualSize(fitSize.x, fitSize.y);
                egret.Point.release(fitSize);
            };
            /**
             * @private
             * 设置组件的布局位置
             */
            p.setLayoutBoundsPosition = function (x, y) {
                var matrix = this.$getMatrix();
                if (!isDeltaIdentity(matrix)) {
                    var bounds = egret.$TempRectangle;
                    this.getLayoutBounds(bounds);
                    x += this.$getX() - bounds.x;
                    y += this.$getY() - bounds.y;
                }
                var changed = this.$super.$setX.call(this, x);
                if (this.$super.$setY.call(this, y) || changed) {
                    eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.MOVE);
                }
            };
            /**
             * @private
             * 组件的布局尺寸,常用于父级的updateDisplayList()方法中
             * 按照：布局尺寸>外部显式设置尺寸>测量尺寸 的优先级顺序返回尺寸,
             * 注意此方法返回值已经包含scale和rotation。
             */
            p.getLayoutBounds = function (bounds) {
                var values = this.$UIComponent;
                var w;
                if (values[27 /* layoutWidthExplicitlySet */]) {
                    w = values[10 /* width */];
                }
                else if (!isNaN(values[8 /* explicitWidth */])) {
                    w = values[8 /* explicitWidth */];
                }
                else {
                    w = values[16 /* measuredWidth */];
                }
                var h;
                if (values[28 /* layoutHeightExplicitlySet */]) {
                    h = values[11 /* height */];
                }
                else if (!isNaN(values[9 /* explicitHeight */])) {
                    h = values[9 /* explicitHeight */];
                }
                else {
                    h = values[17 /* measuredHeight */];
                }
                this.applyMatrix(bounds, w, h);
            };
            /**
             * @private
             *
             * @returns
             */
            p.getPreferredUWidth = function () {
                var values = this.$UIComponent;
                return isNaN(values[8 /* explicitWidth */]) ?
                    values[16 /* measuredWidth */] : values[8 /* explicitWidth */];
            };
            /**
             * @private
             *
             * @returns
             */
            p.getPreferredUHeight = function () {
                var values = this.$UIComponent;
                return isNaN(values[9 /* explicitHeight */]) ?
                    values[17 /* measuredHeight */] : values[9 /* explicitHeight */];
            };
            /**
             * @private
             * 获取组件的首选尺寸,常用于父级的measure()方法中
             * 按照：外部显式设置尺寸>测量尺寸 的优先级顺序返回尺寸，
             * 注意此方法返回值已经包含scale和rotation。
             */
            p.getPreferredBounds = function (bounds) {
                var w = this.getPreferredUWidth();
                var h = this.getPreferredUHeight();
                this.applyMatrix(bounds, w, h);
            };
            /**
             * @private
             *
             * @param bounds
             * @param w
             * @param h
             */
            p.applyMatrix = function (bounds, w, h) {
                var bounds = bounds.setTo(0, 0, w, h);
                var matrix = this.$getMatrix();
                if (isDeltaIdentity(matrix)) {
                    bounds.x += matrix.tx;
                    bounds.y += matrix.ty;
                }
                else {
                    matrix.$transformBounds(bounds);
                }
            };
            return UIComponentImpl;
        })(egret.DisplayObject);
        sys.UIComponentImpl = UIComponentImpl;
        egret.registerClass(UIComponentImpl,'eui.sys.UIComponentImpl',["eui.UIComponent"]);
        /**
         * 检查一个函数的方法体是否为空。
         */
        function isEmptyFunction(prototype, key) {
            if (typeof prototype[key] != "function") {
                return false;
            }
            var body = prototype[key].toString();
            var index = body.indexOf("{");
            var lastIndex = body.lastIndexOf("}");
            body = body.substring(index + 1, lastIndex);
            return body.trim() == "";
        }
        /**
         * @private
         * 拷贝模板类的方法体和属性到目标类上。
         * @param target 目标类
         * @param template 模板类
         */
        function mixin(target, template) {
            for (var property in template) {
                if (property != "prototype" && template.hasOwnProperty(property)) {
                    target[property] = template[property];
                }
            }
            var prototype = target.prototype;
            var protoBase = template.prototype;
            var keys = Object.keys(protoBase);
            var length = keys.length;
            for (var i = 0; i < length; i++) {
                var key = keys[i];
                if (key == "__meta__") {
                    continue;
                }
                if (!prototype.hasOwnProperty(key) || isEmptyFunction(prototype, key)) {
                    var value = Object.getOwnPropertyDescriptor(protoBase, key);
                    Object.defineProperty(prototype, key, value);
                }
            }
        }
        sys.mixin = mixin;
        /**
         * @private
         * 自定义类实现UIComponent的步骤：
         * 1.在自定义类的构造函数里调用：this.initializeUIValues();
         * 2.拷贝UIComponent接口定义的所有内容(包括注释掉的protected函数)到自定义类，将所有子类需要覆盖的方法都声明为空方法体。
         * 3.在定义类结尾的外部调用sys.implementUIComponent()，并传入自定义类。
         * 4.若覆盖了某个UIComponent的方法，需要手动调用UIComponentImpl.prototype["方法名"].call(this);
         * @param descendant 自定义的UIComponent子类
         * @param base 自定义子类继承的父类
         */
        function implementUIComponent(descendant, base, isContainer) {
            mixin(descendant, UIComponentImpl);
            var prototype = descendant.prototype;
            prototype.$super = base.prototype;
            if (isContainer) {
                prototype.$childAdded = function (child, index) {
                    this.invalidateSize();
                    this.invalidateDisplayList();
                };
                prototype.$childRemoved = function (child, index) {
                    this.invalidateSize();
                    this.invalidateDisplayList();
                };
            }
            if (DEBUG) {
                egret.$markReadOnly(descendant, "explicitWidth");
                egret.$markReadOnly(descendant, "explicitHeight");
                Object.defineProperty(prototype, "preferredWidth", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getPreferredBounds(bounds);
                        return bounds.width;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "preferredHeight", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getPreferredBounds(bounds);
                        return bounds.height;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "preferredX", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getPreferredBounds(bounds);
                        return bounds.x;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "preferredY", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getPreferredBounds(bounds);
                        return bounds.y;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "layoutBoundsX", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getLayoutBounds(bounds);
                        return bounds.x;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "layoutBoundsY", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getLayoutBounds(bounds);
                        return bounds.y;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "layoutBoundsWidth", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getLayoutBounds(bounds);
                        return bounds.width;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "layoutBoundsHeight", {
                    get: function () {
                        var bounds = egret.$TempRectangle;
                        this.getLayoutBounds(bounds);
                        return bounds.height;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "measuredWidth", {
                    get: function () {
                        return this.$UIComponent[16 /* measuredWidth */];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "measuredHeight", {
                    get: function () {
                        return this.$UIComponent[17 /* measuredHeight */];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "layoutWidthExplicitlySet", {
                    get: function () {
                        return this.$UIComponent[27 /* layoutWidthExplicitlySet */];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "layoutHeightExplicitlySet", {
                    get: function () {
                        return this.$UIComponent[28 /* layoutHeightExplicitlySet */];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "invalidatePropertiesFlag", {
                    get: function () {
                        return this.$UIComponent[24 /* invalidatePropertiesFlag */];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "invalidateSizeFlag", {
                    get: function () {
                        return this.$UIComponent[25 /* invalidateSizeFlag */];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(prototype, "invalidateDisplayListFlag", {
                    get: function () {
                        return this.$UIComponent[26 /* invalidateDisplayListFlag */];
                    },
                    enumerable: true,
                    configurable: true
                });
            }
        }
        sys.implementUIComponent = implementUIComponent;
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../states/State.ts" />
/// <reference path="../core/uicomponent.ts" />
/// <reference path="../utils/registerproperty.ts" />
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Group class is defines the base class for layout component.
     * If the contents of the sub items are too large to scroll to show, you can wrap a Scroller component outside the
     * group (Give the instance of Group to <code>viewport</code> property of Scroller component).
     * The scroller component can adds a scrolling touch operation for the Group.
     *
     * @defaultProperty elementsContent
     * @includeExample  extension/eui/components/GroupExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * Group 是自动布局的容器基类。如果包含的子项内容太大需要滚动显示，可以在在 Group 外部包裹一层 Scroller 组件
     * (将 Group 实例赋值给 Scroller 组件的 viewport 属性)。Scroller 会为 Group 添加滚动的触摸操作功能，并显示垂直或水平的滚动条。
     *
     * @see http://edn.egret.com/cn/index.php/article/index/id/608 简单容器
     * @defaultProperty elementsContent
     * @includeExample  extension/eui/components/GroupExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var Group = (function (_super) {
        __extends(Group, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Group() {
            _super.call(this);
            /**
             * @private
             */
            this.$layout = null;
            this._focusEnabled = false;
            /**
             * @private
             */
            this.$stateValues = new eui.sys.StateValues();
            this.initializeUIValues();
            this.$Group = {
                0: 0,
                1: 0,
                2: 0,
                3: 0,
                4: false,
                5: false,
            };
            this.$stateValues.parent = this;
        }
        var c=Group,p=c.prototype;
        d(p, "elementsContent",undefined
            /**
             * @language en_US
             * This property is Usually invoked in resolving an EXML for adding multiple children quickly.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此属性通常在 EXML 的解析器中调用，便于快速添加多个子项。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                if (value) {
                    var length = value.length;
                    for (var i = 0; i < length; i++) {
                        this.addChild(value[i]);
                    }
                }
            }
        );
        d(p, "layout"
            /**
             * @language en_US
             * The layout object for this container.
             * This object is responsible for the measurement and layout of
             * the UIcomponent in the container.
             *
             * @default eui.BasicLayout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此容器的布局对象。
             *
             * s@default eui.BasicLayout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$layout;
            }
            ,function (value) {
                this.$setLayout(value);
            }
        );
        /**
         * @private
         *
         * @param value
         */
        p.$setLayout = function (value) {
            if (this.$layout == value)
                return false;
            if (this.$layout) {
                this.$layout.target = null;
            }
            this.$layout = value;
            if (value) {
                value.target = this;
            }
            this.invalidateSize();
            this.invalidateDisplayList();
            return true;
        };
        d(p, "focusEnabled"
            ,function () {
                return this._focusEnabled;
            }
            /**
            * @language en_US
            * FocusEnabled.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 焦点是否可用。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (v) {
                this._focusEnabled = v;
            }
        );
        /**
        * @language en_US
        * SetFocus.
        * @version Egret 2.4
        * @version eui 1.0
        * @platform Web,Native
        */
        /**
         * @language zh_CN
         * 设置焦点。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setFocus = function () {
            if (this.stage) {
                this.stage.focus = this;
            }
        };
        d(p, "contentWidth"
            /**
             * @copy eui.IViewport#contentWidth
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Group[0 /* contentWidth */];
            }
        );
        d(p, "contentHeight"
            /**
             * @copy eui.IViewport#contentHeight
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Group[1 /* contentHeight */];
            }
        );
        /**
         * @language en_US
         *
         * Sets the <code>contentWidth</code> and <code>contentHeight</code>
         * properties.
         *
         * This method is intended for layout class developers who should
         * call it from <code>updateDisplayList()</code> methods.
         *
         * @param width The new value of <code>contentWidth</code>.
         * @param height The new value of <code>contentHeight</code>.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         *
         * 设置 <code>contentWidth</code> 和 <code>contentHeight</code> 属性。
         * 此方法由布局来调用，开发者应该在布局类的 <code>updateDisplayList()</code> 方法中对其进行调用。
         *
         * @param width <code>contentWidth</code> 的新值。
         * @param height <code>contentHeight</code> 的新值。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setContentSize = function (width, height) {
            width = Math.ceil(+width || 0);
            height = Math.ceil(+height || 0);
            var values = this.$Group;
            var wChange = (values[0 /* contentWidth */] !== width);
            var hChange = (values[1 /* contentHeight */] !== height);
            if (!wChange && !hChange) {
                return;
            }
            values[0 /* contentWidth */] = width;
            values[1 /* contentHeight */] = height;
            if (wChange) {
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "contentWidth");
            }
            if (hChange) {
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "contentHeight");
            }
        };
        d(p, "scrollEnabled"
            /**
             * @copy eui.IViewport#scrollEnabled
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Group[4 /* scrollEnabled */];
            }
            ,function (value) {
                value = !!value;
                var values = this.$Group;
                if (value === values[4 /* scrollEnabled */])
                    return;
                values[4 /* scrollEnabled */] = value;
                this.updateScrollRect();
            }
        );
        d(p, "scrollH"
            /**
             * @copy eui.IViewport#scrollH
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Group[2 /* scrollH */];
            }
            ,function (value) {
                value = +value || 0;
                var values = this.$Group;
                if (value === values[2 /* scrollH */])
                    return;
                values[2 /* scrollH */] = value;
                if (this.updateScrollRect() && this.$layout) {
                    this.$layout.scrollPositionChanged();
                }
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "scrollH");
            }
        );
        d(p, "scrollV"
            /**
             * @copy eui.IViewport#scrollV
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Group[3 /* scrollV */];
            }
            ,function (value) {
                value = +value || 0;
                var values = this.$Group;
                if (value == values[3 /* scrollV */])
                    return;
                values[3 /* scrollV */] = value;
                if (this.updateScrollRect() && this.$layout) {
                    this.$layout.scrollPositionChanged();
                }
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "scrollV");
            }
        );
        /**
         * @private
         *
         * @returns
         */
        p.updateScrollRect = function () {
            var values = this.$Group;
            var hasClip = values[4 /* scrollEnabled */];
            if (hasClip) {
                var uiValues = this.$UIComponent;
                this.scrollRect = egret.$TempRectangle.setTo(values[2 /* scrollH */], values[3 /* scrollV */], uiValues[10 /* width */], uiValues[11 /* height */]);
            }
            else if (this.$scrollRect) {
                this.scrollRect = null;
            }
            return hasClip;
        };
        d(p, "numElements"
            /**
             * @language en_US
             * The number of layout element in this container.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 布局元素子项的数量。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$children.length;
            }
        );
        /**
         * @language en_US
         * Returns the layout element at the specified index.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 获取一个布局元素子项。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementAt = function (index) {
            return this.$children[index];
        };
        p.getVirtualElementAt = function (index) {
            return this.getElementAt(index);
        };
        /**
         * @language en_US
         * Set the index range of the sub Visual element in container which support virtual layout.
         * This method is invalid in container which do not support virtual layout.
         * This method is usually invoked before layout. Override this method to release the invisible elements.
         *
         * @param startIndex the start index of sub visual elements（include）
         * @param endIndex the end index of sub visual elements（include）
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 在支持虚拟布局的容器中，设置容器内可见的子元素索引范围。此方法在不支持虚拟布局的容器中无效。
         * 通常在即将重新布局子项之前会被调用一次，容器覆盖此方法提前释放已经不可见的子元素。
         *
         * @param startIndex 可视元素起始索引（包括）
         * @param endIndex 可视元素结束索引（包括）
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setVirtualElementIndicesInView = function (startIndex, endIndex) {
        };
        d(p, "touchThrough"
            /**
             * @language en_US
             * When <code>true</code>, this property
             * ensures that the entire bounds of the Group respond to
             * touch events such as begin.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 触摸组件的背景透明区域是否可以穿透。设置为true表示可以穿透，反之透明区域也会响应触摸事件。默认 false。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Group[5 /* touchThrough */];
            }
            ,function (value) {
                this.$Group[5 /* touchThrough */] = !!value;
            }
        );
        /**
         * @private
         */
        p.$hitTest = function (stageX, stageY) {
            var target = _super.prototype.$hitTest.call(this, stageX, stageY);
            if (target || this.$Group[5 /* touchThrough */]) {
                return target;
            }
            if (!this.$visible || !this.touchEnabled) {
                return null;
            }
            var point = this.globalToLocal(stageX, stageY, egret.$TempPoint);
            var values = this.$UIComponent;
            var bounds = egret.$TempRectangle.setTo(0, 0, values[10 /* width */], values[11 /* height */]);
            var scrollRect = this.$scrollRect;
            if (scrollRect) {
                bounds.x = scrollRect.x;
                bounds.y = scrollRect.y;
            }
            if (bounds.contains(point.x, point.y)) {
                return this;
            }
            return null;
        };
        /**
         * @copy eui.Component#invalidateState()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateState = function () {
            var values = this.$stateValues;
            if (values.stateIsDirty) {
                return;
            }
            values.stateIsDirty = true;
            this.invalidateProperties();
        };
        /**
         * @copy eui.Component#getCurrentState()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getCurrentState = function () {
            return "";
        };
        /**
         * @copy eui.Component#createChildren()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            if (!this.$layout) {
                this.$setLayout(new eui.BasicLayout());
            }
            this.initializeStates(this.$stage);
        };
        /**
         * @copy eui.Component#childrenCreated()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.childrenCreated = function () {
        };
        /**
         * @copy eui.Component#commitProperties()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            eui.sys.UIComponentImpl.prototype["commitProperties"].call(this);
            var values = this.$stateValues;
            if (values.stateIsDirty) {
                values.stateIsDirty = false;
                if (!values.explicitState) {
                    values.currentState = this.getCurrentState();
                    this.commitCurrentState();
                }
            }
        };
        /**
         * @copy eui.Component#measure()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            if (!this.$layout) {
                this.setMeasuredSize(0, 0);
                return;
            }
            this.$layout.measure();
        };
        /**
         * @copy eui.Component#updateDisplayList()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            if (this.$layout) {
                this.$layout.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            this.updateScrollRect();
        };
        /**
         * @copy eui.Component#invalidateParentLayout()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateParentLayout = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setMeasuredSize = function (width, height) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateSize = function (recursive) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateNow = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsPosition = function (x, y) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getLayoutBounds = function (bounds) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getPreferredBounds = function (bounds) {
        };
        return Group;
    })(egret.DisplayObjectContainer);
    eui.Group = Group;
    egret.registerClass(Group,'eui.Group',["eui.IViewport","eui.UIComponent"]);
    eui.sys.implementUIComponent(Group, egret.DisplayObjectContainer, true);
    eui.sys.mixin(Group, eui.sys.StateClient);
    eui.registerProperty(Group, "elementsContent", "Array", true);
    eui.registerProperty(Group, "states", "State[]");
    if (DEBUG) {
        egret.$markReadOnly(Group, "contentWidth");
        egret.$markReadOnly(Group, "contentHeight");
        egret.$markReadOnly(Group, "numElements");
    }
})(eui || (eui = {}));
var eui;
(function (eui) {
    var AccordionGroup = (function (_super) {
        __extends(AccordionGroup, _super);
        function AccordionGroup() {
            _super.call(this);
            this.createChildrenCalled = false;
            this.elementsContentChanged = false;
            this._elementsContent = [];
            _super.prototype.$setLayout.call(this, new eui.AccordionLayout());
            this.accordionButtonSkinClass = "skins.AccordionButtonSkin";
        }
        var c=AccordionGroup,p=c.prototype;
        d(p, "layout"
            ,function () {
                return this.$layout;
            }
            ,function (value) {
            }
        );
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.createChildrenCalled = true;
            if (this.elementsContentChanged) {
                this.elementsContentChanged = false;
                this.setElementsContent(this._elementsContent);
            }
        };
        p.getElementsContent = function () {
            return this._elementsContent;
        };
        d(p, "elementsContent",undefined
            ,function (value) {
                if (value == null)
                    value = [];
                if (value == this._elementsContent)
                    return;
                if (this.createChildrenCalled) {
                    this.setElementsContent(value);
                }
                else {
                    this.elementsContentChanged = true;
                    for (var i = this._elementsContent.length - 1; i >= 0; i--) {
                        this.childRemoved(this._elementsContent[i], i);
                    }
                    this._elementsContent = value;
                }
            }
        );
        p.setElementsContent = function (value) {
            var i = 0;
            for (i = this._elementsContent.length - 1; i >= 0; i--) {
                this.childRemoved(this._elementsContent[i], i);
            }
            this._elementsContent = value.concat();
            var n = this._elementsContent.length;
            for (i = 0; i < n; i++) {
                var elt = this._elementsContent[i];
                //if(flash.As3is(elt.parent,null,"egret.core.IVisualElementContainer"))
                //	elt.parent.removeElement(elt);
                this.childAdded(elt, i);
            }
        };
        d(p, "numElements"
            ,function () {
                return this._elementsContent.length;
            }
        );
        p.getElementAt = function (index) {
            this.checkForRangeError(index);
            return this._elementsContent[index];
        };
        p.checkForRangeError = function (index, addingElement) {
            if (addingElement === void 0) { addingElement = false; }
            var maxIndex = this._elementsContent.length - 1;
            if (addingElement)
                maxIndex++;
            if (index < 0 || index > maxIndex)
                throw new RangeError("索引:\"" + index + "\"超出可视元素索引范围").message;
        };
        p.addChild = function (element) {
            var index = this.numElements;
            if (element.parent == this)
                index = this.numElements - 1;
            return this.addChildAt(element, index);
        };
        p.addChildAt = function (element, index) {
            if (element == this)
                return element;
            this.checkForRangeError(index, true);
            var host = element.parent;
            if (host == this || element.parent == this) {
                this.setChildIndex(element, index);
                return element;
            }
            else if (host) {
                host.removeChild(element);
            }
            this._elementsContent.splice(index, 0, element);
            if (!this.elementsContentChanged)
                this.childAdded(element, index);
            return element;
        };
        p.removeChild = function (element) {
            return this.removeChildAt(this.getChildIndex(element));
        };
        p.removeChildAt = function (index) {
            this.checkForRangeError(index);
            var element = this._elementsContent[index];
            if (!this.elementsContentChanged)
                this.childRemoved(element, index);
            this._elementsContent.splice(index, 1);
            return element;
        };
        p.removeChildren = function () {
            for (var i = this.numElements - 1; i >= 0; i--) {
                this.removeChildAt(i);
            }
        };
        p.getChildIndex = function (element) {
            return this._elementsContent.indexOf(element);
        };
        p.setChildIndex = function (element, index) {
            this.checkForRangeError(index);
            var oldIndex = this.getChildIndex(element);
            if (oldIndex == -1 || oldIndex == index)
                return;
            if (!this.elementsContentChanged)
                this.childRemoved(element, oldIndex, false);
            this._elementsContent.splice(oldIndex, 1);
            this._elementsContent.splice(index, 0, element);
            if (!this.elementsContentChanged)
                this.childAdded(element, index, false);
        };
        p.swapChildren = function (element1, element2) {
            this.swapChildrenAt(this.getChildIndex(element1), this.getChildIndex(element2));
        };
        p.swapChildrenAt = function (index1, index2) {
            this.checkForRangeError(index1);
            this.checkForRangeError(index2);
            if (index1 > index2) {
                var temp = index2;
                index2 = index1;
                index1 = temp;
            }
            else if (index1 == index2)
                return;
            var element1 = this._elementsContent[index1];
            var element2 = this._elementsContent[index2];
            if (!this.elementsContentChanged) {
                this.childRemoved(element1, index1, false);
                this.childRemoved(element2, index2, false);
            }
            this._elementsContent.splice(index2, 1);
            this._elementsContent.splice(index1, 1);
            this._elementsContent.splice(index1, 0, element2);
            this._elementsContent.splice(index2, 0, element1);
            if (!this.elementsContentChanged) {
                this.childAdded(element2, index1, false);
                this.childAdded(element1, index2, false);
            }
        };
        p.childAdded = function (element, index, notifyListeners) {
            if (notifyListeners === void 0) { notifyListeners = true; }
            _super.prototype.addChildAt.call(this, element, index * 2);
            var button;
            if (this.accordionButtonClass) {
                button = new this.accordionButtonClass();
            }
            else {
                button = new eui.ToggleButton();
            }
            button.selected = element.visible;
            button.visible = element.includeInLayout;
            if (this.accordionButtonSkinClass)
                button.skinName = this.accordionButtonSkinClass;
            else
                button.skinName = "skins.ToggleButtonSkin";
            button.label = element.name;
            if (element["icon"]) {
                button.icon = element["icon"];
            }
            _super.prototype.addChildAt.call(this, button, index * 2 + 1);
            button.addEventListener(egret.Event.CHANGE, this.onButtonChange, this);
            if (notifyListeners) {
            }
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        p.childRemoved = function (element, index, notifyListeners) {
            if (notifyListeners === void 0) { notifyListeners = true; }
            var _self__ = this;
            if (notifyListeners) {
            }
            if (this.numChildren <= index)
                return;
            var button = _super.prototype.removeChildAt.call(this, index * 2 + 1);
            button.removeEventListener(egret.Event.CHANGE, this.onButtonChange, this);
            _super.prototype.removeChildAt.call(this, index * 2);
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        p.onButtonChange = function (event) {
            var button = event.currentTarget;
            var index = (_super.prototype.getChildIndex.call(this, button) - 1) * 0.5;
            var element = this.getElementAt(index);
            element.visible = button.selected;
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        return AccordionGroup;
    })(eui.Group);
    eui.AccordionGroup = AccordionGroup;
    egret.registerClass(AccordionGroup,'eui.AccordionGroup');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The UILayer class is the subclass of the Group class.It not only has the standard function of the Group class,but also
     * can keep its size the same to the stage size (Stage.stageWidth,Stage.stageHeight).Its size will changes as the stage size changes.
     * like any normal container class,you can create multiple instance of the UILayer class,but it is usually used as the root of the UI display list.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * UILayer 是 Group 的子类，它除了具有容器的所有标准功能，还能够自动保持自身尺寸始终与舞台尺寸相同（Stage.stageWidth,Stage.stageHeight）。
     * 当舞台尺寸发生改变时，它会跟随舞台尺寸改变。UILayer 跟普通容器一样，允许创建多个实例，但通常都将它作为UI显示列表的根节点使用。
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var UILayer = (function (_super) {
        __extends(UILayer, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function UILayer() {
            _super.call(this);
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onRemoveFromStage, this);
        }
        var c=UILayer,p=c.prototype;
        /**
         * @private
         * 添加到舞台
         */
        p.onAddToStage = function (event) {
            this.$stage.addEventListener(egret.Event.RESIZE, this.onResize, this);
            this.onResize();
        };
        /**
         * @private
         * 从舞台移除
         */
        p.onRemoveFromStage = function (event) {
            this.$stage.removeEventListener(egret.Event.RESIZE, this.onResize, this);
        };
        /**
         * @private
         * 舞台尺寸改变
         */
        p.onResize = function (event) {
            var stage = this.$stage;
            this.$setWidth(stage.$stageWidth);
            this.$setHeight(stage.$stageHeight);
        };
        return UILayer;
    })(eui.Group);
    eui.UILayer = UILayer;
    egret.registerClass(UILayer,'eui.UILayer');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *应用程序
     *此类用于应用程序的入口类
     */
    var Application = (function (_super) {
        __extends(Application, _super);
        function Application() {
            _super.call(this);
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandle, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.removeFromStageHandle, this);
        }
        var c=Application,p=c.prototype;
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            //注册焦点管理器
            this.stage.registerImplementation("eui.IFocusManager", new eui.FocusManager());
        };
        p.addedToStageHandle = function (e) {
            this.focusManager = this.stage.getImplementation("eui.IFocusManager");
            this.focusManager.stage = this.stage;
        };
        p.removeFromStageHandle = function (e) {
            if (this.focusManager)
                this.focusManager.stage = null;
        };
        return Application;
    })(eui.UILayer);
    eui.Application = Application;
    egret.registerClass(Application,'eui.Application');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../core/uicomponent.ts" />
/// <reference path="../utils/registerproperty.ts" />
var eui;
(function (eui) {
    /**
     * @language en_US
     *
     * @copy eui.UIComponents
     * @event egret.Event.COMPLETE Dispatch when <code>skinName</code> property is set the path of external EXML file and the EXML file is resolved.
     *
     * @includeExample  extension/eui/components/ComponentExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     *
     * @copy eui.UIComponents
     * @event egret.Event.COMPLETE 当设置skinName为外部exml文件路径时，加载并完成EXML解析后调度。
     *
     * @includeExample  extension/eui/components/ComponentExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var Component = (function (_super) {
        __extends(Component, _super);
        /**
         * Constructor.
         *
         * @language en_US
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * 构造函数。
         *
         * @language zh_CN
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Component() {
            _super.call(this);
            this._focusEnabled = false;
            this.initializeUIValues();
            this.$Component = {
                0: null,
                1: null,
                2: "",
                3: true,
                4: false,
                5: false,
                6: true,
                7: true,
                8: null //skin
            };
            //if egret
            this.$touchEnabled = true;
            //endif*/
        }
        var c=Component,p=c.prototype;
        d(p, "hostComponentKey"
            /**
             * @language en_US
             * A identifier of host component which can determine only one component names.
             * Usually used for quering a default skin name in theme.
             * @default null
             * @see eui.Theme#getSkinName()
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 主机组件标识符。用于唯一确定一个组件的名称。通常用于在主题中查询默认皮肤名。
             *
             * @default null
             * @see eui.Theme#getSkinName()
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Component[0 /* hostComponentKey */];
            }
            ,function (value) {
                this.$Component[0 /* hostComponentKey */] = value;
            }
        );
        d(p, "skinName"
            /**
             * @language en_US
             * Identifier of skin. Valid values: class definition of skin,
             * class name of skin, instance of skin, EXML or external EXML file path.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤标识符。有效值可为：皮肤类定义,皮肤类名,皮肤实例,EXML文件内容,或外部EXML文件路径，
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Component[1 /* skinName */];
            }
            ,function (value) {
                var values = this.$Component;
                values[5 /* skinNameExplicitlySet */] = true;
                if (values[1 /* skinName */] == value)
                    return;
                if (value) {
                    values[1 /* skinName */] = value;
                }
                else if (this.$stage) {
                    var theme = this.$stage.getImplementation("eui.Theme");
                    if (theme) {
                        var skinName = theme.getSkinName(this);
                        if (skinName) {
                            values[1 /* skinName */] = skinName;
                        }
                    }
                }
                this.$parseSkinName();
            }
        );
        /**
         * @private
         * 解析skinName
         */
        p.$parseSkinName = function () {
            var skinName = this.skinName;
            var skin;
            if (skinName) {
                if (skinName.prototype) {
                    skin = new skinName();
                }
                else if (typeof (skinName) == "string") {
                    var clazz;
                    var text = skinName.trim();
                    if (text.charAt(0) == "<") {
                        clazz = EXML.parse(text);
                    }
                    else {
                        clazz = egret.getDefinitionByName(skinName);
                        if (!clazz) {
                            EXML.load(skinName, this.onExmlLoaded, this, true);
                            return;
                        }
                    }
                    if (clazz) {
                        skin = new clazz();
                    }
                }
                else {
                    skin = skinName;
                }
            }
            this.setSkin(skin);
        };
        d(p, "focusEnabled"
            ,function () {
                return this._focusEnabled;
            }
            /**
            * @language en_US
            * FocusEnabled.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 焦点是否可用。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (v) {
                this._focusEnabled = v;
            }
        );
        /**
        * @language en_US
        * SetFocus.
        * @version Egret 2.4
        * @version eui 1.0
        * @platform Web,Native
        */
        /**
         * @language zh_CN
         * 设置焦点。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setFocus = function () {
            if (this.stage) {
                this.stage.focus = this;
            }
        };
        /**
         * @private
         * @param clazz
         * @param url
         */
        p.onExmlLoaded = function (clazz, url) {
            if (this.skinName != url) {
                return;
            }
            var skin = new clazz();
            this.setSkin(skin);
        };
        d(p, "skin"
            /**
             * @language en_US
             * The instance of the skin class for this component instance.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤对象实例。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Component[8 /* skin */];
            }
        );
        /**
         * @language en_US
         * Setter for the skin instance.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 设置皮肤实例
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setSkin = function (skin) {
            if (skin && !(skin instanceof eui.Skin)) {
                skin = null;
                DEBUG && egret.$error(2202);
            }
            var values = this.$Component;
            var oldSkin = values[8 /* skin */];
            if (oldSkin) {
                var skinParts = oldSkin.skinParts;
                var length = skinParts.length;
                for (var i = 0; i < length; i++) {
                    var partName = skinParts[i];
                    if (this[partName]) {
                        this.setSkinPart(partName, null);
                    }
                }
                var children = oldSkin.$elementsContent;
                if (children) {
                    length = children.length;
                    for (var i = 0; i < length; i++) {
                        var child = children[i];
                        if (child.$parent == this) {
                            this.removeChild(child);
                        }
                    }
                }
                oldSkin.hostComponent = null;
            }
            values[8 /* skin */] = skin;
            if (skin) {
                var skinParts = skin.skinParts;
                var length = skinParts.length;
                for (var i = 0; i < length; i++) {
                    var partName = skinParts[i];
                    var instance = skin[partName];
                    if (instance) {
                        this.setSkinPart(partName, instance);
                    }
                }
                children = skin.$elementsContent;
                if (children) {
                    for (i = children.length - 1; i >= 0; i--) {
                        this.addChildAt(children[i], 0);
                    }
                }
                skin.hostComponent = this;
            }
            this.invalidateSize();
            this.invalidateDisplayList();
            this.dispatchEventWith(egret.Event.COMPLETE);
        };
        /**
         * @language en_US
         * Find the skin parts in the skin class and assign them to the properties of the component.
         * You do not call this method directly. This method will be invoked automatically when using a EXML as skin.
         * The ID for a tag in an EXML will be passed in as <code>partName</code>, and the instance of the tag will be
         * passed in as <code>instance</code>.
         * @param partName name of a skin part
         * @param instance instance of a skin part
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 关联一个对象到逻辑组件的指定皮肤部件上。通常您不需要手动调用此方法，当使用EXML文件作为组件皮肤，此方法将会被自动调用。
         * 在运行时，EXML文件内声明的id名称将作为此方法的partName参数，而id所对应的节点对象，将作为此方法的instance参数被依次传入。
         * @param partName 皮肤部件名称
         * @param instance 皮肤部件实例
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setSkinPart = function (partName, instance) {
            var oldInstance = this[partName];
            if (oldInstance) {
                this.partRemoved(partName, oldInstance);
            }
            this[partName] = instance;
            if (instance) {
                this.partAdded(partName, instance);
            }
        };
        /**
         * @language en_US
         * Called when a skin part is added.
         * You do not call this method directly.
         * EUI calls it automatically when it calls the <code>setSkinPart()</code> method.<p/>
         *
         * Override this function to attach behavior to the part, such as add event listener or
         * assign property values cached.
         * @param partName name of a skin part to add.
         * @param instance instance of a skin part to add.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 添加皮肤部件时调用。
         * 您无需直接调用此方法。
         * EUI 会在调用 setSkinPart()方法时自动调用此方法。<p/>
         *
         * 子类覆盖此方法，以在皮肤部件第一次附加时对其执行一些初始化操作，例如添加事件监听，赋值缓存的属性值等。
         * @param partName 要附加的皮肤部件名称。
         * @param instance 要附加的皮肤部件实例。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
        };
        /**
         * @language en_US
         * Called when an instance of a skin part is being removed.
         * You do not call this method directly.
         * EUI calls it automatically when it calls the <code>setSkinPart()</code> method.<p/>
         *
         * Override this function to clean behavior of the part, such as remove event listener or
         * disconnect the cache reference
         * @param partName name of a skin part to remove.
         * @param instance instance of a skin part to remove.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 正删除外观部件的实例时调用。
         * 您无需直接调用此方法。
         * EUI 会在调用 setSkinPart()方法时自动调用此方法。<p/>
         *
         * 子类覆盖此方法，以在皮肤部件从逻辑组件卸载时对其执行一些清理操作，例如移除事件监听，断开缓存的引用等。
         * @param partName 要卸载的皮肤部件名称
         * @param instance 要卸载的皮肤部件实例
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partRemoved = function (partName, instance) {
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setTouchChildren = function (value) {
            value = !!value;
            var values = this.$Component;
            values[6 /* explicitTouchChildren */] = value;
            if (values[3 /* enabled */]) {
                values[6 /* explicitTouchChildren */] = value;
                return _super.prototype.$setTouchChildren.call(this, value);
            }
            else {
                return true;
            }
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setTouchEnabled = function (value) {
            value = !!value;
            var values = this.$Component;
            values[7 /* explicitTouchEnabled */] = value;
            if (values[3 /* enabled */]) {
                return _super.prototype.$setTouchEnabled.call(this, value);
            }
            else {
                return true;
            }
        };
        d(p, "enabled"
            /**
             * @language en_US
             * Whether the component can accept user interaction.
             * After setting the <code>enabled</code> property to <code>false</code>, components will disabled touch event
             * (set <code>touchEnabled</code> and <code>touchChildren</code> to false) and set state of skin to "disabled".
             *
             * @default true
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 组件是否可以接受用户交互。
             * 将 enabled 属性设置为 false 后，
             * 组件会自动禁用触摸事件(将 touchEnabled 和 touchChildren 同时设置为 false)，
             * 部分组件可能还会将皮肤的视图状态设置为"disabled",使其所有子项的颜色变暗。
             *
             * @default true
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Component[3 /* enabled */];
            }
            ,function (value) {
                value = !!value;
                this.$setEnabled(value);
            }
        );
        /**
         * @private
         *
         * @param value
         */
        p.$setEnabled = function (value) {
            var values = this.$Component;
            if (value === values[3 /* enabled */]) {
                return false;
            }
            values[3 /* enabled */] = value;
            if (value) {
                this.$touchEnabled = values[7 /* explicitTouchEnabled */];
                this.$touchChildren = values[6 /* explicitTouchChildren */];
            }
            else {
                this.$touchEnabled = false;
                this.$touchChildren = false;
            }
            this.invalidateState();
            return true;
        };
        d(p, "currentState"
            //========================皮肤视图状态=====================start=======================
            /**
             * @language en_US
             * The current view state of the component. When you use this property to set a component's state,
             * EUI will explicit update state of skin and ignore the return of <code>getCurrentState()</code>.
             *
             * Set to <code>""</code> or <code>null</code> to reset the component back to its base state.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 组件的当前视图状态。显式设置此属性，
             * 将采用显式设置的值去更新皮肤状态，而忽略组件内部 getCurrentState() 方法返回的值。
             *
             * 将其设置为 "" 或 null 可将取消组件外部显式设置的视图状态名称，从而采用内部 getCurrentState() 方法返回的状态。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                var values = this.$Component;
                return values[2 /* explicitState */] ?
                    values[2 /* explicitState */] : this.getCurrentState();
            }
            ,function (value) {
                var values = this.$Component;
                if (value == values[2 /* explicitState */]) {
                    return;
                }
                values[2 /* explicitState */] = value;
                this.invalidateState();
            }
        );
        /**
         * @language en_US
         * Marks the component so that the new state of the skin is set during a later screen update.
         * A subclass of SkinnableComponent must override <code>getCurrentState()</code> to return a value.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 标记组件当前的视图状态失效，调用此方法后，子类应该覆盖 <code>getCurrentState()</code> 方法来返回当前的视图状态名称。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateState = function () {
            var values = this.$Component;
            if (values[4 /* stateIsDirty */])
                return;
            values[4 /* stateIsDirty */] = true;
            this.invalidateProperties();
        };
        /**
         * @language en_US
         * Returns the name of the state to be applied to the skin.<p/>
         * A subclass of SkinnableComponent must override this method to return a value.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 返回组件当前的皮肤状态名称,子类覆盖此方法定义各种状态名
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getCurrentState = function () {
            return "";
        };
        /**
         * @language en_US
         * Create child objects of the component. This is an advanced method that you might override
         * when creating a subclass of Component. This method will be called once it be added to stage.
         * You must invoke <code>super.createChildren()</code> to complete initialization of the parent class
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 子类覆盖此方法可以执行一些初始化子项操作。此方法仅在组件第一次添加到舞台时回调一次。
         * 请务必调用super.createChildren()以完成父类组件的初始化
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            var values = this.$Component;
            if (!values[1 /* skinName */]) {
                var theme = this.$stage.getImplementation("eui.Theme");
                if (theme) {
                    var skinName = theme.getSkinName(this);
                    if (skinName) {
                        values[1 /* skinName */] = skinName;
                        this.$parseSkinName();
                    }
                }
            }
        };
        /**
         * @language en_US
         * Performs any final processing after child objects are created.
         * This is an advanced method that you might override
         * when creating a subclass of Component.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建子对象后执行任何最终处理。此方法在创建 Component 的子类时覆盖。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.childrenCreated = function () {
        };
        /**
         * @language en_US
         * Processes the properties set on the component.
         * You can override this method when creating a subclass of Component.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 提交属性，子类在调用完invalidateProperties()方法后，应覆盖此方法以应用属性
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            eui.sys.UIComponentImpl.prototype["commitProperties"].call(this);
            var values = this.$Component;
            if (values[4 /* stateIsDirty */]) {
                values[4 /* stateIsDirty */] = false;
                if (values[8 /* skin */]) {
                    values[8 /* skin */].currentState = this.currentState;
                }
            }
        };
        /**
         * @language en_US
         * Calculates the default size.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 测量组件尺寸
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            eui.sys.measure(this);
            var skin = this.$Component[8 /* skin */];
            if (!skin) {
                return;
            }
            var values = this.$UIComponent;
            if (!isNaN(skin.width)) {
                values[16 /* measuredWidth */] = skin.width;
            }
            else {
                if (values[16 /* measuredWidth */] < skin.minWidth) {
                    values[16 /* measuredWidth */] = skin.minWidth;
                }
                if (values[16 /* measuredWidth */] > skin.maxWidth) {
                    values[16 /* measuredWidth */] = skin.maxWidth;
                }
            }
            if (!isNaN(skin.height)) {
                values[17 /* measuredHeight */] = skin.height;
            }
            else {
                if (values[17 /* measuredHeight */] < skin.minHeight) {
                    values[17 /* measuredHeight */] = skin.minHeight;
                }
                if (values[17 /* measuredHeight */] > skin.maxHeight) {
                    values[17 /* measuredHeight */] = skin.maxHeight;
                }
            }
        };
        /**
         * @language en_US
         * Draws the object and/or sizes and positions its children.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 更新显示列表
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            eui.sys.updateDisplayList(this, unscaledWidth, unscaledHeight);
        };
        /**
         * @language en_US
         * Method to invalidate parent size and display list if
         * this object affects its layout (includeInLayout is true).
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 此对象影响其布局时（includeInLayout 为 true），使父代大小和显示列表失效的方法。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateParentLayout = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setMeasuredSize = function (width, height) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateSize = function (recursive) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateNow = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsPosition = function (x, y) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getLayoutBounds = function (bounds) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getPreferredBounds = function (bounds) {
        };
        return Component;
    })(egret.DisplayObjectContainer);
    eui.Component = Component;
    egret.registerClass(Component,'eui.Component',["eui.UIComponent"]);
    eui.registerProperty(Component, "skinName", "Class");
    eui.sys.implementUIComponent(Component, egret.DisplayObjectContainer, true);
    if (DEBUG) {
        egret.$markReadOnly(Component, "skin");
    }
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Button component is a commonly used rectangular button.
     * The Button component looks like it can be pressed.
     * The default skin has a text label and a icon display object.
     *
     * @event egret.TouchEvent.TOUCH_CANCEL canceled the touch
     *
     * @state up Button up state
     * @state down Button down state
     * @state disabled Button disabled state
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/ButtonExample.ts
     */
    /**
     * @language zh_CN
     * Button 组件是常用的矩形按钮。Button 组件看起来可以按压。默认外观具有一个文本标签和图标显示对象。
     *
     * @event egret.TouchEvent.TOUCH_CANCEL 取消触摸事件
     *
     * @state up 按钮弹起状态
     * @state down 按钮按下状态
     * @state disabled 按钮禁用状态
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/ButtonExample.ts
     */
    var Button = (function (_super) {
        __extends(Button, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个按钮实例
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Button() {
            _super.call(this);
            this._keepDown = false;
            /**
             * @language en_US
             * [SkinPart] A skin part that defines the label of the button.
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * [SkinPart] 按钮上的文本标签。
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.labelDisplay = null;
            /**
             * @private
             */
            this._label = "";
            /**
             * @language en_US
             * [SkinPart] A skin part that defines an optional icon for the button.
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * [SkinPart] 按钮上的图标显示对象。
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.iconDisplay = null;
            /**
             * @private
             */
            this._icon = null;
            /**
             * @private
             * 指示第一次分派 TouchEvent.TOUCH_BEGIN 时，触摸点是否在按钮上。
             */
            this._touchCaptured = false;
            this._hovered = false;
            /**
             * 已经开始过不断抛出buttonDown事件的标志
             */
            this._downEventFired = false;
            this._stickyHighlighting = false;
            this._autoRepeat = false;
            this._repeatDelay = 35;
            this._repeatInterval = 35;
            this.touchChildren = false;
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
            this.addEventListener(egret.TouchEvent.TOUCH_CANCEL, this.onTouchCancle, this);
            this.addEventListener(egret.MouseEvent.ROLL_OVER, this.onMouseRollOver, this);
            this.addEventListener(egret.MouseEvent.ROLL_OUT, this.onMouseRollOut, this);
        }
        var c=Button,p=c.prototype;
        /**
         * 强制让按钮停在鼠标按下状态,此方法不会导致重复抛出buttonDown事件,仅影响皮肤State。
         * @param down 是否按下
         */
        p.keepDown = function (down) {
            if (this._keepDown == down)
                return;
            this._keepDown = down;
            this.invalidateState();
        };
        d(p, "label"
            /**
             * @language en_US
             * Text to appear on the Button control.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 要在按钮上显示的文本。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._label;
            }
            ,function (value) {
                this._label = value;
                if (this.labelDisplay) {
                    this.labelDisplay.text = value;
                }
            }
        );
        d(p, "icon"
            /**
             * @language en_US
             * Icon to appear on the Button control.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 要在按钮上显示的图标数据
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._icon;
            }
            ,function (value) {
                this._icon = value;
                if (this.iconDisplay) {
                    this.iconDisplay.source = value;
                }
            }
        );
        d(p, "touchCaptured"
            /**
             * 指示第一次分派 MouseEvent.MOUSE_DOWN 时，是否按下鼠标以及鼠标指针是否在按钮上。
             */
            ,function () {
                return this._touchCaptured;
            }
            ,function (value) {
                if (value == this._touchCaptured)
                    return;
                this._touchCaptured = value;
                this.invalidateState();
                if (!value) {
                    if (this.$stage)
                        this.$stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
                }
                this.checkButtonDownConditions();
            }
        );
        /**
         * @language en_US
         * This method handles the touchCancle events
         * @param  The <code>egret.TouchEvent</code> object.
         * @version Egret 3.0.1
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 解除触碰事件处理。
         * @param event 事件 <code>egret.TouchEvent</code> 的对象。
         * @version Egret 3.0.1
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchCancle = function (event) {
            if (this.$stage) {
                this.$stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            }
            this.hovered = true;
            this.touchCaptured = false;
        };
        /**
         * @language en_US
         * This method handles the touch events
         * @param  The <code>egret.TouchEvent</code> object.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 触碰事件处理。
         * @param event 事件 <code>egret.TouchEvent</code> 的对象。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchBegin = function (event) {
            this.$stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            this.touchCaptured = true;
            event.updateAfterEvent();
        };
        /**
         * @private
         * 舞台上触摸弹起事件
         */
        p.onStageTouchEnd = function (event) {
            var stage = event.$currentTarget;
            stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            if (this.contains(event.target)) {
                this.buttonReleased();
            }
            this.touchCaptured = false;
        };
        d(p, "hovered"
            /**
             * 指示鼠标指针是否位于按钮上。
             */
            ,function () {
                return this._hovered;
            }
            ,function (value) {
                if (value == this._hovered)
                    return;
                this._hovered = value;
                this.invalidateState();
                this.checkButtonDownConditions();
            }
        );
        /**
         * 开始抛出buttonDown事件
         */
        p.checkButtonDownConditions = function () {
            var isCurrentlyDown = this.isDown();
            if (this._downEventFired != isCurrentlyDown) {
                if (isCurrentlyDown) {
                    this.dispatchEvent(new eui.UIEvent(eui.UIEvent.BUTTON_DOWN));
                }
                this._downEventFired = isCurrentlyDown;
                this.checkAutoRepeatTimerConditions(isCurrentlyDown);
            }
        };
        d(p, "stickyHighlighting"
            /**
             * 如果为 false，则按钮会在用户按下它时显示其鼠标按下时的外观，但在用户将鼠标拖离它时将改为显示鼠标经过的外观。
             * 如果为 true，则按钮会在用户按下它时显示其鼠标按下时的外观，并在用户将鼠标拖离时继续显示此外观。
             */
            ,function () {
                return this._stickyHighlighting;
            }
            ,function (value) {
                if (value == this._stickyHighlighting)
                    return;
                this._stickyHighlighting = value;
                this.invalidateState();
                this.checkButtonDownConditions();
            }
        );
        /**
         * 按钮是否是按下的状态
         */
        p.isDown = function () {
            if (!this.enabled)
                return false;
            if (this.touchCaptured && (this.hovered || this.stickyHighlighting))
                return true;
            return false;
        };
        d(p, "autoRepeat"
            /**
             * 指定在用户按住鼠标按键时是否重复分派 buttonDown 事件。
             */
            ,function () {
                return this._autoRepeat;
            }
            ,function (value) {
                if (value == this._autoRepeat)
                    return;
                this._autoRepeat = value;
                this.checkAutoRepeatTimerConditions(this.isDown());
            }
        );
        /**
         * 检查需要启用还是关闭重发计时器
         */
        p.checkAutoRepeatTimerConditions = function (buttonDown) {
            var needsTimer = this.autoRepeat && buttonDown;
            var hasTimer = this.autoRepeatTimer != null;
            if (needsTimer == hasTimer)
                return;
            if (needsTimer)
                this.startTimer();
            this.stopTimer();
        };
        d(p, "repeatDelay"
            /**
             * 在第一个 buttonDown 事件之后，以及相隔每个 repeatInterval 重复一次 buttonDown 事件之前，需要等待的毫秒数。
             */
            ,function () {
                return this._repeatDelay;
            }
            ,function (value) {
                this._repeatDelay = value;
            }
        );
        d(p, "repeatInterval"
            /**
             * 用户在按钮上按住鼠标时，buttonDown 事件之间相隔的毫秒数。
             */
            ,function () {
                return this._repeatInterval;
            }
            ,function (value) {
                this._repeatInterval = value;
            }
        );
        /**
         * 启动重发计时器
         */
        p.startTimer = function () {
            this.autoRepeatTimer = new egret.Timer(1);
            this.autoRepeatTimer.delay = this._repeatDelay;
            this.autoRepeatTimer.addEventListener(egret.TimerEvent.TIMER, this.autoRepeat_timerDelayHandler, this);
            this.autoRepeatTimer.start();
        };
        /**
         * 停止重发计时器
         */
        p.stopTimer = function () {
            this.autoRepeatTimer.stop();
            this.autoRepeatTimer = null;
        };
        /**
         * 自动重发计时器首次延迟结束事件
         */
        p.autoRepeat_timerDelayHandler = function (event) {
            this.autoRepeatTimer.reset();
            this.autoRepeatTimer.removeEventListener(egret.TimerEvent.TIMER, this.autoRepeat_timerDelayHandler, this);
            this.autoRepeatTimer.delay = this._repeatInterval;
            this.autoRepeatTimer.addEventListener(egret.TimerEvent.TIMER, this.autoRepeat_timerHandler, this);
            this.autoRepeatTimer.start();
        };
        /**
         * 自动重发buttonDown事件
         */
        p.autoRepeat_timerHandler = function (event) {
            this.dispatchEvent(new eui.UIEvent(eui.UIEvent.BUTTON_DOWN));
        };
        p.onMouseRollOver = function (event) {
            if (event.buttonDown && !this.touchCaptured)
                return;
            this.hovered = true;
        };
        p.onMouseRollOut = function (event) {
            this.hovered = false;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getCurrentState = function () {
            if (!this.enabled)
                return "disabled";
            //            if(this.touchCaptured)
            //                return "down";
            if (this.isDown() || this._keepDown)
                return "down";
            if (this.hovered || this.touchCaptured)
                return "over";
            return "up";
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
            if (instance === this.labelDisplay) {
                this.labelDisplay.text = this._label;
            }
            else if (instance == this.iconDisplay) {
                this.iconDisplay.source = this._icon;
            }
        };
        /**
         * @language en_US
         * This method is called when handling a <code>egret.TouchEvent.TOUCH_END</code> event
         * when the user touches on the button. It is only called when the button
         * is the target and when <code>touchCaptured</code> is <code>true</code>.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 当在用户单击按钮之后处理 <code>egret.TouchEvent.TOUCH_END</code> 事件时，将调用此方法。
         * 仅当以按钮为目标，并且 <code>touchCaptured</code> 为 <code>true</code> 时，才会调用此方法。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.buttonReleased = function () {
        };
        return Button;
    })(eui.Component);
    eui.Button = Button;
    egret.registerClass(Button,'eui.Button');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ToggleButton component defines a toggle button.
     * Clicking the button toggles it between the up and an down states.
     * If you click the button while it is in the up state,
     * it toggles to the down state. You must click the button again
     * to toggle it back to the up state.
     * <p>You can get or set this state programmatically
     * by using the <code>selected</code> property.</p>
     *
     * @event egret.Event.CHANGE Dispatched when the <code>selected</code> property
     * changes for the ToggleButton control.
     * This event is dispatched only when the
     * user interacts with the control by touching.
     *
     * @state up Button up state
     * @state down Button down state
     * @state disabled Button disabled state
     * @state upAndSelected Up state when the button is selected
     * @state downAndSelected Down state when the button is selected
     * @state disabledAndSelected Disabled state when the button is selected
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ToggleButtonExample.ts
     */
    /**
     * @language zh_CN
     * ToggleButton 组件定义切换按钮。单击该按钮会在弹起状态和按下状态之间进行切换。
     * 如果在按钮处于弹起状态时单击该按钮，则它会切换到按下状态。必须再次单击该按钮才可将其切换回弹起状态。
     * <p>可以使用 <code>selected</code> 属性以编程方式获取或设置此状态。</p>
     *
     * @event egret.Event.CHANGE ToggleButtonBase 控件的 <code>selected</code> 属性更改时分派。
     * 仅当用户通过触摸与控件交互时，才分派此事件。
     *
     * @state up 按钮弹起状态
     * @state down 按钮按下状态
     * @state disabled 按钮禁用状态
     * @state upAndSelected 按钮选择时的弹起状态
     * @state downAndSelected 按钮选择时的按下状态
     * @state disabledAndSelected 按钮选择时的禁用状态
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ToggleButtonExample.ts
     */
    var ToggleButton = (function (_super) {
        __extends(ToggleButton, _super);
        function ToggleButton() {
            _super.apply(this, arguments);
            /**
             * @private
             */
            this.$selected = false;
            /**
             * @private
             * 是否根据触摸事件自动变换选中状态,默认true。仅框架内使用。
             */
            this.$autoSelected = true;
        }
        var c=ToggleButton,p=c.prototype;
        d(p, "selected"
            /**
             * @language en_US
             * Contains <code>true</code> if the button is in the down state,
             * and <code>false</code> if it is in the up state.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 按钮处于按下状态时为 <code>true</code>，而按钮处于弹起状态时为 <code>false</code>。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$selected;
            }
            ,function (value) {
                this.$setSelected(value);
            }
        );
        /**
         * @private
         *
         * @param value
         */
        p.$setSelected = function (value) {
            value = !!value;
            if (value === this.$selected)
                return false;
            this.$selected = value;
            this.invalidateState();
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selected");
            return true;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getCurrentState = function () {
            var state = _super.prototype.getCurrentState.call(this);
            if (!this.$selected) {
                return state;
            }
            else {
                var selectedState = state + "AndSelected";
                var skin = this.skin;
                if (skin && skin.hasState(selectedState)) {
                    return selectedState;
                }
                return state == "disabled" ? "disabled" : "down";
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.buttonReleased = function () {
            if (!this.$autoSelected)
                return;
            this.selected = !this.$selected;
            this.dispatchEventWith(egret.Event.CHANGE);
        };
        return ToggleButton;
    })(eui.Button);
    eui.ToggleButton = ToggleButton;
    egret.registerClass(ToggleButton,'eui.ToggleButton');
    eui.registerBindable(ToggleButton.prototype, "selected");
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     */
    var AutoToggleButton = (function (_super) {
        __extends(AutoToggleButton, _super);
        function AutoToggleButton() {
            _super.call(this);
            this.autoSelected = true;
            this.touchChildren = false;
            this.buttonMode = true;
        }
        var c=AutoToggleButton,p=c.prototype;
        p.buttonReleased = function () {
            if (!this.autoSelected)
                return;
            _super.prototype.buttonReleased.call(this);
        };
        return AutoToggleButton;
    })(eui.ToggleButton);
    eui.AutoToggleButton = AutoToggleButton;
    egret.registerClass(AutoToggleButton,'eui.AutoToggleButton');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="../core/uicomponent.ts" />
var eui;
(function (eui) {
    var UIImpl = eui.sys.UIComponentImpl;
    /**
     * @language en_US
     * BitmapLabel is one line or multiline uneditable BitmapText
     * @version Egret 2.5.3
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * BitmapLabel 组件是一行或多行不可编辑的位图文本
     * @version Egret 2.5.3
     * @version eui 1.0
     * @platform Web,Native
     */
    var BitmapLabel = (function (_super) {
        __extends(BitmapLabel, _super);
        function BitmapLabel(text) {
            _super.call(this);
            this.$createChildrenCalled = false;
            this.$fontChanged = false;
            /**
             * @private
             */
            this._widthConstraint = NaN;
            this._focusEnabled = false;
            this.initializeUIValues();
            this.text = text;
        }
        var c=BitmapLabel,p=c.prototype;
        /**
         * @private
         *
         */
        p.$invalidateContentBounds = function () {
            _super.prototype.$invalidateContentBounds.call(this);
            this.invalidateSize();
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setWidth = function (value) {
            var result1 = _super.prototype.$setWidth.call(this, value);
            var result2 = UIImpl.prototype.$setWidth.call(this, value);
            return result1 && result2;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setHeight = function (value) {
            var result1 = _super.prototype.$setHeight.call(this, value);
            var result2 = UIImpl.prototype.$setHeight.call(this, value);
            return result1 && result2;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setText = function (value) {
            var result = _super.prototype.$setText.call(this, value);
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "text");
            return result;
        };
        p.$setFont = function (value) {
            var values = this.$BitmapText;
            if (this.$font == value) {
                return false;
            }
            this.$font = value;
            if (this.$createChildrenCalled) {
                this.$parseFont();
            }
            else {
                this.$fontChanged = true;
            }
            this.$BitmapText[6 /* fontStringChanged */] = true;
            return true;
        };
        /**
         * 解析source
         */
        p.$parseFont = function () {
            this.$fontChanged = false;
            if (this.$font && typeof this.$font == "string") {
                var adapter = this.$stage.getImplementation("eui.IAssetAdapter");
                if (!adapter) {
                    adapter = new eui.DefaultAssetAdapter();
                }
                adapter.getAsset(this.$font, this.$onFontChanged, this);
            }
            else {
                this.$setFontData(this.$font);
            }
        };
        /**
         * 皮肤发生改变
         */
        p.$onFontChanged = function (bitmapFont, font) {
            if (font !== this.$font) {
                return;
            }
            this.$setFontData(bitmapFont);
        };
        p.$setFontData = function (value) {
            if (value == this.$BitmapText[5 /* font */]) {
                return false;
            }
            this.$BitmapText[5 /* font */] = value;
            this.$invalidateContentBounds();
            return true;
        };
        d(p, "focusEnabled"
            ,function () {
                return this._focusEnabled;
            }
            /**
            * @language en_US
            * FocusEnabled.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 焦点是否可用。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (v) {
                this._focusEnabled = v;
            }
        );
        /**
        * @language en_US
        * SetFocus.
        * @version Egret 2.4
        * @version eui 1.0
        * @platform Web,Native
        */
        /**
         * @language zh_CN
         * 设置焦点。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setFocus = function () {
            if (this.stage) {
                this.stage.focus = this;
            }
        };
        /**
         * @copy eui.UIComponent#createChildren
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            if (this.$fontChanged) {
                this.$parseFont();
            }
            this.$createChildrenCalled = true;
        };
        /**
         * @copy eui.UIComponent#childrenCreated
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.childrenCreated = function () {
        };
        /**
         * @copy eui.UIComponent#commitProperties
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
        };
        /**
         * @copy eui.UIComponent#measure
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            var values = this.$UIComponent;
            var textValues = this.$BitmapText;
            var oldWidth = textValues[0 /* textFieldWidth */];
            var availableWidth = NaN;
            if (!isNaN(this._widthConstraint)) {
                availableWidth = this._widthConstraint;
                this._widthConstraint = NaN;
            }
            else if (!isNaN(values[8 /* explicitWidth */])) {
                availableWidth = values[8 /* explicitWidth */];
            }
            else if (values[13 /* maxWidth */] != 100000) {
                availableWidth = values[13 /* maxWidth */];
            }
            _super.prototype.$setWidth.call(this, availableWidth);
            this.setMeasuredSize(this.textWidth, this.textHeight);
            _super.prototype.$setWidth.call(this, oldWidth);
        };
        /**
         * @copy eui.UIComponent#updateDisplayList
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.$setWidth.call(this, unscaledWidth);
            _super.prototype.$setHeight.call(this, unscaledHeight);
        };
        /**
         * @copy eui.UIComponent#invalidateParentLayout
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateParentLayout = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setMeasuredSize = function (width, height) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateSize = function (recursive) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateNow = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
            UIImpl.prototype.setLayoutBoundsSize.call(this, layoutWidth, layoutHeight);
            if (isNaN(layoutWidth) || layoutWidth === this._widthConstraint || layoutWidth == 0) {
                return;
            }
            var values = this.$UIComponent;
            if (!isNaN(values[9 /* explicitHeight */])) {
                return;
            }
            if (layoutWidth == values[16 /* measuredWidth */]) {
                return;
            }
            this._widthConstraint = layoutWidth;
            this.invalidateSize();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsPosition = function (x, y) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getLayoutBounds = function (bounds) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getPreferredBounds = function (bounds) {
        };
        return BitmapLabel;
    })(egret.BitmapText);
    eui.BitmapLabel = BitmapLabel;
    egret.registerClass(BitmapLabel,'eui.BitmapLabel',["eui.UIComponent","eui.IDisplayText"]);
    eui.sys.implementUIComponent(BitmapLabel, egret.BitmapText);
    eui.registerBindable(BitmapLabel.prototype, "text");
})(eui || (eui = {}));
var eui;
(function (eui) {
    var BoxContainer = (function (_super) {
        __extends(BoxContainer, _super);
        function BoxContainer(_isDoc) {
            if (_isDoc === void 0) { _isDoc = false; }
            _super.call(this);
            this._elementId = -1;
            this._isDoc = false;
            /**
             * 拖拽的TabPanel索引，如果为-1则表示拖拽TabGroup
             */
            this.dragingIndex = -1;
            this.oldMouseChildren = false;
            this.dragShape = new egret.Shape();
            this.dragMoved = false;
            this.insertPosition = "";
            this.dropIndex = -1;
            this.reorderOnly = false;
            this._isFirstElement = true;
            this._defaultWidth = 250;
            this._defaultHeight = 250;
            this._minimized = false;
            this.explicitVisible = true;
            this.offsetX = 0;
            this.offsetY = 0;
            this.firstHasDoc = false;
            this.secondHasDoc = false;
            this.isVertical = false;
            this._gap = -1;
            this.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onMouseDown, this);
            this._isDoc = _isDoc;
        }
        var c=BoxContainer,p=c.prototype;
        d(p, "elementId"
            ,function () {
                return this._elementId;
            }
            ,function (value) {
                this._elementId = value;
            }
        );
        d(p, "isDoc"
            /**
             * 作为文档区域的标志
             */
            ,function () {
                return this._isDoc;
            }
            ,function (value) {
                this._isDoc = value;
            }
        );
        /**
         * 鼠标按下事件
         */
        p.onMouseDown = function (event) {
            var target = event.target;
            if (this._documentBox && this._documentBox.contains(target))
                return;
            if (egret.is(target, "eui.Separator")) {
                this.startResizePanel(target);
            }
            else {
                var tabGroup;
                var tabButton;
                while (target && target != this) {
                    if (egret.is(target, "eui.IItemRenderer")) {
                        tabButton = target;
                    }
                    if (egret.is(target, "eui.TabGroup")) {
                        tabGroup = target;
                        break;
                    }
                    target = target.parent;
                }
                if (tabGroup) {
                    target = event.target;
                    if (tabGroup.titleTabBar && tabGroup.titleTabBar.contains(target)) {
                        if (tabButton) {
                            this.startDragPanel(tabGroup, tabButton.itemIndex);
                        }
                    }
                    else if (tabGroup.moveArea) {
                        if (tabGroup.moveArea == target || ((egret.is(tabGroup.moveArea, "egret.DisplayObjectContainer")) && (tabGroup.moveArea).contains(target))) {
                            this.startDragPanel(tabGroup, -1);
                        }
                    }
                }
            }
        };
        /**
         * 开始拖拽
         */
        p.startDragPanel = function (target, index) {
            if (index === void 0) { index = -1; }
            if (this._documentBox) {
                this.oldMouseChildren = this._documentBox.touchChildren;
                this._documentBox.touchChildren = false;
            }
            this.dragingTabGroup = target;
            this.dragingIndex = index;
            var point = this.localToGlobal(0, 0);
            this.dragShape.x = point.x;
            this.dragShape.y = point.y;
            this.stage.addChild(this.dragShape);
            this.startPoint = new egret.Point(this.stage.mouseX, this.stage.mouseY);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.onDragMouseMove, this);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.onDragMouseUp, this);
            //            this.stage.addEventListener(egret.Event.MOUSE_LEAVE,this.onDragMouseUp,this);
            this.stage.addEventListener(egret.MouseEvent.RIGHT_MOUSE_UP, this.onDragMouseUp, this);
        };
        /**
         * 拖拽窗口完成
         */
        p.onDragMouseUp = function (event) {
            event.currentTarget.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.onDragMouseMove, this);
            event.currentTarget.removeEventListener(egret.MouseEvent.MOUSE_UP, this.onDragMouseUp, this);
            event.currentTarget.removeEventListener(egret.MouseEvent.RIGHT_MOUSE_UP, this.onDragMouseUp, this);
            if (this._documentBox) {
                this._documentBox.touchChildren = this.oldMouseChildren;
            }
            var oldParentGroup;
            if (this.dragingIndex > -1) {
                oldParentGroup = this.dragingTabGroup;
                if (this.relativeBox == oldParentGroup || oldParentGroup.numElements > 1) {
                    oldParentGroup = null;
                }
            }
            if (this.insertPosition) {
                var tabGroup = this.dragingTabGroup;
                if (this.dragingIndex > -1) {
                    var className = egret.getQualifiedClassName(this.dragingTabGroup);
                    var clazz = egret.getDefinitionByName(className);
                    if (this.instanceFunc) {
                        tabGroup = this.instanceFunc(clazz);
                    }
                    else {
                        tabGroup = new clazz();
                    }
                    var panel = this.dragingTabGroup.getElementAt(this.dragingIndex);
                    tabGroup.addElement(panel);
                    var boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.DRAG_PANEL_OUT);
                    boxContainerEvent.fromPanel = panel;
                    boxContainerEvent.fromPanelIndex = this.dragingIndex;
                    boxContainerEvent.toGroup = tabGroup;
                    this.dispatchEvent(boxContainerEvent);
                }
                tabGroup.width = NaN;
                tabGroup.height = NaN;
                this.relativeBox.width = NaN;
                this.relativeBox.height = NaN;
                this.addElementAt(tabGroup, this.relativeBox, this.insertPosition);
                boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.DRAG_GROUP_MOVED);
                boxContainerEvent.fromGroup = tabGroup;
                boxContainerEvent.toGroup = this.relativeBox;
                boxContainerEvent.toGroupPosititon = this.insertPosition;
                this.dispatchEvent(boxContainerEvent);
                boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.BOX_DRAG_COMPLETE);
                this.dispatchEvent(boxContainerEvent);
            }
            else if (this.dropIndex >= 0) {
                if (this.dragingIndex > -1) {
                    panel = this.dragingTabGroup.getElementAt(this.dragingIndex);
                    this.relativeBox.addElementAt(panel, this.dropIndex);
                    this.relativeBox.selectedIndex = this.dropIndex;
                    boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.DRAG_PANEL_MOVED);
                    boxContainerEvent.fromPanel = panel;
                    boxContainerEvent.fromPanelIndex = this.dragingIndex;
                    boxContainerEvent.fromGroup = this.dragingTabGroup;
                    boxContainerEvent.toPanel = panel;
                    boxContainerEvent.toPanelIndex = this.dropIndex;
                    boxContainerEvent.toGroup = this.relativeBox;
                    this.dispatchEvent(boxContainerEvent);
                    boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.BOX_DRAG_COMPLETE);
                    this.dispatchEvent(boxContainerEvent);
                }
                else if (this.dragingTabGroup != this.relativeBox) {
                    while (this.dragingTabGroup.numElements > 0) {
                        this.relativeBox.addElement(this.dragingTabGroup.removeElementAt(0));
                    }
                    boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.DRAG_GROUP_IN);
                    boxContainerEvent.fromGroup = this.dragingTabGroup;
                    boxContainerEvent.toGroup = this.relativeBox;
                    this.dispatchEvent(boxContainerEvent);
                    boxContainerEvent = new eui.BoxContainerEvent(eui.BoxContainerEvent.BOX_DRAG_COMPLETE);
                    this.dispatchEvent(boxContainerEvent);
                    oldParentGroup = this.dragingTabGroup;
                }
            }
            else {
                oldParentGroup = null;
            }
            if (oldParentGroup) {
                this.removeElement(oldParentGroup);
            }
            this.dragingTabGroup = null;
            this.dragingIndex = -1;
            this.relativeBox = null;
            this.lastRect = null;
            this.insertPosition = "";
            this.dropIndex = -1;
            this.dragShape.graphics.clear();
            this.stage.removeChild(this.dragShape);
        };
        p.onDragMouseMove = function (event) {
            if (this.dragMoved)
                return;
            if (this.startPoint) {
                if (this.startPoint.subtract(new egret.Point(event.stageX, event.stageY)).length > 2)
                    this.startPoint = null;
                else
                    return;
            }
            this.dragMoved = true;
            this.invalidateProperties();
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.dragMoved) {
                this.dragMoved = false;
                this.redrawDragShape();
            }
        };
        p.redrawDragShape = function () {
            this.insertPosition = "";
            this.dropIndex = -1;
            var g = this.dragShape.graphics;
            g.clear();
            var lenght = this.numChildren;
            var child;
            var rect;
            var curX = this.mouseX;
            var curY = this.mouseY;
            if (curX >= 0 && curX <= this.width && curY >= -2 && curY <= this.height) {
                for (var i = 0; i < lenght; i++) {
                    child = this.getChildAt(i);
                    if (egret.is(child, "eui.Separator")) {
                        continue;
                    }
                    if (child.x <= curX && child.x + child.width >= curX && child.y - 2 <= curY && child.y + child.height >= curY) {
                        rect = new egret.Rectangle(child.x, child.y, child.width, child.height);
                        break;
                    }
                }
                if (!rect)
                    return;
                var innerRect = rect.clone();
                this.relativeBox = child;
                if (egret.is(child, "eui.TabGroup")) {
                    var tabRect;
                    var tabGroup = child;
                    if (this.dragingIndex > -1) {
                        tabRect = this.getTabRectUnderMouse(tabGroup);
                    }
                    if (tabRect) {
                        rect = tabRect;
                    }
                    else if (this.dragingTabGroup && !this.reorderOnly) {
                        innerRect.inflate(-BoxContainer.EDGE_SIZE, -BoxContainer.EDGE_SIZE);
                        if ((tabGroup.numElements > 1 && this.dragingIndex > -1 || tabGroup != this.dragingTabGroup) && !innerRect.contains(curX, curY)) {
                            this.adjustRect(rect, innerRect, curX, curY, 0.5);
                        }
                        else if (tabGroup != this.dragingTabGroup) {
                            this.dropIndex = tabGroup.numElements;
                        }
                    }
                }
                else {
                    innerRect.inflate(-rect.width * 0.5, -rect.height * 0.5);
                    this.adjustRect(rect, innerRect, curX, curY, 0.25);
                }
                if (!rect)
                    return;
            }
            else {
                this.relativeBox = this._rootBox;
                rect = new egret.Rectangle(0, 0, this.width, this.height);
                var fraction = 0.5;
                if (this._documentBox)
                    fraction = 0.25;
                if (this.numChildren > 1)
                    this.adjustRect(rect, rect.clone(), curX, curY, fraction);
            }
            this.lastRect = rect;
            g.lineStyle(2, 0x396895);
            g.drawRect(rect.x, rect.y, rect.width, rect.height);
            g.endFill();
        };
        p.adjustRect = function (rect, innerRect, curX, curY, fraction) {
            if (curX < innerRect.x && curY > curX - rect.x + rect.y && curY < -curX + rect.x + rect.bottom) {
                this.insertPosition = eui.AddPosition.LEFT;
                rect.width *= fraction;
            }
            else if (curX > innerRect.right && curY > -curX + rect.right + rect.y && curY < curX + rect.bottom - rect.right) {
                this.insertPosition = eui.AddPosition.RIGHT;
                rect.x += rect.width * (1 - fraction);
                rect.width *= fraction;
            }
            else if (curY < innerRect.y && curY < curX - rect.x + rect.y && curY < -curX + rect.right + rect.y) {
                this.insertPosition = eui.AddPosition.TOP;
                rect.height *= fraction;
            }
            else {
                this.insertPosition = eui.AddPosition.BOTTOM;
                rect.y += rect.height * (1 - fraction);
                rect.height *= fraction;
            }
        };
        p.getTabRectUnderMouse = function (tabGroup) {
            var rect;
            var target = this.stage.$hitTest(this.stage.mouseX, this.stage.mouseY);
            if (!target)
                return null;
            var button;
            var pos;
            if (tabGroup.titleTabBar && tabGroup.titleTabBar.contains(target)) {
                while (target && target != tabGroup) {
                    if (egret.is(target, "eui.IItemRenderer")) {
                        this.dropIndex = target.itemIndex;
                    }
                    target = target.parent;
                }
                button = tabGroup.titleTabBar.getChildAt(this.dropIndex);
                pos = button.localToGlobal(0, 0);
                pos = this.globalToLocal(pos.x, pos.y);
                rect = new egret.Rectangle(pos.x, pos.y, button.width, button.height);
            }
            else if (tabGroup.moveArea && this.reorderOnly) {
                if (tabGroup.moveArea == target || egret.is(tabGroup.moveArea, "egret.DisplayObjectContainer") && tabGroup.moveArea.contains(target)) {
                    this.dropIndex = tabGroup.numElements - 1;
                    button = tabGroup.titleTabBar.getChildAt(this.dropIndex);
                    if (egret.is(button, "eui.ItemRenderer")) {
                        pos = button.localToGlobal(0, 0);
                        pos = this.globalToLocal(pos.x, pos.y);
                        rect = new egret.Rectangle(pos.x, pos.y, button.width, button.height);
                        if (tabGroup != this.dragingTabGroup) {
                            this.dropIndex++;
                            rect.x += button.width;
                            rect.width = 30;
                        }
                    }
                }
            }
            return rect;
        };
        d(p, "ownerBox"
            /**
             * 所属的盒式容器
             */
            ,function () {
                return this._ownerBox;
            }
            ,function (value) {
                this._ownerBox = value;
            }
        );
        d(p, "isFirstElement"
            /**
             * 是否作为父级的第一个元素
             */
            ,function () {
                return this._isFirstElement;
            }
            ,function (value) {
                this._isFirstElement = value;
            }
        );
        p.setLayoutSize = function (width, height) {
            _super.prototype.setLayoutBoundsSize.call(this, width, height);
        };
        d(p, "defaultWidth"
            /**
             * 默认宽度
             */
            ,function () {
                return this._defaultWidth;
            }
            ,function (value) {
                this._defaultWidth = value;
            }
        );
        d(p, "defaultHeight"
            /**
             * 默认高度
             */
            ,function () {
                return this._defaultHeight;
            }
            ,function (value) {
                this._defaultHeight = value;
            }
        );
        d(p, "parentBox"
            ,function () {
                return this._parentBox;
            }
        );
        d(p, "minimized"
            /**
             * 是否处于最小化状态
             */
            ,function () {
                return this._minimized;
            }
            ,function (value) {
                if (this._minimized == value)
                    return;
                this._minimized = value;
                var oldVisible = egret.superGetter(eui.BoxContainer, this, "visible");
                if (value)
                    egret.superSetter(eui.BoxContainer, this, "visible", false);
                else
                    egret.superSetter(eui.BoxContainer, this, "visible", false, this.explicitVisible);
                if (this.visible != oldVisible) {
                    this.dispatchEvent(new egret.Event("visibleChanged"));
                }
            }
        );
        d(p, "visible"
            ,function () {
                return egret.superGetter(eui.BoxContainer, this, "visible");
            }
            ,function (value) {
                this.explicitVisible = value;
                if (egret.superGetter(eui.BoxContainer, this, "visible") == value)
                    return;
                egret.superSetter(eui.BoxContainer, this, "visible", value);
                this.dispatchEvent(new egret.Event("visibleChanged"));
            }
        );
        p.parentBoxChanged = function (box, checkOldParent) {
            if (checkOldParent === void 0) { checkOldParent = true; }
            if (checkOldParent && this._parentBox) {
                if (this.isFirstElement)
                    this._parentBox.firstElement = null;
                else
                    this._parentBox.secondElement = null;
            }
            this._parentBox = box;
        };
        /**
         * 在根节点旁添加一个盒式元素
         * @param box 要添加的盒式元素
         * @param position 插入位置，只能从容器的四个边缘插入元素。请使用AddPosition定义的常量。
         */
        p.addElement = function (box, position) {
            if (position === void 0) { position = "right"; }
            if (!box || box == this._rootBox)
                return box;
            if (box.ownerBox)
                box.ownerBox.removeElement(box);
            if (this._rootBox) {
                this.addElementAt(box, this._rootBox, position);
            }
            else {
                this._rootBox = box;
                this.addBoxElement(box);
            }
            this.invalidateDisplayList();
            return box;
        };
        /**
         * 添加盒式元素到指定位置
         * @param box 要添加的盒式元素
         * @param relativeBox 要与之共享盒子的元素。
         * @param position 插入的位置,只能从容器的四个边缘插入元素。请使用AddPosition定义的常量。
         */
        p.addElementAt = function (box, relativeBox, position) {
            if (position === void 0) { position = "right"; }
            if (!box || box == relativeBox)
                return box;
            if (box.parentBox == relativeBox) {
                relativeBox = box.isFirstElement ? relativeBox.secondElement : relativeBox.firstElement;
            }
            if (egret.is(box.ownerBox, "eui.BoxContainer"))
                box.ownerBox.removeElement(box);
            var newBox;
            var isFirst = relativeBox.isFirstElement;
            var parentBox = relativeBox.parentBox;
            if (!parentBox && relativeBox != this._rootBox)
                return box;
            switch (position) {
                case eui.AddPosition.TOP:
                    newBox = new eui.BoxElement(true);
                    newBox.elementId = eui.BoxElementIdUtil.newId();
                    newBox.firstElement = box;
                    newBox.secondElement = relativeBox;
                    break;
                case eui.AddPosition.BOTTOM:
                    newBox = new eui.BoxElement(true);
                    newBox.elementId = eui.BoxElementIdUtil.newId();
                    newBox.firstElement = relativeBox;
                    newBox.secondElement = box;
                    break;
                case eui.AddPosition.LEFT:
                    newBox = new eui.BoxElement();
                    newBox.elementId = eui.BoxElementIdUtil.newId();
                    newBox.firstElement = box;
                    newBox.secondElement = relativeBox;
                    break;
                default:
                    newBox = new eui.BoxElement();
                    newBox.elementId = eui.BoxElementIdUtil.newId();
                    newBox.firstElement = relativeBox;
                    newBox.secondElement = box;
                    break;
            }
            if (relativeBox == this._rootBox)
                this._rootBox = newBox;
            else if (isFirst)
                parentBox.firstElement = newBox;
            else
                parentBox.secondElement = newBox;
            this.addBoxElement(box);
            newBox.ownerBox = this;
            this.initSeparator(newBox.separator);
            this.invalidateDisplayList();
            return box;
        };
        /**
         * 移除一个盒式元素
         */
        p.removeElement = function (box) {
            if (!box)
                return box;
            if (box == this._rootBox) {
                this._rootBox = null;
            }
            else if (!box.parentBox) {
                return box;
            }
            else {
                var parentBox = box.parentBox;
                var remainBox;
                if (box.isFirstElement)
                    remainBox = parentBox.secondElement;
                else
                    remainBox = parentBox.firstElement;
                if (parentBox == this._rootBox) {
                    this._rootBox = remainBox;
                }
                else {
                    if (parentBox.isFirstElement)
                        parentBox.parentBox.firstElement = remainBox;
                    else
                        parentBox.parentBox.secondElement = remainBox;
                }
                parentBox.ownerBox = null;
                this.destorySeparator(parentBox.separator);
            }
            this.removeBoxElement(box);
            this.invalidateDisplayList();
            if (egret.is(box, "eui.TabGroup")) {
            }
            return box;
        };
        /**
         * 添加元素到显示列表
         */
        p.addBoxElement = function (box) {
            if (box) {
                if (egret.is(box, "egret.IEventDispatcher"))
                    box.addEventListener("visibleChanged", this.onVisibleChanged, this);
                box.ownerBox = this;
            }
            if (egret.is(box, "egret.DisplayObject")) {
                if (box.parent && egret.is(box.parent, "eui.Group")) {
                    box.parent.removeChild(box);
                }
                this.addChild(box);
            }
            else if (egret.is(box, "eui.BoxElement")) {
                this.addBoxElement(box.firstElement);
                this.addBoxElement(box.secondElement);
                this.initSeparator(box.separator);
            }
            //强制修改组件应用属性顺序后,会使得被移除面板的组件在添加面板的组件之后应用属性,会强制设置该面板的visble=false
            // if (egret.is(box, "eui.TabGroup")) {
            //     (<eui.TabGroup>box).validateNow();
            // }
        };
        /**
         * 子项visible属性发生改变
         */
        p.onVisibleChanged = function (event) {
            this.invalidateDisplayList();
        };
        /**
         * 初始化分隔符
         */
        p.initSeparator = function (separator) {
            this.addChild(separator);
        };
        /**
         * 从显示列表移除元素
         */
        p.removeBoxElement = function (box) {
            if (box) {
                box.removeEventListener("visibleChanged", this.onVisibleChanged, this);
                box.ownerBox = null;
            }
            if (egret.is(box, "egret.DisplayObject")) {
                if (box.parent == this) {
                    this.removeChild(box);
                }
            }
            else if (egret.is(box, "eui.BoxElement")) {
                this.removeBoxElement((box).firstElement);
                this.removeBoxElement((box).secondElement);
                this.destorySeparator((box).separator);
            }
        };
        /**
         * 销毁分隔符
         */
        p.destorySeparator = function (separator) {
            this.removeChild(separator);
        };
        /**
         * 鼠标按下
         */
        p.startResizePanel = function (separator) {
            this.curBox = separator.target;
            this.firstHasDoc = this.hasDocument(separator.target.firstElement);
            this.secondHasDoc = this.hasDocument(separator.target.secondElement);
            this.isVertical = separator.target.isVertical;
            this.offsetX = separator.x - this.stage.mouseX;
            this.offsetY = separator.y - this.stage.mouseY;
            this.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.onMouseMove, this);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.onMouseUp, this);
            this.stage.addEventListener(egret.MouseEvent.RIGHT_MOUSE_UP, this.onMouseUp, this);
            this.touchChildren = false;
        };
        p.onMouseUp = function (event) {
            this.curBox = null;
            this.touchChildren = true;
            event.currentTarget.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.onMouseMove, this);
            event.currentTarget.removeEventListener(egret.MouseEvent.MOUSE_UP, this.onMouseUp, this);
            event.currentTarget.removeEventListener(egret.MouseEvent.RIGHT_MOUSE_UP, this.onMouseUp, this);
            this.dispatchEvent(new eui.BoxContainerEvent(eui.BoxContainerEvent.BOX_DRAG_COMPLETE));
        };
        /**
         * 调整盒子元素大小
         */
        p.onMouseMove = function (event) {
            if (!this.curBox.firstElement || !this.curBox.secondElement)
                return;
            var offset = 0;
            var first = this.curBox.firstElement;
            var second = this.curBox.secondElement;
            var firstHasDoc = this.hasDocument(first);
            var secondHasDoc = this.hasDocument(second);
            var firstH = 0;
            var firstW = 0;
            var secondH = 0;
            var secondW = 0;
            if (this.isVertical) {
                offset = Math.round(this.offsetY + event.stageY - this.curBox.separator.y);
                firstH = Math.min(first.height + offset, this.curBox.height - this._gap - eui.BoxContainer.MIN_SIZE);
                firstH = Math.max(eui.BoxContainer.MIN_SIZE, firstH);
                if (secondHasDoc)
                    first.defaultHeight = firstH;
                if (isNaN(first.explicitHeight))
                    first.setLayoutSize(first.width, firstH);
                else
                    this.setExplicitHeight(first, firstH);
                secondH = Math.max(eui.BoxContainer.MIN_SIZE, this.curBox.height - firstH - this._gap);
                if (firstHasDoc)
                    second.defaultHeight = secondH;
                if (isNaN(second.explicitHeight))
                    second.setLayoutSize(second.width, secondH);
                else
                    this.setExplicitHeight(second, secondH);
                this.curBox.percentSize = firstH / this.curBox.height;
            }
            else {
                offset = Math.round(this.offsetX + event.stageX - this.curBox.separator.x);
                firstW = Math.min(first.width + offset, this.curBox.width - this._gap - eui.BoxContainer.MIN_SIZE);
                firstW = Math.max(eui.BoxContainer.MIN_SIZE, firstW);
                if (secondHasDoc)
                    first.defaultWidth = firstW;
                if (isNaN(first.explicitWidth))
                    first.setLayoutSize(firstW, first.height);
                else
                    this.setExplicitWidth(first, firstW);
                secondW = Math.max(eui.BoxContainer.MIN_SIZE, this.curBox.width - firstW - this._gap);
                if (firstHasDoc)
                    second.defaultWidth = secondW;
                if (isNaN(second.explicitWidth))
                    second.setLayoutSize(secondW, second.height);
                else
                    this.setExplicitWidth(second, secondW);
                this.curBox.percentSize = firstW / this.curBox.width;
            }
            this.updateChildElement(this.curBox);
            this.validateNow();
            event.updateAfterEvent();
        };
        p.setExplicitWidth = function (box, w) {
            var tab = box;
            if (tab && egret.is(tab, "eui.TabGroup") && isNaN(tab.$explicitWidth)) {
                tab.selectedPanel.width = w;
                tab.setLayoutSize(w, tab.height);
            }
            else {
                box.width = w;
            }
        };
        p.setExplicitHeight = function (box, h) {
            var tab = box;
            if (tab && egret.is(tab, "eui.TabGroup") && isNaN(tab.$explicitHeight)) {
                tab.selectedPanel.height = h;
                tab.setLayoutSize(tab.width, h);
            }
            else {
                box.height = h;
            }
        };
        d(p, "documentBox"
            ,function () {
                return this._documentBox;
            }
            ,function (value) {
                if (this._documentBox == value)
                    return;
                if (this._documentBox) {
                    this.removeElement(this._documentBox);
                }
                this._documentBox = value;
                this.addElement(this._documentBox);
                this.invalidateDisplayList();
            }
        );
        d(p, "rootBox"
            /**
             * 容器根元素
             */
            ,function () {
                return this._rootBox;
            }
        );
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            if (this._rootBox) {
                this._rootBox.setLayoutSize(unscaledWidth, unscaledHeight);
                this._rootBox.x = 0;
                this._rootBox.y = 0;
                this.updateChildElement(this._rootBox);
            }
        };
        d(p, "gap"
            /**
             * 布局元素之间的间距
             */
            ,function () {
                return this._gap;
            }
            ,function (value) {
                if (this._gap == value)
                    return;
                this._gap = value;
                this.invalidateDisplayList();
            }
        );
        /**
         * 更新子项的尺寸和位置
         */
        p.updateChildElement = function (child) {
            var box = child;
            if (!box || !box.firstElement || !box.secondElement || !egret.is(box, "eui.BoxElement"))
                return;
            if (!box.firstElement.visible || !box.secondElement.visible)
                box.separator.visible = false;
            else
                box.separator.visible = true;
            box.firstElement.x = box.secondElement.x = box.x;
            box.firstElement.y = box.secondElement.y = box.y;
            var firstResizable = this.hasDocument(box.firstElement);
            var secondResizable = this.hasDocument(box.secondElement);
            var firstH = 0;
            var firstW = 0;
            var secondH = 0;
            var secondW = 0;
            var separator = box.separator;
            var firstMinSize = 0;
            var secondMinSize = 0;
            if (!box.firstElement.visible && box.secondElement.visible) {
                secondH = box.height;
                secondW = box.width;
            }
            if (!box.firstElement.visible && box.secondElement.visible) {
                firstH = box.height;
                firstW = box.width;
            }
            else if (box.secondElement.visible && box.firstElement.visible) {
                if (box.isVertical) {
                    if (!firstResizable && !secondResizable) {
                        firstResizable = isNaN(box.firstElement.explicitHeight);
                        secondResizable = isNaN(box.secondElement.explicitHeight);
                        if (firstResizable && secondResizable)
                            firstResizable = secondResizable = false;
                    }
                    firstMinSize = (egret.is(box.firstElement, "eui.BoxElement")) && (box.firstElement).isVertical ? 2 * eui.BoxContainer.MIN_SIZE : eui.BoxContainer.MIN_SIZE;
                    secondMinSize = (egret.is(box.secondElement, "eui.BoxElement")) && (box.secondElement).isVertical ? 2 * eui.BoxContainer.MIN_SIZE : eui.BoxContainer.MIN_SIZE;
                    var isBoxElement = egret.is(box.firstElement, "eui.BoxElement");
                    firstW = secondW = box.width;
                    separator.x = box.x;
                    separator.width = box.width;
                    separator.height = 3;
                    if (firstResizable) {
                        secondH = Math.ceil(box.secondElement.explicitHeight);
                        if (isNaN(secondH)) {
                            secondH = Math.ceil(box.secondElement.defaultHeight);
                        }
                        firstH = Math.max(firstMinSize, box.height - secondH - this._gap);
                        secondH = Math.max(secondMinSize, box.height - firstH - this._gap);
                    }
                    else if (secondResizable) {
                        firstH = Math.ceil(box.firstElement.explicitHeight);
                        if (isNaN(firstH)) {
                            firstH = Math.ceil(box.firstElement.defaultHeight);
                        }
                        secondH = Math.max(secondMinSize, box.height - firstH - this._gap);
                        firstH = Math.max(firstMinSize, box.height - secondH - this._gap);
                    }
                    else {
                        if (!isNaN(box.firstElement.explicitHeight)) {
                            firstH = Math.max(eui.BoxContainer.MIN_SIZE, box.firstElement.explicitHeight);
                        }
                        else {
                            firstH = Math.ceil(box.height * box.percentSize);
                        }
                        secondH = box.height - firstH - this._gap;
                    }
                    box.secondElement.y += firstH + this._gap;
                    separator.y = box.secondElement.y - 1;
                }
                else {
                    if (!firstResizable && !secondResizable) {
                        firstResizable = isNaN(box.firstElement.explicitWidth);
                        secondResizable = isNaN(box.secondElement.explicitWidth);
                        if (firstResizable && secondResizable)
                            firstResizable = secondResizable = false;
                    }
                    firstMinSize = (egret.is(box.firstElement, "eui.BoxElement")) && (box.firstElement).isVertical ? 2 * eui.BoxContainer.MIN_SIZE : eui.BoxContainer.MIN_SIZE;
                    secondMinSize = (egret.is(box.secondElement, "eui.BoxElement")) && (box.secondElement).isVertical ? 2 * eui.BoxContainer.MIN_SIZE : eui.BoxContainer.MIN_SIZE;
                    firstH = secondH = box.height;
                    separator.y = box.y;
                    separator.height = box.height;
                    separator.width = 3;
                    if (firstResizable) {
                        secondW = Math.ceil(box.secondElement.explicitWidth);
                        if (isNaN(secondW)) {
                            secondW = Math.ceil(box.secondElement.defaultWidth);
                        }
                        firstW = Math.max(firstMinSize, box.width - secondW - this._gap);
                        secondW = Math.max(secondMinSize, box.width - firstW - this._gap);
                    }
                    else if (secondResizable) {
                        firstW = Math.ceil(box.firstElement.explicitWidth);
                        if (isNaN(firstW)) {
                            firstW = Math.ceil(box.firstElement.defaultWidth);
                        }
                        secondW = Math.max(secondMinSize, box.width - firstW - this._gap);
                        firstW = Math.max(firstMinSize, box.width - secondW - this._gap);
                    }
                    else {
                        if (!isNaN(box.firstElement.explicitWidth)) {
                            firstW = Math.max(eui.BoxContainer.MIN_SIZE, box.firstElement.explicitWidth);
                        }
                        else {
                            firstW = Math.ceil(box.width * box.percentSize);
                        }
                        secondW = box.width - firstW - this._gap;
                    }
                    box.secondElement.x += firstW + this._gap;
                    separator.x = box.secondElement.x - 1;
                }
            }
            box.firstElement.setLayoutSize(firstW, firstH);
            box.secondElement.setLayoutSize(secondW, secondH);
            this.updateChildElement(box.firstElement);
            this.updateChildElement(box.secondElement);
        };
        /**
         * 检查指定的元素是否包含或等于documentBox
         */
        p.hasDocument = function (box) {
            var doc = this.documentBox;
            while (doc) {
                if (box == doc)
                    return true;
                doc = doc.parentBox;
            }
            return false;
        };
        BoxContainer.EDGE_SIZE = 21;
        /**
         * 缩放时的最小尺寸
         */
        BoxContainer.MIN_SIZE = 21;
        return BoxContainer;
    })(eui.Group);
    eui.BoxContainer = BoxContainer;
    egret.registerClass(BoxContainer,'eui.BoxContainer',["eui.UIComponent","eui.IBoxElement","egret.IEventDispatcher"]);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The CheckBox component consists of an optional label and a small box
     * that can contain a check mark or not.<p/>
     *
     * When a user clicks a CheckBox component or its associated text,
     * the CheckBox component sets its <code>selected</code> property
     * to <code>true</code> for checked, and to <code>false</code> for unchecked.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/CheckboxExample.ts
     */
    /**
     * @language zh_CN
     * CheckBox 组件包含一个可选标签和一个小方框，该方框内可以包含/不包含复选标记。<p/>
     * 用户单击 CheckBox 组件或其关联文本时，CheckBox 组件会将其 selected 属性设置为 true（表示选中）或 false（表示取消选中）。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/CheckboxExample.ts
     */
    var CheckBox = (function (_super) {
        __extends(CheckBox, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个CheckBox
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function CheckBox() {
            _super.call(this);
        }
        var c=CheckBox,p=c.prototype;
        return CheckBox;
    })(eui.ToggleButton);
    eui.CheckBox = CheckBox;
    egret.registerClass(CheckBox,'eui.CheckBox');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var ColorPicker = (function (_super) {
        __extends(ColorPicker, _super);
        function ColorPicker() {
            _super.call(this);
            this._liveChange = false;
            this._currentColor = 0x009Aff;
            this._defaultColor = 0x009aff;
            var _self__ = this;
            this.touchChildren = false;
            _self__.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClick, this);
        }
        var c=ColorPicker,p=c.prototype;
        d(p, "liveChange"
            ,function () {
                return this._liveChange;
            }
            ,function (value) {
                this._liveChange = value;
            }
        );
        p.onClick = function (event) {
            if (!this.colorWindow)
                this.colorWindow = new eui.ColorWindow();
            this.colorWindow.pickerTarget = this.stage;
            this.colorWindow.skinName = "skins.WinColorWindowSkin";
            this.colorWindow.liveChange = this.liveChange;
            this.colorWindow.currentColor = this._currentColor;
            this.colorWindow.lastColor = this._currentColor;
            this.colorWindow.defaultColor = this._defaultColor;
            this.colorWindow.addEventListener(egret.Event.CHANGE, this.onColorPicked, this);
            this.colorWindow.addEventListener(eui.UIEventEx.CONFIRM, this.onConfirm, this);
            this.colorWindow.addEventListener(egret.Event.CANCEL, this.onCancel, this);
            this.colorWindow.addEventListener(egret.Event.CLEAR, this.onClear, this);
            //                    colorWindow.open();
            this.stage.addChild(this.colorWindow);
            this.colorWindow.x = 300;
            this.colorWindow.y = 100;
        };
        p.onClear = function (event) {
            var _self__ = this;
            _self__.dispatchEvent(new egret.Event(egret.Event.CLEAR));
        };
        p.onCancel = function (event) {
            var _self__ = this;
            this.currentColor = event.currentTarget["lastColor"];
            _self__.dispatchEvent(new egret.Event(egret.Event.CANCEL));
        };
        p.onConfirm = function (event) {
            var _self__ = this;
            this.currentColor = event.currentTarget["currentColor"];
            _self__.dispatchEvent(new eui.UIEvent(eui.UIEventEx.CONFIRM));
        };
        p.onColorPicked = function (event) {
            var _self__ = this;
            var changed = (this._currentColor != event.currentTarget["currentColor"]);
            this.currentColor = event.currentTarget["currentColor"];
            this.validateNow();
            if (changed) {
                _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            }
        };
        d(p, "currentColor"
            ,function () {
                return this._currentColor;
            }
            ,function (value) {
                if (this._currentColor == value)
                    return;
                this._currentColor = value;
                if (this.colorDisplay) {
                    this.colorDisplay.fillColor = this._currentColor;
                }
            }
        );
        d(p, "defaultColor"
            ,function () {
                return this._defaultColor;
            }
            ,function (value) {
                this._defaultColor = value;
            }
        );
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.colorDisplay) {
                this.colorDisplay.fillColor = this._currentColor;
            }
        };
        return ColorPicker;
    })(eui.Component);
    eui.ColorPicker = ColorPicker;
    egret.registerClass(ColorPicker,'eui.ColorPicker');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Panel class defines a container that includes a title bar,
     * a closeButton, a moveArea, and a content area for its children.
     *
     * @event eui.UIEvent.CLOSING Dispatched when the close button is taped
     * you can use <code>event.preventDefault()</code> to prevent close.
     *
     * @defaultProperty elementsContent
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/PanelExample.ts
     */
    /**
     * @language zh_CN
     * Panel 类定义一个容器，该容器为其子代提供标题栏、关闭按钮、可移动区域和内容区域。
     *
     * @event eui.UIEvent.CLOSING 面板即将关闭事件，在关闭按钮被点击后抛出，
     * 监听此事件并调用<code>event.preventDefault()</code>能够阻止面板被关闭。
     *
     * @defaultProperty elementsContent
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/PanelExample.ts
     */
    var Panel = (function (_super) {
        __extends(Panel, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Panel() {
            _super.call(this);
            /**
             * @language en_US
             * The skin part that defines the appearance of the close button.
             * When taped, the close button dispatches a <code>closing</code> event.
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 关闭按钮
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.closeButton = null;
            /**
             * @language en_US
             * The area where the user must drag to move the window.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 可移动区域
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.moveArea = null;
            /**
             * @language en_US
             * The skin part that defines the appearance of the
             * title text in the container.
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 标题显示对象
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.titleDisplay = null;
            /**
             * @private
             */
            this._title = "";
            /**
             * @private
             * 触摸按下时的偏移量
             */
            this.offsetPointX = 0;
            /**
             * @private
             */
            this.offsetPointY = 0;
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onWindowTouchBegin, this, false, 100);
        }
        var c=Panel,p=c.prototype;
        /**
         * @private
         * 在窗体上按下时前置窗口
         */
        p.onWindowTouchBegin = function (event) {
            this.$parent.addChild(this);
        };
        d(p, "elementsContent",undefined
            /**
             * @language en_US
             * write-only property,This property is Usually invoked in resolving an EXML for adding multiple children quickly.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 只写属性，此属性通常在 EXML 的解析器中调用，便于快速添加多个子项。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                if (value) {
                    var length = value.length;
                    for (var i = 0; i < length; i++) {
                        this.addChild(value[i]);
                    }
                }
            }
        );
        d(p, "title"
            /**
             * @language en_US
             * Title or caption displayed in the title bar.
             *
             * @default ""
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 标题栏中显示的标题。
             *
             * @default ""
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._title;
            }
            ,function (value) {
                this._title = value;
                if (this.titleDisplay)
                    this.titleDisplay.text = this.title;
            }
        );
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.titleDisplay) {
                this.titleDisplay.text = this._title;
            }
            else if (instance == this.moveArea) {
                this.moveArea.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
            }
            else if (instance == this.closeButton) {
                this.closeButton.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onCloseButtonClick, this);
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.moveArea) {
                this.moveArea.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
            }
            else if (instance == this.closeButton) {
                this.closeButton.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onCloseButtonClick, this);
            }
        };
        /**
         * @language en_US
         * Dispatch the "closing" event when the closeButton is clicked.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 当 closeButton 被点击时派发 “closing” 事件
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onCloseButtonClick = function (event) {
            if (eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CLOSING, true, true)) {
                this.close();
            }
        };
        /**
         * @language en_US
         * Close the panel and remove from the parent container.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 关闭面板，从父级容器移除自身。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.close = function () {
            if (!this.$parent) {
                return;
            }
            if (!eui.PopUpManager.removePopup(this))
                this.$parent.removeChild(this);
            this.dispatchEvent(new egret.Event(egret.Event.CLOSE));
        };
        /**
         * 弹出面板
         * 重复弹出会移除上一次的弹出效果
         * @param parent 弹出父级
         * @param isMid 是否居中
         * @param isModal 是否模态
         *
         */
        p.open = function (parent, isMid, isModal) {
            eui.PopUpManager.popUp(this, parent, isMid, isModal);
        };
        /**
         * @language en_US
         * Called when the user starts dragging a Panel.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 在可移动区域按下
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchBegin = function (event) {
            this.$includeInLayout = false;
            this.offsetPointX = this.x - event.$stageX;
            this.offsetPointY = this.y - event.$stageY;
            this.$stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.$stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
        };
        /**
         * @language en_US
         * Called when the user drags a Panel.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 触摸拖拽时的移动事件
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchMove = function (event) {
            this.x = event.$stageX + this.offsetPointX;
            this.y = event.$stageY + this.offsetPointY;
        };
        /**
         * @language en_US
         * Called when the user releases the Panel.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 在舞台上弹起事件
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchEnd = function (event) {
            this.$stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.$stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
        };
        return Panel;
    })(eui.Component);
    eui.Panel = Panel;
    egret.registerClass(Panel,'eui.Panel');
    eui.registerProperty(Panel, "elementsContent", "Array", true);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var ColorWindow = (function (_super) {
        __extends(ColorWindow, _super);
        function ColorWindow() {
            _super.call(this);
            this._liveChange = false;
            this._currentColor = 0x009Aff;
            this._lastColor = 0x009aff;
            this._defaultColor = 0x009aff;
            this.hueLineData = [];
            this.rgbTextInputing = false;
            this.textInputing = false;
            this.hoverd = false;
            this.currentHueIndex = 0;
            this.width = 450;
            this.height = 400;
        }
        var c=ColorWindow,p=c.prototype;
        p.onKeyDown = function (event) {
            if (event.keyCode == egret.Keyboard.ENTER) {
                this.onConfirmClick();
            }
        };
        d(p, "liveChange"
            ,function () {
                return this._liveChange;
            }
            ,function (value) {
                this._liveChange = value;
            }
        );
        d(p, "currentColor"
            ,function () {
                return this._currentColor;
            }
            ,function (value) {
                if (this._currentColor == value)
                    return;
                this._currentColor = value;
                if (this.currentColorArea)
                    this.drawCurrentColor(this._currentColor);
                if (this.rgbTextInput)
                    this.setRGBValue(this._currentColor);
                if (this.saturationCircle)
                    this.setSaturationCirclePos(this._currentColor);
                if (this.hueSlider)
                    this.setHueSlider(this._currentColor);
            }
        );
        d(p, "lastColor"
            ,function () {
                return this._lastColor;
            }
            ,function (value) {
                if (this._lastColor == value)
                    return;
                this._lastColor = value;
                if (this.lastColorArea)
                    this.drawLastColor(this._lastColor);
            }
        );
        d(p, "defaultColor"
            ,function () {
                return this._defaultColor;
            }
            ,function (value) {
                this._defaultColor = value;
            }
        );
        d(p, "pickerTarget"
            ,function () {
                return egret.superGetter(eui.ColorWindow, this, "pickerTarget");
            }
            ,function (value) {
                if (this._pickerTarget == value)
                    return;
                if (this._pickerTarget) {
                    this.onRemoveTarget();
                }
                this._pickerTarget = value;
                if (value) {
                    //                this.modal = false;
                    //                this.alwaysInFront = true;
                    this._pickerTarget.addEventListener(egret.MouseEvent.MOUSE_OVER, this.onPickerTargetMouse, this, true);
                    this._pickerTarget.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, this.onPickerTargetOut, this);
                    this._pickerTarget.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onPickerTargetMouse, this, true);
                    this._pickerTarget.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onPickerTargetMouse, this, true);
                    this._pickerTarget.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onPickerTargetMouse, this, true);
                    this._pickerTarget.addEventListener(egret.MouseEvent.DOUBLE_CLICK, this.onPickerTargetMouse, this, true);
                    this.addEventListener(egret.Event.CLOSE, this.onRemoveTarget, this);
                }
            }
        );
        p.onRemoveTarget = function (event) {
            if (event === void 0) { event = null; }
            this.removeEventListener(egret.Event.CLOSE, this.onRemoveTarget, this);
            if (this._pickerTarget) {
                this._pickerTarget.removeEventListener(egret.MouseEvent.MOUSE_OVER, this.onPickerTargetMouse, this, true);
                this._pickerTarget.removeEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, this.onPickerTargetOut, this);
                this._pickerTarget.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onPickerTargetMouse, this, true);
                this._pickerTarget.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onPickerTargetMouse, this, true);
                this._pickerTarget.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onPickerTargetMouse, this, true);
                this._pickerTarget.removeEventListener(egret.MouseEvent.DOUBLE_CLICK, this.onPickerTargetMouse, this, true);
            }
        };
        p.onPickerTargetMouse = function (event) {
            //            event.stopImmediatePropagation();
            //            if(egret.managers.CursorManager.cursor != egret.ui.core.Cursors.DESKTOP_PICKER)
            //                egret.managers.CursorManager.setCursor(egret.ui.core.Cursors.DESKTOP_PICKER);
            if (event.currentTarget != event.target)
                return;
            if (event.type == egret.TouchEvent.TOUCH_BEGIN) {
                var render = new egret.RenderTexture();
                render.drawToTexture(this._pickerTarget);
                var p = render.getPixel32(this._pickerTarget.mouseX, this._pickerTarget.mouseY);
                var color = (p[0] << 16) + (p[1] << 8) + p[2];
                console.log(color.toString(16));
                this.currentColor = color;
                render.dispose();
                this.doLivingChange();
            }
        };
        p.onPickerTargetOut = function (event) {
            //            egret.managers.CursorManager.setCursor(egret.ui.core.Cursors.AUTO);
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.saturationCircle) {
                if (this.saturationCircle.y < 121)
                    this.saturationCircle.source = "circle_black_png";
                else
                    this.saturationCircle.source = "circle_white_png";
            }
            if (instance == this.lastColorArea) {
                this.lastColorArea.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onLastColorClick, this);
            }
            if (instance == this.hueLine) {
                var render = new egret.RenderTexture();
                render.drawToTexture(this.drawHueLine());
                this.hueLine.source = render;
            }
            if (instance == this.rTextInput) {
                this.rTextInput.addEventListener(egret.Event.CHANGE, this.onTextChange, this);
                this.rTextInput.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onTextInputFocusOut, this);
            }
            if (instance == this.gTextInput) {
                this.gTextInput.addEventListener(egret.Event.CHANGE, this.onTextChange, this);
                this.gTextInput.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onTextInputFocusOut, this);
            }
            if (instance == this.bTextInput) {
                this.bTextInput.addEventListener(egret.Event.CHANGE, this.onTextChange, this);
                this.bTextInput.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onTextInputFocusOut, this);
            }
            if (instance == this.rgbTextInput) {
                this.rgbTextInput.addEventListener(egret.Event.CHANGE, this.onRGBTextChange, this);
                this.rgbTextInput.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onRGBTextInputFocusOut, this);
            }
            if (instance == this.closeButton) {
                this.closeButton.addEventListener(egret.MouseEvent.CLICK, this.closeHandle, this);
            }
            if (instance == this.saturationGroup) {
                var whiteMask = new egret.Shape();
                whiteMask.width = whiteMask.height = 256;
                this.drawMask(whiteMask, 0xFFFFFF);
                this.saturationGroup.addChild(whiteMask);
                var blackMask = new egret.Shape();
                blackMask.width = blackMask.height = 256;
                this.drawMask(blackMask, 0x000000, -90);
                this.saturationGroup.addChild(blackMask);
                this.saturationGroup.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onSaturationMouseDown, this);
                this.saturationGroup.addEventListener(egret.MouseEvent.ROLL_OVER, this.onRollOver, this);
                this.saturationGroup.addEventListener(egret.MouseEvent.ROLL_OUT, this.onRollOut, this);
            }
            if (instance == this.hueSlider) {
                this.hueSlider.addEventListener(egret.Event.CHANGE, this.onHueSliderChange, this);
            }
            if (instance == this.defaultButton) {
                this.defaultButton.addEventListener(egret.MouseEvent.CLICK, this.onDefaultClick, this);
            }
            if (instance == this.confirmButton) {
                this.confirmButton.addEventListener(egret.MouseEvent.CLICK, this.onConfirmClick, this);
            }
            if (instance == this.cancelButton) {
                this.cancelButton.addEventListener(egret.MouseEvent.CLICK, this.onCloseButtonClick, this);
            }
        };
        p.closeHandle = function (e) {
            if (this.parent) {
                this.parent.removeChild(this);
            }
        };
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.drawCurrentColor(this._currentColor);
            this.setRGBValue(this._currentColor);
            this.drawLastColor(this._lastColor);
            this.setHueSlider(this._currentColor);
            this.setSaturationCirclePos(this._currentColor);
        };
        p.onRGBTextInputFocusOut = function (event) {
            var textInput = event.currentTarget;
            var rgb = textInput.text.toUpperCase();
            while (rgb.length < 6) {
                rgb = "0" + rgb;
            }
            textInput.text = rgb;
        };
        p.onTextInputFocusOut = function (event) {
            var textInput = event.currentTarget;
            var value = textInput.text;
            if (value > 255)
                value = 255;
            textInput.text = value.toString();
        };
        p.onRGBTextChange = function (event) {
            this.rgbTextInputing = true;
            var text = this.rgbTextInput.text;
            if (text.indexOf("0x") == 0)
                text = text.slice(2);
            if (text.indexOf("#") == 0)
                text = text.slice(1);
            if (text.length > 6)
                text = text.slice(0, 6);
            var begin = this.rgbTextInput.textDisplay.selectionBeginIndex;
            var end = this.rgbTextInput.textDisplay.selectionEndIndex;
            this.rgbTextInput.text = text;
            this.rgbTextInput.textDisplay.$setSelection(begin, end);
            var color = Number("0x" + this.rgbTextInput.text);
            this.currentColor = color;
            this.rgbTextInputing = false;
            this.doLivingChange();
        };
        p.onTextChange = function (event) {
            this.textInputing = true;
            var r = this.rTextInput.text;
            var g = this.gTextInput.text;
            var b = this.bTextInput.text;
            this.currentColor = this.getColor(Math.min(255, r), Math.min(255, g), Math.min(255, b));
            this.textInputing = false;
            this.doLivingChange();
        };
        p.onLastColorClick = function (event) {
            this.focusUi.setFocus();
            this.currentColor = this._lastColor;
            this.doLivingChange();
        };
        p.onRollOut = function (event) {
            this.hoverd = false;
            if (event["buttonDown"])
                return;
        };
        p.onRollOver = function (event) {
            this.hoverd = true;
            if (event["buttonDown"])
                return;
        };
        p.setHueSlider = function (color) {
            this.currentHueIndex = Math.floor(this.getHue(color));
            this.hueSlider.value = this.currentHueIndex;
            var currentHue = this.hueLineData[this.currentHueIndex];
            this.drawSaturation(currentHue);
        };
        p.setSaturationCirclePos = function (color) {
            this.saturationCircle.x = this.getSaturation(this._currentColor) - 7;
            this.saturationCircle.y = 255 - this.getLightness(this._currentColor) - 7;
            if (this.saturationCircle.y < 121)
                this.saturationCircle.source = "circle_black_png";
            else
                this.saturationCircle.source = "circle_white_png";
        };
        p.onSaturationMouseDown = function (event) {
            this.focusUi.setFocus();
            this.onMouseMove(event);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.onMouseMove, this, false);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.onMouseUp, this, false);
        };
        p.onMouseUp = function (event) {
            if (!this.hoverd) {
            }
            this.stage.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.onMouseMove, this);
            this.stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.onMouseUp, this);
        };
        p.onMouseMove = function (event) {
            var x = Math.max(0, Math.min(255, this.saturationGroup.mouseX));
            var y = Math.max(0, Math.min(255, this.saturationGroup.mouseY));
            this.saturationCircle.x = x - 7;
            this.saturationCircle.y = y - 7;
            if (this.saturationCircle.y < 121)
                this.saturationCircle.source = "circle_black_png";
            else
                this.saturationCircle.source = "circle_white_png";
            var h = this.currentHueIndex * 360 / (256 * 6);
            this._currentColor = this.Hsv2Rgb(h, x / 255, (255 - y) / 255);
            if (this.currentColorArea)
                this.drawCurrentColor(this._currentColor);
            if (this.rgbTextInput)
                this.setRGBValue(this._currentColor);
            event.updateAfterEvent();
            this.doLivingChange();
        };
        p.onHueSliderChange = function (event) {
            this.currentHueIndex = this.hueSlider.value;
            var currentHue = this.hueLineData[this.currentHueIndex];
            this.drawSaturation(currentHue);
            var x = this.saturationCircle.x + 7;
            var y = this.saturationCircle.y + 7;
            var h = this.currentHueIndex * 360 / (256 * 6);
            this._currentColor = this.Hsv2Rgb(h, x / 255, (255 - y) / 255);
            if (this.currentColorArea)
                this.drawCurrentColor(this._currentColor);
            if (this.rgbTextInput)
                this.setRGBValue(this._currentColor);
            this.doLivingChange();
        };
        p.onCloseButtonClick = function (event) {
            if (event === void 0) { event = null; }
            this.currentColor = this._lastColor;
            this.dispatchEvent(new egret.Event(egret.Event.CANCEL));
            this.closeHandle(null);
        };
        p.onDefaultClick = function (event) {
            this.currentColor = this._defaultColor;
            this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            this.dispatchEvent(new egret.Event(egret.Event["CLEAR"]));
            //            this.close();
            this.closeHandle(null);
        };
        p.onConfirmClick = function (event) {
            if (event === void 0) { event = null; }
            this.dispatchEvent(new eui.UIEvent(eui.UIEventEx.CONFIRM));
            //            this.close();
            this.closeHandle(null);
        };
        p.doLivingChange = function () {
            if (this.liveChange)
                this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
        };
        p.setRGBValue = function (color) {
            if (!this.textInputing) {
                var r = color >> 16;
                var g = color >> 8 & 0xFF;
                var b = color & 0xFF;
                this.rTextInput.text = r.toString();
                this.gTextInput.text = g.toString();
                this.bTextInput.text = b.toString();
            }
            if (!this.rgbTextInputing) {
                var rgb = Math.floor(color).toString(16).toUpperCase();
                while (rgb.length < 6) {
                    rgb = "0" + rgb;
                }
                this.rgbTextInput.text = rgb;
            }
        };
        p.drawCurrentColor = function (color) {
            this.currentColorArea.fillColor = color;
        };
        p.drawLastColor = function (color) {
            this.lastColorArea.fillColor = color;
        };
        p.drawMask = function (mask, color, rotation) {
            if (rotation === void 0) { rotation = 0; }
            var g = mask.graphics;
            g.clear();
            var matrix = new egret.Matrix();
            matrix.createGradientBox(mask.width, mask.height, Math.PI * rotation / 180);
            g.beginGradientFill(egret.GradientType.LINEAR, [color, color], [1, 0], [0, 255], matrix);
            g.drawRect(0, 0, mask.width, mask.height);
            g.endFill();
        };
        p.drawHueLine = function () {
            var ui = new egret.Shape();
            var graphics = ui.graphics;
            graphics.clear();
            var r = 0;
            var g = 0;
            var b = 0;
            var color;
            var line = 0;
            var w = 19;
            r = 255;
            g = 0;
            for (b = 0; b < 256; b++) {
                color = this.getColor(r, g, b);
                this.hueLineData[256 * 6 - line - 1] = color;
                if (line % 6 == 0) {
                    graphics.beginFill(color);
                    graphics.drawRect(0, line / 6, w, 1);
                    graphics.endFill();
                }
                line++;
            }
            g = 0;
            b = 255;
            for (r = 255; r >= 0; r--) {
                color = this.getColor(r, g, b);
                this.hueLineData[256 * 6 - line - 1] = color;
                if (line % 6 == 0) {
                    graphics.beginFill(color);
                    graphics.drawRect(0, line / 6, w, 1);
                    graphics.endFill();
                }
                line++;
            }
            r = 0;
            b = 255;
            for (g = 0; g < 256; g++) {
                color = this.getColor(r, g, b);
                this.hueLineData[256 * 6 - line - 1] = color;
                if (line % 6 == 0) {
                    graphics.beginFill(color);
                    graphics.drawRect(0, line / 6, w, 1);
                    graphics.endFill();
                }
                line++;
            }
            r = 0;
            g = 255;
            for (b = 255; b >= 0; b--) {
                color = this.getColor(r, g, b);
                this.hueLineData[256 * 6 - line - 1] = color;
                if (line % 6 == 0) {
                    graphics.beginFill(color);
                    graphics.drawRect(0, line / 6, w, 1);
                    graphics.endFill();
                }
                line++;
            }
            g = 255;
            b = 0;
            for (r = 0; r < 256; r++) {
                color = this.getColor(r, g, b);
                this.hueLineData[256 * 6 - line - 1] = color;
                if (line % 6 == 0) {
                    graphics.beginFill(color);
                    graphics.drawRect(0, line / 6, w, 1);
                    graphics.endFill();
                }
                line++;
            }
            r = 255;
            b = 0;
            for (g = 255; g >= 0; g--) {
                color = this.getColor(r, g, b);
                this.hueLineData[256 * 6 - line - 1] = color;
                if (line % 6 == 0) {
                    graphics.beginFill(color);
                    graphics.drawRect(0, line / 6, w, 1);
                    graphics.endFill();
                }
                line++;
            }
            graphics.endFill();
            return ui;
        };
        p.getColor = function (r, g, b) {
            return (r << 16) + (g << 8) + b;
        };
        p.getHue = function (color) {
            var r = color >> 16;
            var g = color >> 8 & 0xFF;
            var b = color & 0xFF;
            var max = Math.max(r, g, b);
            var min = Math.min(r, g, b);
            if (max == min)
                return 0;
            if (max == r && g >= b)
                return 256 * (g - b) / (max - min);
            if (max == r && g < b)
                return 256 * (g - b) / (max - min) + (256 * 6);
            if (max == g)
                return 256 * (b - r) / (max - min) + 512;
            return 256 * (r - g) / (max - min) + (256 * 4);
        };
        p.getSaturation = function (color) {
            var r = color >> 16;
            var g = color >> 8 & 0xFF;
            var b = color & 0xFF;
            var max = Math.max(r, g, b);
            var min = Math.min(r, g, b);
            if (max == 0)
                return 0;
            return (1 - min / max) * 255;
        };
        p.getLightness = function (color) {
            var r = color >> 16;
            var g = color >> 8 & 0xFF;
            var b = color & 0xFF;
            return Math.max(r, g, b);
        };
        p.Hsv2Rgb = function (h, s, v) {
            if (s == 0)
                return this.getColor(v * 255, v * 255, v * 255);
            var remain = Math.floor(h / 60) % 6;
            var f = (h / 60) - remain;
            var p = v * (1 - s) * 255;
            var q = v * (1 - f * s) * 255;
            var t = v * (1 - (1 - f) * s) * 255;
            v = v * 255;
            var color;
            switch (remain) {
                case 0:
                    color = this.getColor(v, t, p);
                    break;
                case 1:
                    color = this.getColor(q, v, p);
                    break;
                case 2:
                    color = this.getColor(p, v, t);
                    break;
                case 3:
                    color = this.getColor(p, q, v);
                    break;
                case 4:
                    color = this.getColor(t, p, v);
                    break;
                case 5:
                    color = this.getColor(v, p, q);
                    break;
            }
            return color;
        };
        p.drawSaturation = function (color) {
            //            var g: egret.Graphics = this.saturationUI.graphics;
            //            g.clear();
            //            g.beginFill(color);
            //            g.drawRect(0,0,256,256);
            //            g.endFill();
            this.saturationUI.width = this.saturationUI.height = 256;
            this.saturationUI.fillColor = color;
            this.saturationAreaData = new eui.Image(); //new flash.BitmapData(256,256,true,0);
            var render = new egret.RenderTexture();
            render.drawToTexture(this.saturationGroup);
            this.saturationAreaData.source = render;
            //            this.saturationAreaData.draw2(this.saturationGroup);
        };
        return ColorWindow;
    })(eui.Panel);
    eui.ColorWindow = ColorWindow;
    egret.registerClass(ColorWindow,'eui.ColorWindow');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DataGrid = (function (_super) {
        __extends(DataGrid, _super);
        function DataGrid() {
            var _this = this;
            _super.call(this);
            this.updateHoverOnRollOver = true;
            this.alternatingRowColorsChanged = false;
            this._selectedByKeyboard = false;
            /**
             * 滚动数据项以使其可见的简便处理方法
             */
            this.ensureIndexIsVisible = function (index) {
                if (index * 25 <= _this.grid.scrollV) {
                    _this.grid.layout.target.scrollV = (index) * 25;
                }
                if ((index + 1) * 25 >= Math.round(_this.grid.scrollV + _this.grid["layoutBoundsHeight"])) {
                    _this.grid.scrollV = (index + 1) * 25 - _this.grid["layoutBoundsHeight"];
                }
            };
            this.deferredGridOperations = new Array();
            this.gridProperties = new Object();
            this.editOnMouseUp = true;
            this.doubleClickTime = 120;
            this.editKey = egret.Keyboard.F2;
            this.editOnDoubleClick = false;
            this._editable = false;
            this._gridSelection = null;
            this._itemEditor = null;
            this._sortableColumns = true;
            this.focusOwnerWidth = 1;
            this.focusOwnerHeight = 1;
            this.scrollerEvent = egret.KeyboardEvent;
            this.resizeColumn = null;
            this.resizeAnchorX = NaN;
            this.resizeColumnWidth = NaN;
            this.nextColumn = null;
            this.nextColumnWidth = NaN;
            this.grid = null;
            this.scroller = null;
            this.columnHeaderGroup = null;
            this.editorIndicator = eui.EditorIndicator;
            this.hoverIndicator = eui.HoverIndicator;
            this.rowSeparator = eui.RowSeparator;
            this.columnSeparator = eui.ColumnSeparator;
            this.selectionIndicator = SelectionIndicator;
            this.selectedByKeyboard = true;
            var _self__ = this;
            _self__.addEventListener(egret.Event["SELECT_ALL"], this.selectAllHandler, this);
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.initGridHead, this);
        }
        var c=DataGrid,p=c.prototype;
        d(p, "selectedByKeyboard"
            /**
             * 能否使用键盘来控制选中项
             */
            ,function () {
                return this._selectedByKeyboard;
            }
            ,function (value) {
                this._selectedByKeyboard = value;
                if (this._selectedByKeyboard)
                    this.addEventListener(egret.KeyboardEvent.KEY_DOWN, this.keyDown_handler, this);
                else
                    this.removeEventListener(egret.KeyboardEvent.KEY_DOWN, this.keyDown_handler, this);
            }
        );
        p.keyDown_handler = function (event) {
            var tempSelectedIndex = this.selectedIndex;
            if (event.keyCode == egret.Keyboard.UP) {
                tempSelectedIndex--;
                if (tempSelectedIndex == -1 && this.dataProvider)
                    tempSelectedIndex = this.dataProvider.length - 1;
                this.selectedIndex = tempSelectedIndex;
                this.ensureIndexIsVisible(tempSelectedIndex);
            }
            else if (event.keyCode == egret.Keyboard.DOWN) {
                tempSelectedIndex++;
                if (this.dataProvider && tempSelectedIndex == this.dataProvider.length)
                    tempSelectedIndex = 0;
                this.selectedIndex = tempSelectedIndex;
                this.ensureIndexIsVisible(tempSelectedIndex);
            }
            this.keyDownHandler(event);
        };
        p.initGridHead = function (e) {
            if (this.grid)
                this.initializeDataGridElement(this.columnHeaderGroup);
        };
        /**
         * 舞台大小产生改变之后，如果新的大小大于滚动区则复原滚动位置
         */
        p.onResize_handler = function (event) {
            var _this = this;
            egret.callLater(function () {
                if (_this.grid && _this.grid.scrollRect) {
                    if (_this.grid.scrollV > 0) {
                        if (_this.height > _this.grid.contentHeight) {
                            _this.grid.scrollV = 0;
                        }
                    }
                    else if (_this.grid.scrollH > 0) {
                        if (_this.width > _this.grid.contentWidth) {
                            _this.grid.scrollH = 0;
                        }
                    }
                }
            }, this);
        };
        d(p, "alternatingRowColors"
            ,function () {
                return this._alternatingRowColors;
            }
            ,function (value) {
                if (this._alternatingRowColors == value)
                    return;
                this._alternatingRowColors = value;
                this.alternatingRowColorsChanged = true;
                this.invalidateProperties();
            }
        );
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.alternatingRowColorsChanged) {
                this.alternatingRowColorsChanged = true;
                this.initializeGridRowBackground();
                if (this.grid && this.grid.layout)
                    this.grid.layout.clearVirtualLayoutCache();
            }
        };
        p.initializeGridRowBackground = function () {
            if (!this.grid)
                return;
            if (this.alternatingRowColors && this.alternatingRowColorsBackground)
                this.grid.rowBackground = this.alternatingRowColorsBackground;
            else
                this.grid.rowBackground = this.rowBackground;
        };
        DataGrid.getPartProperty = function (part, properties, propertyName, defaults) {
            if (part)
                return part[propertyName];
            var value = properties[propertyName];
            return (value === undefined) ? defaults[propertyName] : value;
        };
        DataGrid.setPartProperty = function (part, properties, propertyName, value, defaults) {
            if (eui.DataGrid.getPartProperty(part, properties, propertyName, defaults) === value)
                return false;
            var defaultValue = defaults[propertyName];
            if (part) {
                part[propertyName] = value;
                if (value === defaultValue)
                    properties["propertyBits"] &= ~eui.DataGrid.partPropertyBits[propertyName];
                else
                    properties["propertyBits"] |= eui.DataGrid.partPropertyBits[propertyName];
            }
            else {
                if (value === defaultValue)
                    delete properties[propertyName];
                else
                    properties[propertyName] = value;
            }
            return true;
        };
        p.getGridProperty = function (propertyName) {
            return eui.DataGrid.getPartProperty(this.grid, this.gridProperties, propertyName, eui.DataGrid.gridPropertyDefaults);
        };
        p.setGridProperty = function (propertyName, value) {
            return eui.DataGrid.setPartProperty(this.grid, this.gridProperties, propertyName, value, eui.DataGrid.gridPropertyDefaults);
        };
        p.dispatchChangeEvent = function (type) {
            var _self__ = this;
            if (_self__.hasEventListener(type))
                _self__.dispatchEvent(new egret.Event(type));
        };
        p.dispatchUIEvent = function (type) {
            var _self__ = this;
            if (_self__.hasEventListener(type))
                _self__.dispatchEvent(new eui.UIEvent(type));
        };
        d(p, "columns"
            ,function () {
                return this.getGridProperty("columns");
            }
            ,function (value) {
                if (this.setGridProperty("columns", value)) {
                    if (this.columnHeaderGroup) {
                        this.columnHeaderGroup.layout.clearVirtualLayoutCache();
                        this.columnHeaderGroup.invalidateSize();
                        this.columnHeaderGroup.invalidateDisplayList();
                    }
                    this.dispatchChangeEvent("columnsChanged");
                }
            }
        );
        p.getColumnAt = function (columnIndex) {
            var grid = this.grid;
            if (!grid || !grid.columns)
                return null;
            var columns = grid.columns;
            return ((columnIndex >= 0) && (columnIndex < columns.length)) ? columns.getItemAt(columnIndex) : null;
        };
        d(p, "columnsLength"
            ,function () {
                var columns = this.columns;
                return (columns) ? columns.length : 0;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "columnsLength", value);
            }
        );
        d(p, "dataProvider"
            ,function () {
                return this.getGridProperty("dataProvider");
            }
            ,function (value) {
                if (this.setGridProperty("dataProvider", value))
                    this.dispatchChangeEvent("dataProviderChanged");
            }
        );
        d(p, "dataProviderLength"
            ,function () {
                var dataProvider = this.dataProvider;
                return (dataProvider) ? dataProvider.length : 0;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "dataProviderLength", value);
            }
        );
        d(p, "dataTipField"
            ,function () {
                return this.getGridProperty("dataTipField");
            }
            ,function (value) {
                if (this.setGridProperty("dataTipField", value))
                    this.dispatchChangeEvent("dataTipFieldChanged");
            }
        );
        d(p, "dataTipFunction"
            ,function () {
                return this.getGridProperty("dataTipFunction");
            }
            ,function (value) {
                if (this.setGridProperty("dataTipFunction", value))
                    this.dispatchChangeEvent("dataTipFunctionChanged");
            }
        );
        d(p, "editable"
            ,function () {
                return this._editable;
            }
            ,function (value) {
                this._editable = value;
            }
        );
        d(p, "editorColumnIndex"
            ,function () {
                if (this.editor)
                    return this.editor.editorColumnIndex;
                return -1;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "editorColumnIndex", value);
            }
        );
        d(p, "editorRowIndex"
            ,function () {
                if (this.editor)
                    return this.editor.editorRowIndex;
                return -1;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "editorRowIndex", value);
            }
        );
        d(p, "enableIME"
            ,function () {
                return false;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "enableIME", value);
            }
        );
        d(p, "gridSelection"
            ,function () {
                if (!this._gridSelection)
                    this._gridSelection = this.createGridSelection();
                return this._gridSelection;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "gridSelection", value);
            }
        );
        d(p, "itemEditor"
            ,function () {
                return this._itemEditor;
            }
            ,function (value) {
                if (this._itemEditor == value)
                    return;
                this._itemEditor = value;
                this.dispatchChangeEvent("itemEditorChanged");
            }
        );
        d(p, "itemEditorInstance"
            ,function () {
                if (this.editor)
                    return this.editor.itemEditorInstance;
                return null;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "itemEditorInstance", value);
            }
        );
        d(p, "itemRenderer"
            ,function () {
                return this.getGridProperty("itemRenderer");
            }
            ,function (value) {
                if (this.setGridProperty("itemRenderer", value))
                    this.dispatchChangeEvent("itemRendererChanged");
            }
        );
        d(p, "preserveSelection"
            ,function () {
                if (this.grid)
                    return this.grid.preserveSelection;
                else
                    return this.gridSelection.preserveSelection;
            }
            ,function (value) {
                if (this.grid)
                    this.grid.preserveSelection = value;
                else
                    this.gridSelection.preserveSelection = value;
            }
        );
        d(p, "requireSelection"
            ,function () {
                if (this.grid)
                    return this.grid.requireSelection;
                else
                    return this.gridSelection.requireSelection;
            }
            ,function (value) {
                if (this.grid)
                    this.grid.requireSelection = value;
                else
                    this.gridSelection.requireSelection = value;
            }
        );
        d(p, "requestedRowCount"
            ,function () {
                return this.getGridProperty("requestedRowCount");
            }
            ,function (value) {
                this.setGridProperty("requestedRowCount", value);
            }
        );
        d(p, "requestedColumnCount"
            ,function () {
                return this.getGridProperty("requestedColumnCount");
            }
            ,function (value) {
                this.setGridProperty("requestedColumnCount", value);
            }
        );
        d(p, "requestedMaxRowCount"
            ,function () {
                return this.getGridProperty("requestedMaxRowCount");
            }
            ,function (value) {
                this.setGridProperty("requestedMaxRowCount", value);
            }
        );
        d(p, "requestedMinRowCount"
            ,function () {
                return this.getGridProperty("requestedMinRowCount");
            }
            ,function (value) {
                this.setGridProperty("requestedMinRowCount", value);
            }
        );
        d(p, "requestedMinColumnCount"
            ,function () {
                return this.getGridProperty("requestedMinColumnCount");
            }
            ,function (value) {
                this.setGridProperty("requestedMinColumnCount", value);
            }
        );
        d(p, "resizableColumns"
            ,function () {
                return this.getGridProperty("resizableColumns");
            }
            ,function (value) {
                if (this.setGridProperty("resizableColumns", value))
                    this.dispatchChangeEvent("resizableColumnsChanged");
            }
        );
        d(p, "rowHeight"
            ,function () {
                return this.getGridProperty("rowHeight");
            }
            ,function (value) {
                if (this.setGridProperty("rowHeight", value))
                    this.dispatchChangeEvent("rowHeightChanged");
            }
        );
        d(p, "selectionMode"
            ,function () {
                if (this.grid)
                    return this.grid.selectionMode;
                else
                    return this.gridSelection.selectionMode;
            }
            ,function (value) {
                if (this.selectionMode == value)
                    return;
                if (this.grid)
                    this.grid.selectionMode = value;
                else
                    this.gridSelection.selectionMode = value;
                if (this.grid && egret.is(this.grid.layout, "eui.GridLayout") && this.caretIndicator) {
                    (this.grid.layout)["showCaret"] = (value != eui.GridSelectionMode.NONE && this.stage && this == this.stage.focus);
                }
                this.dispatchChangeEvent("selectionModeChanged");
            }
        );
        p.isRowSelectionMode = function () {
            var mode = this.selectionMode;
            return mode == eui.GridSelectionMode.SINGLE_ROW || mode == eui.GridSelectionMode.MULTIPLE_ROWS;
        };
        p.isCellSelectionMode = function () {
            var mode = this.selectionMode;
            return mode == eui.GridSelectionMode.SINGLE_CELL || mode == eui.GridSelectionMode.MULTIPLE_CELLS;
        };
        d(p, "showDataTips"
            ,function () {
                return this.getGridProperty("showDataTips");
            }
            ,function (value) {
                if (this.setGridProperty("showDataTips", value))
                    this.dispatchChangeEvent("showDataTipsChanged");
            }
        );
        d(p, "sortableColumns"
            ,function () {
                return this._sortableColumns;
            }
            ,function (value) {
                if (this._sortableColumns == value)
                    return;
                this._sortableColumns = value;
                this.dispatchChangeEvent("sortableColumnsChanged");
            }
        );
        d(p, "typicalItem"
            ,function () {
                return this.getGridProperty("typicalItem");
            }
            ,function (value) {
                if (this.setGridProperty("typicalItem", value))
                    this.dispatchChangeEvent("typicalItemChanged");
            }
        );
        p.invalidateTypicalItem = function () {
            if (this.grid)
                this.grid.invalidateTypicalItemRenderer();
        };
        d(p, "variableRowHeight"
            ,function () {
                return this.getGridProperty("variableRowHeight");
            }
            ,function (value) {
                if (this.setGridProperty("variableRowHeight", value))
                    this.dispatchChangeEvent("variableRowHeightChanged");
            }
        );
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.focusOwner = new eui.Component();
            //            var g: egret.Graphics = this.focusOwner.graphics;
            //            g.clear();
            //            g.lineStyle(0,0x000000,0);
            //            g.drawRect(0,0,this.focusOwnerWidth,this.focusOwnerHeight);
            //            this.addToDisplayList(this.focusOwner);
            //            this.focusOwner.tabEnabled = true;
            //            this.focusOwner.tabIndex = this.tabIndex;
            this.focusOwner.visible = true;
        };
        p.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            if (this.grid) {
                this.initializeDataGridElement(this.columnHeaderGroup);
            }
            stage.addEventListener(egret.Event.RESIZE, this.onResize_handler, this);
        };
        d(p, "tabIndex"
            ,function () {
                return egret.superGetter(eui.DataGrid, this, "tabIndex");
            }
            ,function (index) {
                egret.superSetter(eui.DataGrid, this, "tabIndex", index);
                //            if(this.focusOwner)
                //                this.focusOwner.tabIndex = index;
            }
        );
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            //            if(this.focusOwner && ((this.focusOwnerWidth != unscaledWidth) || (this.focusOwnerHeight != unscaledHeight))) {
            //                this.focusOwnerWidth = unscaledWidth;
            //                this.focusOwnerHeight = unscaledHeight;
            //                var g: egret.Graphics = this.focusOwner.graphics;
            //                g.clear();
            //                g.lineStyle(0,0x000000,0);
            //                g.drawRect(0,0,this.focusOwnerWidth,this.focusOwnerHeight);
            //            }
            this.grid.y = 0;
        };
        p.setFocus = function () {
            if (this.grid)
                this.focusOwner.setFocus();
        };
        p.isOurFocus = function (target) {
            return (target == this.focusOwner) || target == this;
        };
        p.keyDownHandler = function (event) {
            if (!this.grid || event.isDefaultPrevented())
                return;
            if (event == this.scrollerEvent) {
                this.scrollerEvent = null;
                event.preventDefault();
                return;
            }
            if (!this.isOurFocus((event.target)))
                return;
            if (event.keyCode == egret.Keyboard.A && event.ctrlKey) {
                this.selectAllFromKeyboard();
                event.preventDefault();
                return;
            }
            if (this.selectionMode == eui.GridSelectionMode.NONE || this.grid.caretRowIndex < 0 || this.grid.caretRowIndex >= this.dataProviderLength || (this.isCellSelectionMode() && (this.grid.caretColumnIndex < 0 || this.grid.caretColumnIndex >= this.columnsLength))) {
                if (this.scroller && (this.scrollerEvent != event)) {
                    //                    this.scrollerEvent = <eui.KeyboardEvent>flash.As3As(event,eui.KeyboardEvent);
                    this.scroller.dispatchEvent(this.scrollerEvent);
                }
                return;
            }
            var op;
            if (event.keyCode == egret.Keyboard.SPACE) {
                if (event.ctrlKey) {
                    if (this.toggleSelection(this.grid.caretRowIndex, this.grid.caretColumnIndex)) {
                        this.grid.anchorRowIndex = this.grid.caretRowIndex;
                        this.grid.anchorColumnIndex = this.grid.caretColumnIndex;
                        event.preventDefault();
                    }
                }
                else if (event.shiftKey) {
                    if (this.extendSelection(this.grid.caretRowIndex, this.grid.caretColumnIndex))
                        event.preventDefault();
                }
                else {
                    if (this.grid.caretRowIndex != -1) {
                        if (this.isRowSelectionMode()) {
                            op = this.selectionMode == eui.GridSelectionMode.SINGLE_ROW ? eui.GridSelectionEventKind.SET_ROW : eui.GridSelectionEventKind.ADD_ROW;
                            if (!this.commitInteractiveSelection(op, this.grid.caretRowIndex, this.grid.caretColumnIndex)) {
                                return;
                            }
                            event.preventDefault();
                        }
                        else if (this.isCellSelectionMode() && this.grid.caretColumnIndex != -1) {
                            op = this.selectionMode == eui.GridSelectionMode.SINGLE_CELL ? eui.GridSelectionEventKind.SET_CELL : eui.GridSelectionEventKind.ADD_CELL;
                            if (!this.commitInteractiveSelection(op, this.grid.caretRowIndex, this.grid.caretColumnIndex)) {
                                return;
                            }
                            event.preventDefault();
                        }
                    }
                }
                return;
            }
            this.adjustSelectionUponNavigation(event);
        };
        p.selectAllHandler = function (event) {
            if (!this.grid || event.isDefaultPrevented() || !this.isOurFocus((event.target))) {
                return;
            }
            this.selectAllFromKeyboard();
        };
        p.selectAllFromKeyboard = function () {
            if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS || this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS) {
                if (this.commitInteractiveSelection(eui.GridSelectionEventKind.SELECT_ALL, 0, 0, this.dataProvider.length, this.columns.length)) {
                    this.grid.anchorRowIndex = 0;
                    this.grid.anchorColumnIndex = 0;
                }
            }
        };
        p.initializeDataGridElement = function (elt) {
            if (!elt)
                return;
            elt.dataGrid = this;
            var display = elt;
            if (display.$nestLevel <= this.grid.$nestLevel) {
                display.$nestLevel = this.grid.$nestLevel + 1;
            }
            //            if(elt["nestLevel"] <= this.grid.nestLevel)
        };
        p.partAdded = function (partName, instance) {
            var _self__ = this;
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.grid) {
                this.gridSelection.grid = this.grid;
                this.grid.gridSelection = this.gridSelection;
                this.grid.dataGrid = this;
                var modifiedGridProperties = this.gridProperties;
                this.gridProperties = { propertyBits: 0 };
                for (var propertyName in modifiedGridProperties) {
                    if (propertyName == "propertyBits")
                        continue;
                    this.setGridProperty(propertyName, modifiedGridProperties[propertyName]);
                }
                this.initializeGridRowBackground();
                this.grid.columnSeparator = this.columnSeparator;
                this.grid.rowSeparator = this.rowSeparator;
                this.grid.hoverIndicator = this.hoverIndicator;
                this.grid.caretIndicator = this.caretIndicator;
                this.grid.selectionIndicator = this.selectionIndicator;
                this.grid.addEventListener(eui.GridEvent.GRID_MOUSE_DOWN, this.grid_mouseDownHandler, this, false, -50);
                this.grid.addEventListener(eui.GridEvent.GRID_MOUSE_UP, this.grid_mouseUpHandler, this, false, -50);
                this.grid.addEventListener(eui.GridEvent.GRID_ROLL_OVER, this.grid_rollOverHandler, this, false, -50);
                this.grid.addEventListener(eui.GridEvent.GRID_ROLL_OUT, this.grid_rollOutHandler, this, false, -50);
                this.grid.addEventListener(eui.GridCaretEvent.CARET_CHANGE, this.grid_caretChangeHandler, this);
                this.grid.addEventListener(eui.UIEventEx.VALUE_COMMIT, this.grid_valueCommitHandler, this);
                this.grid.addEventListener("invalidateSize", this.grid_invalidateSizeHandler, this);
                this.grid.addEventListener("invalidateDisplayList", this.grid_invalidateDisplayListHandler, this);
                for (var deferredGridOperation_key_a in this.deferredGridOperations) {
                    var deferredGridOperation = this.deferredGridOperations[deferredGridOperation_key_a];
                    deferredGridOperation(this.grid);
                }
                this.deferredGridOperations.length = 0;
                this.initializeDataGridElement(this.columnHeaderGroup);
                this.editor = this.createEditor();
                this.editor.initialize();
            }
            else if (instance == this.alternatingRowColorsBackground)
                this.initializeGridRowBackground();
            else if (instance == this.columnHeaderGroup) {
                if (this.grid)
                    this.initializeDataGridElement(this.columnHeaderGroup);
                this.columnHeaderGroup.addEventListener(eui.GridEvent.GRID_CLICK, this.columnHeaderGroup_clickHandler, this);
                this.columnHeaderGroup.addEventListener(eui.GridEvent.SEPARATOR_ROLL_OVER, this.separator_rollOverHandler, this);
                this.columnHeaderGroup.addEventListener(eui.GridEvent.SEPARATOR_ROLL_OUT, this.separator_rollOutHandler, this);
                this.columnHeaderGroup.addEventListener(eui.GridEvent.SEPARATOR_MOUSE_DOWN, this.separator_mouseDownHandler, this);
                this.columnHeaderGroup.addEventListener(eui.GridEvent.SEPARATOR_MOUSE_DRAG, this.separator_mouseDragHandler, this);
                this.columnHeaderGroup.addEventListener(eui.GridEvent.SEPARATOR_MOUSE_UP, this.separator_mouseUpHandler, this);
            }
            else if (instance == this.scroller) {
            }
            if (this.grid) {
                if (instance == this.columnSeparator)
                    this.grid.columnSeparator = this.columnSeparator;
                if (instance == this.rowSeparator)
                    this.grid.rowSeparator = this.rowSeparator;
                if (instance == this.hoverIndicator)
                    this.grid.hoverIndicator = this.hoverIndicator;
                if (instance == this.caretIndicator) {
                    this.grid.caretIndicator = this.caretIndicator;
                    _self__.addEventListener(egret.FocusEvent.FOCUS_IN, this.dataGrid_focusHandler, this);
                    _self__.addEventListener(egret.FocusEvent.FOCUS_OUT, this.dataGrid_focusHandler, this);
                    if (this.grid && egret.is(this.grid.layout, "eui.GridLayout"))
                        (this.grid.layout).showCaret = false;
                }
                if (instance == this.rowBackground)
                    this.grid.rowBackground = this.rowBackground;
                if (instance == this.selectionIndicator)
                    this.grid.selectionIndicator = this.selectionIndicator;
            }
        };
        p.partRemoved = function (partName, instance) {
            var _self__ = this;
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.grid) {
                this.gridSelection.grid = null;
                this.grid.gridSelection = null;
                this.grid.dataGrid = null;
                this.grid.removeEventListener("invalidateSize", this.grid_invalidateSizeHandler, this);
                this.grid.removeEventListener("invalidateDisplayList", this.grid_invalidateDisplayListHandler, this);
                this.grid.removeEventListener(eui.GridEvent.GRID_MOUSE_DOWN, this.grid_mouseDownHandler, this);
                this.grid.removeEventListener(eui.GridEvent.GRID_MOUSE_UP, this.grid_mouseUpHandler, this);
                this.grid.removeEventListener(eui.GridEvent.GRID_ROLL_OVER, this.grid_rollOverHandler, this);
                this.grid.removeEventListener(eui.GridEvent.GRID_ROLL_OUT, this.grid_rollOutHandler, this);
                this.grid.removeEventListener(eui.GridCaretEvent.CARET_CHANGE, this.grid_caretChangeHandler, this);
                this.grid.removeEventListener(eui.UIEventEx.VALUE_COMMIT, this.grid_valueCommitHandler, this);
                var gridPropertyBits = this.gridProperties["propertyBits"];
                this.gridProperties = new Object();
                for (var propertyName in eui.DataGrid.gridPropertyDefaults) {
                    var propertyBit = eui.DataGrid.partPropertyBits[propertyName];
                    if ((propertyBit & gridPropertyBits) == propertyBit)
                        this.gridProperties[propertyName] = this.getGridProperty(propertyName);
                }
                this.grid.rowBackground = null;
                this.grid.columnSeparator = null;
                this.grid.rowSeparator = null;
                this.grid.hoverIndicator = null;
                this.grid.caretIndicator = null;
                this.grid.selectionIndicator = null;
                if (this.columnHeaderGroup)
                    this.columnHeaderGroup.dataGrid = null;
                if (this.editor) {
                    this.editor.uninitialize();
                    this.editor = null;
                }
            }
            if (this.grid) {
                if (instance == this.columnSeparator)
                    this.grid.columnSeparator = null;
                if (instance == this.rowSeparator)
                    this.grid.rowSeparator = null;
                if (instance == this.hoverIndicator)
                    this.grid.hoverIndicator = null;
                if (instance == this.caretIndicator) {
                    this.grid.caretIndicator = null;
                    _self__.removeEventListener(egret.FocusEvent.FOCUS_IN, this.dataGrid_focusHandler, this);
                    _self__.removeEventListener(egret.FocusEvent.FOCUS_OUT, this.dataGrid_focusHandler, this);
                }
                if (instance == this.selectionIndicator)
                    this.grid.selectionIndicator = null;
                if (instance == this.rowBackground)
                    this.grid.rowBackground = null;
            }
            if (instance == this.columnHeaderGroup) {
                this.columnHeaderGroup.dataGrid = null;
                this.columnHeaderGroup.removeEventListener(eui.GridEvent.GRID_CLICK, this.columnHeaderGroup_clickHandler, this);
                this.columnHeaderGroup.removeEventListener(eui.GridEvent.SEPARATOR_ROLL_OVER, this.separator_rollOverHandler, this);
                this.columnHeaderGroup.removeEventListener(eui.GridEvent.SEPARATOR_ROLL_OUT, this.separator_rollOutHandler, this);
                this.columnHeaderGroup.removeEventListener(eui.GridEvent.SEPARATOR_MOUSE_DOWN, this.separator_mouseDownHandler, this);
                this.columnHeaderGroup.removeEventListener(eui.GridEvent.SEPARATOR_MOUSE_DRAG, this.separator_mouseDragHandler, this);
                this.columnHeaderGroup.removeEventListener(eui.GridEvent.SEPARATOR_MOUSE_UP, this.separator_mouseUpHandler, this);
            }
        };
        d(p, "selectedCell"
            ,function () {
                if (this.grid)
                    return this.grid.selectedCell;
                return this.selectedCells.length ? this.selectedCells[0] : null;
            }
            ,function (value) {
                if (this.grid)
                    this.grid.selectedCell = value;
                else {
                    var valueCopy = (value) ? new eui.CellPosition(value.rowIndex, value.columnIndex) : null;
                    var f = function (g) {
                        g.selectedCell = valueCopy;
                    };
                    this.deferredGridOperations.push(f);
                }
            }
        );
        d(p, "selectedCells"
            ,function () {
                return this.grid ? this.grid.selectedCells : this.gridSelection.allCells();
            }
            ,function (value) {
                if (this.grid)
                    this.grid.selectedCells = value;
                else {
                    var valueCopy = (value) ? value.concat() : null;
                    var f = function (g) {
                        g.selectedCells = valueCopy;
                    };
                    this.deferredGridOperations.push(f);
                }
            }
        );
        d(p, "selectedIndex"
            ,function () {
                if (this.grid)
                    return this.grid.selectedIndex;
                return (this.selectedIndices.length > 0) ? this.selectedIndices[0] : -1;
            }
            ,function (value) {
                if (this.grid)
                    this.grid.selectedIndex = value;
                else {
                    var f = function (g) {
                        g.selectedIndex = value;
                    };
                    this.deferredGridOperations.push(f);
                }
            }
        );
        d(p, "selectedIndices"
            ,function () {
                return this.grid ? this.grid.selectedIndices : this.gridSelection.allRows();
            }
            ,function (value) {
                if (this.grid)
                    this.grid.selectedIndices = value;
                else {
                    var valueCopy = (value) ? value.concat() : null;
                    var f = function (g) {
                        g.selectedIndices = valueCopy;
                    };
                    this.deferredGridOperations.push(f);
                }
            }
        );
        d(p, "selectedItem"
            ,function () {
                if (this.grid)
                    return this.grid.selectedItem;
                return (this.dataProvider && (this.selectedIndex > 0)) ? this.dataProvider.getItemAt(this.selectedIndex) : undefined;
            }
            ,function (value) {
                if (this.grid)
                    this.grid.selectedItem = value;
                else {
                    var f = function (g) {
                        g.selectedItem = value;
                    };
                    this.deferredGridOperations.push(f);
                }
            }
        );
        d(p, "selectedItems"
            ,function () {
                if (this.grid)
                    return this.grid.selectedItems;
                var items = new Array();
                for (var i = 0; i < this.selectedIndices.length; i++)
                    items.push(this.selectedIndices[i]);
                return items;
            }
            ,function (value) {
                if (this.grid)
                    this.grid.selectedItems = value;
                else {
                    var valueCopy = value.concat();
                    var f = function (g) {
                        g.selectedItems = valueCopy;
                    };
                    this.deferredGridOperations.push(f);
                }
            }
        );
        d(p, "selectionLength"
            ,function () {
                return this.grid ? this.grid.selectionLength : this.gridSelection.selectionLength;
            }
            ,function (value) {
                egret.superSetter(eui.DataGrid, this, "selectionLength", value);
            }
        );
        p.invalidateCell = function (rowIndex, columnIndex) {
            if (this.grid)
                this.grid.invalidateCell(rowIndex, columnIndex);
        };
        p.selectAll = function () {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.selectAll();
            }
            else {
                selectionChanged = this.gridSelection.selectAll();
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        /**
         * @param dispatchChangeEvent 清空选择是否抛出事件，默认是抛出事件
         */
        p.clearSelection = function (dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = true; }
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.clearSelection(dispatchChangeEvent);
            }
            else {
                selectionChanged = this.gridSelection.removeAll();
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectionContainsIndex = function (rowIndex) {
            if (this.grid)
                return this.grid.selectionContainsIndex(rowIndex);
            else
                return this.gridSelection.containsRow(rowIndex);
        };
        p.selectionContainsIndices = function (rowIndices) {
            if (this.grid)
                return this.grid.selectionContainsIndices(rowIndices);
            else
                return this.gridSelection.containsRows(rowIndices);
        };
        /**
         * 由程序或者用户设置选中项。
         * @param rowIndex 索引值。
         * @param dispatchChangeEvent 当索引值发生改变，且该参数为true的时候，组件派发事件。
         */
        p.setSelectedIndex = function (rowIndex, dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = true; }
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.setSelectedIndex(rowIndex, dispatchChangeEvent);
            }
            else {
                selectionChanged = this.gridSelection.setRow(rowIndex);
                if (selectionChanged && dispatchChangeEvent) {
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
                }
            }
            return selectionChanged;
        };
        p.addSelectedIndex = function (rowIndex, dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = true; }
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.addSelectedIndex(rowIndex, dispatchChangeEvent);
            }
            else {
                selectionChanged = this.gridSelection.addRow(rowIndex);
                if (selectionChanged && dispatchChangeEvent) {
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
                }
            }
            return selectionChanged;
        };
        p.removeSelectedIndex = function (rowIndex) {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.removeSelectedIndex(rowIndex);
            }
            else {
                selectionChanged = this.gridSelection.removeRow(rowIndex);
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectIndices = function (rowIndex, rowCount) {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.selectIndices(rowIndex, rowCount);
            }
            else {
                selectionChanged = this.gridSelection.setRows(rowIndex, rowCount);
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectionContainsCell = function (rowIndex, columnIndex) {
            if (this.grid)
                return this.grid.selectionContainsCell(rowIndex, columnIndex);
            else
                return this.gridSelection.containsCell(rowIndex, columnIndex);
        };
        p.selectionContainsCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (this.grid) {
                return this.grid.selectionContainsCellRegion(rowIndex, columnIndex, rowCount, columnCount);
            }
            else {
                return this.gridSelection.containsCellRegion(rowIndex, columnIndex, rowCount, columnCount);
            }
        };
        p.setSelectedCell = function (rowIndex, columnIndex) {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.setSelectedCell(rowIndex, columnIndex);
            }
            else {
                selectionChanged = this.gridSelection.setCell(rowIndex, columnIndex);
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.addSelectedCell = function (rowIndex, columnIndex) {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.addSelectedCell(rowIndex, columnIndex);
            }
            else {
                selectionChanged = this.gridSelection.addCell(rowIndex, columnIndex);
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.removeSelectedCell = function (rowIndex, columnIndex) {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.removeSelectedCell(rowIndex, columnIndex);
            }
            else {
                selectionChanged = this.gridSelection.removeCell(rowIndex, columnIndex);
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            var selectionChanged;
            if (this.grid) {
                selectionChanged = this.grid.selectCellRegion(rowIndex, columnIndex, rowCount, columnCount);
            }
            else {
                selectionChanged = this.gridSelection.setCellRegion(rowIndex, columnIndex, rowCount, columnCount);
                if (selectionChanged)
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.commitInteractiveSelection = function (selectionEventKind, rowIndex, columnIndex, rowCount, columnCount) {
            if (rowCount === void 0) { rowCount = 1; }
            if (columnCount === void 0) { columnCount = 1; }
            var _self__ = this;
            if (!this.grid)
                return false;
            var selectionChange = new eui.CellRegion(rowIndex, columnIndex, rowCount, columnCount);
            if (!this.doesChangeCurrentSelection(selectionEventKind, selectionChange))
                return true;
            if (_self__.hasEventListener(eui.GridSelectionEvent.SELECTION_CHANGING)) {
                var changingEvent = new eui.GridSelectionEvent(eui.GridSelectionEvent.SELECTION_CHANGING, false, true, selectionEventKind, selectionChange);
                if (!_self__.dispatchEvent(changingEvent))
                    return false;
            }
            var changed;
            switch (selectionEventKind) {
                case eui.GridSelectionEventKind.SET_ROW:
                    {
                        changed = this.grid.gridSelection.setRow(rowIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.ADD_ROW:
                    {
                        changed = this.grid.gridSelection.addRow(rowIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.REMOVE_ROW:
                    {
                        changed = this.grid.gridSelection.removeRow(rowIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.SET_ROWS:
                    {
                        changed = this.grid.gridSelection.setRows(rowIndex, rowCount);
                        break;
                    }
                case eui.GridSelectionEventKind.SET_CELL:
                    {
                        changed = this.grid.gridSelection.setCell(rowIndex, columnIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.ADD_CELL:
                    {
                        changed = this.grid.gridSelection.addCell(rowIndex, columnIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.REMOVE_CELL:
                    {
                        changed = this.grid.gridSelection.removeCell(rowIndex, columnIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.SET_CELL_REGION:
                    {
                        changed = this.grid.gridSelection.setCellRegion(rowIndex, columnIndex, rowCount, columnCount);
                        break;
                    }
                case eui.GridSelectionEventKind.SELECT_ALL:
                    {
                        changed = this.grid.gridSelection.selectAll();
                        break;
                    }
            }
            if (!changed)
                return false;
            this.grid.invalidateDisplayListFor("selectionIndicator");
            if (_self__.hasEventListener(eui.GridSelectionEvent.SELECTION_CHANGE)) {
                var changeEvent = new eui.GridSelectionEvent(eui.GridSelectionEvent.SELECTION_CHANGE, false, true, selectionEventKind, selectionChange);
                _self__.dispatchEvent(changeEvent);
                if (this.grid.hasEventListener(eui.GridSelectionEvent.SELECTION_CHANGE))
                    this.grid.dispatchEvent(changeEvent);
            }
            this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            return true;
        };
        p.commitCaretPosition = function (newCaretRowIndex, newCaretColumnIndex) {
            this.grid.caretRowIndex = newCaretRowIndex;
            this.grid.caretColumnIndex = newCaretColumnIndex;
        };
        p.createGridSelection = function () {
            return new eui.GridSelection();
        };
        p.selectionContainsOnlyIndex = function (index) {
            if (this.grid)
                return this.grid.selectionContainsIndex(index) && this.grid.selectionLength == 1;
            else
                return this.gridSelection.containsRow(index) && this.gridSelection.selectionLength == 1;
        };
        p.selectionContainsOnlyIndices = function (selectionChange) {
            var selectionLength = this.grid ? this.grid.selectionLength : this.gridSelection.selectionLength;
            if (selectionChange.rowCount != selectionLength)
                return false;
            var bottom = selectionChange.rowIndex + selectionChange.rowCount;
            for (var rowIndex = selectionChange.rowIndex; rowIndex < bottom; rowIndex++) {
                if (this.grid) {
                    if (!this.grid.selectionContainsIndex(rowIndex))
                        return false;
                }
                else {
                    if (!this.gridSelection.containsRow(rowIndex))
                        return false;
                }
            }
            return true;
        };
        p.selectionContainsOnlyCell = function (rowIndex, columnIndex) {
            if (this.grid)
                return this.grid.selectionContainsCell(rowIndex, columnIndex) && this.grid.selectionLength == 1;
            else
                return this.gridSelection.containsCell(rowIndex, columnIndex) && this.gridSelection.selectionLength == 1;
        };
        p.selectionContainsOnlyCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (this.grid) {
                return this.grid.selectionContainsCellRegion(rowIndex, columnIndex, rowCount, columnCount) && this.grid.selectionLength == rowCount * columnCount;
            }
            else {
                return this.gridSelection.containsCellRegion(rowIndex, columnIndex, rowCount, columnCount) && this.gridSelection.selectionLength == rowCount * columnCount;
            }
        };
        p.startItemEditorSession = function (rowIndex, columnIndex) {
            if (this.editor)
                return this.editor.startItemEditorSession(rowIndex, columnIndex);
            return false;
        };
        p.endItemEditorSession = function (cancel) {
            if (cancel === void 0) { cancel = false; }
            if (this.editor)
                return this.editor.endItemEditorSession(cancel);
            return false;
        };
        p.createEditor = function () {
            return new eui.DataGridEditor(this);
        };
        p.sortByColumns = function (column, isInteractive) {
            if (isInteractive === void 0) { isInteractive = false; }
            var _self__ = this;
            var dataProvider = this.dataProvider;
            if (!dataProvider)
                return false;
            var dataField = column.dataField;
            var sortFunc = column.sortCompareFunction;
            var descending = column.sortDescending;
            if (isInteractive) {
                if (_self__.hasEventListener(eui.GridSortEvent.SORT_CHANGING)) {
                    var changingEvent = new eui.GridSortEvent(eui.GridSortEvent.SORT_CHANGING, false, true, column);
                    if (!_self__.dispatchEvent(changingEvent))
                        return false;
                }
            }
            if (egret.is(dataProvider, "eui.ArrayCollection")) {
                dataProvider.source.sort(function (itemA, itemB) {
                    var result = 0;
                    if (sortFunc != null) {
                        result = sortFunc(itemA, itemB, column);
                    }
                    else if (dataField) {
                        if (itemA[dataField] < itemB[dataField])
                            result = -1;
                        else if (itemA[dataField] > itemB[dataField])
                            result = 1;
                        else
                            result = 0;
                    }
                    else {
                        if (itemA < itemB)
                            result = -1;
                        else if (itemA > itemB)
                            result = 1;
                        else
                            result = 0;
                    }
                    if (descending)
                        result = -result;
                    return result;
                });
                var event = new eui.CollectionEvent(eui.CollectionEvent.COLLECTION_CHANGE, false, false, eui.CollectionEventKind.REFRESH, -1, -1, null, null);
                dataProvider.dispatchEvent(event);
            }
            if (isInteractive) {
                if (_self__.hasEventListener(eui.GridSortEvent.SORT_CHANGE)) {
                    var changeEvent = new eui.GridSortEvent(eui.GridSortEvent.SORT_CHANGE, false, true, column);
                    _self__.dispatchEvent(changeEvent);
                }
                if (this.columnHeaderGroup)
                    this.columnHeaderGroup.visibleSortIndicatorIndices = [column.columnIndex];
            }
            return true;
        };
        p.isAnchorSet = function () {
            if (!this.grid)
                return false;
            if (this.isRowSelectionMode())
                return this.grid.anchorRowIndex != -1;
            else
                return this.grid.anchorRowIndex != -1 && this.grid.anchorRowIndex != -1;
        };
        p.toggleSelection = function (rowIndex, columnIndex) {
            var kind;
            if (this.isRowSelectionMode()) {
                if (this.grid.selectionContainsIndex(rowIndex))
                    kind = eui.GridSelectionEventKind.REMOVE_ROW;
                else if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS)
                    kind = eui.GridSelectionEventKind.ADD_ROW;
                else
                    kind = eui.GridSelectionEventKind.SET_ROW;
            }
            else if (this.isCellSelectionMode()) {
                if (this.grid.selectionContainsCell(rowIndex, columnIndex))
                    kind = eui.GridSelectionEventKind.REMOVE_CELL;
                else if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS)
                    kind = eui.GridSelectionEventKind.ADD_CELL;
                else
                    kind = eui.GridSelectionEventKind.SET_CELL;
            }
            var success = this.commitInteractiveSelection(kind, rowIndex, columnIndex);
            if (success)
                this.commitCaretPosition(rowIndex, columnIndex);
            return success;
        };
        p.extendSelection = function (caretRowIndex, caretColumnIndex) {
            if (!this.isAnchorSet())
                return false;
            var startRowIndex = Math.min(this.grid.anchorRowIndex, caretRowIndex);
            var endRowIndex = Math.max(this.grid.anchorRowIndex, caretRowIndex);
            var success;
            if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS) {
                success = this.commitInteractiveSelection(eui.GridSelectionEventKind.SET_ROWS, startRowIndex, -1, endRowIndex - startRowIndex + 1, 0);
            }
            else if (this.selectionMode == eui.GridSelectionMode.SINGLE_ROW) {
                success = this.commitInteractiveSelection(eui.GridSelectionEventKind.SET_ROW, caretRowIndex, -1, 1, 0);
            }
            else if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS) {
                var rowCount = endRowIndex - startRowIndex + 1;
                var startColumnIndex = Math.min(this.grid.anchorColumnIndex, caretColumnIndex);
                var endColumnIndex = Math.max(this.grid.anchorColumnIndex, caretColumnIndex);
                var columnCount = endColumnIndex - startColumnIndex + 1;
                success = this.commitInteractiveSelection(eui.GridSelectionEventKind.SET_CELL_REGION, startRowIndex, startColumnIndex, rowCount, columnCount);
            }
            else if (this.selectionMode == eui.GridSelectionMode.SINGLE_CELL) {
                success = this.commitInteractiveSelection(eui.GridSelectionEventKind.SET_CELL, caretRowIndex, caretColumnIndex, 1, 1);
            }
            if (success)
                this.commitCaretPosition(caretRowIndex, caretColumnIndex);
            return success;
        };
        p.setSelectionAnchorCaret = function (rowIndex, columnIndex) {
            var success;
            if (this.isRowSelectionMode()) {
                success = this.commitInteractiveSelection(eui.GridSelectionEventKind.SET_ROW, rowIndex, columnIndex);
            }
            else if (this.isCellSelectionMode()) {
                success = this.commitInteractiveSelection(eui.GridSelectionEventKind.SET_CELL, rowIndex, columnIndex);
            }
            if (success) {
                this.commitCaretPosition(rowIndex, columnIndex);
                this.grid.anchorRowIndex = rowIndex;
                this.grid.anchorColumnIndex = columnIndex;
            }
            return success;
        };
        p.setCaretToNavigationDestination = function (navigationUnit) {
            var caretRowIndex = this.grid.caretRowIndex;
            var caretColumnIndex = this.grid.caretColumnIndex;
            var inRows = this.isRowSelectionMode();
            var rowCount = this.dataProviderLength;
            var columnCount = this.columnsLength;
            var visibleRows;
            var caretRowBounds;
            switch (navigationUnit) {
                case eui.NavigationUnit.LEFT:
                    {
                        if (this.isCellSelectionMode()) {
                            if (this.grid.caretColumnIndex > 0)
                                caretColumnIndex = this.grid.getPreviousVisibleColumnIndex(caretColumnIndex);
                        }
                        break;
                    }
                case eui.NavigationUnit.RIGHT:
                    {
                        if (this.isCellSelectionMode()) {
                            if (this.grid.caretColumnIndex + 1 < columnCount)
                                caretColumnIndex = this.grid.getNextVisibleColumnIndex(caretColumnIndex);
                        }
                        break;
                    }
                case eui.NavigationUnit.UP:
                    {
                        if (this.grid.caretRowIndex > 0)
                            caretRowIndex--;
                        break;
                    }
                case eui.NavigationUnit.DOWN:
                    {
                        if (this.grid.caretRowIndex + 1 < rowCount)
                            caretRowIndex++;
                        break;
                    }
                case eui.NavigationUnit.PAGE_UP:
                    {
                        visibleRows = this.grid.getVisibleRowIndices();
                        if (visibleRows.length == 0)
                            break;
                        var firstVisibleRowIndex = visibleRows[0];
                        var firstVisibleRowBounds = this.grid.getRowBounds(firstVisibleRowIndex);
                        if (firstVisibleRowIndex < rowCount - 1 && firstVisibleRowBounds.top < this.grid.scrollRect.top) {
                            firstVisibleRowIndex = visibleRows[1];
                        }
                        if (caretRowIndex > firstVisibleRowIndex) {
                            caretRowIndex = firstVisibleRowIndex;
                        }
                        else {
                            caretRowBounds = this.grid.getRowBounds(caretRowIndex);
                            var delta = this.grid.scrollRect.bottom - caretRowBounds.bottom;
                            this.grid.layout.target.scrollV -= delta;
                            this.validateNow();
                            visibleRows = this.grid.getVisibleRowIndices();
                            firstVisibleRowIndex = visibleRows[0];
                            if (visibleRows.length > 0) {
                                firstVisibleRowBounds = this.grid.getRowBounds(firstVisibleRowIndex);
                                if (firstVisibleRowIndex < rowCount - 1 && this.grid.scrollRect.top > firstVisibleRowBounds.top) {
                                    firstVisibleRowIndex = visibleRows[1];
                                }
                                caretRowIndex = firstVisibleRowIndex;
                            }
                        }
                        break;
                    }
                case eui.NavigationUnit.PAGE_DOWN:
                    {
                        visibleRows = this.grid.getVisibleRowIndices();
                        if (visibleRows.length == 0)
                            break;
                        var lastVisibleRowIndex = Math.min(rowCount - 1, visibleRows[visibleRows.length - 1]);
                        var lastVisibleRowBounds = this.grid.getRowBounds(lastVisibleRowIndex);
                        if (lastVisibleRowIndex > 0 && this.grid.scrollRect.bottom < lastVisibleRowBounds.bottom) {
                            lastVisibleRowIndex = visibleRows[visibleRows.length - 2];
                        }
                        if (caretRowIndex < lastVisibleRowIndex) {
                            caretRowIndex = lastVisibleRowIndex;
                        }
                        else {
                            caretRowBounds = this.grid.getRowBounds(caretRowIndex);
                            this.grid.layout.target.scrollV = caretRowBounds.y;
                            this.validateNow();
                            visibleRows = this.grid.getVisibleRowIndices();
                            lastVisibleRowIndex = Math.min(rowCount - 1, visibleRows[visibleRows.length - 1]);
                            if (visibleRows.length >= 0) {
                                lastVisibleRowBounds = this.grid.getRowBounds(lastVisibleRowIndex);
                                if (lastVisibleRowIndex > 0 && this.grid.scrollRect.bottom < lastVisibleRowBounds.bottom) {
                                    lastVisibleRowIndex = visibleRows[visibleRows.length - 2];
                                }
                                caretRowIndex = lastVisibleRowIndex;
                            }
                        }
                        break;
                    }
                case eui.NavigationUnit.HOME:
                    {
                        caretRowIndex = 0;
                        caretColumnIndex = this.isCellSelectionMode() ? this.grid.getNextVisibleColumnIndex(-1) : -1;
                        break;
                    }
                case eui.NavigationUnit.END:
                    {
                        caretRowIndex = rowCount - 1;
                        caretColumnIndex = this.isCellSelectionMode() ? this.grid.getPreviousVisibleColumnIndex(columnCount) : -1;
                        //                                                this.grid.verticalScrollPosition = this.grid.contentHeight; //修改 fenghuitao 4.8
                        //                                                this.grid.scrollV = this.grid.contentHeight;
                        this.validateNow();
                        //                        if(this.grid.contentHeight != this.grid.verticalScrollPosition) {
                        //
                        //                            this.validateNow();
                        //                        }
                        break;
                    }
                default:
                    {
                        return null;
                    }
            }
            return new eui.CellPosition(caretRowIndex, caretColumnIndex);
        };
        p.ensureCellIsVisible = function (rowIndex, columnIndex) {
            if (columnIndex === void 0) { columnIndex = -1; }
            if (this.grid)
                this.grid.ensureCellIsVisible(rowIndex, columnIndex);
        };
        p.adjustSelectionUponNavigation = function (event) {
            if (!eui.NavigationUnit.isNavigationUnit(event.keyCode))
                return false;
            var navigationUnit = event.keyCode;
            var newPosition = this.setCaretToNavigationDestination(navigationUnit);
            if (!newPosition)
                return false;
            event.preventDefault();
            var selectionChanged = false;
            if (event.shiftKey) {
                selectionChanged = this.extendSelection(newPosition.rowIndex, newPosition.columnIndex);
            }
            else if (event.ctrlKey) {
                this.commitCaretPosition(newPosition.rowIndex, newPosition.columnIndex);
            }
            else {
                this.setSelectionAnchorCaret(newPosition.rowIndex, newPosition.columnIndex);
            }
            this.ensureCellIsVisible(newPosition.rowIndex, newPosition.columnIndex);
            return true;
        };
        p.doesChangeCurrentSelection = function (selectionEventKind, selectionChange) {
            var changesSelection;
            var rowIndex = selectionChange.rowIndex;
            var columnIndex = selectionChange.columnIndex;
            var rowCount = selectionChange.rowCount;
            var columnCount = selectionChange.columnCount;
            switch (selectionEventKind) {
                case eui.GridSelectionEventKind.SET_ROW:
                    {
                        changesSelection = !this.selectionContainsOnlyIndex(rowIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.ADD_ROW:
                    {
                        changesSelection = !this.grid.selectionContainsIndex(rowIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.REMOVE_ROW:
                    {
                        changesSelection = this.requireSelection ? !this.selectionContainsOnlyIndex(rowIndex) : this.grid.selectionContainsIndex(rowIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.SET_ROWS:
                    {
                        changesSelection = !this.selectionContainsOnlyIndices(selectionChange);
                        break;
                    }
                case eui.GridSelectionEventKind.SET_CELL:
                    {
                        changesSelection = !this.selectionContainsOnlyCell(rowIndex, columnIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.ADD_CELL:
                    {
                        changesSelection = !this.grid.selectionContainsCell(rowIndex, columnIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.REMOVE_CELL:
                    {
                        changesSelection = this.requireSelection ? !this.selectionContainsOnlyCell(rowIndex, columnIndex) : this.grid.selectionContainsCell(rowIndex, columnIndex);
                        break;
                    }
                case eui.GridSelectionEventKind.SET_CELL_REGION:
                    {
                        changesSelection = !this.selectionContainsOnlyCellRegion(rowIndex, columnIndex, rowCount, columnCount);
                        break;
                    }
                case eui.GridSelectionEventKind.SELECT_ALL:
                    {
                        changesSelection = true;
                        break;
                    }
            }
            return changesSelection;
        };
        p.grid_rollOverHandler = function (event) {
            if (event.isDefaultPrevented())
                return;
            if (event["buttonDown"] && event["relatedObject"] != this.grid)
                this.updateHoverOnRollOver = false;
            this.grid.hoverRowIndex = this.updateHoverOnRollOver ? event.rowIndex : -1;
            this.grid.hoverColumnIndex = this.updateHoverOnRollOver ? event.columnIndex : -1;
            event.updateAfterEvent();
        };
        p.grid_rollOutHandler = function (event) {
            if (event.isDefaultPrevented())
                return;
            this.grid.hoverRowIndex = -1;
            this.grid.hoverColumnIndex = -1;
            this.updateHoverOnRollOver = true;
            event.updateAfterEvent();
        };
        p.grid_mouseUpHandler = function (event) {
            if (event.isDefaultPrevented())
                return;
            if (!this.updateHoverOnRollOver) {
                this.grid.hoverRowIndex = event.rowIndex;
                this.grid.hoverColumnIndex = event.columnIndex;
                this.updateHoverOnRollOver = true;
            }
        };
        p.grid_mouseDownHandler = function (event) {
            if (event.isDefaultPrevented())
                return;
            var isCellSelection = this.isCellSelectionMode();
            var rowIndex = event.rowIndex;
            var columnIndex = isCellSelection ? event.columnIndex : -1;
            if (rowIndex == -1 || isCellSelection && columnIndex == -1)
                return;
            if (event.ctrlKey || event.commandKey) {
                if (!this.toggleSelection(rowIndex, columnIndex))
                    return;
                this.grid.anchorRowIndex = rowIndex;
                this.grid.anchorColumnIndex = columnIndex;
            }
            else if (event.shiftKey) {
                if (this.grid.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS || this.grid.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS) {
                    if (!this.extendSelection(rowIndex, columnIndex))
                        return;
                }
            }
            else {
                this.setSelectionAnchorCaret(rowIndex, columnIndex);
            }
        };
        p.grid_caretChangeHandler = function (event) {
            var _self__ = this;
            if (_self__.hasEventListener(eui.GridCaretEvent.CARET_CHANGE))
                _self__.dispatchEvent(event);
        };
        p.grid_valueCommitHandler = function (event) {
            var _self__ = this;
            if (_self__.hasEventListener(eui.UIEventEx.VALUE_COMMIT))
                _self__.dispatchEvent(event);
        };
        p.grid_invalidateDisplayListHandler = function (event) {
            if (this.columnHeaderGroup && this.grid.isInvalidateDisplayListReason("horizontalScrollPosition"))
                this.columnHeaderGroup.invalidateDisplayList();
        };
        p.grid_invalidateSizeHandler = function (event) {
            if (this.columnHeaderGroup)
                this.columnHeaderGroup.invalidateSize();
        };
        p.columnHeaderGroup_clickHandler = function (event) {
            var column = event.column;
            if (!this.enabled || !this.sortableColumns || !column || !column.sortable)
                return;
            var columnIndices = Array(column.columnIndex);
            column.sortDescending = !column.sortDescending;
            this.sortByColumns(column, true);
        };
        p.separator_mouseDownHandler = function (event) {
            var column = event.column;
            if (!this.enabled || !this.grid.resizableColumns || !column || !column.resizable)
                return;
            this.resizeColumn = event.column;
            this.resizeAnchorX = event["localX"];
            this.resizeColumnWidth = this.grid.getColumnWidth(this.resizeColumn.columnIndex);
            this.nextColumn = null;
            this.nextColumnWidth = NaN;
            var resizeColumnIndex = this.resizeColumn.columnIndex;
            for (var columnIndex = 0; columnIndex < resizeColumnIndex; columnIndex++) {
                var gc = this.getColumnAt(columnIndex);
                if (gc.visible && isNaN(gc.width))
                    gc.width = this.grid.getColumnWidth(columnIndex);
            }
        };
        p.separator_mouseDragHandler = function (event) {
            if (!this.resizeColumn)
                return;
            var widthDelta = event["localX"] - this.resizeAnchorX;
            var minWidth = isNaN(this.resizeColumn.minWidth) ? 0 : this.resizeColumn.minWidth;
            var maxWidth = this.resizeColumn.maxWidth;
            var newWidth = Math.ceil(this.resizeColumnWidth + widthDelta);
            if (this.nextColumn) {
                var nextMinWidth = isNaN(this.nextColumn.minWidth) ? 0 : this.nextColumn.minWidth;
                if (Math.ceil(this.nextColumnWidth - widthDelta) <= nextMinWidth)
                    return;
                if (Math.ceil(this.resizeColumnWidth + widthDelta) <= minWidth)
                    return;
                this.nextColumn.width = this.nextColumnWidth - widthDelta;
            }
            newWidth = Math.max(newWidth, minWidth);
            if (!isNaN(maxWidth))
                newWidth = Math.min(newWidth, maxWidth);
            this.resizeColumn.width = newWidth;
            event.updateAfterEvent();
        };
        p.separator_mouseUpHandler = function (event) {
            if (!this.resizeColumn)
                return;
            this.resizeColumn = null;
        };
        p.separator_rollOverHandler = function (event) {
            var column = event.column;
            if (!this.enabled || !this.grid.resizableColumns || !column || !column.resizable)
                return;
        };
        p.separator_rollOutHandler = function (event) {
            if (!this.enabled)
                return;
        };
        p.dataGrid_focusHandler = function (event) {
            if (!this.grid || !(egret.is(this.grid.layout, 'eui.GridLayout')))
                return;
            if (this.isOurFocus((event.target))) {
                (this.grid.layout)["showCaret"] = event.type == egret.FocusEvent.FOCUS_IN && this.selectionMode != eui.GridSelectionMode.NONE;
            }
        };
        return DataGrid;
    })(eui.Component);
    eui.DataGrid = DataGrid;
    egret.registerClass(DataGrid,'eui.DataGrid');
    //鼠标经过的颜色
    //    class HoverIndicator extends eui.Rect {
    //        public constructor() {
    //            super();
    //            this.fillColor = 0x3b4853;
    //        }
    //    }
    //    class EditorIndicator extends eui.Rect {
    //        public constructor() {
    //            super();
    //            this.fillColor = 0xFFFFFF;
    //        }
    //    }
    //行分割线
    //    class RowSeparator extends eui.Rect {
    //        public constructor() {
    //            super();
    //            this.height = 1;
    //            this.fillColor = 0x1b2025;
    //        }
    //    }
    //    class HeaderColumnSeparator extends eui.Rect {
    //        public constructor() {
    //            super();
    //            this.width = 1;
    //            this.fillColor = 0x1b2025;
    //        }
    //    }
    //列分割线
    //    class ColumnSeparator extends eui.Rect {
    //        public constructor() {
    //            super();
    //            this.width = 1;
    //            this.fillColor = 0x1b2025;
    //        }
    //    }
    //选中的颜色
    var SelectionIndicator = (function (_super) {
        __extends(SelectionIndicator, _super);
        function SelectionIndicator() {
            _super.call(this);
            this.rect = new eui.SelectionIndicatorRect();
        }
        var c=SelectionIndicator,p=c.prototype;
        p.createChildren = function () {
            //            this.rect.fillColor = 0x4f6070;
            //            this.rect.strokeAlpha = 1;
            //            this.rect.strokeColor = 0x006ed7;
            //            this.rect.strokeWeight = 1;
            this.rect.touchChildren = false;
            this.rect.touchEnabled = false;
            this.addChild(this.rect);
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            this.rect.x = 1;
            this.rect.y = 1;
            var temp = egret.$TempRectangle;
            this.getLayoutBounds(temp);
            this.rect.width = temp.width - 2;
            this.rect.height = temp.height - 2;
        };
        return SelectionIndicator;
    })(eui.Group);
    egret.registerClass(SelectionIndicator,'SelectionIndicator');
})(eui || (eui = {}));
eui.DataGrid.partPropertyBits = { columns: 1 << 0, dataProvider: 1 << 1, itemRenderer: 1 << 2, requestedRowCount: 1 << 3, requestedColumnCount: 1 << 4, requestedMaxRowCount: 1 << 5, requestedMinRowCount: 1 << 6, requestedMinColumnCount: 1 << 7, rowHeight: 1 << 8, showDataTips: 1 << 9, typicalItem: 1 << 10, variableRowHeight: 1 << 11, dataTipField: 1 << 12, dataTipFunction: 1 << 13, resizableColumns: 1 << 14 };
eui.DataGrid.gridPropertyDefaults = { columns: null, dataProvider: null, itemRenderer: null, resizableColumns: true, requestedRowCount: -1, requestedMaxRowCount: 10, requestedMinRowCount: -1, requestedColumnCount: -1, requestedMinColumnCount: -1, rowHeight: NaN, showDataTips: false, typicalItem: null, variableRowHeight: false, dataTipField: null, dataTipFunction: null };
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The DataGroup class is the base container class for data items.
     * The DataGroup class converts data items to visual elements for display.
     * While this container can hold visual elements, it is often used only
     * to hold data items as children.
     *
     * @see eui.Group
     * @defaultProperty dataProvider
     * @includeExample  extension/eui/components/DataGroupExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * DataGroup 类将数据项目转换为可视元素以进行显示。
     * 尽管此容器可以包含可视元素，但它通常仅用于包含作为子项的数据项目。
     *
     * @see eui.Group
     * @see http://edn.egret.com/cn/index.php/article/index/id/527 数据容器
     * @see http://edn.egret.com/cn/index.php/article/index/id/528 数组集合
     * @defaultProperty dataProvider
     * @includeExample  extension/eui/components/DataGroupExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var DataGroup = (function (_super) {
        __extends(DataGroup, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function DataGroup() {
            _super.call(this);
            /**
             * @private
             */
            this.$dataProviderChanged = false;
            /**
             * @private
             */
            this.$dataProvider = null;
            /**
             * @private
             * 索引到项呈示器的转换数组
             */
            this.$indexToRenderer = [];
            this.$DataGroup = {
                0: true,
                1: false,
                2: {},
                3: {},
                4: false,
                5: false,
                6: null,
                7: null,
                8: false,
                9: null,
                10: false,
                11: false,
                12: null,
                13: null,
                14: false,
            };
        }
        var c=DataGroup,p=c.prototype;
        d(p, "useVirtualLayout"
            /**
             * @copy eui.LayoutBase#useVirtualLayout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$layout ? this.$layout.$useVirtualLayout :
                    this.$DataGroup[0 /* useVirtualLayout */];
            }
            ,function (value) {
                value = !!value;
                var values = this.$DataGroup;
                if (value === values[0 /* useVirtualLayout */])
                    return;
                values[0 /* useVirtualLayout */] = value;
                if (this.$layout)
                    this.$layout.useVirtualLayout = value;
            }
        );
        /**
         * @private
         *
         * @param value
         */
        p.$setLayout = function (value) {
            if (value == this.$layout)
                return false;
            if (this.$layout) {
                this.$layout.setTypicalSize(0, 0);
                this.$layout.removeEventListener("useVirtualLayoutChanged", this.onUseVirtualLayoutChanged, this);
            }
            if (this.$layout && value && (this.$layout.$useVirtualLayout != value.$useVirtualLayout))
                this.onUseVirtualLayoutChanged();
            var result = _super.prototype.$setLayout.call(this, value);
            if (value) {
                var rect = this.$DataGroup[9 /* typicalLayoutRect */];
                if (rect) {
                    value.setTypicalSize(rect.width, rect.height);
                }
                value.useVirtualLayout = this.$DataGroup[0 /* useVirtualLayout */];
                value.addEventListener("useVirtualLayoutChanged", this.onUseVirtualLayoutChanged, this);
            }
            return result;
        };
        /**
         * @private
         * 是否使用虚拟布局标记改变
         */
        p.onUseVirtualLayoutChanged = function (event) {
            var values = this.$DataGroup;
            values[1 /* useVirtualLayoutChanged */] = true;
            values[10 /* cleanFreeRenderer */] = true;
            this.removeDataProviderListener();
            this.invalidateProperties();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setVirtualElementIndicesInView = function (startIndex, endIndex) {
            if (!this.$layout || !this.$layout.$useVirtualLayout) {
                return;
            }
            var indexToRenderer = this.$indexToRenderer;
            var keys = Object.keys(indexToRenderer);
            var length = keys.length;
            for (var i = 0; i < length; i++) {
                var index = +keys[i];
                if (index < startIndex || index > endIndex) {
                    this.freeRendererByIndex(index);
                }
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementAt = function (index) {
            return this.$indexToRenderer[index];
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.5.2
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getVirtualElementAt = function (index) {
            index = +index | 0;
            if (index < 0 || index >= this.$dataProvider.length)
                return null;
            var renderer = this.$indexToRenderer[index];
            if (!renderer) {
                var item = this.$dataProvider.getItemAt(index);
                renderer = this.createVirtualRenderer(item);
                this.$indexToRenderer[index] = renderer;
                this.updateRenderer(renderer, index, item);
                var values = this.$DataGroup;
                if (values[4 /* createNewRendererFlag */]) {
                    renderer.validateNow();
                    values[4 /* createNewRendererFlag */] = false;
                    this.rendererAdded(renderer, index, item);
                }
            }
            return renderer;
        };
        /**
         * @private
         * 释放指定索引处的项呈示器
         */
        p.freeRendererByIndex = function (index) {
            var renderer = this.$indexToRenderer[index];
            if (renderer) {
                delete this.$indexToRenderer[index];
                this.doFreeRenderer(renderer);
            }
        };
        /**
         * @private
         *
         * @param renderer
         */
        p.doFreeRenderer = function (renderer) {
            var values = this.$DataGroup;
            var rendererClass = values[2 /* rendererToClassMap */][renderer.$hashCode];
            var hashCode = rendererClass.$hashCode;
            if (!values[3 /* freeRenderers */][hashCode]) {
                values[3 /* freeRenderers */][hashCode] = [];
            }
            values[3 /* freeRenderers */][hashCode].push(renderer);
            renderer.visible = false;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
            if (!this.$DataGroup[4 /* createNewRendererFlag */]) {
                _super.prototype.invalidateSize.call(this);
            }
        };
        /**
         * @private
         * 为指定索引创建虚拟的项呈示器
         */
        p.createVirtualRenderer = function (item) {
            var renderer;
            var rendererClass = this.itemToRendererClass(item);
            var hashCode = rendererClass.$hashCode;
            var values = this.$DataGroup;
            var freeRenderers = values[3 /* freeRenderers */];
            if (freeRenderers[hashCode] && freeRenderers[hashCode].length > 0) {
                renderer = freeRenderers[hashCode].pop();
                renderer.visible = true;
                return renderer;
            }
            values[4 /* createNewRendererFlag */] = true;
            return this.createOneRenderer(rendererClass);
        };
        /**
         * @private
         * 根据rendererClass创建一个Renderer,并添加到显示列表
         */
        p.createOneRenderer = function (rendererClass) {
            var renderer = (new rendererClass());
            var values = this.$DataGroup;
            values[2 /* rendererToClassMap */][renderer.$hashCode] = rendererClass;
            if (!egret.is(renderer, "eui.IItemRenderer")) {
                return null;
            }
            if (values[13 /* itemRendererSkinName */]) {
                this.setItemRenderSkinName(renderer, values[13 /* itemRendererSkinName */]);
            }
            this.addChild(renderer);
            return renderer;
        };
        /**
         * @private
         * 设置项呈示器的默认皮肤
         */
        p.setItemRenderSkinName = function (renderer, skinName) {
            if (renderer && renderer instanceof eui.Component) {
                var comp = renderer;
                if (!comp.$Component[5 /* skinNameExplicitlySet */]) {
                    comp.skinName = skinName;
                    comp.$Component[5 /* skinNameExplicitlySet */] = false;
                }
            }
        };
        d(p, "dataProvider"
            /**
             * @language en_US
             * The data provider for this DataGroup.
             * It must be an ICollection, such as ArrayCollection
             *
             * @see eui.ICollection
             * @see eui.ArrayCollection
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 列表数据源，请使用实现了ICollection接口的数据类型，例如 ArrayCollection
             *
             * @see eui.ICollection
             * @see eui.ArrayCollection
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$dataProvider;
            }
            ,function (value) {
                this.$setDataProvider(value);
            }
        );
        /**
         * @private
         *
         * @param value
         */
        p.$setDataProvider = function (value) {
            if (this.$dataProvider == value)
                return false;
            this.removeDataProviderListener();
            this.$dataProvider = value;
            this.$dataProviderChanged = true;
            this.$DataGroup[10 /* cleanFreeRenderer */] = true;
            this.invalidateProperties();
            this.invalidateSize();
            this.invalidateDisplayList();
            return true;
        };
        /**
         * @private
         * 移除数据源监听
         */
        p.removeDataProviderListener = function () {
            if (this.$dataProvider)
                this.$dataProvider.removeEventListener(eui.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this);
        };
        /**
         * @language en_US
         * Called when contents within the dataProvider changes.  We will catch certain
         * events and update our children based on that.
         *
         * @param event 事件<code>eui.CollectionEvent</code>的对象。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 数据源改变事件处理。
         *
         * @param event 事件<code>eui.CollectionEvent</code>的对象。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onCollectionChange = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    this.itemAddedHandler(event.items, event.location);
                    break;
                case eui.CollectionEventKind.REMOVE:
                    this.itemRemovedHandler(event.items, event.location);
                    break;
                case eui.CollectionEventKind.UPDATE:
                case eui.CollectionEventKind.REPLACE:
                    this.itemUpdatedHandler(event.items[0], event.location);
                    break;
                case eui.CollectionEventKind.RESET:
                case eui.CollectionEventKind.REFRESH:
                    if (this.$layout && this.$layout.$useVirtualLayout) {
                        var indexToRenderer = this.$indexToRenderer;
                        var keys = Object.keys(indexToRenderer);
                        var length = keys.length;
                        for (var i = 0; i < length; i++) {
                            var index = +keys[i];
                            this.freeRendererByIndex(index);
                        }
                    }
                    this.$dataProviderChanged = true;
                    this.invalidateProperties();
                    break;
            }
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        /**
         * @private
         * 数据源添加项目事件处理
         */
        p.itemAddedHandler = function (items, index) {
            var length = items.length;
            for (var i = 0; i < length; i++) {
                this.itemAdded(items[i], index + i);
            }
            this.resetRenderersIndices();
        };
        /**
         * @private
         * 数据源移除项目事件处理
         */
        p.itemRemovedHandler = function (items, location) {
            var length = items.length;
            for (var i = length - 1; i >= 0; i--) {
                this.itemRemoved(items[i], location + i);
            }
            this.resetRenderersIndices();
        };
        /**
         * @language en_US
         * Adds the item for the specified dataProvider item to this DataGroup.
         *
         * This method is called as needed by the DataGroup implementation,
         * it should not be called directly.
         *
         * @param item The item that was added, the value of dataProvider[index].
         * @param index The index where the dataProvider item was added.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 添加一个指定的数据到数据源。
         *
         * 这个方法不应该由开发者直接调用，而用于本类自动内调用。
         *
         * @param item 添加的数据项。
         * @param index 被添加到的索引。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.itemAdded = function (item, index) {
            if (this.$layout)
                this.$layout.elementAdded(index);
            if (this.$layout && this.$layout.$useVirtualLayout) {
                this.$indexToRenderer.splice(index, 0, null);
                return;
            }
            var renderer = this.createVirtualRenderer(item);
            this.$indexToRenderer.splice(index, 0, renderer);
            if (renderer) {
                this.updateRenderer(renderer, index, item);
                var values = this.$DataGroup;
                if (values[4 /* createNewRendererFlag */]) {
                    values[4 /* createNewRendererFlag */] = false;
                    this.rendererAdded(renderer, index, item);
                }
            }
        };
        /**
         * @language en_US
         * Removes the itemRenderer for the specified dataProvider item from this DataGroup.
         *
         * This method is called as needed by the DataGroup implementation,
         * it should not be called directly.
         *
         * @param item The item that is being removed.
         * @param index The index of the item that is being removed.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 删除数据源中指定的项。
         *
         * 这个方法不应该由开发者直接调用，而用于本类自动内调用。
         *
         * @param item 移除的数据项。
         * @param index 被移除的索引。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.itemRemoved = function (item, index) {
            if (this.$layout)
                this.$layout.elementRemoved(index);
            var oldRenderer = this.$indexToRenderer[index];
            if (this.$indexToRenderer.length > index)
                this.$indexToRenderer.splice(index, 1);
            if (oldRenderer) {
                if (this.$layout && this.$layout.$useVirtualLayout) {
                    this.doFreeRenderer(oldRenderer);
                }
                else {
                    this.rendererRemoved(oldRenderer, index, item);
                    this.removeChild(oldRenderer);
                }
            }
        };
        /**
         * @private
         * 更新当前所有项的索引
         */
        p.resetRenderersIndices = function () {
            var indexToRenderer = this.$indexToRenderer;
            if (indexToRenderer.length == 0)
                return;
            if (this.$layout && this.$layout.$useVirtualLayout) {
                var keys = Object.keys(indexToRenderer);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var index = +keys[i];
                    this.resetRendererItemIndex(index);
                }
            }
            else {
                var indexToRendererLength = indexToRenderer.length;
                for (index = 0; index < indexToRendererLength; index++) {
                    this.resetRendererItemIndex(index);
                }
            }
        };
        /**
         * @private
         * 数据源更新或替换项目事件处理
         */
        p.itemUpdatedHandler = function (item, location) {
            if (this.$DataGroup[11 /* renderersBeingUpdated */]) {
                return; //防止无限循环
            }
            var renderer = this.$indexToRenderer[location];
            if (renderer)
                this.updateRenderer(renderer, location, item);
        };
        /**
         * @private
         * 调整指定项呈示器的索引值
         */
        p.resetRendererItemIndex = function (index) {
            var renderer = this.$indexToRenderer[index];
            if (renderer)
                renderer.itemIndex = index;
        };
        d(p, "itemRenderer"
            /**
             * @language en_US
             * The item renderer to use for data items.
             * The class must implement the IItemRenderer interface.
             * If defined, the <code>itemRendererFunction</code> property
             * takes precedence over this property.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 用于数据项目的项呈示器。您应该直接为此属性赋值自定义类的类定义，而不是一个实例。注意：该类必须实现 IItemRenderer 接口。<br/>
             * rendererClass获取顺序：itemRendererFunction > itemRenderer > 默认ItemRenerer。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$DataGroup[6 /* itemRenderer */];
            }
            ,function (value) {
                var values = this.$DataGroup;
                if (values[6 /* itemRenderer */] == value)
                    return;
                values[6 /* itemRenderer */] = value;
                values[5 /* itemRendererChanged */] = true;
                values[8 /* typicalItemChanged */] = true;
                values[10 /* cleanFreeRenderer */] = true;
                this.removeDataProviderListener();
                this.invalidateProperties();
            }
        );
        d(p, "itemRendererSkinName"
            /**
             * @language en_US
             * The skinName property of the itemRenderer.This property will be passed to itemRenderer.skinName as default value,if you
             * did not set it explicitly.<br>
             * Note: This property is invalid if the itemRenderer is not a subclass of the Component class.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 条目渲染器的可选皮肤标识符。在实例化itemRenderer时，若其内部没有设置过skinName,则将此属性的值赋值给它的skinName。
             * 注意:若 itemRenderer 不是 Component 的子类，则此属性无效。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$DataGroup[13 /* itemRendererSkinName */];
            }
            ,function (value) {
                var values = this.$DataGroup;
                if (values[13 /* itemRendererSkinName */] == value)
                    return;
                values[13 /* itemRendererSkinName */] = value;
                if (this.$UIComponent[29 /* initialized */]) {
                    values[14 /* itemRendererSkinNameChange */] = true;
                    this.invalidateProperties();
                }
            }
        );
        d(p, "itemRendererFunction"
            /**
             * @language en_US
             * Function that returns an item renderer for a
             * specific item.
             *
             * If defined, this property
             * takes precedence over the <code>itemRenderer</code> property.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 为某个特定数据项返回一个项呈示器类定义的函数。
             * rendererClass获取顺序：itemRendererFunction > itemRenderer > 默认ItemRenerer。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$DataGroup[7 /* itemRendererFunction */];
            }
            ,function (value) {
                var values = this.$DataGroup;
                if (values[7 /* itemRendererFunction */] == value)
                    return;
                values[7 /* itemRendererFunction */] = value;
                values[5 /* itemRendererChanged */] = true;
                values[8 /* typicalItemChanged */] = true;
                this.removeDataProviderListener();
                this.invalidateProperties();
            }
        );
        /**
         * @private
         * 为特定的数据项返回项呈示器的工厂实例
         */
        p.itemToRendererClass = function (item) {
            var rendererClass;
            var values = this.$DataGroup;
            if (values[7 /* itemRendererFunction */]) {
                rendererClass = values[7 /* itemRendererFunction */](item);
            }
            if (!rendererClass) {
                rendererClass = values[6 /* itemRenderer */];
            }
            if (!rendererClass) {
                rendererClass = eui.ItemRenderer;
            }
            if (!rendererClass.$hashCode) {
                rendererClass.$hashCode = egret.$hashCount++;
            }
            return rendererClass;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            if (!this.$layout) {
                var layout = new eui.VerticalLayout();
                layout.gap = 0;
                layout.horizontalAlign = eui.JustifyAlign.CONTENT_JUSTIFY;
                this.$setLayout(layout);
            }
            _super.prototype.createChildren.call(this);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            var values = this.$DataGroup;
            if (values[5 /* itemRendererChanged */] || this.$dataProviderChanged || values[1 /* useVirtualLayoutChanged */]) {
                this.removeAllRenderers();
                if (this.$layout)
                    this.$layout.clearVirtualLayoutCache();
                this.setTypicalLayoutRect(null);
                values[1 /* useVirtualLayoutChanged */] = false;
                values[5 /* itemRendererChanged */] = false;
                if (this.$dataProvider)
                    this.$dataProvider.addEventListener(eui.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this);
                if (this.$layout && this.$layout.$useVirtualLayout) {
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
                else {
                    this.createRenderers();
                }
                if (this.$dataProviderChanged) {
                    this.$dataProviderChanged = false;
                    this.scrollV = this.scrollH = 0;
                }
            }
            _super.prototype.commitProperties.call(this);
            if (values[8 /* typicalItemChanged */]) {
                values[8 /* typicalItemChanged */] = false;
                if (this.$dataProvider && this.$dataProvider.length > 0) {
                    values[12 /* typicalItem */] = this.$dataProvider.getItemAt(0);
                    this.measureRendererSize();
                }
            }
            if (values[14 /* itemRendererSkinNameChange */]) {
                values[14 /* itemRendererSkinNameChange */] = false;
                var skinName = values[13 /* itemRendererSkinName */];
                var indexToRenderer = this.$indexToRenderer;
                var keys = Object.keys(indexToRenderer);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var index = keys[i];
                    this.setItemRenderSkinName(indexToRenderer[index], skinName);
                }
                var freeRenderers = values[3 /* freeRenderers */];
                var keys = Object.keys(freeRenderers);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var hashCode = keys[i];
                    var list = freeRenderers[hashCode];
                    var length = list.length;
                    for (var i = 0; i < length; i++) {
                        this.setItemRenderSkinName(list[i], skinName);
                    }
                }
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            if (this.$layout && this.$layout.$useVirtualLayout) {
                this.ensureTypicalLayoutElement();
            }
            _super.prototype.measure.call(this);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            var useVirtualLayout = (this.$layout && this.$layout.$useVirtualLayout);
            if (useVirtualLayout) {
                this.ensureTypicalLayoutElement();
            }
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            var values = this.$DataGroup;
            if (useVirtualLayout) {
                //检查索引 0 处的项测量大小是否发生改变，若改变就重新计算 typicalLayoutRect
                var rect = values[9 /* typicalLayoutRect */];
                if (rect) {
                    var renderer = this.$indexToRenderer[0];
                    if (renderer) {
                        var bounds = egret.$TempRectangle;
                        renderer.getPreferredBounds(bounds);
                        if (bounds.width != rect.width || bounds.height != rect.height) {
                            values[9 /* typicalLayoutRect */] = null;
                        }
                    }
                }
            }
        };
        /**
         * @private
         * 确保测量过默认条目大小。
         */
        p.ensureTypicalLayoutElement = function () {
            if (this.$DataGroup[9 /* typicalLayoutRect */])
                return;
            if (this.$dataProvider && this.$dataProvider.length > 0) {
                this.$DataGroup[12 /* typicalItem */] = this.$dataProvider.getItemAt(0);
                this.measureRendererSize();
            }
        };
        /**
         * @private
         * 测量项呈示器默认尺寸
         */
        p.measureRendererSize = function () {
            var values = this.$DataGroup;
            if (!values[12 /* typicalItem */]) {
                this.setTypicalLayoutRect(null);
                return;
            }
            var typicalRenderer = this.createVirtualRenderer(values[12 /* typicalItem */]);
            if (!typicalRenderer) {
                this.setTypicalLayoutRect(null);
                return;
            }
            this.updateRenderer(typicalRenderer, 0, values[12 /* typicalItem */]);
            typicalRenderer.validateNow();
            var bounds = egret.$TempRectangle;
            typicalRenderer.getPreferredBounds(bounds);
            var rect = new egret.Rectangle(0, 0, bounds.width, bounds.height);
            if (this.$layout && this.$layout.$useVirtualLayout) {
                if (values[4 /* createNewRendererFlag */]) {
                    this.rendererAdded(typicalRenderer, 0, values[12 /* typicalItem */]);
                }
                this.doFreeRenderer(typicalRenderer);
            }
            else {
                this.removeChild(typicalRenderer);
            }
            this.setTypicalLayoutRect(rect);
            values[4 /* createNewRendererFlag */] = false;
        };
        /**
         * @private
         * 设置项目默认大小
         */
        p.setTypicalLayoutRect = function (rect) {
            this.$DataGroup[9 /* typicalLayoutRect */] = rect;
            if (this.$layout) {
                if (rect) {
                    this.$layout.setTypicalSize(rect.width, rect.height);
                }
                else {
                    this.$layout.setTypicalSize(0, 0);
                }
            }
        };
        /**
         * @private
         * 移除所有项呈示器
         */
        p.removeAllRenderers = function () {
            var indexToRenderer = this.$indexToRenderer;
            var keys = Object.keys(indexToRenderer);
            var length = keys.length;
            for (var i = 0; i < length; i++) {
                var index = keys[i];
                var renderer = indexToRenderer[index];
                if (renderer) {
                    this.rendererRemoved(renderer, renderer.itemIndex, renderer.data);
                    this.removeChild(renderer);
                }
            }
            this.$indexToRenderer = [];
            var values = this.$DataGroup;
            if (values[10 /* cleanFreeRenderer */]) {
                var freeRenderers = values[3 /* freeRenderers */];
                var keys = Object.keys(freeRenderers);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var hashCode = keys[i];
                    var list = freeRenderers[hashCode];
                    var length = list.length;
                    for (var i = 0; i < length; i++) {
                        renderer = list[i];
                        this.rendererRemoved(renderer, renderer.itemIndex, renderer.data);
                        this.removeChild(renderer);
                    }
                }
                values[3 /* freeRenderers */] = {};
                values[2 /* rendererToClassMap */] = {};
                values[10 /* cleanFreeRenderer */] = false;
            }
        };
        /**
         * @private
         * 为数据项创建项呈示器
         */
        p.createRenderers = function () {
            if (!this.$dataProvider)
                return;
            var index = 0;
            var length = this.$dataProvider.length;
            for (var i = 0; i < length; i++) {
                var item = this.$dataProvider.getItemAt(i);
                var rendererClass = this.itemToRendererClass(item);
                var renderer = this.createOneRenderer(rendererClass);
                if (!renderer)
                    continue;
                this.$indexToRenderer[index] = renderer;
                this.updateRenderer(renderer, index, item);
                this.rendererAdded(renderer, index, item);
                index++;
            }
        };
        /**
         * @language en_US
         * Updates the renderer for reuse.
         * This method first prepares the item
         * renderer for reuse by cleaning out any stale properties
         * as well as updating it with new properties.<p/>
         *
         * The last thing this method should do is set the <code>data</code> property
         * of the item renderer.
         *
         * @param renderer The item renderer.
         * @param itemIndex The index of the data in the data provider.
         * @param data The data object this item renderer is representing.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 此方法首先会准备项呈示器以重用，方法是清除任何旧属性，同时使用新属性进行更新。<p/>
         *
         * 最后，此方法应对项呈示器设置 data 属性。
         *
         * @param renderer 项呈示器。
         * @param itemIndex 数据提供程序中的数据索引。
         * @param data 此项呈示器正在表示的数据对象。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateRenderer = function (renderer, itemIndex, data) {
            var values = this.$DataGroup;
            values[11 /* renderersBeingUpdated */] = true;
            renderer.itemIndex = itemIndex;
            renderer.data = data;
            values[11 /* renderersBeingUpdated */] = false;
            return renderer;
        };
        d(p, "numElements"
            /**
             * @inheritDoc
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (!this.$dataProvider)
                    return 0;
                return this.$dataProvider.length;
            }
        );
        /**
         * @language en_US
         * Adds the itemRenderer for the specified dataProvider item to this DataGroup.
         *
         * This method is called as needed by the DataGroup implementation,
         * it should not be called directly.
         *
         * @param renderer The renderer that was added.
         * @param index The index where the dataProvider item was added.
         * @param item The item that was added, the value of dataProvider[index].
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 项呈示器被添加.
         *
         * 这个方法不能直接调用，它是由该类自身自动调用的。
         *
         * @param renderer 添加的项呈示器
         * @param index 项呈示器的索引
         * @param item 项呈示器对应的数据
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.rendererAdded = function (renderer, index, item) {
        };
        /**
         * @language en_US
         * Removes the itemRenderer for the specified dataProvider item from this DataGroup.
         *
         * This method is called as needed by the DataGroup implementation,
         * it should not be called directly.
         *
         * @param renderer The renderer that is being removed.
         * @param index The index of the item that is being removed.
         * @param item The item that is being removed.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 项呈示器被移除。
         * 这个方法不能直接调用，它是由该类自身自动调用的。
         *
         * @param renderer 移除的项呈示器
         * @param index 项呈示器的索引
         * @param item 项呈示器对应的数据
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.rendererRemoved = function (renderer, index, item) {
        };
        return DataGroup;
    })(eui.Group);
    eui.DataGroup = DataGroup;
    egret.registerClass(DataGroup,'eui.DataGroup');
    eui.registerProperty(DataGroup, "itemRenderer", "Class");
    eui.registerProperty(DataGroup, "itemRendererSkinName", "Class");
    eui.registerProperty(DataGroup, "dataProvider", "eui.ICollection", true);
    if (DEBUG) {
        egret.$markReadOnly(DataGroup, "numElements");
    }
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Rect component is a rectangular shape. It can be touched.
     * @version Egret 2.5.5
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * Rect 组件矩形绘图元素。此组件可响应鼠标事件。
     * @version Egret 2.5.5
     * @version eui 1.0
     * @platform Web,Native
     */
    var Rect = (function (_super) {
        __extends(Rect, _super);
        function Rect(width, height, fillColor) {
            _super.call(this);
            this.$fillColor = 0x000000;
            this.$fillAlpha = 1;
            this.$strokeColor = 0x444444;
            this.$strokeAlpha = 1;
            this.$strokeWeight = 0;
            this.$ellipseWidth = 0;
            this.$ellipseHeight = 0;
            this.touchChildren = false;
            this.$graphics = new egret.Graphics();
            this.$graphics.$renderContext.$targetDisplay = this;
            this.$renderRegion = new egret.sys.Region();
            this.width = width;
            this.height = height;
            this.fillColor = fillColor;
        }
        var c=Rect,p=c.prototype;
        d(p, "graphics"
            ,function () {
                return this.$graphics;
            }
        );
        /**
         * @private
         */
        p.$measureContentBounds = function (bounds) {
            if (this.$graphics) {
                bounds.setTo(0, 0, this.width, this.height);
            }
        };
        /**
         * @private
         */
        p.$render = function (context) {
            this.$graphics.$render(context);
        };
        d(p, "fillColor"
            /**
             * @language en_US
             * Fill color
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 填充颜色
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$fillColor;
            }
            ,function (value) {
                if (value == undefined || this.$fillColor == value)
                    return;
                this.$fillColor = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "fillAlpha"
            /**
             * @language en_US
             * Fill alpha
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 填充透明度,默认值为1。
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$fillAlpha;
            }
            ,function (value) {
                if (this.$fillAlpha == value)
                    return;
                this.$fillAlpha = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "strokeColor"
            /**
             * @language en_US
             * The line's color inside the rect border. Caution: when the strokeWeight is 0, a line is not drawn
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 边框颜色,注意：当 strokeWeight 为 0 时，不显示边框。
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$strokeColor;
            }
            ,function (value) {
                if (this.$strokeColor == value)
                    return;
                this.$strokeColor = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "strokeAlpha"
            /**
             * @language en_US
             * The line's alpha inside the rect border. Caution: when the strokeWeight is 0, a line is not drawn
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 边框透明度,注意：当 strokeWeight 为0时，不显示边框。
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$strokeAlpha;
            }
            ,function (value) {
                if (this.$strokeAlpha == value)
                    return;
                this.$strokeAlpha = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "strokeWeight"
            /**
             * @language en_US
             * The line's thickness inside the rect border. Caution: when the strokeWeight is 0, a line is not drawn
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 边框粗细(像素),注意：当 strokeWeight 为 0 时，不显示边框。
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$strokeWeight;
            }
            ,function (value) {
                if (this.$strokeWeight == value)
                    return;
                this.$strokeWeight = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "ellipseWidth"
            /**
             * @language en_US
             * Width used to draw an ellipse with rounded corners (in pixels).
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 用于绘制圆角的椭圆的宽度(以像素为单位)
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$ellipseWidth;
            }
            ,function (value) {
                if (this.$ellipseWidth == value)
                    return;
                this.$ellipseWidth = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "ellipseHeight"
            /**
             * @language en_US
             * Height used to draw an ellipse with rounded corners (in pixels). If no value is specified, the default value matches the value of the ellipseWidth parameter.
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 用于绘制圆角的椭圆的高度 (以像素为单位)。如果未指定值，则默认值与为 ellipseWidth 参数提供的值相匹配。
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$ellipseHeight;
            }
            ,function (value) {
                if (this.$ellipseHeight == value)
                    return;
                this.$ellipseHeight = value;
                this.invalidateDisplayList();
            }
        );
        /**
         * @copy eui.UIComponent#updateDisplayList
         *
         * @version Egret 2.5.5
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            var g = this.graphics;
            g.clear();
            if (this.$strokeWeight > 0) {
                g.beginFill(this.$fillColor, 0);
                g.lineStyle(this.$strokeWeight, this.$strokeColor, this.$strokeAlpha, true, "normal", "square", "miter");
                if (this.$ellipseWidth == 0) {
                    g.drawRect(this.$strokeWeight / 2, this.$strokeWeight / 2, unscaledWidth - this.$strokeWeight, unscaledHeight - this.$strokeWeight);
                }
                else {
                    g.drawRoundRect(this.$strokeWeight / 2, this.$strokeWeight / 2, unscaledWidth - this.$strokeWeight, unscaledHeight - this.$strokeWeight, this.$ellipseWidth, 0);
                }
                g.endFill();
            }
            g.beginFill(this.$fillColor, this.$fillAlpha);
            g.lineStyle(this.$strokeWeight, this.$strokeColor, 0, true, "normal", "square", "miter");
            if (this.$ellipseWidth == 0) {
                g.drawRect(this.$strokeWeight, this.$strokeWeight, unscaledWidth - this.$strokeWeight * 2, unscaledHeight - this.$strokeWeight * 2);
            }
            else {
                g.drawRoundRect(this.$strokeWeight, this.$strokeWeight, unscaledWidth - this.$strokeWeight * 2, unscaledHeight - this.$strokeWeight * 2, this.$ellipseWidth, 0);
            }
            g.endFill();
            this.$invalidateContentBounds();
        };
        return Rect;
    })(eui.Component);
    eui.Rect = Rect;
    egret.registerClass(Rect,'eui.Rect');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DividedGroup = (function (_super) {
        __extends(DividedGroup, _super);
        function DividedGroup() {
            _super.call(this);
            this.dividerLine = DividerLine;
            this.dividers = [];
        }
        var c=DividedGroup,p=c.prototype;
        d(p, "cursorName"
            ,function () {
                return "";
            }
            ,function (value) {
                egret.superSetter(eui.DividedGroup, this, "cursorName", value);
            }
        );
        p.addChild = function (euic) {
            return this.dividerGroup.addChild(euic);
        };
        p.createDivider = function (firstChild, secondChild, index) {
            if (index === void 0) { index = 0; }
            var divider = new this.dividerLine();
            divider["addEventListener"](egret.MouseEvent.MOUSE_OVER, this.onDividerMouseOver, this);
            divider["addEventListener"](egret.MouseEvent.MOUSE_OUT, this.onDividerMouseOut, this);
            divider["addEventListener"](egret.MouseEvent.MOUSE_DOWN, this.onDividerMouseDown, this);
            this.dividers.push({ "line": divider, "prev": firstChild, "next": secondChild });
            this.dividerGroup.addChildAt(divider, index);
        };
        p.recycleDivider = function (index) {
            if (index >= this.dividers.length || index < 0)
                return;
            var divider = this.dividers[index]["line"];
            divider["removeEventListener"](egret.MouseEvent.MOUSE_OVER, this.onDividerMouseOver, this);
            divider["removeEventListener"](egret.MouseEvent.MOUSE_OUT, this.onDividerMouseOut, this);
            divider["removeEventListener"](egret.MouseEvent.MOUSE_DOWN, this.onDividerMouseDown, this);
            this.dividers.splice(index, 1);
            this.dividerGroup.removeChild(divider);
        };
        p.getDividerIndex = function (divider) {
            for (var i = 0; i < this.dividers.length; i++) {
                if (this.dividers[i].line == divider)
                    return i;
            }
            return -1;
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            var prevElement;
            var numLayoutElement = 0;
            var length = this.dividerGroup.numChildren;
            for (var i = 0; i < length; i++) {
                var element = this.dividerGroup.getChildAt(i);
                if (element.includeInLayout) {
                    numLayoutElement++;
                    if (prevElement) {
                        var dividerIndex = numLayoutElement / 2 - 1;
                        if (dividerIndex < this.dividers.length) {
                            this.dividers[dividerIndex]["prev"] = prevElement;
                            this.dividers[dividerIndex]["next"] = element;
                        }
                        else {
                            this.createDivider(prevElement, element, numLayoutElement - 1 + this.dividers.length);
                        }
                        this.validateNow();
                        this.layoutDivider(this.dividers[dividerIndex]["line"] + 1, prevElement, element);
                        prevElement = null;
                    }
                    else {
                        prevElement = element;
                        continue;
                    }
                }
            }
            var numDivider = Math.floor(numLayoutElement / 2);
            while (this.dividers.length > numDivider) {
                this.recycleDivider(this.dividers.length - 1);
            }
        };
        p.layoutDivider = function (divider, prev, next) {
        };
        p.onDividerMouseOver = function (e) {
            //            egret.managers.CursorManager.setCursor(this.cursorName);
        };
        p.onDividerMouseOut = function (e) {
            //            egret.managers.CursorManager.setCursor(egret.ui.core.Cursors.AUTO);
        };
        p.onDividerMouseDown = function (e) {
            //            egret.managers.CursorManager.setCursor(this.cursorName);
            this.startDividerDrag(e);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.onDividerMouseUp, this, true);
        };
        p.onDividerMouseUp = function (e) {
            //            egret.managers.CursorManager.setCursor(egret.ui.core.Cursors.AUTO);
            this.stopDividerDrag(e);
            this.stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.onDividerMouseUp, this, true);
        };
        p.startDividerDrag = function (e) {
            var index = this.getDividerIndex(e.currentTarget);
            this.activeDivider = this.dividers[index];
            this.dragUI = new this.dividerLine();
            this.dragUI.alpha = 0.8;
            this.dragUI.x = e.currentTarget["x"];
            this.dragUI.y = e.currentTarget["y"];
            this.dividerGroup.addChild(this.dragUI);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.dragMove, this, true);
        };
        p.stopDividerDrag = function (e) {
            this.applyDrag(e);
            this.activeDivider = null;
            this.dividerGroup.removeChild(this.dragUI);
            this.dragUI = null;
            this.stage.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.dragMove, this, true);
        };
        p.applyDrag = function (e) {
        };
        p.dragMove = function (e) {
        };
        return DividedGroup;
    })(eui.Component);
    eui.DividedGroup = DividedGroup;
    egret.registerClass(DividedGroup,'eui.DividedGroup');
    var DividerLine = (function (_super) {
        __extends(DividerLine, _super);
        function DividerLine() {
            _super.call(this);
            this.percentHeight = 100;
            this.width = 2;
            this.fillColor = 0x374552;
        }
        var c=DividerLine,p=c.prototype;
        return DividerLine;
    })(eui.Rect);
    egret.registerClass(DividerLine,'DividerLine');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 下拉框组件
     * 默认呈现项皮肤所需数据源需持有label属性,
     * 否则会出现运行错误。
     */
    var DropDownList = (function (_super) {
        __extends(DropDownList, _super);
        function DropDownList() {
            _super.call(this);
            this._itemRenderer = null;
            this._itemRendererSkinName = null;
            this.cacheIndex = -1;
            this.indexChanged = false;
            this.selectedIndexChanged = false;
            this.labelChanged = false;
            this._prompt = "";
            this._promptChanged = false;
            this._labelField = "label";
            //        /**
            //         * 外部设置的选中项下标
            //         */
            this._setSelectIndex = NaN;
            /**
             * 外部设置的选中项下标
             */
            this._setSelectItem = NaN;
            this.addEventListener(eui.UIEvent.ADDED, this.addedHandle, this);
        }
        var c=DropDownList,p=c.prototype;
        p.addedHandle = function (e) {
            this.validateDisplayList();
            this.validateNow();
            this.list.selectedIndex;
        };
        d(p, "selectedIndex"
            //        public set selectedIndex(value:number){
            //            this._setSelectIndex = value;
            //            if(this.list != null)
            //                this.list.selectedIndex = this._setSelectIndex;
            //        }
            //        
            ,function () {
                if (this.list != null)
                    return this.list.selectedIndex;
                return this._setSelectIndex;
            }
            ,function (value) {
                this._setSelectIndex = value;
                if (this.list) {
                    this.list.selectedIndex = value;
                    this.labelChanged = true;
                }
                else {
                    this.cacheIndex = value;
                }
                if (this._setSelectIndex == -1) {
                    this.labelDisplay.text = this._prompt;
                }
                this.invalidateProperties();
            }
        );
        p.setSelectedIndex = function (v) {
            this.list.selectedIndex = v;
            this.selectedIndexChanged = true;
            this.invalidateProperties();
        };
        d(p, "itemRenderer"
            ,function () {
                return this._itemRenderer;
            }
            //        protected commitProperties() {
            //            super.commitProperties();
            //            if(this.selectedIndexChanged) {
            //                this.selectedIndexChanged = false;
            //                this.labelDisplay.text = (<eui.ArrayCollection>this.dataProvider).getItemAt(this.list.selectedIndex).label;
            //            }
            //        }
            //        
            ,function (value) {
                this._itemRenderer = value;
                if (this.list != null) {
                    this.list.itemRenderer = value;
                }
                this.list.itemRendererSkinName;
            }
        );
        d(p, "itemRendererSkinName"
            ,function () {
                return this._itemRendererSkinName;
            }
            ,function (value) {
                this._itemRendererSkinName = value;
                if (this.list != null) {
                    this.list.itemRendererSkinName = value;
                }
            }
        );
        d(p, "itemRendererFunction"
            ,function () {
                return this._itemRendererFunction;
            }
            ,function (value) {
                this._itemRendererFunction = value;
                if (this.list != null) {
                    this.list.itemRendererFunction = value;
                }
            }
        );
        d(p, "dataProvider"
            ,function () {
                return this._dataProvider;
            }
            ,function (value) {
                this._dataProvider = value;
                if (this.list)
                    this.list.dataProvider = value;
            }
        );
        d(p, "prompt"
            ,function () {
                return this._prompt;
            }
            ,function (value) {
                if (this._prompt == value)
                    return;
                this._prompt = value;
                this._promptChanged = true;
                this.invalidateProperties();
            }
        );
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.labelChanged) {
                this.labelChanged = false;
                this.updateLabelDisplay();
            }
            if (this._promptChanged) {
                this.updateLabelDisplay();
            }
            if (this.selectedIndexChanged) {
                this.selectedIndexChanged = false;
                this.labelDisplay.text = this.dataProvider.getItemAt(this.list.selectedIndex).label;
            }
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.labelDisplay) {
                this.labelChanged = true;
                this.invalidateProperties();
            }
            else if (instance == this.openButton) {
                this.openButton.addEventListener(egret.MouseEvent.CLICK, this.openClickHandle, this);
            }
            else if (instance == this.list) {
                this.list.dataProvider = this._dataProvider;
                this.list.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.itemTapHandle, this);
                this.list.addEventListener(egret.Event.CHANGE, this.changedHandler, this);
                if (this.itemRenderer)
                    this.list.itemRenderer = this.itemRenderer;
                if (this.itemRendererSkinName)
                    this.list.itemRendererSkinName = this.itemRendererSkinName;
                if (this.itemRendererFunction)
                    this.list.itemRendererFunction = this.itemRendererFunction;
                if (this.cacheIndex != -1) {
                    this.list.selectedIndex = this.cacheIndex;
                    this.labelChanged = true;
                    this.invalidateProperties();
                    if (isNaN(this._setSelectIndex) == false)
                        this.list.selectedIndex = this._setSelectIndex;
                    if (isNaN(this._setSelectItem) == false)
                        this.list.selectedItem = this._setSelectItem;
                    this.cacheIndex = -1;
                }
            }
        };
        p.openClickHandle = function (e) {
            e && e.stopPropagation();
            if (this.stage) {
                if (this.popUpAnchor.displayPopUp || !e) {
                    if (this.stage.hasEventListener(egret.MouseEvent.CLICK))
                        this.stage.removeEventListener(egret.MouseEvent.CLICK, this.stageClickHandle, this);
                    this.popUpAnchor.displayPopUp = false;
                    this.dispatchEvent(new eui.UIEvent(eui.UIEvent.CLOSE));
                    this.openButton.currentState = "";
                }
                else {
                    this.stage.addEventListener(egret.MouseEvent.CLICK, this.stageClickHandle, this);
                    this.dispatchEvent(new eui.UIEvent(eui.UIEvent.OPEN));
                    this.popUpAnchor.displayPopUp = true;
                    this.openButton.currentState = "down";
                }
            }
        };
        p.stageClickHandle = function (e) {
            if (this.popUpAnchor.displayPopUp && this.stage) {
                if (this.stage.hasEventListener(egret.MouseEvent.CLICK))
                    this.stage.removeEventListener(egret.MouseEvent.CLICK, this.stageClickHandle, this);
                this.popUpAnchor.displayPopUp = false;
                this.dispatchEvent(new eui.UIEvent(eui.UIEvent.CLOSE));
                this.openButton.currentState = "";
            }
        };
        p.itemTapHandle = function (e) {
            this.updateLabelDisplay();
            this.openClickHandle(null);
            e.stopPropagation();
            this.dispatchEvent(e);
        };
        p.changedHandler = function (e) {
            this.dispatchEvent(e);
        };
        p.updateLabelDisplay = function (displayItem) {
            if (displayItem === void 0) { displayItem = undefined; }
            if (this.labelDisplay) {
                if (this._promptChanged) {
                    this.labelDisplay.text = this._prompt;
                    this._promptChanged = false;
                }
                if (displayItem == undefined)
                    displayItem = this.list.selectedItem;
                if (displayItem != null && displayItem != undefined)
                    this.labelDisplay.text = this.itemToLabel(displayItem);
            }
        };
        d(p, "labelField"
            ,function () {
                return this._labelField;
            }
            ,function (value) {
                this._labelField = value;
            }
        );
        p.itemToLabel = function (item) {
            if (typeof item == "string")
                return item;
            else if (typeof item == "object") {
                if (item && item.hasOwnProperty(this.labelField)) {
                    item = item[this.labelField];
                }
            }
            if (item)
                return String(item);
            return " ";
        };
        d(p, "selectedItem"
            ,function () {
                if (this.list != null)
                    return this.list.selectedItem;
                return this._setSelectItem;
            }
            ,function (value) {
                this._setSelectItem = value;
                if (this.list != null)
                    this.list.selectedItem = this._setSelectItem;
            }
        );
        return DropDownList;
    })(eui.Component);
    eui.DropDownList = DropDownList;
    egret.registerClass(DropDownList,'eui.DropDownList');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 文档下拉框
     * @author
     *
     */
    var DocDropDownList = (function (_super) {
        __extends(DocDropDownList, _super);
        function DocDropDownList() {
            _super.call(this);
        }
        var c=DocDropDownList,p=c.prototype;
        d(p, "label"
            /**
             * 显示的文字
             */
            ,function () {
                return this._label;
            }
            ,function (value) {
                if (this._label == value)
                    return;
                this._label = value;
                if (this.numberDisplay)
                    this.numberDisplay.text = this._label;
            }
        );
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.numberDisplay) {
                this.numberDisplay.text = this._label;
            }
        };
        return DocDropDownList;
    })(eui.DropDownList);
    eui.DocDropDownList = DocDropDownList;
    egret.registerClass(DocDropDownList,'eui.DocDropDownList');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 选项卡组
     */
    var TabGroup = (function (_super) {
        __extends(TabGroup, _super);
        function TabGroup() {
            _super.call(this);
            /**
             * 是否是焦点面板
             */
            this._isFocus = false;
            this._elementId = -1;
            this._isFirstElement = true;
            this._defaultWidth = 265;
            this._defaultHeight = 250;
            this._minimized = false;
            this.explicitVisible = true;
            /**
             * 项呈示器实例到item的引用
             */
            this.hashToRendererMap = {};
            this.rendererToItemMap = {};
            /**
             * 选中项，可能不是最新的。要获取最新的使用selectedIndex属性
             */
            this._selectedIndex = -1;
            /**
             * 在属性提交前缓存选中项索引
             */
            this.proposedSelectedIndex = eui.TabGroup.NO_PROPOSED_SELECTION;
            /**
             * 索引到项呈示器的转换数组
             */
            this.indexToRenderer = [];
            this._labelField = "label";
            this.dataProviderChanged = false;
            /**
             * 改变时马上提交选中的标志
             */
            this.hasCommit = false;
            this.skinName = "skins.TabGroupSkin";
            this.selectedIndex = 0;
            this.addEventListener(eui.UIEvent.RESIZE, this.onResize, this);
            this.addEventListener(eui.UIEvent.CLOSE, this.onClose, this);
            this.addEventListener(egret.FocusEvent.FOCUS_IN, this.onFocusIn, this);
            this.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onFocusOut, this);
        }
        var c=TabGroup,p=c.prototype;
        p.onClose = function (event) {
            this._isFocus = false;
            this.validateNow();
        };
        p.onFocusOut = function (event) {
            if (event === void 0) { event = null; }
            if (!this.stage || !this.stage.focus) {
                return;
            }
            this._isFocus = false;
            eui.TabGroup.currentFocusTabGroup = null;
            this.validateNow();
        };
        p.onFocusIn = function (event) {
            if (!this.selectedPanel)
                return;
            if (eui.TabGroup.currentFocusTabGroup) {
                eui.TabGroup.currentFocusTabGroup.onFocusOut();
            }
            eui.TabGroup.currentFocusTabGroup = this;
            if (!(this.selectedPanel).contains(this.stage.focus)) {
                this.setFocus();
            }
            this._isFocus = true;
            this.validateNow();
        };
        p.measure = function () {
            _super.prototype.measure.call(this);
        };
        //        
        p.valdateNow = function () {
            _super.prototype.validateNow.call(this);
        };
        // 这个地方不知道为什么，但是重写这三个方法是对的validateProperties 、validateSize、valdateNow
        p.validateProperties = function () {
            _super.prototype.validateProperties.call(this);
        };
        p.validateSize = function () {
            _super.prototype.validateSize.call(this);
        };
        //        protected validateDisplayList(): void {
        //            super.validateNow();
        //        }
        //        
        p.getCurrentState = function () {
            if (this._isFocus)
                return "focus";
            return _super.prototype.getCurrentState.call(this);
        };
        d(p, "elementId"
            ,function () {
                return this._elementId;
            }
            ,function (value) {
                this._elementId = value;
            }
        );
        d(p, "ownerBox"
            /**
             * 所属的盒式容器
             */
            ,function () {
                return this._ownerBox;
            }
            ,function (value) {
                this._ownerBox = value;
            }
        );
        d(p, "isFirstElement"
            /**
             * 是否作为父级的第一个元素
             */
            ,function () {
                return this._isFirstElement;
            }
            ,function (value) {
                this._isFirstElement = value;
            }
        );
        p.setLayoutSize = function (width, height) {
            _super.prototype.setLayoutBoundsSize.call(this, width, height);
        };
        d(p, "defaultWidth"
            /**
             * 默认宽度
             */
            ,function () {
                return this._defaultWidth;
            }
            ,function (value) {
                this._defaultWidth = value;
            }
        );
        d(p, "defaultHeight"
            /**
             * 默认高度
             */
            ,function () {
                return this._defaultHeight;
            }
            ,function (value) {
                this._defaultHeight = value;
            }
        );
        d(p, "minimized"
            /**
             * 是否处于最小化状态
             */
            ,function () {
                return this._minimized;
            }
            ,function (value) {
                if (this._minimized == value)
                    return;
                this._minimized = value;
                var oldVisible = egret.superGetter(eui.TabGroup, this, "visible");
                if (value)
                    egret.superSetter(eui.TabGroup, this, "visible", false);
                else
                    egret.superSetter(eui.TabGroup, this, "visible", this.explicitVisible);
                ;
                if (this.visible != oldVisible) {
                    this.dispatchEvent(new egret.Event("visibleChanged"));
                }
                this.dispatchEvent(new egret.Event("minimizedChanged", true));
            }
        );
        d(p, "visible"
            ,function () {
                return egret.superGetter(eui.TabGroup, this, "visible");
            }
            ,function (value) {
                this.explicitVisible = value;
                if (egret.superGetter(eui.TabGroup, this, "visible") == value)
                    return;
                egret.superSetter(eui.TabGroup, this, "visible", value);
                this.dispatchEvent(new egret.Event("visibleChanged"));
            }
        );
        d(p, "explicitHeight"
            ,function () {
                if (isNaN(egret.superGetter(eui.TabGroup, this, "explicitHeight"))) {
                    var p = this.selectedPanel;
                    return p ? p.explicitHeight : NaN;
                }
                return egret.superGetter(eui.TabGroup, this, "explicitHeight");
            }
            ,function (value) {
                egret.superSetter(eui.TabGroup, this, "explicitHeight", value);
            }
        );
        d(p, "explicitWidth"
            ,function () {
                if (isNaN(egret.superGetter(eui.TabGroup, this, "explicitWidth"))) {
                    var p = this.selectedPanel;
                    return p ? p.explicitWidth : NaN;
                }
                return egret.superGetter(eui.TabGroup, this, "explicitWidth");
            }
            ,function (value) {
                egret.superSetter(eui.TabGroup, this, "explicitWidth", value);
            }
        );
        d(p, "$explicitWidth"
            ,function () {
                return egret.superGetter(eui.TabGroup, this, "explicitWidth");
            }
            ,function (value) {
                egret.superSetter(eui.TabGroup, this, "$explicitWidth", value);
            }
        );
        d(p, "$explicitHeight"
            ,function () {
                return egret.superGetter(eui.TabGroup, this, "explicitHeight");
            }
            ,function (value) {
                egret.superSetter(eui.TabGroup, this, "$explicitHeight", value);
            }
        );
        d(p, "parentBox"
            ,function () {
                return this._parentBox;
            }
        );
        p.parentBoxChanged = function (box, checkOldParent) {
            if (checkOldParent === void 0) { checkOldParent = true; }
            if (checkOldParent && this._parentBox) {
                if (this.isFirstElement)
                    (this._parentBox).firstElement = null;
                else
                    (this._parentBox).secondElement = null;
            }
            this._parentBox = box;
        };
        p.onResize = function (event) {
            if (this.titleTabBar) {
                var dataGroup = this.titleTabBar;
                dataGroup.maxWidth = Math.max(0, this.width - 22);
                for (var i = dataGroup.numElements - 1; i >= 0; i--) {
                    var elt = dataGroup.getElementAt(i);
                    if (elt && elt["labelDisplay"])
                        (elt["labelDisplay"]).invalidateSize();
                }
            }
        };
        /**
         * 添加一个面板
         * @param panel 添加的面板实例
         * @param index 要添加到的位置 , -1 表示添加到末尾
         * @param data 面板的数据，不设置则默认使用面板的data属性。
         */
        p.addElement = function (panel) {
            this.addElementAt(panel);
            var opendEvent = new eui.TabGroupEvent(eui.TabGroupEvent.PANEL_OPENED, true, true);
            opendEvent.relatePanel = panel;
            this.dispatchEvent(opendEvent);
        };
        /**
         * 添加一个面板
         * @param panel 添加的面板实例
         * @param index 要添加到的位置 , -1 表示添加到末尾
         * @param data 面板的数据，不设置则默认使用面板的data属性。
         */
        p.addElementAt = function (panel, index, data) {
            if (index === void 0) { index = -1; }
            if (data === void 0) { data = null; }
            if (panel.$owner && panel.$owner instanceof eui.TabGroup) {
                if (panel.$owner == this && panel.itemIndex == index)
                    return;
                else
                    panel.$owner.removeElement(panel);
            }
            if (!data) {
                if (panel.data)
                    data = panel.data;
                else {
                    data = {};
                    if (this.labelField)
                        data[this.labelField] = panel.title;
                }
            }
            /*一般来讲在未进行验证的时候panel的own是null的，及时已经执行过了addElementAt方法。
             但是如果切换布局的时候，会重新将panel添加到新的tabgroup中，导致已经在旧的tabgroup中显示的own可以通过panel.own
            正常从旧的父级中移除，而还未在旧的tabgroup中显示的的panel将无法own从旧的父级中删除。
            当已经被添加到新的tabgroup之后，会触发旧的tabgroup中的tabbar的选择项的更新，同时使得在旧的tabgroup中createOneRenderer
            方法被触发，发现rendererToItemMap列表中还存有这个panel，于是这个panel又一次被添加到了旧的tabgroup中。
            
            所以下一行代码调用ownerchanged目的就是立刻给own赋值，使得他在被添加到新的tabgroup的时候，也可以从旧的父级中移除掉自己。
            ——15.9.23 featherJ
            */
            panel.$owner = this;
            //            panel.ownerChanged(this);
            if (!this.dataProvider)
                this.dataProvider = new eui.ArrayCollection();
            if (index == -1)
                index = this.dataProvider.length;
            this.rendererToItemMap[panel.hashCode] = data;
            this.hashToRendererMap[panel.hashCode] = panel;
            this.dataProvider.addItemAt(data, index);
            var opendEvent = new eui.TabGroupEvent(eui.TabGroupEvent.PANEL_OPENED, true, true);
            opendEvent.relatePanel = panel;
            this.dispatchEvent(opendEvent);
        };
        /**
         * 移除指定位置的元素
         */
        p.removeElementAt = function (index) {
            var panel = this.getElementAt(index);
            this.removeElement(panel);
            return panel;
        };
        /**
         * 移除一个面板
         */
        p.removeElement = function (panel) {
            if (!panel || !this.dataProvider)
                return;
            var index = this.dataProvider.getItemIndex(panel.data);
            if (index >= 0) {
                this.pushTitleGroupBack(panel);
                this.dataProvider.removeItemAt(index);
                panel.$owner = null;
            }
        };
        d(p, "selectedIndex"
            /**
             * 当前可见子元素的索引。索引从0开始。
             */
            ,function () {
                return this.proposedSelectedIndex != eui.TabGroup.NO_PROPOSED_SELECTION ? this.proposedSelectedIndex : this._selectedIndex;
            }
            ,function (value) {
                this.setSelectedIndex(value);
            }
        );
        d(p, "selectedPanel"
            ,function () {
                var index = this.selectedIndex;
                if (index >= 0 && index < this.numElements)
                    return this.indexToRenderer[index];
                return null;
            }
            ,function (value) {
                var index = this.indexToRenderer.indexOf(value);
                if (index >= 0 && index < this.numElements)
                    this.setSelectedIndex(index);
            }
        );
        /**
         * 获取指定位置的面板，如果不存在则立即创建
         */
        p.getElementAt = function (index) {
            if (!this.indexToRenderer[index]) {
                var data = this.dataProvider.getItemAt(index);
                var renderer = this.createOneRenderer(data);
                this.indexToRenderer[index] = renderer;
                this.updateRenderer(renderer, index, data);
            }
            return this.indexToRenderer[index];
        };
        d(p, "panelRenderer"
            /**
             * 用于创建Panel的呈示器。该类必须实现 ITabPanel 接口。
             */
            ,function () {
                return this._panelRenderer;
            }
            ,function (value) {
                this._panelRenderer = value;
            }
        );
        d(p, "panelRendererFunction"
            /**
             * 创建ITabPanel的函数， 示例 panelRendererFunction(data:Object):Class
             */
            ,function () {
                return this._panelRendererFunction;
            }
            ,function (value) {
                this._panelRendererFunction = value;
            }
        );
        d(p, "labelField"
            /**
             * 显示标题的字段
             */
            ,function () {
                return this._labelField;
            }
            ,function (value) {
                this._labelField = value;
                //			if(this.titleTabBar)
                //				this.titleTabBar.labelField = this.labelField;
            }
        );
        d(p, "numElements"
            /**
             * 元素的数量
             */
            ,function () {
                if (!this._dataProvider)
                    return 0;
                return this._dataProvider.length;
            }
        );
        /**
         * 设置选中项索引
         */
        p.setSelectedIndex = function (value) {
            if (value == this.selectedIndex)
                return;
            this.proposedSelectedIndex = value;
            if (this.titleTabBar)
                this.titleTabBar.selectedIndex = value;
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.dataProviderChanged) {
                var oldSelectedIndex = this.selectedIndex;
                this.removeAllRenderers();
                this.dataProviderChanged = false;
                if (this._dataProvider)
                    this._dataProvider.addEventListener(eui.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this);
                this.titleTabBar.dataProvider = this._dataProvider;
                this.selectedIndex = oldSelectedIndex;
            }
        };
        /**
         * 提交选中项  , 是否派发值提交事件
         */
        p.commitSelection = function (newIndex, dispatch) {
            if (dispatch === void 0) { dispatch = true; }
            if (newIndex >= 0 && newIndex < this.numElements && this.proposedSelectedIndex != newIndex && this.proposedSelectedIndex != eui.TabGroup.NO_PROPOSED_SELECTION) {
                // 这里这样写就是为了防止titleTabBar的adjustSelection与想要的不同步的情况
                this.titleTabBar.selectedIndex = this.proposedSelectedIndex;
                this.titleTabBar.validateProperties();
                return;
            }
            this.proposedSelectedIndex = eui.TabGroup.NO_PROPOSED_SELECTION;
            if (this.selectedPanel)
                this.selectedPanel.show = false;
            if (newIndex >= 0 && newIndex < this.numElements) {
                this._selectedIndex = newIndex;
                if (!this.indexToRenderer[newIndex]) {
                    var data = this.dataProvider.getItemAt(newIndex);
                    var renderer = this.createOneRenderer(data);
                    this.indexToRenderer[newIndex] = renderer;
                    this.updateRenderer(renderer, newIndex, data);
                }
                this.selectedPanel.show = true;
                this.viewStack.selectedChild = this.selectedPanel;
            }
            else {
                this._selectedIndex = -1;
                this.viewStack.selectedIndex = -1;
            }
            if (dispatch)
                this.dispatchEvent(new eui.UIEvent(eui.UIEvent.VALUE_COMMIT));
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        /**
         * 为特定的数据项返回项呈示器类定义
         */
        p.itemToRendererClass = function (item) {
            var rendererClass;
            if (this._panelRendererFunction != null) {
                rendererClass = this._panelRendererFunction(item);
                if (!rendererClass)
                    rendererClass = this._panelRenderer;
            }
            else {
                rendererClass = this._panelRenderer;
            }
            return rendererClass ? rendererClass : eui.TabPanel;
        };
        /**
         * 根据数据创建一个Renderer,并添加到显示列表
         */
        p.createOneRenderer = function (item) {
            for (var hash in this.rendererToItemMap) {
                var renderer = this.hashToRendererMap[hash];
                if (this.rendererToItemMap[hash] == item) {
                    this.viewStack.addChild(renderer);
                    return renderer;
                }
            }
            var clazz = this.itemToRendererClass(item);
            var panel = this.createOneRenderer2(clazz);
            if (panel) {
                this.rendererToItemMap[panel.hashCode] = item;
                this.hashToRendererMap[panel.hashCode] = panel;
                var event = new eui.TabGroupEvent(eui.TabGroupEvent.PANEL_CREATED);
                event.relatePanel = panel;
                event.relateObject = item;
                this.dispatchEvent(event);
                this.viewStack.addChild(panel);
            }
            return panel;
        };
        p.createOneRenderer2 = function (rendererClass) {
            var renderer;
            renderer = new rendererClass();
            if (!renderer || !(egret.is(renderer, "eui.ITabPanel")))
                return null;
            return renderer;
        };
        p.updateRenderer = function (renderer, itemIndex, data) {
            this.viewStack.addChild(renderer);
            renderer.itemIndex = itemIndex;
            renderer["data"] = data;
            renderer.show = this.selectedIndex == itemIndex;
            return renderer;
        };
        p.setFocus = function () {
            // if(this.selectedPanel && egret.is(this.selectedPanel,"eui.UIComponent"))
            // 	(<eui.UIComponent>(this.selectedPanel)).setFocus();
            // else
            //             	super.setFocus();
        };
        d(p, "dataProvider"
            ,function () {
                if (!this._dataProvider) {
                    this.dataProvider = new eui.ArrayCollection();
                }
                return this._dataProvider;
            }
            ,function (value) {
                if (value == this._dataProvider)
                    return;
                this.removeDataProviderListener();
                this._dataProvider = value;
                this.dataProviderChanged = true;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
            }
        );
        p.removeDataProviderListener = function () {
            if (this._dataProvider)
                this._dataProvider.removeEventListener(eui.CollectionEvent.COLLECTION_CHANGE, this.onCollectionChange, this);
        };
        p.onCollectionChange = function (event) {
            console.log("collectionChanged: " + event.kind);
            //            this.dataProviderChanged = true;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    this.itemAddedHandler(event.items, event.location);
                    break;
                case eui.CollectionEventKind.MOVE:
                    this.itemMovedHandler(event.items[0], event.location, event.oldLocation);
                    break;
                case eui.CollectionEventKind.REMOVE:
                    this.itemRemovedHandler(event.items, event.location);
                    break;
                case eui.CollectionEventKind.UPDATE:
                    this.itemUpdatedHandler(event.items[0], event.location);
                    break;
                case eui.CollectionEventKind.REPLACE:
                    this.itemRemoved(event.oldItems[0], event.location);
                    this.itemAdded(event.items[0], event.location);
                    break;
                case eui.CollectionEventKind.RESET:
                case eui.CollectionEventKind.REFRESH:
                    this.removeDataProviderListener();
                    this.dataProviderChanged = true;
                    this.invalidateProperties();
                    break;
            }
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        /**
         * 数据源更新或替换项目事件处理
         */
        p.itemUpdatedHandler = function (item, location) {
            var renderer = this.indexToRenderer[location];
            if (renderer)
                this.updateRenderer(renderer, location, item);
        };
        /**
         * 数据源添加项目事件处理
         */
        p.itemAddedHandler = function (items, index) {
            var length = items.length;
            for (var i = 0; i < length; i++) {
                this.itemAdded(items[i], index + i);
            }
            this.resetRenderersIndices();
        };
        /**
         * 数据源移动项目事件处理
         */
        p.itemMovedHandler = function (item, location, oldLocation) {
            this.itemRemoved(item, oldLocation);
            this.itemAdded(item, location);
            this.resetRenderersIndices();
        };
        /**
         * 数据源移除项目事件处理
         */
        p.itemRemovedHandler = function (items, location) {
            var length = items.length;
            for (var i = length - 1; i >= 0; i--) {
                this.itemRemoved(items[i], location + i);
            }
            this.resetRenderersIndices();
        };
        /**
         * 添加一项
         */
        p.itemAdded = function (item, index) {
            var renderer = this.createOneRenderer(item);
            if (index > this.indexToRenderer.length)
                this.indexToRenderer.length = index;
            this.indexToRenderer.splice(index, 0, renderer);
            if (!renderer)
                return;
            this.updateRenderer(renderer, index, item);
        };
        /**
         * 移除一项
         */
        p.itemRemoved = function (item, index) {
            var oldRenderer = this.indexToRenderer[index];
            if (this.indexToRenderer.length > index)
                this.indexToRenderer.splice(index, 1);
            if (oldRenderer && egret.is(oldRenderer, "egret.DisplayObject")) {
                this.recycle(oldRenderer);
            }
        };
        /**
         * 回收一个ItemRenderer实例
         */
        p.recycle = function (renderer) {
            if (renderer.parent)
                this.viewStack.removeChild(renderer);
            renderer.show = false;
            if (renderer.hashCode in this.rendererToItemMap) {
                delete this.rendererToItemMap[renderer.hashCode];
                delete this.hashToRendererMap[renderer.hashCode];
            }
        };
        /**
         * 更新当前所有项的索引
         */
        p.resetRenderersIndices = function () {
            if (this.indexToRenderer.length == 0)
                return;
            var indexToRendererLength = this.indexToRenderer.length;
            for (var index = 0; index < indexToRendererLength; index++)
                this.resetRendererItemIndex(index);
        };
        /**
         * 调整指定项呈示器的索引值
         */
        p.resetRendererItemIndex = function (index) {
            var renderer = this.indexToRenderer[index];
            if (egret.is(renderer, "eui.ITabPanel"))
                renderer.itemIndex = index;
        };
        /**
         * 移除所有项呈示器
         */
        p.removeAllRenderers = function () {
            var length = this.indexToRenderer.length;
            var renderer;
            for (var i = 0; i < length; i++) {
                renderer = this.indexToRenderer[i];
                if (renderer) {
                    this.recycle(renderer);
                }
            }
            this.indexToRenderer = [];
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.titleTabBar) {
                //this.titleTabBar.labelField = this.labelField;
                //this.titleTabBar.focusEnabled = false;
                this.titleTabBar.dataProvider = this._dataProvider;
                this.titleTabBar.selectedIndex = this.selectedIndex;
                this.titleTabBar.addEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.onTabBarValueCommit, this);
                this.titleTabBar.addEventListener(egret.Event.CHANGE, this.onTabBarIndexChanged, this);
                this.titleTabBar.addEventListener(egret.Event.CHANGING, this.onTabBarIndexChanging, this);
                //                this.titleTabBar.doubleClickEnabled = true;
                this.titleTabBar.addEventListener(egret.MouseEvent.DOUBLE_CLICK, this.onTitleDoubClick, this);
            }
            else if (instance == this.viewStack) {
            }
            else if (instance == this.moveArea) {
                //this.moveArea.doubleClickEnabled = true;
                this.moveArea.addEventListener(egret.MouseEvent.DOUBLE_CLICK, this.onTitleDoubClick, this);
            }
            else if (instance == this.menuButton) {
                this.menuButton.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onMenuMouseDown, this, false, -1000);
            }
        };
        /**
         * 双击标题
         */
        p.onTitleDoubClick = function (event) {
            this.dispatchEvent(new eui.TabGroupEvent(eui.TabGroupEvent.MAXIMIZED, true));
        };
        p.onTabBarValueCommit = function (event) {
            if (event.property != "selectedIndex")
                return;
            if (this.hasCommit) {
                this.hasCommit = false;
                return;
            }
            this.commitSelection(this.titleTabBar.selectedIndex);
        };
        /**
         * 鼠标点击选中项改变
         */
        p.onTabBarIndexChanged = function (event) {
            this.hasCommit = true;
            this.commitSelection(this.titleTabBar.selectedIndex);
            this.dispatchEvent(event);
        };
        /**
         * 鼠标点击选中项即将改变
         */
        p.onTabBarIndexChanging = function (event) {
            if (!this.dispatchEvent(event))
                event.preventDefault();
        };
        p.onMenuMouseDown = function (event) {
            this.menuButton.validateNow();
            if (!this.tabMenu) {
                this.tabMenu = this.createMenu([
                    egret.utils.tr("关闭"),
                    egret.utils.tr("最小化"),
                    egret.utils.tr("关闭选项卡组")]);
            }
            this.tabMenu.getItemAt(0).enabled = this.numElements > 0;
            var pos = this.menuButton.localToGlobal(this.menuButton.width, this.menuButton.height * 0.5);
            this.tabMenu.display(this.stage, pos.x, pos.y);
        };
        p.createMenu = function (labelList) {
            var menu = new egret.NativeMenu();
            var item;
            var index = 0;
            for (var key in labelList) {
                var label = labelList[key];
                item = new egret.NativeMenuItem(label, !label);
                if (label)
                    item.addEventListener(egret.Event.SELECT, this.onMenuSelect, this);
                menu.addItem(item);
                index++;
            }
            return menu;
        };
        p.onMenuSelect = function (event) {
            switch (event.target["label"]) {
                case egret.utils.tr("关闭"):
                    this.onClosePanel(this.selectedIndex);
                    break;
                case egret.utils.tr("最小化"):
                    this.dispatchEvent(new eui.TabGroupEvent(eui.TabGroupEvent.MINIMIZED, true));
                    break;
                case egret.utils.tr("关闭选项卡组"):
                    this.dispatchEvent(new eui.TabGroupEvent(eui.TabGroupEvent.CLOSE_static_egret_ui_events_TabGroupEvent, true));
                    break;
            }
        };
        /**
         * 用户操作关闭index处的面板
         */
        p.onClosePanel = function (index, direct) {
            if (direct === void 0) { direct = false; }
            if (index > -1) {
                var closeEvent;
                var doClose = true;
                if (!direct) {
                    var closingEvent = new eui.TabGroupEvent(eui.TabGroupEvent.CLOSING_PANEL, true, true);
                    closingEvent.relateObject = this.dataProvider.getItemAt(index);
                    closingEvent.relatePanel = this.indexToRenderer[index];
                    doClose = this.dispatchEvent(closingEvent);
                }
                if (doClose) {
                    this.pushTitleGroupBack(this.selectedPanel);
                    closeEvent = new eui.TabGroupEvent(eui.TabGroupEvent.CLOSE_PANEL, true);
                    closeEvent.relateObject = this.dataProvider.getItemAt(index);
                    closeEvent.relatePanel = this.indexToRenderer[index];
                    this.dataProvider.removeItemAt(index);
                    this.dispatchEvent(closeEvent);
                    if (this.numElements == 0)
                        this.dispatchEvent(new eui.TabGroupEvent(eui.TabGroupEvent.CLOSE_static_egret_ui_events_TabGroupEvent, true));
                }
            }
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            egret.callLater(this.updateTitleGroup, this);
        };
        p.updateTitleGroup = function () {
            if (!this.titleGroup)
                return;
            if (this.cachePanel && this.cachePanel != this.selectedPanel) {
                var temp = new eui.TabPanel();
                this.pushTitleGroupToTabPanel(this.cachePanel);
                if (temp.$owner && temp.$owner != this)
                    temp.$owner.validateNow();
            }
            if (this.selectedPanel) {
                var panelTitleGroup = this.selectedPanel.titleGroup;
                var gapLine = this.selectedPanel.gapLine;
                if (panelTitleGroup && panelTitleGroup.width > 0) {
                    if (gapLine)
                        gapLine.visible = gapLine.includeInLayout = true;
                    if (this.titleTabBar.width + panelTitleGroup.width + this.menuButton.width + 10 < this.width) {
                        this.pushTitleGroupToTabGroup(this.selectedPanel);
                    }
                }
                else if (this.titleGroup.width > 0) {
                    if (gapLine)
                        gapLine.visible = gapLine.includeInLayout = false;
                    if (this.titleTabBar.width + this.titleGroup.width + this.menuButton.width + 10 > this.width) {
                        this.pushTitleGroupToTabPanel(this.selectedPanel);
                    }
                }
            }
        };
        /**
         * 将标题栏工具组的内容放到TabGroup里
         */
        p.pushTitleGroupToTabGroup = function (panel) {
            if (panel && this.titleGroup && panel.titleGroup) {
                while (panel.titleGroup.numElements > 0) {
                    this.titleGroup.addChild(panel.titleGroup.getElementAt(0));
                }
                if (panel.gapLine)
                    panel.gapLine.visible = panel.gapLine.includeInLayout = false;
            }
            this.cachePanel = panel;
            this.cachePanel.invalidateSize();
            this.cachePanel.invalidateDisplayList();
            this.invalidateSize();
            this.invalidateDisplayList();
            //            this.validateNow();
        };
        /**
         * 将标题栏工具组的内容放回到TabPanel里
         */
        p.pushTitleGroupToTabPanel = function (panel) {
            if (panel && this.titleGroup && panel.titleGroup) {
                while (this.titleGroup.numElements > 0) {
                    panel.titleGroup.addChild(this.titleGroup.getElementAt(0));
                }
                if (panel.gapLine)
                    panel.gapLine.visible = panel.gapLine.includeInLayout = true;
            }
            this.cachePanel.invalidateSize();
            this.cachePanel.invalidateDisplayList();
            this.cachePanel = null;
            this.invalidateSize();
            this.invalidateDisplayList();
            //            this.validateNow();
        };
        /**
         * 将工具头的图标按钮全部推回tabpanel。
         *
         */
        p.pushTitleGroupBack = function (panel) {
            if (this.cachePanel == panel && panel != null) {
                var gapLine = panel.gapLine;
                if (gapLine && gapLine instanceof eui.TabPanel)
                    gapLine.visible = gapLine.includeInLayout = false;
                this.pushTitleGroupToTabPanel(panel);
            }
        };
        /**
         * 未设置缓存选中项的值
         */
        TabGroup.NO_PROPOSED_SELECTION = -2;
        return TabGroup;
    })(eui.Component);
    eui.TabGroup = TabGroup;
    egret.registerClass(TabGroup,'eui.TabGroup',["eui.IBoxElement","egret.IEventDispatcher"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 文档选项卡，对应的数据是一个IDocumentData对象
     */
    var DocTabGroup = (function (_super) {
        __extends(DocTabGroup, _super);
        function DocTabGroup() {
            _super.call(this);
            this.dataProviderChangedSub = false;
            /**
             * 显示的最大标签数
             */
            this._maxTabElement = 0;
            /**
             * 缓存面板的数组， 越在数组前面表示越是最近打开的。
             */
            this.cacheDataArray = [];
            this.skinName = "skins.DocTabGroupSkin";
            this.panelRendererFunction = this.documentRenderer;
            this.addEventListener(eui.TabGroupEvent.CLOSING_PANEL, this.onClosingPanel, this);
            this.addEventListener(eui.TabGroupEvent.CLOSE_PANEL, this.onClosedPanel, this);
            this.addEventListener(eui.TabGroupEvent.PANEL_CREATED, this.onPanelCreated, this);
        }
        var c=DocTabGroup,p=c.prototype;
        p.onFocusIn = function (event) {
            _super.prototype.onFocusIn.call(this, event);
            var docEvent = new eui.DocumentEvent(eui.DocumentEvent.DOC_FOCUS_IN, true);
            this.dispatchEvent(docEvent);
        };
        /**
         * 文档要显示的Panel对象
         */
        p.documentRenderer = function (data) {
            if (data["clazz"])
                return data["clazz"];
            else
                return null;
        };
        /**
         * 添加一个文档
         */
        p.addDocument = function (document) {
            this.dataProvider.addItem(document);
        };
        /**
         * 移除一个文档
         * @param document 要移除的对象
         * @param dispatch 随后是否派发事件
         */
        p.removeDocument = function (document, dispatch, direct) {
            if (dispatch === void 0) { dispatch = true; }
            if (direct === void 0) { direct = false; }
            var index = this.getDocumentIndex(document);
            if (index > -1) {
                if (dispatch)
                    this.onClosePanel(index, direct);
                else
                    this.dataProvider.removeItemAt(index);
            }
        };
        d(p, "selectedDocument"
            /**
             * 选中的文档数据
             */
            ,function () {
                if (this.selectedIndex > -1)
                    return this.dataProvider.getItemAt(this.selectedIndex);
                else
                    return null;
            }
            ,function (value) {
                var index = this.dataProvider.getItemIndex(value);
                this.selectedIndex = index;
            }
        );
        /**
         * 获取指定位置的文档
         */
        p.getDocumentAt = function (index) {
            return this.dataProvider.getItemAt(index);
        };
        /**
         * 获取文档的位置
         */
        p.getDocumentIndex = function (value) {
            return this.dataProvider.getItemIndex(value);
        };
        d(p, "dataProvider"
            ,function () {
                return egret.superGetter(eui.DocTabGroup, this, "dataProvider");
            }
            ,function (value) {
                egret.superSetter(eui.DocTabGroup, this, "dataProvider", value);
                this.dataProviderChangedSub = true;
                this.invalidateProperties();
            }
        );
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.dataProviderChangedSub) {
                this.dataProviderChangedSub = false;
                while (this.cacheDataArray.length > 0) {
                    this.removeDocumentPropery(this.cacheDataArray.shift());
                }
                for (var i = 0; i < this.dataProvider.length; i++) {
                    this.addDocumentPropery(this.dataProvider.getItemAt(i));
                }
            }
        };
        /**
         * 添加一项
         */
        p.itemAdded = function (item, index) {
            this.addDocumentPropery(item);
            _super.prototype.itemAdded.call(this, item, index);
        };
        /**
         * 移除一项
         */
        p.itemRemoved = function (item, index) {
            this.removeDocumentPropery(item);
            _super.prototype.itemRemoved.call(this, item, index);
        };
        /**
         * 添加文档数据属性
         */
        p.addDocumentPropery = function (item) {
            item.owner = this;
            var cacheIndex = this.cacheDataArray.indexOf(item);
            if (cacheIndex >= 0)
                this.cacheDataArray.splice(cacheIndex, 1);
            this.cacheDataArray.unshift(item);
            this.invalidateDisplayList();
        };
        /**
         * 移除文档数据属性
         */
        p.removeDocumentPropery = function (item) {
            item.owner = null;
            var cacheIndex = this.cacheDataArray.indexOf(item);
            if (cacheIndex >= 0)
                this.cacheDataArray.splice(cacheIndex, 1);
            if (this.cacheDataArray.length > 0) {
                this.selectedIndex = -1;
                this.selectedDocument = this.cacheDataArray[0];
            }
            this.invalidateDisplayList();
        };
        p.commitSelection = function (newIndex, dispatch) {
            if (dispatch === void 0) { dispatch = true; }
            _super.prototype.commitSelection.call(this, newIndex);
            var _selectedDocument = this.selectedDocument;
            if (_selectedDocument) {
                var cacheIndex = this.cacheDataArray.indexOf(_selectedDocument);
                if (cacheIndex >= 0)
                    this.cacheDataArray.splice(cacheIndex, 1);
                this.cacheDataArray.unshift(_selectedDocument);
            }
            if (_selectedDocument != this.lastDocument) {
                var documentEvent = new eui.DocumentEvent(eui.DocumentEvent.SELECTED_DOC_CHANGE, true);
                documentEvent.oldData = this.lastDocument;
                documentEvent.newData = _selectedDocument;
                this.dispatchEvent(documentEvent);
            }
            this.lastDocument = _selectedDocument;
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.titleTabBar) {
                this.titleTabBar.useVirtualLayout = false;
                this.titleTabBar.addEventListener(eui.CloseTabEvent.CLOSE, this.onTabClose, this);
                this.titleTabBar.addEventListener(eui.CloseTabEvent.CLOSE_ALL, this.onTabCloseAll, this);
                this.titleTabBar.addEventListener(eui.CloseTabEvent.CLOSE_OTHER, this.onTabCloseOther, this);
            }
            else if (instance == this.tabDropDown) {
                this.tabDropDown.addEventListener(eui.UIEvent.OPEN, this.dropDownOpen, this);
                this.tabDropDown.addEventListener(egret.Event.CHANGE, this.onSelectDropDown, this);
            }
        };
        /**
         * 关闭标签
         */
        p.onTabClose = function (event) {
            event.stopImmediatePropagation();
            var index = event.target.itemIndex;
            this.onClosePanel(index);
        };
        /**
         * 关闭其他
         */
        p.onTabCloseOther = function (event) {
            event.stopImmediatePropagation();
            var index = event.target.itemIndex;
            var tabPanelList = [];
            for (var i = this.numElements - 1; i >= 0; i--) {
                if (index != i)
                    this.onClosePanel(i);
            }
        };
        /**
         * 关闭全部
         */
        p.onTabCloseAll = function (event) {
            event.stopImmediatePropagation();
            var index = event.target.itemIndex;
            var tabPanelList = [];
            for (var i = this.numElements - 1; i >= 0; i--) {
                this.onClosePanel(i);
            }
        };
        /**
         * 正在关闭面板
         */
        p.onClosingPanel = function (event) {
            var documentData = event.relateObject;
            if (!documentData.dispatchEvent(event.clone())) {
                event.preventDefault();
            }
        };
        /**
         * 面板关闭了
         */
        p.onClosedPanel = function (event) {
            var documentData = event.relateObject;
            documentData.dispatchEvent(event.clone());
        };
        /**
         * 创建了一个文档
         */
        p.onPanelCreated = function (event) {
            var documentData = event.relateObject;
            documentData.dispatchEvent(event.clone());
        };
        /**
         * 选中了下拉框中的项
         */
        p.onSelectDropDown = function (event) {
            event.preventDefault();
            var item = this.tabDropDown.dataProvider.getItemAt(this.tabDropDown.list.selectedIndex);
            var index = this.dataProvider.getItemIndex(item);
            this.selectedIndex = index;
        };
        /**
         * 下拉框打开
         */
        p.dropDownOpen = function (event) {
            var arr = [];
            for (var i = this._maxTabElement; i < this.cacheDataArray.length; i++) {
                var panelIndex = this.dataProvider.getItemIndex(this.cacheDataArray[i]);
                arr.push(this.dataProvider.getItemAt(panelIndex));
            }
            arr.sort(function (a, b) {
                return (a.label + '').localeCompare(b.label + '');
            });
            this.tabDropDown.dataProvider = new eui.ArrayCollection(arr);
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            this.updateTitleBarElement();
        };
        /**
         * 刷新TitleBar上显示的元素
         */
        p.updateTitleBarElement = function () {
            this._maxTabElement = 0;
            this.menuButton.parent.validateNow();
            var elementNum = this.titleTabBar.numElements;
            var totalX = 0;
            var maxElementIndex = -1;
            for (var i = 0; i < this.cacheDataArray.length; i++) {
                var elementIndex = this.dataProvider.getItemIndex(this.cacheDataArray[i]);
                var element = this.titleTabBar.getElementAt(elementIndex);
                if (!element)
                    continue;
                totalX += element.layoutBoundsWidth - 1;
                var menuButtnLayout = new egret.Rectangle();
                this.menuButton.getLayoutBounds(menuButtnLayout);
                var tabDropDwonLayout = new egret.Rectangle();
                this.tabDropDown.getLayoutBounds(tabDropDwonLayout);
                var maxX = menuButtnLayout.x - tabDropDwonLayout.width - 5;
                if (i == elementNum - 1) {
                    maxX = maxX + tabDropDwonLayout.width;
                }
                if (totalX > maxX) {
                    element.visible = false;
                    element.includeInLayout = false;
                }
                else {
                    this._maxTabElement++;
                    element.visible = true;
                    element.includeInLayout = true;
                    maxElementIndex = Math.max(maxElementIndex, elementIndex);
                }
            }
            this.titleTabBar.validateNow();
            if (elementNum <= this._maxTabElement || maxElementIndex < 0) {
                this.tabDropDown.visible = false;
            }
            else {
                var lastElement = this.titleTabBar.getElementAt(maxElementIndex);
                this.tabDropDown.visible = true;
                this.tabDropDown.label = (elementNum - this._maxTabElement) + "";
                var layoutBounds = new egret.Rectangle();
                lastElement.getLayoutBounds(layoutBounds);
                this.tabDropDown.x = layoutBounds.x + layoutBounds.width + 5;
            }
        };
        return DocTabGroup;
    })(eui.TabGroup);
    eui.DocTabGroup = DocTabGroup;
    egret.registerClass(DocTabGroup,'eui.DocTabGroup');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ItemRenderer class is the base class for item renderers.
     *
     * @state up Up state
     * @state down Down state
     * @state upAndSelected Up state when the button is selected
     * @state downAndSelected Down state when the button is selected
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ItemRendererExample.ts
     */
    /**
     * @language zh_CN
     * ItemRenderer 类是项呈示器的基类。
     *
     * @state up 弹起状态
     * @state down 按下状态
     * @state upAndSelected 选择时的弹起状态
     * @state downAndSelected 选择时的按下状态
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ItemRendererExample.ts
     */
    var ItemRenderer = (function (_super) {
        __extends(ItemRenderer, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ItemRenderer() {
            _super.call(this);
            /**
             * @private
             */
            this._data = null;
            /**
             * @private
             */
            this._selected = false;
            /**
             * @language en_US
             * The index of the item in the data provider
             * of the host component of the item renderer.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 项呈示器的数据提供程序中的项目索引。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.itemIndex = -1;
            /**
             * @private
             * 指示第一次分派 TouchEvent.TOUCH_BEGIN 时，触摸点是否在按钮上。
             */
            this.touchCaptured = false;
            this.hovered = false;
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
            this.addEventListener(egret.TouchEvent.TOUCH_CANCEL, this.onTouchCancle, this);
            this.addEventListener(egret.MouseEvent.ROLL_OVER, this.onMouseRollOver, this);
            this.addEventListener(egret.MouseEvent.ROLL_OUT, this.onMouseRollOut, this);
        }
        var c=ItemRenderer,p=c.prototype;
        d(p, "data"
            /**
             * @language en_US
             * The data to render or edit.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 要呈示或编辑的数据。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._data;
            }
            ,function (value) {
                this._data = value;
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "data");
                this.dataChanged();
            }
        );
        /**
         * @language en_US
         * Update the view when the <code>data</code> property changes.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 当数据改变时，更新视图。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.dataChanged = function () {
        };
        d(p, "selected"
            /**
             * @language en_US
             * Contains <code>true</code> if the item renderer
             * can show itself as selected.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 如果项呈示器可以将其自身显示为已选中，则为 true。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._selected;
            }
            ,function (value) {
                if (this._selected == value)
                    return;
                this._selected = value;
                this.invalidateState();
            }
        );
        /**
         * @language en_US
         * Dispatched when an event of some kind occurred that canceled the touch.
         * @version Egret 3.0.1
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 由于某个事件取消了触摸时触发
         * @version Egret 3.0.1
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchCancle = function (event) {
            this.touchCaptured = false;
            this.$stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            this.invalidateState();
        };
        /**
         * @language en_US
         * Handles <code>TouchEvent.TOUCH_BEGIN</code> events
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 触碰开始时触发事件
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTouchBegin = function (event) {
            this.$stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            this.touchCaptured = true;
            this.invalidateState();
            event.updateAfterEvent();
        };
        /**
         * @private
         * 舞台上触摸弹起事件
         */
        p.onStageTouchEnd = function (event) {
            var stage = event.$currentTarget;
            stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            this.touchCaptured = false;
            this.invalidateState();
        };
        p.onMouseRollOver = function (event) {
            if (event.buttonDown && !this.touchCaptured)
                return;
            this.hovered = true;
            this.invalidateState();
        };
        p.onMouseRollOut = function (event) {
            this.hovered = false;
            this.invalidateState();
        };
        /**
         * 按钮是否是按下的状态
         */
        p.isDown = function () {
            if (!this.enabled)
                return false;
            if (this.touchCaptured && this.hovered)
                return true;
            return false;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getCurrentState = function () {
            var state = "up";
            if (this.isDown())
                state = "down";
            else if (this.hovered || this.touchCaptured)
                state = "over";
            if (this._selected) {
                var selectedState = state + "AndSelected";
                var skin = this.skin;
                if (skin && skin.hasState(selectedState)) {
                    return selectedState;
                }
                state = state == "disabled" ? "disabled" : "down";
            }
            return state;
        };
        return ItemRenderer;
    })(eui.Component);
    eui.ItemRenderer = ItemRenderer;
    egret.registerClass(ItemRenderer,'eui.ItemRenderer',["eui.IItemRenderer","eui.UIComponent"]);
    eui.registerBindable(ItemRenderer.prototype, "data");
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var DownListItemRenderer = (function (_super) {
        __extends(DownListItemRenderer, _super);
        function DownListItemRenderer() {
            _super.call(this);
            this._isEnabled = true;
        }
        var c=DownListItemRenderer,p=c.prototype;
        d(p, "type"
            ,function () {
                return this._type;
            }
            ,function (value) {
                if (this._type == value)
                    return;
                this._type = value;
                this.touchChildren = this.touchEnabled = !(value == "separator");
                this.invalidateState();
                this.invalidateProperties();
            }
        );
        d(p, "isEnabled"
            ,function () {
                return this._isEnabled;
            }
            ,function (value) {
                if (this._isEnabled == value)
                    return;
                this._isEnabled = value;
                this.enabled = value;
            }
        );
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            this.labelDisplay.visible = true;
            this.labelDisplay.includeInLayout = true;
            this.separatorClass.visible = false;
            this.separatorClass.includeInLayout = false;
            if (this.data.type) {
                if (this.data.type == "separator") {
                    this.labelDisplay.includeInLayout = false;
                    this.labelDisplay.visible = false;
                    this.separatorClass.visible = true;
                    this.separatorClass.includeInLayout = true;
                    this.minHeight = 3;
                    this.height = 3;
                }
            }
        };
        return DownListItemRenderer;
    })(eui.ItemRenderer);
    eui.DownListItemRenderer = DownListItemRenderer;
    egret.registerClass(DownListItemRenderer,'eui.DownListItemRenderer');
    eui.registerProperty(DownListItemRenderer, "separatorClass", "Class");
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DragDisplay = (function (_super) {
        __extends(DragDisplay, _super);
        function DragDisplay(dataArr) {
            _super.call(this);
            this.maxSize = 8;
            this._dataArr = dataArr.concat();
        }
        var c=DragDisplay,p=c.prototype;
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            var bg = new eui.Rect();
            bg.fillColor = (0x000000);
            bg.fillAlpha = 0.5;
            // bg.radius = 10;
            bg.top = bg.left = bg.right = bg.bottom = 0;
            this.addChild(bg);
            var group = new eui.Group();
            var vL = new eui.VerticalLayout();
            group.layout = vL;
            this.addChild(group);
            this.setData(this._dataArr);
        };
        p.setData = function (_data) {
            if (_data == this._dataArr)
                return;
            this._dataArr = _data;
            if (this._dataArr.length > this.maxSize) {
                while (this._dataArr.length > this.maxSize - 1) {
                    this._dataArr.pop();
                }
                this._dataArr.push("...");
            }
            if (this.label == null)
                this.label = new eui.Label();
            this.label.text = "";
            for (var i = 0; i < this._dataArr.length; i++) {
                this.label.size = 12;
                this.label.text = this._dataArr[i];
                this.addChild(this.label);
            }
        };
        return DragDisplay;
    })(eui.Group);
    eui.DragDisplay = DragDisplay;
    egret.registerClass(DragDisplay,'eui.DragDisplay');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var UIImpl = eui.sys.UIComponentImpl;
    /**
     * @language en_US
     * Editable text for displaying,
     * scrolling, selecting, and editing text.
     * @includeExample  extension/eui/components/EditablTextExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 可编辑文本，用于显示、滚动、选择和编辑文本。
     * @includeExample  extension/eui/components/EditablTextExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var EditableText = (function (_super) {
        __extends(EditableText, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function EditableText() {
            _super.call(this);
            /**
             * @private
             */
            this._widthConstraint = NaN;
            /**
             * @private
             */
            this.$isShowPrompt = false;
            /**
             * @private
             */
            this.$promptColor = 0x666666;
            /**
             * @private
             */
            this.$isFocusIn = false;
            this._focusEnabled = false;
            this.initializeUIValues();
            this.type = egret.TextFieldType.INPUT;
            this.$EditableText = {
                0: null,
                1: 0xffffff,
                2: false //asPassword
            };
        }
        var c=EditableText,p=c.prototype;
        /**
         * @private
         *
         */
        p.$invalidateContentBounds = function () {
            _super.prototype.$invalidateContentBounds.call(this);
            this.invalidateSize();
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setWidth = function (value) {
            var result1 = _super.prototype.$setWidth.call(this, value);
            var result2 = UIImpl.prototype.$setWidth.call(this, value);
            return result1 && result2;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setHeight = function (value) {
            var result1 = _super.prototype.$setHeight.call(this, value);
            var result2 = UIImpl.prototype.$setHeight.call(this, value);
            return result1 && result2;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$getText = function () {
            var value = _super.prototype.$getText.call(this);
            if (value == this.$EditableText[0 /* promptText */]) {
                value = "";
            }
            return value;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setText = function (value) {
            var promptText = this.$EditableText[0 /* promptText */];
            if (promptText != value || promptText == null) {
                this.$isShowPrompt = false;
                this.textColor = this.$EditableText[1 /* textColorUser */];
            }
            if (!this.$isFocusIn) {
                if (value == "" || value == null) {
                    value = promptText;
                    this.$isShowPrompt = true;
                    _super.prototype.$setTextColor.call(this, this.$promptColor);
                }
            }
            var result = _super.prototype.$setText.call(this, value);
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "text");
            return result;
        };
        /**
         * @private
         *
         * @param stage
         * @param nestLevel
         */
        p.$onAddToStage = function (stage, nestLevel) {
            eui.sys.UIComponentImpl.prototype["$onAddToStage"].call(this, stage, nestLevel);
            this.addEventListener(egret.FocusEvent.FOCUS_IN, this.onfocusIn, this);
            this.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onfocusOut, this);
        };
        /**
         * @private
         *
         */
        p.$onRemoveFromStage = function () {
            eui.sys.UIComponentImpl.prototype["$onRemoveFromStage"].call(this);
            this.removeEventListener(egret.FocusEvent.FOCUS_IN, this.onfocusIn, this);
            this.removeEventListener(egret.FocusEvent.FOCUS_OUT, this.onfocusOut, this);
        };
        d(p, "prompt"
            /**
             * @language en_US
             * When the property of the text is empty, it will show the defalut string.
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 当text属性为空字符串时要显示的文本内容。
             * 先创建文本控件时将显示提示文本。控件获得焦点时或控件的 text 属性为非空字符串时，提示文本将消失。
             * 控件失去焦点时提示文本将重新显示，但仅当未输入文本时（如果文本字段的值为空字符串）。<p/>
             * 对于文本控件，如果用户输入文本，但随后又将其删除，则控件失去焦点后，提示文本将重新显示。
             * 您还可以通过编程方式将文本控件的 text 属性设置为空字符串使提示文本重新显示。
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$EditableText[0 /* promptText */];
            }
            ,function (value) {
                var values = this.$EditableText;
                var promptText = values[0 /* promptText */];
                if (promptText == value)
                    return;
                values[0 /* promptText */] = value;
                var text = this.text;
                if (!text || text == promptText) {
                    this.showPromptText();
                }
            }
        );
        d(p, "promptColor"
            ,function () {
                return this.$promptColor;
            }
            /**
             * @language en_US
             * The color of the defalut string.
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 默认文本的颜色
             * @version Egret 2.5.5
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                value = +value | 0;
                if (this.$promptColor != value) {
                    this.$promptColor = value;
                    var text = this.text;
                    if (!text || text == this.$EditableText[0 /* promptText */]) {
                        this.showPromptText();
                    }
                }
            }
        );
        d(p, "focusEnabled"
            ,function () {
                return this._focusEnabled;
            }
            /**
            * @language en_US
            * FocusEnabled.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 焦点是否可用。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (v) {
                this._focusEnabled = v;
            }
        );
        /**
        * @language en_US
        * SetFocus.
        * @version Egret 2.4
        * @version eui 1.0
        * @platform Web,Native
        */
        /**
         * @language zh_CN
         * 设置焦点。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setFocus = function () {
            _super.prototype.setFocus.call(this);
        };
        /**
         * @private
         */
        p.onfocusOut = function () {
            this.$isFocusIn = false;
            if (!this.text) {
                this.showPromptText();
            }
        };
        /**
         * @private
         */
        p.onfocusIn = function () {
            this.$isFocusIn = true;
            this.$isShowPrompt = false;
            this.displayAsPassword = this.$EditableText[2 /* asPassword */];
            var values = this.$EditableText;
            var text = this.text;
            if (!text || text == values[0 /* promptText */]) {
                this.textColor = values[1 /* textColorUser */];
                this.text = "";
            }
        };
        /**
         * @private
         */
        p.showPromptText = function () {
            var values = this.$EditableText;
            this.$isShowPrompt = true;
            _super.prototype.$setTextColor.call(this, this.$promptColor);
            _super.prototype.$setDisplayAsPassword.call(this, false);
            this.text = values[0 /* promptText */];
        };
        /**
         * @private
         */
        p.$setTextColor = function (value) {
            value = +value | 0;
            this.$EditableText[1 /* textColorUser */] = value;
            if (!this.$isShowPrompt) {
                _super.prototype.$setTextColor.call(this, value);
            }
            return true;
        };
        /**
         * @private
         */
        p.$setDisplayAsPassword = function (value) {
            this.$EditableText[2 /* asPassword */] = value;
            if (!this.$isShowPrompt) {
                _super.prototype.$setDisplayAsPassword.call(this, value);
            }
            return true;
        };
        /**
         * @copy eui.Component#createChildren()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            this.onfocusOut();
        };
        /**
         * @copy eui.Component#childrenCreated()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.childrenCreated = function () {
        };
        /**
         * @copy eui.Component#commitProperties()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
        };
        /**
         * @copy eui.Component#measure()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            var values = this.$UIComponent;
            var textValues = this.$TextField;
            var oldWidth = textValues[3 /* textFieldWidth */];
            var availableWidth = NaN;
            if (!isNaN(this._widthConstraint)) {
                availableWidth = this._widthConstraint;
                this._widthConstraint = NaN;
            }
            else if (!isNaN(values[8 /* explicitWidth */])) {
                availableWidth = values[8 /* explicitWidth */];
            }
            else if (values[13 /* maxWidth */] != 100000) {
                availableWidth = values[13 /* maxWidth */];
            }
            _super.prototype.$setWidth.call(this, availableWidth);
            this.setMeasuredSize(this.textWidth, this.textHeight);
            _super.prototype.$setWidth.call(this, oldWidth);
        };
        /**
         * @copy eui.Component#updateDisplayList()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.$setWidth.call(this, unscaledWidth);
            _super.prototype.$setHeight.call(this, unscaledHeight);
        };
        /**
         * @copy eui.Component#invalidateParentLayout()
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateParentLayout = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setMeasuredSize = function (width, height) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateSize = function (recursive) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateNow = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
            UIImpl.prototype.setLayoutBoundsSize.call(this, layoutWidth, layoutHeight);
            if (isNaN(layoutWidth) || layoutWidth === this._widthConstraint || layoutWidth == 0) {
                return;
            }
            var values = this.$UIComponent;
            if (!isNaN(values[9 /* explicitHeight */])) {
                return;
            }
            if (layoutWidth == values[16 /* measuredWidth */]) {
                return;
            }
            this._widthConstraint = layoutWidth;
            this.invalidateSize();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsPosition = function (x, y) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getLayoutBounds = function (bounds) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getPreferredBounds = function (bounds) {
        };
        return EditableText;
    })(egret.TextField);
    eui.EditableText = EditableText;
    egret.registerClass(EditableText,'eui.EditableText',["eui.UIComponent","eui.IDisplayText"]);
    eui.sys.implementUIComponent(EditableText, egret.TextField);
    eui.registerBindable(EditableText.prototype, "text");
})(eui || (eui = {}));
var eui;
(function (eui) {
    var Grid = (function (_super) {
        __extends(Grid, _super);
        function Grid() {
            var _this = this;
            _super.call(this);
            this.deferredOperations = new Array();
            this.caretSelectedItem = null;
            this.inUpdateDisplayList = false;
            this.dragInProgress = false;
            this.generatedColumns = false;
            this._anchorColumnIndex = 0;
            this.anchorChanged = false;
            this._anchorRowIndex = 0;
            this._caretIndicator = null;
            this._caretColumnIndex = -1;
            this._oldCaretColumnIndex = -1;
            this.caretChanged = false;
            this._caretRowIndex = -1;
            this._oldCaretRowIndex = -1;
            this._hoverIndicator = null;
            this._hoverColumnIndex = -1;
            this._hoverRowIndex = -1;
            this._columns = null;
            this.columnsChanged = false;
            this._dataProvider = null;
            this.dataProviderChanged = false;
            this._dataTipField = null;
            this._dataTipFunction = null;
            this._itemRenderer = null;
            this.itemRendererChanged = false;
            this._columnSeparator = null;
            this._dataGrid = null;
            this._requestedMaxRowCount = 10;
            this._requestedMinRowCount = -1;
            this._requestedRowCount = -1;
            this._requestedMinColumnCount = -1;
            this._requestedColumnCount = -1;
            this._resizableColumns = true;
            this._rowBackground = null;
            this._rowHeight = NaN;
            this.rowHeightChanged = false;
            this._rowSeparator = null;
            this._selectionIndicator = null;
            this._showDataTips = false;
            this._typicalItem = null;
            this.typicalItemChanged = false;
            this._variableRowHeight = false;
            this.variableRowHeightChanged = false;
            this.invalidateDisplayListReasonsMask = 0;
            this.lastUnscaledWidth = 0;
            this.lastUnscaleHeight = 0;
            this.rollRowIndex = -1;
            this.rollColumnIndex = -1;
            this.mouseDownRowIndex = -1;
            this.mouseDownColumnIndex = -1;
            this.lastClickTime = NaN;
            this.DOUBLE_CLICK_TIME = 480;
            this.grid_mouseDownDragUpHandler = function (event) {
                //            var currentTarget:egret.DisplayObject = event.currentTarget;
                var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                var eventGridXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                var gridDimensions = _this.gridDimensions;
                var eventRowIndex = gridDimensions.getRowIndexAt(eventGridXY.x, eventGridXY.y);
                var eventColumnIndex = gridDimensions.getColumnIndexAt(eventGridXY.x, eventGridXY.y);
                var gridEventType;
                switch (event.type) {
                    case egret.MouseEvent.MOUSE_MOVE:
                        {
                            gridEventType = eui.GridEvent.GRID_MOUSE_DRAG;
                            break;
                        }
                    case egret.MouseEvent.MOUSE_UP:
                        {
                            gridEventType = eui.GridEvent.GRID_MOUSE_UP;
                            break;
                        }
                    case egret.MouseEvent.MOUSE_DOWN:
                        {
                            gridEventType = eui.GridEvent.GRID_MOUSE_DOWN;
                            _this.mouseDownRowIndex = eventRowIndex;
                            _this.mouseDownColumnIndex = eventColumnIndex;
                            _this.dragInProgress = true;
                            break;
                        }
                }
                _this.dispatchGridEvent(event, gridEventType, eventGridXY, eventRowIndex, eventColumnIndex);
                if (gridEventType == eui.GridEvent.GRID_MOUSE_UP)
                    _this.dispatchGridClickEvents(event, eventGridXY, eventRowIndex, eventColumnIndex);
            };
            this.grid_mouseMoveHandler = function (event) {
                var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                var eventGridXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                var gridDimensions = _this.gridDimensions;
                var eventRowIndex = gridDimensions.getRowIndexAt(eventGridXY.x, eventGridXY.y);
                var eventColumnIndex = gridDimensions.getColumnIndexAt(eventGridXY.x, eventGridXY.y);
                if ((eventRowIndex != _this.rollRowIndex) || (eventColumnIndex != _this.rollColumnIndex)) {
                    if ((_this.rollRowIndex != -1) || (_this.rollColumnIndex != -1))
                        _this.dispatchGridEvent(event, eui.GridEvent.GRID_ROLL_OUT, eventGridXY, _this.rollRowIndex, _this.rollColumnIndex);
                    if ((eventRowIndex != -1) && (eventColumnIndex != -1))
                        _this.dispatchGridEvent(event, eui.GridEvent.GRID_ROLL_OVER, eventGridXY, eventRowIndex, eventColumnIndex);
                    _this.rollRowIndex = eventRowIndex;
                    _this.rollColumnIndex = eventColumnIndex;
                }
            };
            this.grid_mouseRollOutHandler = function (event) {
                if ((_this.rollRowIndex != -1) || (_this.rollColumnIndex != -1)) {
                    var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                    var eventGridXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                    _this.dispatchGridEvent(event, eui.GridEvent.GRID_ROLL_OUT, eventGridXY, _this.rollRowIndex, _this.rollColumnIndex);
                    _this.rollRowIndex = -1;
                    _this.rollColumnIndex = -1;
                }
            };
            this.grid_mouseUpHandler = function (event) {
                if (_this.dragInProgress) {
                    _this.dragInProgress = false;
                    return;
                }
                var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                var eventGridXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                var gridDimensions = _this.gridDimensions;
                var eventRowIndex = gridDimensions.getRowIndexAt(eventGridXY.x, eventGridXY.y);
                var eventColumnIndex = gridDimensions.getColumnIndexAt(eventGridXY.x, eventGridXY.y);
                _this.dispatchGridEvent(event, eui.GridEvent.GRID_MOUSE_UP, eventGridXY, eventRowIndex, eventColumnIndex);
                _this.dispatchGridClickEvents(event, eventGridXY, eventRowIndex, eventColumnIndex);
            };
            this.layout = new eui.GridLayout();
            eui.MouseEventUtil.addDownDragUpListeners(this, this.grid_mouseDownDragUpHandler, this.grid_mouseDownDragUpHandler, this.grid_mouseDownDragUpHandler);
            this.addEventListener(egret.MouseEvent.MOUSE_UP, this.grid_mouseUpHandler, this);
            this.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.grid_mouseMoveHandler, this);
            this.addEventListener(egret.MouseEvent.ROLL_OUT, this.grid_mouseRollOutHandler, this);
        }
        var c=Grid,p=c.prototype;
        d(p, "gridLayout"
            ,function () {
                return this.layout;
            }
            ,function (value) {
                egret.superSetter(eui.Grid, this, "gridLayout", value);
            }
        );
        p.dispatchChangeEvent = function (type) {
            var _self__ = this;
            if (_self__.hasEventListener(type))
                _self__.dispatchEvent(new egret.Event(type));
        };
        p.dispatchUIEvent = function (type) {
            var _self__ = this;
            if (_self__.hasEventListener(type))
                _self__.dispatchEvent(new eui.UIEvent(type));
        };
        d(p, "anchorColumnIndex"
            ,function () {
                return this._anchorColumnIndex;
            }
            ,function (value) {
                if (this._anchorColumnIndex == value || this.selectionMode == eui.GridSelectionMode.SINGLE_ROW || this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS) {
                    return;
                }
                this._anchorColumnIndex = value;
                this.anchorChanged = true;
                this.invalidateProperties();
                this.dispatchChangeEvent("anchorColumnIndexChanged");
            }
        );
        d(p, "anchorRowIndex"
            ,function () {
                return this._anchorRowIndex;
            }
            ,function (value) {
                if (this._anchorRowIndex == value)
                    return;
                this._anchorRowIndex = value;
                this.anchorChanged = true;
                this.invalidateProperties();
                this.dispatchChangeEvent("anchorRowIndexChanged");
            }
        );
        d(p, "caretIndicator"
            ,function () {
                return this._caretIndicator;
            }
            ,function (value) {
                if (this._caretIndicator == value)
                    return;
                this._caretIndicator = value;
                this.invalidateDisplayListFor("caretIndicator");
                this.dispatchChangeEvent("caretIndicatorChanged");
            }
        );
        d(p, "caretColumnIndex"
            ,function () {
                return this._caretColumnIndex;
            }
            ,function (value) {
                if (this._caretColumnIndex == value || value < -1)
                    return;
                this._caretColumnIndex = value;
                this.caretChanged = true;
                this.invalidateProperties();
                this.invalidateDisplayListFor("caretIndicator");
                this.dispatchChangeEvent("caretColumnIndexChanged");
            }
        );
        d(p, "caretRowIndex"
            ,function () {
                return this._caretRowIndex;
            }
            ,function (value) {
                if (this._caretRowIndex == value || value < -1)
                    return;
                this._caretRowIndex = value;
                this.caretChanged = true;
                this.invalidateProperties();
                this.invalidateDisplayListFor("caretIndicator");
                this.dispatchChangeEvent("caretRowIndexChanged");
            }
        );
        d(p, "hoverIndicator"
            ,function () {
                return this._hoverIndicator;
            }
            ,function (value) {
                if (this._hoverIndicator == value)
                    return;
                this._hoverIndicator = value;
                this.invalidateDisplayListFor("hoverIndicator");
                this.dispatchChangeEvent("hoverIndicatorChanged");
            }
        );
        d(p, "hoverColumnIndex"
            ,function () {
                return this._hoverColumnIndex;
            }
            ,function (value) {
                if (this._hoverColumnIndex == value)
                    return;
                this._hoverColumnIndex = value;
                this.invalidateDisplayListFor("hoverIndicator");
                this.dispatchChangeEvent("hoverColumnIndexChanged");
            }
        );
        d(p, "hoverRowIndex"
            ,function () {
                return this._hoverRowIndex;
            }
            ,function (value) {
                if (this._hoverRowIndex == value)
                    return;
                this._hoverRowIndex = value;
                this.invalidateDisplayListFor("hoverIndicator");
                this.dispatchChangeEvent("hoverRowIndexChanged");
            }
        );
        d(p, "columns"
            ,function () {
                return this._columns;
            }
            ,function (value) {
                if (this._columns == value)
                    return;
                var oldColumns = this._columns;
                if (oldColumns) {
                    oldColumns["removeEventListener"](eui.CollectionEvent.COLLECTION_CHANGE, this.columns_collectionChangeHandler, this);
                    for (var index = 0; index < oldColumns.length; index++) {
                        var oldColumn = (oldColumns.getItemAt(index));
                        oldColumn.setGrid(null);
                        oldColumn.setColumnIndex(-1);
                    }
                }
                this._columns = value;
                var newColumns = this._columns;
                if (newColumns) {
                    newColumns["addEventListener"](eui.CollectionEvent.COLLECTION_CHANGE, this.columns_collectionChangeHandler, this, false, 0);
                    for (index = 0; index < newColumns.length; index++) {
                        var newColumn = (newColumns.getItemAt(index));
                        newColumn.setGrid(this);
                        newColumn.setColumnIndex(index);
                    }
                }
                this.columnsChanged = true;
                this.generatedColumns = false;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.dispatchChangeEvent("columnsChanged");
            }
        );
        p.getColumnsLength = function () {
            var columns = this.columns;
            return (columns) ? columns.length : 0;
        };
        p.generateColumns = function () {
            var item = this.typicalItem;
            if (!item && this.dataProvider && (this.dataProvider.length > 0))
                item = this.dataProvider.getItemAt(0);
            var itemColumns = null;
            if (item) {
                itemColumns = new eui.ArrayCollection();
                for (var property in item) {
                    var column = new eui.GridColumn();
                    column.dataField = property;
                    itemColumns.addItem(column);
                }
            }
            return itemColumns;
        };
        d(p, "dataProvider"
            ,function () {
                return this._dataProvider;
            }
            ,function (value) {
                if (this._dataProvider == value)
                    return;
                var oldDataProvider = this.dataProvider;
                if (oldDataProvider)
                    oldDataProvider["removeEventListener"](eui.CollectionEvent.COLLECTION_CHANGE, this.dataProvider_collectionChangeHandler, this);
                this._dataProvider = value;
                var newDataProvider = this.dataProvider;
                if (newDataProvider)
                    newDataProvider["addEventListener"](eui.CollectionEvent.COLLECTION_CHANGE, this.dataProvider_collectionChangeHandler, this, false, 0);
                this.dataProviderChanged = true;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.dispatchChangeEvent("dataProviderChanged");
            }
        );
        d(p, "dataTipField"
            ,function () {
                return this._dataTipField;
            }
            ,function (value) {
                if (this._dataTipField == value)
                    return;
                this._dataTipField = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("dataTipFieldChanged");
            }
        );
        d(p, "dataTipFunction"
            ,function () {
                return this._dataTipFunction;
            }
            ,function (value) {
                if (this._dataTipFunction == value)
                    return;
                this._dataTipFunction = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("dataTipFunctionChanged");
            }
        );
        d(p, "itemRenderer"
            ,function () {
                return this._itemRenderer;
            }
            ,function (value) {
                if (this._itemRenderer == value)
                    return;
                this._itemRenderer = value;
                this.itemRendererChanged = true;
                this.invalidateProperties();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.dispatchChangeEvent("itemRendererChanged");
            }
        );
        d(p, "columnSeparator"
            ,function () {
                return this._columnSeparator;
            }
            ,function (value) {
                if (this._columnSeparator == value)
                    return;
                this._columnSeparator = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("columnSeparatorChanged");
            }
        );
        d(p, "gridSelection"
            ,function () {
                if (!this._gridSelection)
                    this._gridSelection = this.createGridSelection();
                return this._gridSelection;
            }
            ,function (value) {
                this._gridSelection = value;
            }
        );
        d(p, "dataGrid"
            ,function () {
                return this._dataGrid;
            }
            ,function (value) {
                if (this._dataGrid == value)
                    return;
                this._dataGrid = value;
                this.dispatchChangeEvent("dataGridChanged");
            }
        );
        d(p, "preserveSelection"
            ,function () {
                return this.gridSelection.preserveSelection;
            }
            ,function (value) {
                this.gridSelection.preserveSelection = value;
            }
        );
        d(p, "requestedMaxRowCount"
            ,function () {
                return this._requestedMaxRowCount;
            }
            ,function (value) {
                if (this._requestedMaxRowCount == value)
                    return;
                this._requestedMaxRowCount = value;
                this.invalidateSize();
            }
        );
        d(p, "requestedMinRowCount"
            ,function () {
                return this._requestedMinRowCount;
            }
            ,function (value) {
                if (this._requestedMinRowCount == value)
                    return;
                this._requestedMinRowCount = value;
                this.invalidateSize();
            }
        );
        d(p, "requestedRowCount"
            ,function () {
                return this._requestedRowCount;
            }
            ,function (value) {
                if (this._requestedRowCount == value)
                    return;
                this._requestedRowCount = value;
                this.invalidateSize();
            }
        );
        d(p, "requestedMinColumnCount"
            ,function () {
                return this._requestedMinColumnCount;
            }
            ,function (value) {
                if (this._requestedMinColumnCount == value)
                    return;
                this._requestedMinColumnCount = value;
                this.invalidateSize();
            }
        );
        d(p, "requestedColumnCount"
            ,function () {
                return this._requestedColumnCount;
            }
            ,function (value) {
                if (this._requestedColumnCount == value)
                    return;
                this._requestedColumnCount = value;
                this.invalidateSize();
            }
        );
        d(p, "requireSelection"
            ,function () {
                return this.gridSelection.requireSelection;
            }
            ,function (value) {
                this.gridSelection.requireSelection = value;
                if (value)
                    this.invalidateDisplayListFor("selectionIndicator");
            }
        );
        d(p, "resizableColumns"
            ,function () {
                return this._resizableColumns;
            }
            ,function (value) {
                if (value == this.resizableColumns)
                    return;
                this._resizableColumns = value;
                this.dispatchChangeEvent("resizableColumnsChanged");
            }
        );
        d(p, "rowBackground"
            ,function () {
                return this._rowBackground;
            }
            ,function (value) {
                if (this._rowBackground == value)
                    return;
                this._rowBackground = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("rowBackgroundChanged");
            }
        );
        d(p, "rowHeight"
            ,function () {
                return this._rowHeight;
            }
            ,function (value) {
                if (this._rowHeight == value)
                    return;
                this._rowHeight = value;
                this.rowHeightChanged = true;
                this.invalidateProperties();
                this.dispatchChangeEvent("rowHeightChanged");
            }
        );
        p.setFixedRowHeight = function (value) {
            if (this._rowHeight == value)
                return;
            this._rowHeight = value;
            this.dispatchChangeEvent("rowHeightChanged");
        };
        d(p, "rowSeparator"
            ,function () {
                return this._rowSeparator;
            }
            ,function (value) {
                if (this._rowSeparator == value)
                    return;
                this._rowSeparator = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("rowSeparatorChanged");
            }
        );
        d(p, "selectedCell"
            ,function () {
                var selectedCells = this.gridSelection.allCells();
                return selectedCells.length ? selectedCells[0] : null;
            }
            ,function (value) {
                var _self__ = this;
                var rowIndex = (value) ? value.rowIndex : -1;
                var columnIndex = (value) ? value.columnIndex : -1;
                //            if(!this.initialized) {
                var f = function () {
                    if ((rowIndex != -1) && (columnIndex != -1))
                        _self__.setSelectedCell(rowIndex, columnIndex);
                    else
                        _self__.clearSelection();
                };
                this.deferredOperations.push(f);
                this.invalidateProperties();
                //            }
                //            else {
                //                if((rowIndex != -1) && (columnIndex != -1))
                //                    this.setSelectedCell(rowIndex,columnIndex);
                //                else
                //                    this.clearSelection();
                //            }
            }
        );
        d(p, "selectedCells"
            ,function () {
                return this.gridSelection.allCells();
            }
            ,function (value) {
                var _self__ = this;
                var valueCopy = new Array(0);
                if (value) {
                    for (var cell_key_a in value) {
                        var cell = value[cell_key_a];
                        valueCopy.push(new eui.CellPosition(cell.rowIndex, cell.columnIndex));
                    }
                }
                //            if(!this.) {
                var f = function () {
                    _self__.clearSelection();
                    var cell_key_a;
                    for (cell_key_a in valueCopy) {
                        cell = valueCopy[cell_key_a];
                        _self__.addSelectedCell(cell.rowIndex, cell.columnIndex);
                    }
                };
                this.deferredOperations.push(f);
                this.invalidateProperties();
                //            }
                //            else {
                //                this.clearSelection();
                //                var cell_key_a;
                //                for(cell_key_a in valueCopy) {
                //                    cell = valueCopy[cell_key_a];
                //                    this.addSelectedCell(cell.rowIndex,cell.columnIndex);
                //                }
                //            }
            }
        );
        d(p, "selectedIndex"
            ,function () {
                var selectedRows = this.gridSelection.allRows();
                return (selectedRows.length > 0) ? selectedRows[0] : -1;
            }
            ,function (value) {
                var _self__ = this;
                //            if(!this.initialized) {
                var f = function () {
                    if (value != -1)
                        _self__.setSelectedIndex(value);
                    else
                        _self__.clearSelection();
                };
                this.deferredOperations.push(f);
                this.invalidateProperties();
                //            }
                //            else {
                //                if(value != -1)
                //                    this.setSelectedIndex(value);
                //                else
                //                    this.clearSelection();
                //            }
            }
        );
        d(p, "selectedIndices"
            ,function () {
                return this.gridSelection.allRows();
            }
            ,function (value) {
                var _self__ = this;
                var valueCopy = (value) ? value.concat() : new Array(0);
                //            if(!this.initialized) {
                var f = function () {
                    _self__.clearSelection();
                    for (var index_key_a in valueCopy) {
                        var index = valueCopy[index_key_a];
                        _self__.addSelectedIndex(index);
                    }
                };
                this.deferredOperations.push(f);
                this.invalidateProperties();
                //            }
                //            else {
                //                this.clearSelection();
                //                for(var index_key_a in valueCopy) {
                //                    var index: number = valueCopy[index_key_a];
                //                    this.addSelectedIndex(index);
                //                }
                //            }
            }
        );
        d(p, "selectedItem"
            ,function () {
                var rowIndex = this.selectedIndex;
                if (rowIndex == -1)
                    return undefined;
                return this.getDataProviderItem(rowIndex);
            }
            ,function (value) {
                var _self__ = this;
                //            if(!this.initialized) {
                var f = function () {
                    if (!_self__.dataProvider)
                        return;
                    var rowIndex = _self__.dataProvider.getItemIndex(value);
                    if (rowIndex == -1)
                        _self__.clearSelection();
                    else
                        _self__.setSelectedIndex(rowIndex);
                };
                this.deferredOperations.push(f);
                this.invalidateProperties();
                //            }
                //            else {
                //                if(!this.dataProvider)
                //                    return;
                //                var rowIndex: number = this.dataProvider.getItemIndex(value);
                //                if(rowIndex == -1)
                //                    this.clearSelection();
                //                else
                //                    this.setSelectedIndex(rowIndex);
                //            }
            }
        );
        d(p, "selectedItems"
            ,function () {
                var rowIndices = this.selectedIndices;
                if (rowIndices.length == 0)
                    return undefined;
                var items = new Array();
                for (var rowIndex_key_a in rowIndices) {
                    var rowIndex = rowIndices[rowIndex_key_a];
                    items.push(this.dataProvider.getItemAt(rowIndex));
                }
                return items;
            }
            ,function (value) {
                var _self__ = this;
                var valueCopy = (value) ? value.concat() : new Array(0);
                //            if(!this.initialized) {
                var f = function () {
                    if (!_self__.dataProvider)
                        return;
                    _self__.clearSelection();
                    for (var item_key_a in valueCopy) {
                        var item = valueCopy[item_key_a];
                        _self__.addSelectedIndex(_self__.dataProvider.getItemIndex(item));
                    }
                };
                this.deferredOperations.push(f);
                this.invalidateProperties();
                //            }
                //            else {
                //                if(!this.dataProvider)
                //                    return;
                //                this.clearSelection();
                //                for(var item_key_a in valueCopy) {
                //                    var item: Object = valueCopy[item_key_a];
                //                    this.addSelectedIndex(this.dataProvider.getItemIndex(item));
                //                }
                //            }
            }
        );
        d(p, "selectionIndicator"
            ,function () {
                return this._selectionIndicator;
            }
            ,function (value) {
                if (this._selectionIndicator == value)
                    return;
                this._selectionIndicator = value;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchChangeEvent("selectionIndicatorChanged");
            }
        );
        d(p, "selectionLength"
            ,function () {
                return this.gridSelection.selectionLength;
            }
            ,function (value) {
                egret.superSetter(eui.Grid, this, "selectionLength", value);
            }
        );
        d(p, "selectionMode"
            ,function () {
                return this.gridSelection.selectionMode;
            }
            ,function (value) {
                if (this.selectionMode == value)
                    return;
                this.gridSelection.selectionMode = value;
                if (this.selectionMode != value)
                    return;
                this.initializeAnchorPosition();
                if (!this.requireSelection)
                    this.initializeCaretPosition();
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchChangeEvent("selectionModeChanged");
            }
        );
        d(p, "showDataTips"
            ,function () {
                return this._showDataTips;
            }
            ,function (value) {
                var _self__ = this;
                if (this._showDataTips == value)
                    return;
                this._showDataTips = value;
                this.invalidateDisplayList();
                _self__.dispatchEvent(new egret.Event("showDataTipsChanged"));
            }
        );
        d(p, "typicalItem"
            ,function () {
                return this._typicalItem;
            }
            ,function (value) {
                if (this._typicalItem == value)
                    return;
                this._typicalItem = value;
                this.invalidateTypicalItemRenderer();
                this.dispatchChangeEvent("typicalItemChanged");
            }
        );
        p.invalidateTypicalItemRenderer = function () {
            this.typicalItemChanged = true;
            this.invalidateProperties();
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        d(p, "variableRowHeight"
            ,function () {
                return this._variableRowHeight;
            }
            ,function (value) {
                if (value == this.variableRowHeight)
                    return;
                this._variableRowHeight = value;
                this.variableRowHeightChanged = true;
                this.invalidateProperties();
                this.dispatchChangeEvent("variableRowHeightChanged");
            }
        );
        p.selectAll = function () {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.selectAll();
            if (selectionChanged) {
                this.initializeCaretPosition();
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        /**
         * @param dispatchChangeEvent 清空选择是否抛出事件，默认是抛出事件
         */
        p.clearSelection = function (dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = true; }
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.removeAll();
            if (selectionChanged) {
                this.invalidateDisplayListFor("selectionIndicator");
                if (dispatchChangeEvent) {
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
                }
            }
            this.initializeCaretPosition();
            this.initializeAnchorPosition();
            return selectionChanged;
        };
        p.selectionContainsIndex = function (rowIndex) {
            return this.gridSelection.containsRow(rowIndex);
        };
        p.selectionContainsIndices = function (rowIndices) {
            return this.gridSelection.containsRows(rowIndices);
        };
        /**
         * 由程序或者用户设置选中项。
         * @param rowIndex 索引值。
         * @param dispatchChangeEvent 当索引值发生改变，且该参数为true的时候，组件派发事件。
         */
        p.setSelectedIndex = function (rowIndex, dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = true; }
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.setRow(rowIndex);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex;
                this.caretColumnIndex = -1;
                this.invalidateDisplayListFor("selectionIndicator");
                if (dispatchChangeEvent) {
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
                }
            }
            return selectionChanged;
        };
        p.addSelectedIndex = function (rowIndex, dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = true; }
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.addRow(rowIndex);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex;
                this.caretColumnIndex = -1;
                this.invalidateDisplayListFor("selectionIndicator");
                if (dispatchChangeEvent) {
                    this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
                }
            }
            return selectionChanged;
        };
        p.removeSelectedIndex = function (rowIndex) {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.removeRow(rowIndex);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex;
                this.caretColumnIndex = -1;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectIndices = function (rowIndex, rowCount) {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.setRows(rowIndex, rowCount);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex + rowCount - 1;
                this.caretColumnIndex = -1;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectionContainsCell = function (rowIndex, columnIndex) {
            return this.gridSelection.containsCell(rowIndex, columnIndex);
        };
        p.selectionContainsCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            return this.gridSelection.containsCellRegion(rowIndex, columnIndex, rowCount, columnCount);
        };
        p.setSelectedCell = function (rowIndex, columnIndex) {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.setCell(rowIndex, columnIndex);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex;
                this.caretColumnIndex = columnIndex;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.addSelectedCell = function (rowIndex, columnIndex) {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.addCell(rowIndex, columnIndex);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex;
                this.caretColumnIndex = columnIndex;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.removeSelectedCell = function (rowIndex, columnIndex) {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.removeCell(rowIndex, columnIndex);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex;
                this.caretColumnIndex = columnIndex;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        p.selectCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            //            if(this.invalidatePropertiesFlag)
            //                egret.core.UIGlobals.layoutManager.validateClient(this,false);
            var selectionChanged = this.gridSelection.setCellRegion(rowIndex, columnIndex, rowCount, columnCount);
            if (selectionChanged) {
                this.caretRowIndex = rowIndex + rowCount - 1;
                this.caretColumnIndex = columnIndex + columnCount - 1;
                this.invalidateDisplayListFor("selectionIndicator");
                this.dispatchUIEvent(eui.UIEventEx.VALUE_COMMIT);
            }
            return selectionChanged;
        };
        d(p, "gridDimensions"
            ,function () {
                return this.gridLayout.gridDimensions;
            }
            ,function (value) {
                egret.superSetter(eui.Grid, this, "gridDimensions", value);
            }
        );
        p.scrollToIndex = function (elementIndex, scrollHorizontally, scrollVertically) {
            var spDelta;
            if (!spDelta)
                return false;
            var scrollChanged = false;
            if (scrollHorizontally) {
                //                this.horizontalScrollPosition += spDelta.x;
                //                this.scrollH += spDelta.x; //修改 fenghuitao 4.8
                scrollChanged = spDelta.x != 0;
            }
            if (scrollVertically) {
                //                this.verticalScrollPosition += spDelta.y;
                //                this.scrollV += spDelta.y;
                scrollChanged = scrollChanged || spDelta.y != 0;
            }
            return scrollChanged;
        };
        p.ensureCellIsVisible = function (rowIndex, columnIndex) {
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            var columns = this.columns;
            if (!columns || columnIndex < -1 || columnIndex >= columns.length || !this.dataProvider || rowIndex < -1 || rowIndex >= this.dataProvider.length || (columnIndex == -1 && rowIndex == -1))
                return;
            if ((columnIndex == -1 && this.getNextVisibleColumnIndex(-1) == -1) || (columnIndex != -1 && !((columns.getItemAt(columnIndex)).visible)))
                return;
            var columnsLength = columns.length;
            var scrollHorizontally = columnIndex != -1;
            var scrollVertically = rowIndex != -1;
            if (this.getVisibleRowIndices().length == 0 || this.getVisibleColumnIndices().length == 0)
                this.validateNow();
            if (!scrollHorizontally)
                columnIndex = 0;
            if (!scrollVertically) {
                var visibleRowIndices = this.getVisibleRowIndices();
                rowIndex = (visibleRowIndices.length > 0) ? visibleRowIndices[0] : 0;
            }
            var elementIndex = (rowIndex * columnsLength) + columnIndex;
            var scrollChanged = false;
            var firstScroll = true;
            do {
                scrollChanged = this.scrollToIndex(elementIndex, scrollHorizontally, scrollVertically);
                if (!this.variableRowHeight && !scrollHorizontally)
                    return;
                if (!firstScroll && !scrollChanged)
                    return;
                this.validateNow();
                firstScroll = false;
            } while (!this.isCellVisible(scrollVertically ? rowIndex : -1, scrollHorizontally ? columnIndex : -1));
            this.scrollToIndex(elementIndex, scrollHorizontally, scrollVertically);
        };
        p.getVisibleRowIndices = function () {
            return this.gridLayout.getVisibleRowIndices();
        };
        p.getVisibleColumnIndices = function () {
            return this.gridLayout.getVisibleColumnIndices();
        };
        p.getCellBounds = function (rowIndex, columnIndex) {
            return this.gridLayout.getCellBounds(rowIndex, columnIndex);
        };
        p.getRowBounds = function (rowIndex) {
            return this.gridLayout.getRowBounds(rowIndex);
        };
        p.getColumnBounds = function (columnIndex) {
            return this.gridLayout.getColumnBounds(columnIndex);
        };
        p.getRowIndexAt = function (x, y) {
            return this.gridLayout.getRowIndexAt(x, y);
        };
        p.getColumnIndexAt = function (x, y) {
            return this.gridLayout.getColumnIndexAt(x, y);
        };
        p.getColumnWidth = function (columnIndex) {
            var column = this.getGridColumn(columnIndex);
            return (column && !isNaN(column.width)) ? column.width : this.gridDimensions.getColumnWidth(columnIndex);
        };
        p.getCellAt = function (x, y) {
            return this.gridLayout.getCellAt(x, y);
        };
        p.getCellsAt = function (x, y, w, h) {
            return this.gridLayout.getCellsAt(x, y, w, h);
        };
        p.getCellX = function (rowIndex, columnIndex) {
            return this.gridDimensions.getCellX(rowIndex, columnIndex);
        };
        p.getCellY = function (rowIndex, columnIndex) {
            return this.gridDimensions.getCellY(rowIndex, columnIndex);
        };
        p.getItemRendererAt = function (rowIndex, columnIndex) {
            return this.gridLayout.getItemRendererAt(rowIndex, columnIndex);
        };
        p.isCellVisible = function (rowIndex, columnIndex) {
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            return this.gridLayout.isCellVisible(rowIndex, columnIndex);
        };
        p.setInvalidateDisplayListReason = function (reason) {
            this.invalidateDisplayListReasonsMask |= eui.Grid.invalidateDisplayListReasonBits[reason];
        };
        p.isInvalidateDisplayListReason = function (reason) {
            var bit = eui.Grid.invalidateDisplayListReasonBits[reason];
            return (this.invalidateDisplayListReasonsMask & bit) == bit;
        };
        p.clearInvalidateDisplayListReasons = function () {
            this.invalidateDisplayListReasonsMask = 0;
        };
        p.invalidateSize = function () {
            if (!this.inUpdateDisplayList) {
                _super.prototype.invalidateSize.call(this);
                this.dispatchChangeEvent("invalidateSize");
            }
        };
        p.invalidateDisplayList = function () {
            if (!this.inUpdateDisplayList) {
                this.setInvalidateDisplayListReason("none");
                _super.prototype.invalidateDisplayList.call(this);
                this.dispatchChangeEvent("invalidateDisplayList");
            }
        };
        p.commitProperties = function () {
            if (this.variableRowHeightChanged || this.rowHeightChanged) {
                if (this.rowHeightChanged)
                    this.gridDimensions.defaultRowHeight = this._rowHeight;
                this.gridDimensions.variableRowHeight = this.variableRowHeight;
                if ((!this.variableRowHeight && this.rowHeightChanged) || this.variableRowHeightChanged) {
                    this.clearGridLayoutCache(false);
                    this.invalidateSize();
                    this.invalidateDisplayList();
                }
                this.rowHeightChanged = false;
                this.variableRowHeightChanged = false;
            }
            if (this.itemRendererChanged || this.typicalItemChanged) {
                this.clearGridLayoutCache(true);
                this.itemRendererChanged = false;
            }
            if (!this.columns || (this.generatedColumns && (this.typicalItemChanged || (!this.typicalItem && this.dataProviderChanged)))) {
                var oldColumns = this.columns;
                this.columns = this.generateColumns();
                this.generatedColumns = (this.columns != null);
                this.columnsChanged = this.columns != oldColumns;
            }
            this.typicalItemChanged = false;
            if (this.dataProviderChanged || this.columnsChanged) {
                if (this.gridSelection) {
                    var savedRequireSelection = this.gridSelection.requireSelection;
                    this.gridSelection.requireSelection = false;
                    this.gridSelection.removeAll();
                    this.gridSelection.requireSelection = savedRequireSelection;
                }
                if (this.columnsChanged)
                    this.gridDimensions.columnCount = this._columns ? this._columns.length : 0;
                if (this.typicalItem != null && !this.columnsChanged)
                    this.clearGridLayoutCache(false);
                else
                    this.clearGridLayoutCache(true);
                if (!this.caretChanged)
                    this.initializeCaretPosition();
                if (!this.anchorChanged)
                    this.initializeAnchorPosition();
                this.dataProviderChanged = false;
                this.columnsChanged = false;
            }
            this.anchorChanged = false;
            if (this.dataProvider) {
                for (var deferredOperation_key_a in this.deferredOperations) {
                    var deferredOperation = this.deferredOperations[deferredOperation_key_a];
                    deferredOperation();
                }
                this.deferredOperations.length = 0;
            }
            if (this.caretChanged) {
                if (this._dataProvider && this.caretRowIndex >= this._dataProvider.length)
                    this._caretRowIndex = this._dataProvider.length - 1;
                if (this._columns && this.caretColumnIndex >= this._columns.length)
                    this._caretColumnIndex = this.getPreviousVisibleColumnIndex(this._columns.length - 1);
                this.caretSelectedItem = this._dataProvider && this._caretRowIndex >= 0 ? this._dataProvider.getItemAt(this._caretRowIndex) : null;
                this.dispatchCaretChangeEvent();
                this._oldCaretRowIndex = this._caretRowIndex;
                this._oldCaretColumnIndex = this._caretColumnIndex;
                this.caretChanged = false;
            }
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            this.inUpdateDisplayList = true;
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            this.inUpdateDisplayList = false;
            this.clearInvalidateDisplayListReasons();
            if (!this.variableRowHeight)
                this.setFixedRowHeight(this.gridDimensions.getRowHeight(0));
            if (this.lastUnscaledWidth != unscaledWidth || this.lastUnscaleHeight != unscaledHeight) {
                this.lastUnscaledWidth = unscaledWidth;
                this.lastUnscaleHeight = unscaledHeight;
                this.dispatchChangeEvent("invalidateSize");
            }
        };
        p.invalidateDisplayListFor = function (reason) {
            if (!this.inUpdateDisplayList) {
                this.setInvalidateDisplayListReason(reason);
                _super.prototype.invalidateDisplayList.call(this);
                this.dispatchChangeEvent("invalidateDisplayList");
            }
        };
        p.invalidateCell = function (rowIndex, columnIndex) {
            if (!this.dataProvider)
                return;
            var dataProviderLength = this.dataProvider.length;
            if (rowIndex >= this.dataProvider.length)
                return;
            if (!this.isCellVisible(rowIndex, columnIndex))
                return;
            //            if(this.invalidateDisplayListFlag || this.invalidateSizeFlag)
            //                return;
            if ((rowIndex >= 0) && (columnIndex >= 0)) {
                this.gridLayout.invalidateCell(rowIndex, columnIndex);
            }
            else if (rowIndex >= 0) {
                var visibleColumnIndices = this.getVisibleColumnIndices();
                for (var visibleColumnIndex_key_a in visibleColumnIndices) {
                    var visibleColumnIndex = visibleColumnIndices[visibleColumnIndex_key_a];
                    this.gridLayout.invalidateCell(rowIndex, visibleColumnIndex);
                }
            }
            else if (columnIndex >= 0) {
                var visibleRowIndices = this.getVisibleRowIndices();
                for (var visibleRowIndex_key_a in visibleRowIndices) {
                    var visibleRowIndex = visibleRowIndices[visibleRowIndex_key_a];
                    if (visibleRowIndex >= dataProviderLength)
                        break;
                    this.gridLayout.invalidateCell(visibleRowIndex, columnIndex);
                }
            }
        };
        p.createGridSelection = function () {
            return new eui.GridSelection();
        };
        p.getGridColumn = function (columnIndex) {
            var columns = this.columns;
            if ((columns == null) || (columnIndex < 0) || (columnIndex >= columns.length))
                return null;
            return columns.getItemAt(columnIndex);
        };
        p.getDataProviderItem = function (rowIndex) {
            var dataProvider = this.dataProvider;
            if ((dataProvider == null) || (rowIndex >= dataProvider.length))
                return null;
            return dataProvider.getItemAt(rowIndex);
        };
        p.getVisibleItemRenderer = function (rowIndex, columnIndex) {
            var layout = this.layout;
            if (!layout)
                return null;
            return layout.getVisibleItemRenderer(rowIndex, columnIndex);
        };
        p.dispatchGridClickEvents = function (mouseEvent, gridXY, rowIndex, columnIndex) {
            var dispatchGridClick = (rowIndex == this.mouseDownRowIndex && columnIndex == this.mouseDownColumnIndex);
            var newClickTime = egret.getTimer();
            if (dispatchGridClick && !isNaN(this.lastClickTime) && (newClickTime - this.lastClickTime <= this.DOUBLE_CLICK_TIME)) {
                this.dispatchGridEvent(mouseEvent, eui.GridEvent.GRID_DOUBLE_CLICK, gridXY, rowIndex, columnIndex);
                this.lastClickTime = NaN;
                return;
            }
            if (dispatchGridClick) {
                this.dispatchGridEvent(mouseEvent, eui.GridEvent.GRID_CLICK, gridXY, rowIndex, columnIndex);
                this.lastClickTime = newClickTime;
            }
        };
        p.dispatchGridEvent = function (mouseEvent, type, gridXY, rowIndex, columnIndex) {
            var column = columnIndex >= 0 ? this.getGridColumn(columnIndex) : null;
            var item = rowIndex >= 0 ? this.getDataProviderItem(rowIndex) : null;
            var itemRenderer = this.getVisibleItemRenderer(rowIndex, columnIndex);
            var bubbles = mouseEvent.bubbles;
            var cancelable = mouseEvent.cancelable;
            var relatedObject = mouseEvent.relatedObject;
            var ctrlKey = mouseEvent.ctrlKey;
            var altKey = mouseEvent.altKey;
            var shiftKey = mouseEvent.shiftKey;
            var buttonDown = mouseEvent.buttonDown;
            var delta = mouseEvent.delta;
            var commandKey = mouseEvent.commandKey;
            var controlKey = mouseEvent.controlKey;
            var event = new eui.GridEvent(type, bubbles, cancelable, gridXY.x, gridXY.y, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, rowIndex, columnIndex, column, item, itemRenderer, commandKey, controlKey);
            this.dispatchEvent(event);
        };
        p.updateCaretForDataProviderChange = function (event) {
            var oldCaretRowIndex = this.caretRowIndex;
            var location = event.location;
            var itemsLength = event.items ? event.items.length : 0;
            var newCaretRowIndex = 0;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    if (oldCaretRowIndex >= location)
                        this.caretRowIndex += event.items.length;
                    break;
                case eui.CollectionEventKind.REMOVE:
                    if (oldCaretRowIndex >= location) {
                        if (oldCaretRowIndex < (location + itemsLength))
                            this.caretRowIndex = -1;
                        else
                            this.caretRowIndex -= itemsLength;
                    }
                    break;
                case eui.CollectionEventKindEX.MOVE:
                    {
                        var oldLocation = event.oldLocation;
                        if ((oldCaretRowIndex >= oldLocation) && (oldCaretRowIndex < (oldLocation + itemsLength)))
                            this.caretRowIndex += location - oldLocation;
                    }
                    break;
                case eui.CollectionEventKind.REPLACE:
                case eui.CollectionEventKind.UPDATE:
                    break;
                case eui.CollectionEventKind.REFRESH:
                    {
                        newCaretRowIndex = this.caretSelectedItem ? this._dataProvider.getItemIndex(this.caretSelectedItem) : -1;
                        if (newCaretRowIndex != -1) {
                            this.caretRowIndex = newCaretRowIndex;
                            this.ensureCellIsVisible(this.caretRowIndex, -1);
                        }
                        else {
                            var oldVsp = this.layout.target.scrollV; ///verticalScrollPosition;
                            this.validateNow();
                            var cHeight = Math.ceil(this.gridDimensions.getContentHeight());
                            var maximum = Math.max(cHeight - this.height, 0);
                            this.layout.target.scrollV = (oldVsp > maximum) ? maximum : oldVsp;
                        }
                        break;
                    }
                case eui.CollectionEventKind.RESET:
                    {
                        newCaretRowIndex = this.caretSelectedItem ? this._dataProvider.getItemIndex(this.caretSelectedItem) : -1;
                        if (newCaretRowIndex != -1) {
                            this.caretRowIndex = newCaretRowIndex;
                            this.ensureCellIsVisible(this.caretRowIndex, -1);
                        }
                        else {
                            this.caretRowIndex = this._dataProvider.length > 0 ? 0 : -1;
                            this.layout.target.scrollV = 0;
                        }
                        break;
                    }
            }
        };
        p.updateCaretForColumnsChange = function (event) {
            var oldCaretColumnIndex = this.caretColumnIndex;
            var location = event.location;
            var itemsLength = event.items ? event.items.length : 0;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    if (oldCaretColumnIndex >= location)
                        this.caretColumnIndex += itemsLength;
                    break;
                case eui.CollectionEventKind.REMOVE:
                    if (oldCaretColumnIndex >= location) {
                        if (oldCaretColumnIndex < (location + itemsLength))
                            this.caretColumnIndex = this._columns.length > 0 ? 0 : -1;
                        else
                            this.caretColumnIndex -= itemsLength;
                    }
                    break;
                case eui.CollectionEventKindEX.MOVE:
                    var oldLocation = event.oldLocation;
                    if ((oldCaretColumnIndex >= oldLocation) && (oldCaretColumnIndex < (oldLocation + itemsLength)))
                        this.caretColumnIndex += location - oldLocation;
                    break;
                case eui.CollectionEventKind.REPLACE:
                    break;
                case eui.CollectionEventKind.UPDATE:
                    var pe;
                    if (this.selectionMode == eui.GridSelectionMode.SINGLE_CELL || this.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS) {
                        for (var i = 0; i < itemsLength; i++) {
                            pe = event.items[i];
                            if (pe && pe.property == "visible") {
                                var column = pe.source;
                                if (!column || column.visible)
                                    continue;
                                if (column.columnIndex == this.caretColumnIndex)
                                    this.initializeCaretPosition(true);
                                if (column.columnIndex == this.anchorColumnIndex)
                                    this.initializeAnchorPosition(true);
                            }
                        }
                    }
                    break;
                case eui.CollectionEventKind.REFRESH:
                case eui.CollectionEventKind.RESET:
                    this.initializeCaretPosition(true);
                    this.layout.target.scrollH = 0;
                    break;
            }
        };
        p.updateHoverForDataProviderChange = function (event) {
            var oldHoverRowIndex = this.hoverRowIndex;
            var location = event.location;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                case eui.CollectionEventKind.REMOVE:
                case eui.CollectionEventKind.REPLACE:
                case eui.CollectionEventKind.UPDATE:
                case eui.CollectionEventKindEX.MOVE:
                    if (oldHoverRowIndex >= location)
                        this.hoverRowIndex = this.gridDimensions.getRowIndexAt(this.mouseX, this.mouseY);
                    break;
                case eui.CollectionEventKind.REFRESH:
                case eui.CollectionEventKind.RESET:
                    this.hoverRowIndex = this.gridDimensions.getRowIndexAt(this.mouseX, this.mouseY);
                    break;
            }
        };
        p.updateHoverForColumnsChange = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                case eui.CollectionEventKind.REMOVE:
                case eui.CollectionEventKind.REPLACE:
                case eui.CollectionEventKind.UPDATE:
                case eui.CollectionEventKindEX.MOVE:
                    if (this.hoverColumnIndex >= event.location)
                        this.hoverColumnIndex = this.gridDimensions.getColumnIndexAt(this.mouseX, this.mouseY);
                    break;
                case eui.CollectionEventKind.REFRESH:
                case eui.CollectionEventKind.RESET:
                    this.hoverColumnIndex = this.gridDimensions.getColumnIndexAt(this.mouseX, this.mouseY);
                    break;
            }
        };
        p.dataProvider_collectionChangeHandler = function (event) {
            if (!this.columns && this.dataProvider.length > 0) {
                this.columns = this.generateColumns();
                this.generatedColumns = (this.columns != null);
                this.gridDimensions.columnCount = this.generatedColumns ? this.columns.length : 0;
            }
            var gridDimenions = this.gridDimensions;
            if (this.gridDimensions) {
                this.gridDimensions.dataProviderCollectionChanged(event);
                this.gridDimensions.rowCount = this.dataProvider.length;
            }
            if (this.gridLayout)
                this.gridLayout.dataProviderCollectionChanged(event);
            if (this.gridSelection)
                this.gridSelection.dataProviderCollectionChanged(event);
            if (this.gridDimensions && this.hoverRowIndex != -1)
                this.updateHoverForDataProviderChange(event);
            this.invalidateSize();
            this.invalidateDisplayList();
            if (this.caretRowIndex != -1)
                this.updateCaretForDataProviderChange(event);
        };
        p.columns_collectionChangeHandler = function (event) {
            var column;
            var columnIndex = event.location;
            var i = 0;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        while (columnIndex < this.columns.length) {
                            column = (this.columns.getItemAt(columnIndex));
                            column.setGrid(this);
                            column.setColumnIndex(columnIndex);
                            columnIndex++;
                        }
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        columnIndex = Math.min(event.oldLocation, event.location);
                        var maxIndex = Math.max(event.oldLocation, event.location);
                        while (columnIndex <= maxIndex) {
                            column = (this.columns.getItemAt(columnIndex));
                            column.setColumnIndex(columnIndex);
                            columnIndex++;
                        }
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                    {
                        var items = event.items;
                        var length = items.length;
                        for (i = 0; i < length; i++) {
                            if (egret.is(items[i].oldValue, "eui.GridColumn")) {
                                column = (items[i].oldValue);
                                column.setGrid(null);
                                column.setColumnIndex(-1);
                            }
                            if (egret.is(items[i].newValue, "eui.GridColumn")) {
                                column = (items[i].newValue);
                                column.setGrid(this);
                                column.setColumnIndex(columnIndex);
                            }
                        }
                        break;
                    }
                case eui.CollectionEventKind.UPDATE:
                    {
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                    {
                        for (columnIndex = 0; columnIndex < this.columns.length; columnIndex++) {
                            column = (this.columns.getItemAt(columnIndex));
                            column.setColumnIndex(columnIndex);
                        }
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        var count = event.items.length;
                        for (i = 0; i < count; i++) {
                            column = (event.items[i]);
                            column.setGrid(null);
                            column.setColumnIndex(-1);
                        }
                        while (columnIndex < this.columns.length) {
                            column = (this.columns.getItemAt(columnIndex));
                            column.setColumnIndex(columnIndex);
                            columnIndex++;
                        }
                        break;
                    }
                case eui.CollectionEventKind.RESET:
                    {
                        for (columnIndex = 0; columnIndex < this.columns.length; columnIndex++) {
                            column = (this.columns.getItemAt(columnIndex));
                            column.setGrid(this);
                            column.setColumnIndex(columnIndex);
                        }
                        break;
                    }
            }
            if (this.gridDimensions)
                this.gridDimensions.columnsCollectionChanged(event);
            if (this.gridLayout)
                this.gridLayout.columnsCollectionChanged(event);
            if (this.gridSelection)
                this.gridSelection.columnsCollectionChanged(event);
            if (this.caretColumnIndex != -1)
                this.updateCaretForColumnsChange(event);
            if (this.gridDimensions && this.hoverColumnIndex != -1)
                this.updateHoverForColumnsChange(event);
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        p.clearGridLayoutCache = function (clearTypicalSizes) {
            this.gridLayout.clearVirtualLayoutCache();
            var gridDimensions = this.gridDimensions;
            if (gridDimensions) {
                if (clearTypicalSizes)
                    gridDimensions.clearTypicalCellWidthsAndHeights();
                gridDimensions.clearHeights();
                gridDimensions.rowCount = this._dataProvider ? this._dataProvider.length : 0;
            }
            this.setContentSize(0, 0);
        };
        p.getNextVisibleColumnIndex = function (index) {
            if (index === void 0) { index = -1; }
            if (index < -1)
                return -1;
            var columns = this.columns;
            var columnsLength = (columns) ? columns.length : 0;
            for (var i = index + 1; i < columnsLength; i++) {
                var column = columns.getItemAt(i);
                if (column && column.visible)
                    return i;
            }
            return -1;
        };
        p.getPreviousVisibleColumnIndex = function (index) {
            var columns = this.columns;
            if (!columns || index > columns.length)
                return -1;
            for (var i = index - 1; i >= 0; i--) {
                var column = columns.getItemAt(i);
                if (column && column.visible)
                    return i;
            }
            return -1;
        };
        p.initializeAnchorPosition = function (columnOnly) {
            if (columnOnly === void 0) { columnOnly = false; }
            if (!columnOnly)
                this.anchorRowIndex = this._dataProvider && this._dataProvider.length > 0 ? 0 : -1;
            this.anchorColumnIndex = this.getNextVisibleColumnIndex();
        };
        p.initializeCaretPosition = function (columnOnly) {
            if (columnOnly === void 0) { columnOnly = false; }
            if (!columnOnly)
                this.caretRowIndex = this._dataProvider && this._dataProvider.length > 0 ? 0 : -1;
            this.caretColumnIndex = this.getNextVisibleColumnIndex();
        };
        p.dispatchCaretChangeEvent = function () {
            var _self__ = this;
            if (_self__.hasEventListener(eui.GridCaretEvent.CARET_CHANGE)) {
                var caretChangeEvent = new eui.GridCaretEvent(eui.GridCaretEvent.CARET_CHANGE);
                caretChangeEvent.oldRowIndex = this._oldCaretRowIndex;
                caretChangeEvent.oldColumnIndex = this._oldCaretColumnIndex;
                caretChangeEvent.newRowIndex = this._caretRowIndex;
                caretChangeEvent.newColumnIndex = this._caretColumnIndex;
                _self__.dispatchEvent(caretChangeEvent);
            }
        };
        return Grid;
    })(eui.Group);
    eui.Grid = Grid;
    egret.registerClass(Grid,'eui.Grid',["eui.IDataGridElement","eui.IInvalidating"]);
})(eui || (eui = {}));
eui.Grid.invalidateDisplayListReasonBits = { verticalScrollPosition: 1 << 0, horizontalScrollPosition: 1 << 1, bothScrollPositions: (1 << 0) | 1 << 1, hoverIndicator: 1 << 2, caretIndicator: 1 << 3, selectionIndicator: 1 << 4, editorIndicator: 1 << 5, none: ~0 };
var eui;
(function (eui) {
    var GridColumnHeaderGroup = (function (_super) {
        __extends(GridColumnHeaderGroup, _super);
        function GridColumnHeaderGroup() {
            var _this = this;
            _super.call(this);
            this._paddingLeft = 0;
            this._paddingRight = 0;
            this._paddingTop = 0;
            this._paddingBottom = 0;
            this._separatorAffordance = 5;
            this._columnSeparator = null;
            this._dataGrid = null;
            this._downColumnIndex = -1;
            this._headerRenderer = null;
            this._hoverColumnIndex = -1;
            this._visibleSortIndicatorIndices = new Array();
            this.rollColumnIndex = -1;
            this.rollSeparatorIndex = -1;
            this.pressColumnIndex = -1;
            this.pressSeparatorIndex = -1;
            this.gchg_mouseDownDragUpHandler = function (event) {
                var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                var eventHeaderGroupXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                var eventSeparatorIndex = _this.getSeparatorIndexAt(eventHeaderGroupXY.x, 0);
                var eventColumnIndex = (eventSeparatorIndex == -1) ? _this.getHeaderIndexAt(eventHeaderGroupXY.x, 0) : -1;
                var gridEventType;
                switch (event.type) {
                    case egret.MouseEvent.MOUSE_MOVE:
                        {
                            gridEventType = (_this.pressSeparatorIndex != -1) ? eui.GridEvent.SEPARATOR_MOUSE_DRAG : eui.GridEvent.GRID_MOUSE_DRAG;
                            break;
                        }
                    case egret.MouseEvent.MOUSE_UP:
                        {
                            gridEventType = (_this.pressSeparatorIndex != -1) ? eui.GridEvent.SEPARATOR_MOUSE_UP : eui.GridEvent.GRID_MOUSE_UP;
                            _this.downColumnIndex = -1;
                            break;
                        }
                    case egret.MouseEvent.MOUSE_DOWN:
                        {
                            if (eventSeparatorIndex != -1) {
                                gridEventType = eui.GridEvent.SEPARATOR_MOUSE_DOWN;
                                _this.pressSeparatorIndex = eventSeparatorIndex;
                                _this.pressColumnIndex = -1;
                                _this.downColumnIndex = -1;
                            }
                            else {
                                gridEventType = eui.GridEvent.GRID_MOUSE_DOWN;
                                _this.pressSeparatorIndex = -1;
                                _this.pressColumnIndex = eventColumnIndex;
                                _this.downColumnIndex = eventColumnIndex;
                            }
                            break;
                        }
                }
                var columnIndex = (eventSeparatorIndex != -1) ? eventSeparatorIndex : eventColumnIndex;
                _this.dispatchGridEvent(event, gridEventType, eventHeaderGroupXY, columnIndex);
            };
            this.gchg_mouseMoveHandler = function (event) {
                var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                var eventHeaderGroupXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                var eventSeparatorIndex = _this.getSeparatorIndexAt(eventHeaderGroupXY.x, 0);
                var eventColumnIndex = (eventSeparatorIndex == -1) ? _this.getHeaderIndexAt(eventHeaderGroupXY.x, 0) : -1;
                if (eventSeparatorIndex != _this.rollSeparatorIndex) {
                    if (_this.rollSeparatorIndex != -1)
                        _this.dispatchGridEvent(event, eui.GridEvent.SEPARATOR_ROLL_OUT, eventHeaderGroupXY, _this.rollSeparatorIndex);
                    if (eventSeparatorIndex != -1)
                        _this.dispatchGridEvent(event, eui.GridEvent.SEPARATOR_ROLL_OVER, eventHeaderGroupXY, eventSeparatorIndex);
                }
                if (eventColumnIndex != _this.rollColumnIndex) {
                    if (_this.rollColumnIndex != -1)
                        _this.dispatchGridEvent(event, eui.GridEvent.GRID_ROLL_OUT, eventHeaderGroupXY, _this.rollColumnIndex);
                    if (eventColumnIndex != -1)
                        _this.dispatchGridEvent(event, eui.GridEvent.GRID_ROLL_OVER, eventHeaderGroupXY, eventColumnIndex);
                }
                _this.rollColumnIndex = eventColumnIndex;
                _this.rollSeparatorIndex = eventSeparatorIndex;
                _this.hoverColumnIndex = eventColumnIndex;
            };
            this.gchg_mouseRollOutHandler = function (event) {
                var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
                var eventHeaderGroupXY = _this.globalToLocal(eventStageXY.x, eventStageXY.y);
                if (_this.rollSeparatorIndex != -1)
                    _this.dispatchGridEvent(event, eui.GridEvent.SEPARATOR_ROLL_OUT, eventHeaderGroupXY, _this.rollSeparatorIndex);
                else if (_this.rollColumnIndex != -1)
                    _this.dispatchGridEvent(event, eui.GridEvent.GRID_ROLL_OUT, eventHeaderGroupXY, _this.rollColumnIndex);
                _this.rollColumnIndex = -1;
                _this.rollSeparatorIndex = -1;
                _this.hoverColumnIndex = -1;
            };
            this.layout = new eui.GridColumnHeaderGroupLayout();
            //                this.layout.clipAndEnableScrolling = true;
            eui.MouseEventUtil.addDownDragUpListeners(this, this.gchg_mouseDownDragUpHandler, this.gchg_mouseDownDragUpHandler, this.gchg_mouseDownDragUpHandler);
            this.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.gchg_mouseMoveHandler, this);
            this.addEventListener(egret.MouseEvent.ROLL_OUT, this.gchg_mouseRollOutHandler, this);
            this.addEventListener(egret.MouseEvent.CLICK, this.gchg_clickHandler, this);
            this.addEventListener(egret.MouseEvent.DOUBLE_CLICK, this.gchg_doubleClickHandler, this);
            //                this.addEventListener(eui.UIEvent.,this.createCompeletFun,this)
        }
        var c=GridColumnHeaderGroup,p=c.prototype;
        p.createCompeletFun = function (e) {
            this.updateDisplayList(this.dataGrid.grid.width, this.minHeight);
        };
        d(p, "paddingLeft"
            ,function () {
                return this._paddingLeft;
            }
            ,function (value) {
                if (this._paddingLeft == value)
                    return;
                this._paddingLeft = value;
                this.invalidateSize();
                this.invalidateDisplayList();
            }
        );
        d(p, "paddingRight"
            ,function () {
                return this._paddingRight;
            }
            ,function (value) {
                if (this._paddingRight == value)
                    return;
                this._paddingRight = value;
                this.invalidateSize();
                this.invalidateDisplayList();
            }
        );
        d(p, "paddingTop"
            ,function () {
                return this._paddingTop;
            }
            ,function (value) {
                if (this._paddingTop == value)
                    return;
                this._paddingTop = value;
                this.invalidateSize();
                this.invalidateDisplayList();
            }
        );
        d(p, "paddingBottom"
            ,function () {
                return this._paddingBottom;
            }
            ,function (value) {
                if (this._paddingBottom == value)
                    return;
                this._paddingBottom = value;
                this.invalidateSize();
                this.invalidateDisplayList();
            }
        );
        d(p, "separatorAffordance"
            ,function () {
                return this._separatorAffordance;
            }
            ,function (value) {
                this._separatorAffordance = value;
            }
        );
        p.dispatchChangeEvent = function (type) {
            var _self__ = this;
            if (_self__.hasEventListener(type))
                _self__.dispatchEvent(new egret.Event(type));
        };
        d(p, "columnSeparator"
            ,function () {
                return this._columnSeparator;
            }
            ,function (value) {
                if (this._columnSeparator == value)
                    return;
                this._columnSeparator = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("columnSeparatorChanged");
            }
        );
        d(p, "dataGrid"
            ,function () {
                return this._dataGrid;
            }
            ,function (value) {
                if (this._dataGrid == value)
                    return;
                if (this._dataGrid && this._dataGrid.grid)
                    this._dataGrid.grid.removeEventListener(eui.PropertyChangeEvent.PROPERTY_CHANGE, this.grid_changeEventHandler, this);
                this._dataGrid = value;
                if (this._dataGrid && this._dataGrid.grid)
                    this._dataGrid.grid.addEventListener(eui.PropertyChangeEvent.PROPERTY_CHANGE, this.grid_changeEventHandler, this);
                this.layout.clearVirtualLayoutCache();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.dispatchChangeEvent("dataGridChanged");
            }
        );
        p.grid_changeEventHandler = function (event) {
            if (event.property == "horizontalScrollPosition")
                this.scrollH = event.newValue;
        };
        d(p, "downColumnIndex"
            ,function () {
                return this._downColumnIndex;
            }
            ,function (value) {
                if (this._downColumnIndex == value)
                    return;
                this._downColumnIndex = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("downColumnIndexChanged");
            }
        );
        d(p, "itemRenderer"
            ,function () {
                return this._headerRenderer;
            }
            ,function (value) {
                if (value == this._headerRenderer)
                    return;
                this._headerRenderer = value;
                this.layout.clearVirtualLayoutCache();
                this.invalidateSize();
                this.invalidateDisplayList();
                this.dispatchChangeEvent("headerRendererChanged");
            }
        );
        d(p, "hoverColumnIndex"
            ,function () {
                return this._hoverColumnIndex;
            }
            ,function (value) {
                if (this._hoverColumnIndex == value)
                    return;
                this._hoverColumnIndex = value;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("hoverColumnIndexChanged");
            }
        );
        d(p, "visibleSortIndicatorIndices"
            ,function () {
                return this._visibleSortIndicatorIndices.concat();
            }
            ,function (value) {
                var valueCopy = (value) ? value.concat() : new Array();
                this._visibleSortIndicatorIndices = valueCopy;
                this.invalidateDisplayList();
                this.dispatchChangeEvent("visibleSortIndicatorIndicesChanged");
            }
        );
        p.isSortIndicatorVisible = function (columnIndex) {
            return (this._visibleSortIndicatorIndices.indexOf(columnIndex) != -1);
        };
        p.getHeaderIndexAt = function (x, y) {
            return (this.layout).getHeaderIndexAt(x, y);
        };
        p.getSeparatorIndexAt = function (x, y) {
            return (this.layout).getSeparatorIndexAt(x, y);
        };
        p.getHeaderRendererAt = function (columnIndex) {
            return (this.layout).getHeaderRendererAt(columnIndex);
        };
        p.getHeaderBounds = function (columnIndex) {
            return (this.layout).getHeaderBounds(columnIndex);
        };
        p.gchg_clickHandler = function (event) {
            var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
            var eventHeaderGroupXY = this.globalToLocal(eventStageXY.x, eventStageXY.y);
            var eventSeparatorIndex = this.getSeparatorIndexAt(eventHeaderGroupXY.x, 0);
            var eventColumnIndex = (eventSeparatorIndex == -1) ? this.getHeaderIndexAt(eventHeaderGroupXY.x, 0) : -1;
            if ((eventSeparatorIndex != -1) && (this.pressSeparatorIndex == eventSeparatorIndex))
                this.dispatchGridEvent(event, eui.GridEvent.SEPARATOR_CLICK, eventHeaderGroupXY, eventSeparatorIndex);
            else if ((eventColumnIndex != -1) && (this.pressColumnIndex == eventColumnIndex))
                this.dispatchGridEvent(event, eui.GridEvent.GRID_CLICK, eventHeaderGroupXY, eventColumnIndex);
        };
        p.gchg_doubleClickHandler = function (event) {
            var eventStageXY = new egret.Point(event["stageX"], event["stageY"]);
            var eventHeaderGroupXY = this.globalToLocal(eventStageXY.x, eventStageXY.y);
            var eventSeparatorIndex = this.getSeparatorIndexAt(eventHeaderGroupXY.x, 0);
            var eventColumnIndex = (eventSeparatorIndex == -1) ? this.getHeaderIndexAt(eventHeaderGroupXY.x, 0) : -1;
            if ((eventSeparatorIndex != -1) && (this.pressSeparatorIndex == eventSeparatorIndex))
                this.dispatchGridEvent(event, eui.GridEvent.SEPARATOR_DOUBLE_CLICK, eventHeaderGroupXY, eventSeparatorIndex);
            else if ((eventColumnIndex != -1) && (this.pressColumnIndex == eventColumnIndex))
                this.dispatchGridEvent(event, eui.GridEvent.GRID_DOUBLE_CLICK, eventHeaderGroupXY, eventColumnIndex);
        };
        p.dispatchGridEvent = function (mouseEvent, type, headerGroupXY, columnIndex) {
            var column = this.getColumnAt(columnIndex);
            var item = null;
            var itemRenderer = this.getHeaderRendererAt(columnIndex);
            var bubbles = mouseEvent.bubbles;
            var cancelable = mouseEvent.cancelable;
            var relatedObject = mouseEvent.relatedObject;
            var ctrlKey = mouseEvent.ctrlKey;
            var altKey = mouseEvent.altKey;
            var shiftKey = mouseEvent.shiftKey;
            var buttonDown = mouseEvent.buttonDown;
            var delta = mouseEvent.delta;
            var event = new eui.GridEvent(type, bubbles, cancelable, headerGroupXY.x, headerGroupXY.y, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, -1, columnIndex, column, item, itemRenderer);
            this.dispatchEvent(event);
        };
        p.getColumnAt = function (columnIndex) {
            var grid = (this.dataGrid) ? this.dataGrid.grid : null;
            if (!grid || !grid.columns)
                return null;
            var columns = grid.columns;
            return ((columnIndex >= 0) && (columnIndex < columns.length)) ? columns.getItemAt(columnIndex) : null;
        };
        return GridColumnHeaderGroup;
    })(eui.Group);
    eui.GridColumnHeaderGroup = GridColumnHeaderGroup;
    egret.registerClass(GridColumnHeaderGroup,'eui.GridColumnHeaderGroup',["eui.IDataGridElement","eui.IInvalidating"]);
    eui.registerProperty(GridColumnHeaderGroup, "columnSeparator", "Class");
})(eui || (eui = {}));
///<reference path="DividedGroup.ts"/>
var eui;
(function (eui) {
    var HDividerGroup = (function (_super) {
        __extends(HDividerGroup, _super);
        function HDividerGroup() {
            _super.call(this);
            this._minElementWidth = 0;
            this.dividerStartX = NaN;
            this.dragStartX = NaN;
            this.skinName = "skins.HDividerGroupSkin";
            var hLayout = new eui.HorizontalLayout();
            hLayout.gap = 10;
            hLayout.useVirtualLayout = false;
            //            this.$setLayout(hLayout);
            egret.superSetter(eui.HDividerGroup, this, "layout", hLayout);
        }
        var c=HDividerGroup,p=c.prototype;
        d(p, "cursorName"
            ,function () {
                //					return egret.ui.core.Cursors.DESKTOP_RESIZE_EW;
                return "";
            }
            ,function (value) {
                egret.superSetter(eui.HDividerGroup, this, "cursorName", value);
            }
        );
        d(p, "minElementWidth"
            ,function () {
                return this._minElementWidth;
            }
            ,function (value) {
                this._minElementWidth = value;
            }
        );
        p.layoutDivider = function (divider, prev, next) {
            divider.x = next.x - this.horizontalLayout["gap"] / 2;
        };
        p.startDividerDrag = function (e) {
            _super.prototype.startDividerDrag.call(this, e);
            this.dividerStartX = e.currentTarget["x"];
            this.dragStartX = e["stageX"];
        };
        p.dragMove = function (e) {
            var offSetX = e["stageX"] - this.dragStartX;
            if (this.activeDivider["prev"].width + offSetX < this.minElementWidth) {
                offSetX = this.minElementWidth - this.activeDivider["prev"].width;
            }
            else if (this.activeDivider["next"].width - offSetX < this.minElementWidth) {
                offSetX = this.activeDivider["next"].width - this.minElementWidth;
            }
            this.dragUI.x = this.dividerStartX + offSetX;
        };
        p.applyDrag = function (e) {
            var offSetX = this.dragUI.x - this.dividerStartX;
            this.activeDivider["prev"].percentWidth = 100 * (this.activeDivider["prev"].width + offSetX) / this.width;
            this.activeDivider["next"].percentWidth = 100 * (this.activeDivider["next"].width - offSetX) / this.width;
            this.invalidateDisplayList();
        };
        d(p, "horizontalLayout"
            ,function () {
                return this.dividerGroup.layout; //(<eui.HorizontalLayout>(this["layout"]));
            }
            ,function (value) {
                //egret.superSetter(eui.HDividerGroup,this,"horizontalLayout",value);
                this.dividerGroup.layout = value;
            }
        );
        return HDividerGroup;
    })(eui.DividedGroup);
    eui.HDividerGroup = HDividerGroup;
    egret.registerClass(HDividerGroup,'eui.HDividerGroup');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Range class holds a value and an allowed range for that
     * value, defined by <code>minimum</code> and <code>maximum</code> properties.
     *
     * The <code>value</code> property
     * is always constrained to be between the current <code>minimum</code> and
     * <code>maximum</code>, and the <code>minimum</code>,
     * and <code>maximum</code> are always constrained
     * to be in the proper numerical order, such that
     * <code>(minimum <= value <= maximum)</code> is <code>true</code>.
     *
     * If the value of the <code>snapInterval</code> property is not 0,
     * then the <code>value</code> property is also constrained to be a multiple of
     * <code>snapInterval</code>.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/supportClasses/RangeExample.ts
     */
    /**
     * @language zh_CN
     * 范围选取组件,该组件包含一个值和这个值所允许的最大最小约束范围。
     *
     * <code>value</code>属性的值永远被限制于当前的<code>minimum</code>和
     * <code>maximum</code>之间，并且<code>minimum</code>和 <code>maximum</code>永远按照固定的顺序排列，
     * 即<code>(minimum <= value <= maximum)</code> 为真。
     *
     * 如果<code>snapInterval</code>属性的值不是0，那么<code>value</code>的值也会被<code>snapInterval</code>所约束。
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/supportClasses/RangeExample.ts
     */
    var Range = (function (_super) {
        __extends(Range, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个 Range 实例。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Range() {
            _super.call(this);
            this.$Range = {
                0: 100,
                1: false,
                2: 0,
                3: false,
                4: 0,
                5: 0,
                6: false,
                7: 1,
                8: false,
                9: false,
            };
        }
        var c=Range,p=c.prototype;
        d(p, "maximum"
            /**
             * @language en_US
             * The maximum valid <code>value</code>.<p/>
             *
             * Changes to the value property are constrained
             * by <code>commitProperties()</code> to be less than or equal to
             * maximum with the <code>nearestValidValue()</code> method.
             *
             * @default 100
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 最大有效值。<p/>
             *
             * 规定<code>value</code>属性的值不能够超过的最大值。该修正过程
             * 将在<code>nearestValidValue()</code>方法中进行。
             *
             * @default 100
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Range[0 /* maximum */];
            }
            ,function (value) {
                value = +value || 0;
                var values = this.$Range;
                if (value === values[0 /* maximum */])
                    return;
                values[0 /* maximum */] = value;
                values[1 /* maxChanged */] = true;
                this.invalidateProperties();
                this.invalidateDisplayList();
            }
        );
        d(p, "minimum"
            /**
             * @language en_US
             * The minimum valid <code>value</code>.<p/>
             *
             * Changes to the value property are constrained
             * by <code>commitProperties()</code> to be greater than or equal to
             * minimum with the <code>nearestValidValue()</code> method.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 最小有效值<p/>
             *
             * 规定<code>value</code>属性的值不能够低于的最小值。该修正过程
             * 将在<code>nearestValidValue()</code>方法中进行。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Range[2 /* minimum */];
            }
            ,function (value) {
                value = +value || 0;
                var values = this.$Range;
                if (value === values[2 /* minimum */])
                    return;
                values[2 /* minimum */] = value;
                values[3 /* minChanged */] = true;
                this.invalidateProperties();
                this.invalidateDisplayList();
            }
        );
        d(p, "value"
            /**
             * @language en_US
             * The current value for this range.<p/>
             *
             * Changes to the value property are constrained
             * by <code>commitProperties()</code> to be greater than or equal to
             * the <code>minimum</code> property, less than or equal to the <code>maximum</code> property, and a
             * multiple of <code>snapInterval</code> with the <code>nearestValidValue()</code>
             * method.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此范围的当前值。<p/>
             *
             * 改变的<code>value</code>属性将在<code>commitProperties()</code>方法中被<code>minimum</code>属性
             * 和<code>minimum</code>属性所限制。此修正过程将在<code>nearestValidValue()</code>方法中进行。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                var values = this.$Range;
                return values[6 /* valueChanged */] ?
                    values[5 /* changedValue */] : values[4 /* value */];
            }
            ,function (newValue) {
                newValue = +newValue || 0;
                this.$setValue(newValue);
            }
        );
        /**
         * @private
         *
         * @param newValue
         */
        p.$setValue = function (newValue) {
            if (newValue === this.value)
                return false;
            var values = this.$Range;
            values[5 /* changedValue */] = newValue;
            values[6 /* valueChanged */] = true;
            this.invalidateProperties();
            return true;
        };
        d(p, "snapInterval"
            /**
             * @language en_US
             * The snapInterval property controls the valid values of the <code>value</code> property.
             *
             * If nonzero, valid values are the sum of the <code>minimum</code> and integer multiples
             * of this property, for all sums that are less than or equal to the <code>maximum</code>.<p/>
             *
             * For example, if <code>minimum</code> is 10, <code>maximum</code> is 20, and this property is 3, then the
             * valid values of this Range are 10, 13, 16, 19, and 20.<p/>
             *
             * If the value of this property is zero, then valid values are only constrained
             * to be between minimum and maximum inclusive.
             *
             * @default 1
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * snapInterval 属性定义 value 属性的有效值。
             * 如果为非零，则有效值为 minimum 与此属性的整数倍数之和，且小于或等于 maximum。</p>
             *
             * 例如，如果 minimum 为 10，maximum 为 20，而此属性为 3，则可能的有效值为 10、13、16、19 和 20.</p>
             *
             * 如果此属性的值为零，则仅会将有效值约束到介于 minimum 和 maximum 之间（包括两者）。
             *
             * @default 1
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Range[7 /* snapInterval */];
            }
            ,function (value) {
                var values = this.$Range;
                values[9 /* explicitSnapInterval */] = true;
                value = +value || 0;
                if (value === values[7 /* snapInterval */])
                    return;
                if (isNaN(value)) {
                    values[7 /* snapInterval */] = 1;
                    values[9 /* explicitSnapInterval */] = false;
                }
                else {
                    values[7 /* snapInterval */] = value;
                }
                values[8 /* snapIntervalChanged */] = true;
                this.invalidateProperties();
            }
        );
        /**
         * @language en_US
         * Processes the properties set on the component.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 处理对组件设置的属性
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            var values = this.$Range;
            if (values[2 /* minimum */] > values[0 /* maximum */]) {
                if (!values[1 /* maxChanged */])
                    values[2 /* minimum */] = values[0 /* maximum */];
                else
                    values[0 /* maximum */] = values[2 /* minimum */];
            }
            if (values[6 /* valueChanged */] || values[1 /* maxChanged */] ||
                values[3 /* minChanged */] || values[8 /* snapIntervalChanged */]) {
                var currentValue = values[6 /* valueChanged */] ?
                    values[5 /* changedValue */] : values[4 /* value */];
                values[6 /* valueChanged */] = false;
                values[1 /* maxChanged */] = false;
                values[3 /* minChanged */] = false;
                values[8 /* snapIntervalChanged */] = false;
                this.setValue(this.nearestValidValue(currentValue, values[7 /* snapInterval */]));
            }
        };
        /**
         * @private
         * 修正size到最接近snapInterval的整数倍
         */
        p.nearestValidSize = function (size) {
            var interval = this.snapInterval;
            if (interval == 0)
                return size;
            var validSize = Math.round(size / interval) * interval;
            return (Math.abs(validSize) < interval) ? interval : validSize;
        };
        /**
         * @language en_US
         * Returns the sum of the minimum with an integer multiple of <code>interval</code> that's
         * closest to <code>value</code>, unless <code>value</code> is closer to the maximum limit,
         * in which case the maximum is returned.<p/>
         *
         * If <code>interval</code> is equal to 0, the value is clipped to the minimum and maximum
         * limits.<p/>
         *
         * The valid values for a range are defined by the sum of the <code>minimum</code> property
         * with multiples of the <code>interval</code> and also defined to be less than or equal to the
         * <code>maximum</code> property.
         * The maximum need not be a multiple of <code>snapInterval</code>.<p/>
         *
         * For example, if <code>minimum</code> is equal to 1, <code>maximum</code> is equal to 6,
         * and <code>snapInterval</code> is equal to 2, the valid
         * values for the Range are 1, 3, 5, 6.
         *
         * Similarly, if <code>minimum</code> is equal to 2, <code>maximum</code> is equal to 9,
         * and <code>snapInterval</code> is equal to 1.5, the valid
         * values for the Range are 2, 3.5, 5, 6.5, 8, and 9.
         *
         * @param value The input value.
         * @param interval The value of snapInterval or an integer multiple of snapInterval.
         * @return The valid value that's closest to the input.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 返回 <code>minimum</code> 与最接近 <code>value</code> 的 <code>interval</code> 的整数倍数之和，
         * 除非 <code>value</code> 接近最大值限制的时候会返回 maximum。<p/>
         *
         * 如果 <code>interval</code> 等于 0，则会将该值剪裁到限制的最小值和最大值。<p/>
         *
         * 范围的有效值由 <code>minimum</code> 属性与 <code>interval</code> 的倍数之和决定，
         * 与此同时也要小于等于 <code>maximum</code> 属性。
         * 最大值不能是 <code>snapInterval</code> 属性的倍数。<p/>
         *
         * 例如，如果 <code>minimum</code> 等于 1，<code>maximum</code> 等于 6，且 <code>snapInterval</code> 等于 3，
         * 则 Range 的有效值有 1、2、5、6。
         *
         * 类似地，如果 <code>minimum</code> 等于 2，<code>maximum</code> 等于 9，
         * 且 <code>snapInterval</code> 等于 1.5，则 Range 的有效值有 2、3.5、5、6.5、8 和 9。
         *
         *
         * @param value 输入值。
         * @param interval snapInterval 的值，或 snapInterval 的整数倍数。
         * @return 最近接输入值的有效值。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.nearestValidValue = function (value, interval) {
            var values = this.$Range;
            if (interval == 0)
                return Math.max(values[2 /* minimum */], Math.min(values[0 /* maximum */], value));
            var maxValue = values[0 /* maximum */] - values[2 /* minimum */];
            var scale = 1;
            value -= values[2 /* minimum */];
            if (interval != Math.round(interval)) {
                var parts = ((1 + interval).toString()).split(".");
                scale = Math.pow(10, parts[1].length);
                maxValue *= scale;
                value = Math.round(value * scale);
                interval = Math.round(interval * scale);
            }
            var lower = Math.max(0, Math.floor(value / interval) * interval);
            var upper = Math.min(maxValue, Math.floor((value + interval) / interval) * interval);
            var validValue = ((value - lower) >= ((upper - lower) / 2)) ? upper : lower;
            return (validValue / scale) + values[2 /* minimum */];
        };
        /**
         * @language en_US
         * Sets the current value for the <code>value</code> property.<p/>
         *
         * This method assumes that the caller has already used the <code>nearestValidValue()</code> method
         * to constrain the value parameter
         *
         * @param value The new value of the <code>value</code> property.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 设置当前值。<p/>
         *
         * 此方法假定调用者已经使用了 nearestValidValue() 方法来约束 value 参数。
         *
         * @param value value属性的新值
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setValue = function (value) {
            var values = this.$Range;
            if (values[4 /* value */] === value)
                return;
            if (values[0 /* maximum */] > values[2 /* minimum */])
                values[4 /* value */] = Math.min(values[0 /* maximum */], Math.max(values[2 /* minimum */], value));
            else
                values[4 /* value */] = value;
            values[6 /* valueChanged */] = false;
            this.invalidateDisplayList();
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "value");
        };
        /**
         * @language en_US
         * Draws the object and/or sizes and positions its children.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 绘制对象和/或设置其子项的大小和位置
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (w, h) {
            _super.prototype.updateDisplayList.call(this, w, h);
            this.updateSkinDisplayList();
        };
        /**
         * @language en_US
         * Update size and visible of skin parts.<p/>
         * Subclasses override this method to update skin parts display based on <code>minimum</code>, <code>maximum</code>
         * and <code>value</code> properties.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 更新皮肤部件（通常为滑块）的大小和可见性。<p/>
         * 子类覆盖此方法以基于 minimum、maximum 和 value 属性更新滑块的大小、位置和可见性。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateSkinDisplayList = function () {
        };
        return Range;
    })(eui.Component);
    eui.Range = Range;
    egret.registerClass(Range,'eui.Range');
    eui.registerBindable(Range.prototype, "value");
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The SliderBase class lets users select a value by moving a slider thumb between
     * the end points of the slider track.
     * The current value of the slider is determined by the relative location of
     * the thumb between the end points of the slider,
     * corresponding to the slider's minimum and maximum values.
     * The SliderBase class is a base class for HSlider and VSlider.
     *
     * @event eui.UIEvent.CHANGE_START Dispatched when the scroll position is going to change
     * @event eui.UIEvent.CHANGE_END Dispatched when the scroll position changed complete
     * @event egret.Event.CHANGE Dispatched when the scroll position is changing
     *
     * @see eui.HSlider
     * @see eui.VSlider
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 滑块控件基类，通过使用 SliderBase 类，用户可以在滑块轨道的端点之间移动滑块来选择值。
     * 滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。
     * SliderBase 类是 HSlider 和 VSlider 的基类。
     *
     * @event eui.UIEvent.CHANGE_START 滚动位置改变开始
     * @event eui.UIEvent.CHANGE_END 滚动位置改变结束
     * @event egret.Event.CHANGE 滚动位置改变的时候
     *
     * @see eui.HSlider
     * @see eui.VSlider
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var SliderBase = (function (_super) {
        __extends(SliderBase, _super);
        /**
         * @language en_US
         * Constructor
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个 SliderBase 实例
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function SliderBase() {
            _super.call(this);
            /**
             * @language en_US
             * [SkinPart] Highlight of track.
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * [SkinPart] 轨道高亮显示对象。
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.trackHighlight = null;
            /**
             * @language en_US
             * [SkinPart] Thumb display object.
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * [SkinPart]滑块显示对象。
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.thumb = null;
            /**
             * @language en_US
             * [SkinPart] Track display object.
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * [SkinPart]轨道显示对象。
             * @skinPart
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.track = null;
            this.$SliderBase = {
                0: 0,
                1: 0,
                2: 0,
                3: 0,
                4: null,
                5: null,
                6: 300,
                7: 0,
                8: 0,
                9: true,
            };
            this.maximum = 10;
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegin, this);
        }
        var c=SliderBase,p=c.prototype;
        d(p, "slideDuration"
            /**
             * @language en_US
             * Duration in milliseconds for the sliding animation when you tap on the track to move a thumb.
             *
             * @default 300
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 在轨道上单击以移动滑块时，滑动动画持续的时间（以毫秒为单位）。设置为0将不执行缓动。
             *
             * @default 300
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$SliderBase[6 /* slideDuration */];
            }
            ,function (value) {
                this.$SliderBase[6 /* slideDuration */] = +value || 0;
            }
        );
        /**
         * @language en_US
         * Converts a track-relative x,y pixel location into a value between
         * the minimum and maximum, inclusive.
         *
         * @param x The x coordinate of the location relative to the track's origin.
         * @param y The y coordinate of the location relative to the track's origin.
         * @return A value between the minimum and maximum, inclusive.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值。
         *
         * @param x 相对于轨道原点的位置的x坐标。
         * @param y 相对于轨道原点的位置的y坐标。
         * @return 介于最小值和最大值（包括两者）之间的一个值。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.pointToValue = function (x, y) {
            return this.minimum;
        };
        d(p, "liveDragging"
            /**
             * @language en_US
             * Specifies whether live dragging is enabled for the slider. If true, sets the value
             * and values properties and dispatches the change event continuously as
             * the user moves the thumb.
             *
             * @default true
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 如果为 true，则将在沿着轨道拖动滑块时，而不是在释放滑块按钮时，提交此滑块的值。
             *
             * @default true
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$SliderBase[9 /* liveDragging */];
            }
            ,function (value) {
                this.$SliderBase[9 /* liveDragging */] = !!value;
            }
        );
        d(p, "pendingValue"
            /**
             * @language en_US
             * The value the slider will have when the touch is end.
             * This property is updated when the slider thumb moves, even if <code>liveDragging</code> is false.<p/>
             * If the <code>liveDragging</code> style is false, then the slider's value is only set
             * when the touch is end.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 触摸结束时滑块将具有的值。
             * 无论 liveDragging 是否为 true，在滑块拖动期间始终更新此属性。
             * 而 value 属性在当 liveDragging 为 false 时，只在触摸释放时更新一次。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$SliderBase[7 /* pendingValue */];
            }
            ,function (value) {
                this.setPendingValue(value);
            }
        );
        p.setPendingValue = function (value) {
            value = +value || 0;
            var values = this.$SliderBase;
            if (value === values[7 /* pendingValue */])
                return;
            values[7 /* pendingValue */] = value;
            this.invalidateDisplayList();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setValue = function (value) {
            this.$SliderBase[7 /* pendingValue */] = value;
            _super.prototype.setValue.call(this, value);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.thumb) {
                this.thumb.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onThumbTouchBegin, this);
                this.thumb.addEventListener(egret.Event.RESIZE, this.onTrackOrThumbResize, this);
            }
            else if (instance == this.track) {
                this.track.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTrackTouchBegin, this);
                this.track.addEventListener(egret.Event.RESIZE, this.onTrackOrThumbResize, this);
            }
            else if (instance === this.trackHighlight) {
                this.trackHighlight.touchEnabled = false;
                if (egret.is(this.trackHighlight, "egret.DisplayObjectContainer")) {
                    this.trackHighlight.touchChildren = false;
                }
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.thumb) {
                this.thumb.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onThumbTouchBegin, this);
                this.thumb.removeEventListener(egret.Event.RESIZE, this.onTrackOrThumbResize, this);
            }
            else if (instance == this.track) {
                this.track.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTrackTouchBegin, this);
                this.track.removeEventListener(egret.Event.RESIZE, this.onTrackOrThumbResize, this);
            }
        };
        /**
         * @private
         * 滑块或轨道尺寸改变事件
         */
        p.onTrackOrThumbResize = function (event) {
            this.updateSkinDisplayList();
        };
        /**
         * @language en_US
         * Handle touch-begin events on the scroll thumb. Records the touch begin point in clickOffset.
         *
         * @param The <code>egret.TouchEvent</code> object.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 滑块触摸开始事件，记录触碰开始的坐标偏移量。
         *
         * @param event 事件 <code>egret.TouchEvent</code> 的对象.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onThumbTouchBegin = function (event) {
            var values = this.$SliderBase;
            if (values[5 /* animation */] && values[5 /* animation */].isPlaying)
                this.stopAnimation();
            var stage = this.$stage;
            stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onStageTouchMove, this);
            stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            var clickOffset = this.thumb.globalToLocal(event.stageX, event.stageY, egret.$TempPoint);
            values[0 /* clickOffsetX */] = clickOffset.x;
            values[1 /* clickOffsetY */] = clickOffset.y;
            eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_START);
        };
        /**
         * @private
         * 舞台上触摸移动事件
         */
        p.onStageTouchMove = function (event) {
            var values = this.$SliderBase;
            values[2 /* moveStageX */] = event.$stageX;
            values[3 /* moveStageY */] = event.$stageY;
            var track = this.track;
            if (!track)
                return;
            var p = track.globalToLocal(values[2 /* moveStageX */], values[3 /* moveStageY */], egret.$TempPoint);
            var newValue = this.pointToValue(p.x - values[0 /* clickOffsetX */], p.y - values[1 /* clickOffsetY */]);
            newValue = this.nearestValidValue(newValue, this.snapInterval);
            this.updateWhenTouchMove(newValue);
            event.updateAfterEvent();
        };
        /**
         * @language en_US
         * Capture touch-move events anywhere on or off the stage.
         * @param newValue new value
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 监听舞台的触碰移动事件。
         * @param newValue 新的值
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateWhenTouchMove = function (newValue) {
            if (newValue != this.$SliderBase[7 /* pendingValue */]) {
                if (this.liveDragging) {
                    this.setValue(newValue);
                    this.dispatchEventWith(egret.Event.CHANGE);
                }
                else {
                    this.setPendingValue(newValue);
                }
            }
        };
        /**
         * @language en_US
         * Handle touch-end events anywhere on or off the stage.
         *
         * @param The <code>egret.Event</code> object.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 触摸结束事件
         *
         * @param event 事件 <code>egret.Event</code> 的对象。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onStageTouchEnd = function (event) {
            var stage = event.$currentTarget;
            stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onStageTouchMove, this);
            stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onStageTouchEnd, this);
            eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_END);
            var values = this.$SliderBase;
            if (!this.liveDragging && this.value != values[7 /* pendingValue */]) {
                this.setValue(values[7 /* pendingValue */]);
                this.dispatchEventWith(egret.Event.CHANGE);
            }
        };
        /**
         * @private
         * 当在组件上按下时记录被按下的子显示对象
         */
        p.onTouchBegin = function (event) {
            this.$stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stageTouchEndHandler, this);
            this.$SliderBase[4 /* touchDownTarget */] = (event.$target);
        };
        /**
         * @private
         * 当结束时，若不是在 touchDownTarget 上弹起，而是另外的子显示对象上弹起时，额外抛出一个触摸单击事件。
         */
        p.stageTouchEndHandler = function (event) {
            var target = event.$target;
            var values = this.$SliderBase;
            event.$currentTarget.removeEventListener(egret.TouchEvent.TOUCH_END, this.stageTouchEndHandler, this);
            if (values[4 /* touchDownTarget */] != target && this.contains((target))) {
                egret.TouchEvent.dispatchTouchEvent(this, egret.TouchEvent.TOUCH_TAP, true, true, event.$stageX, event.$stageY, event.touchPointID);
            }
            values[4 /* touchDownTarget */] = null;
        };
        /**
         * @private
         * 动画播放更新数值
         */
        p.$animationUpdateHandler = function (animation) {
            this.setPendingValue(animation.currentValue);
        };
        /**
         * @private
         * 动画播放完毕
         */
        p.animationEndHandler = function (animation) {
            this.setValue(this.$SliderBase[8 /* slideToValue */]);
            this.dispatchEventWith(egret.Event.CHANGE);
            eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_END);
        };
        /**
         * @private
         * 停止播放动画
         */
        p.stopAnimation = function () {
            this.$SliderBase[5 /* animation */].stop();
            this.setValue(this.nearestValidValue(this.pendingValue, this.snapInterval));
            this.dispatchEventWith(egret.Event.CHANGE);
            eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_END);
        };
        /**
         * @language en_US
         * Handle touch-begin events for the slider track. We
         * calculate the value based on the new position and then
         * move the thumb to the correct location as well as
         * commit the value.
         * @param The <code>egret.TouchEvent</code> object.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 轨道的触碰开始事件。我们会在这里根据新的坐标位置计算value，然后移动滑块到当前位置。
         *
         * @param event 事件 <code>egret.TouchEvent</code> 的对象.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onTrackTouchBegin = function (event) {
            var thumbW = this.thumb ? this.thumb.width : 0;
            var thumbH = this.thumb ? this.thumb.height : 0;
            var offsetX = event.$stageX - (thumbW / 2);
            var offsetY = event.$stageY - (thumbH / 2);
            var p = this.track.globalToLocal(offsetX, offsetY, egret.$TempPoint);
            var rangeValues = this.$Range;
            var newValue = this.pointToValue(p.x, p.y);
            newValue = this.nearestValidValue(newValue, rangeValues[7 /* snapInterval */]);
            var values = this.$SliderBase;
            if (newValue != values[7 /* pendingValue */]) {
                if (values[6 /* slideDuration */] != 0) {
                    if (!values[5 /* animation */]) {
                        values[5 /* animation */] = new eui.sys.Animation(this.$animationUpdateHandler, this);
                        values[5 /* animation */].endFunction = this.animationEndHandler;
                    }
                    var animation = values[5 /* animation */];
                    if (animation.isPlaying)
                        this.stopAnimation();
                    values[8 /* slideToValue */] = newValue;
                    animation.duration = values[6 /* slideDuration */] *
                        (Math.abs(values[7 /* pendingValue */] - values[8 /* slideToValue */]) / (rangeValues[0 /* maximum */] - rangeValues[2 /* minimum */]));
                    animation.from = values[7 /* pendingValue */];
                    animation.to = values[8 /* slideToValue */];
                    eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_START);
                    animation.play();
                }
                else {
                    this.setValue(newValue);
                    this.dispatchEventWith(egret.Event.CHANGE);
                }
            }
        };
        return SliderBase;
    })(eui.Range);
    eui.SliderBase = SliderBase;
    egret.registerClass(SliderBase,'eui.SliderBase');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var PopUpSliderBase = (function (_super) {
        __extends(PopUpSliderBase, _super);
        function PopUpSliderBase() {
            _super.call(this);
            this._isDragging = false;
            this.promptChanged = false;
            this._promptValue = NaN;
            this._isPrompt = false;
            this.slideDuration = 0;
            this.addEventListener(eui.TrackBaseEvent.THUMB_PRESS, this.onPress, this);
            this.addEventListener(eui.TrackBaseEvent.THUMB_RELEASE, this.onRelease, this);
            this.dropDownController = new eui.DropDownController();
        }
        var c=PopUpSliderBase,p=c.prototype;
        d(p, "isDragging"
            ,function () {
                return this._isDragging;
            }
            ,function (value) {
                egret.superSetter(eui.PopUpSliderBase, this, "isDragging", value);
            }
        );
        p.onRelease = function (event) {
            this._isDragging = false;
            this.dispatchEvent(new egret.Event(egret.Event.CHANGE));
        };
        p.onPress = function (event) {
            this._isDragging = true;
        };
        d(p, "dropDownController"
            ,function () {
                return this._dropDownController;
            }
            ,function (value) {
                if (this._dropDownController == value)
                    return;
                this._dropDownController = value;
                this._dropDownController.addEventListener(eui.UIEvent.OPEN, this.dropDownController_openHandler, this);
                this._dropDownController.addEventListener(eui.UIEvent.CLOSE, this.dropDownController_closeHandler, this);
                if (this.openButton)
                    this._dropDownController.openButton = this.openButton;
                if (this.dropDown)
                    this._dropDownController.dropDown = this.dropDown;
            }
        );
        d(p, "isDropDownOpen"
            ,function () {
                if (this.dropDownController)
                    return this.dropDownController.isOpen;
                else
                    return false;
            }
        );
        p.openDropDown = function () {
            this.dropDownController.openDropDown();
        };
        p.closeDropDown = function (commit) {
            this.dropDownController.closeDropDown(commit);
        };
        d(p, "labelFunction"
            ,function () {
                return this._labelFunction;
            }
            ,function (value) {
                this._labelFunction = value;
                if (this.textInput)
                    this.textInput.text = this.valueToText(this.value);
            }
        );
        d(p, "promptValue"
            ,function () {
                if (isNaN(this._promptValue))
                    return 0;
                return this._promptValue;
            }
            ,function (value) {
                this.promptChanged = true;
                this._promptValue = value;
                this.invalidateProperties();
            }
        );
        p.getCurrentState = function () {
            return !this.enabled ? "disabled" : this.isDropDownOpen ? "open" : "normal";
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.textInput) {
                this.textInput.text = this.valueToText(this.value);
                this.textInput.addEventListener(egret.FocusEvent.FOCUS_OUT, this.onTextInputFocusOut, this);
            }
            else if (instance == this.openButton) {
                if (this.dropDownController)
                    this.dropDownController.openButton = this.openButton;
            }
            else if (instance == this.dropDown && this.dropDownController) {
                this.dropDownController.dropDown = this.dropDown;
            }
        };
        p.onTextInputFocusOut = function (event) {
            var _self__ = this;
            if (isNaN(this.textInput.text)) {
                this.textInput.text = this.valueToText(this.value);
                return;
            }
            var prevValue = this.value;
            if (!this.textInput.text) {
                this.updatePromptValue();
            }
            else {
                this.setValue(this.nearestValidValue(this.textInput.text, this.snapInterval));
            }
            if (this.value != prevValue)
                _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
        };
        p.dropDownController_openHandler = function (event) {
            var _self__ = this;
            //            _self__.addEventListener(eui.UIEvent.UPDATE_COMPLETE,this.open_updateCompleteHandler,this);
            this.invalidateState();
        };
        p.open_updateCompleteHandler = function (event) {
            var _self__ = this;
            //            _self__.removeEventListener(eui.UIEvent.,this.open_updateCompleteHandler,this);//UPDATE_COMPLETE
            //            this.stage.addEventListener(eui.MouseEvent.MOUSE_WHEEL,this.stage_mouseWheelHandler,this);
            //            _self__.dispatchEvent(new eui.UIEvent(eui.UIEvent.OPEN));
        };
        p.dropDownController_closeHandler = function (event) {
            var _self__ = this;
            //            _self__.addEventListener(eui.UIEvent.UPDATE_COMPLETE,this.close_updateCompleteHandler,this);
            this.invalidateState();
        };
        p.close_updateCompleteHandler = function (event) {
            var _self__ = this;
            //            _self__.removeEventListener(eui.UIEvent.UPDATE_COMPLETE,this.close_updateCompleteHandler,this);
            //            this.stage.removeEventListener(eui.MouseEvent.MOUSE_WHEEL,this.stage_mouseWheelHandler,this,true);
            //            _self__.dispatchEvent(new eui.UIEvent(eui.UIEvent.CLOSE_static_egret_events_UIEvent));
        };
        p.stage_mouseWheelHandler = function (event) {
            event.stopImmediatePropagation();
            //            this.changeValueByStep(event["delta"] > 0);
        };
        p.setValue = function (value) {
            _super.prototype.setValue.call(this, value);
            if (this.textInput)
                this.textInput.text = this.valueToText(value);
            this._isPrompt = false;
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            //            if(this.promptChanged || !this.initialized) {
            //                this.promptChanged = false;
            //                this.textInput.prompt = this.valueToText(this.nearestValidValue(this.promptValue,this.snapInterval));
            //            }
        };
        d(p, "isPrompt"
            ,function () {
                return this._isPrompt;
            }
        );
        //        public set isPrompt(value: boolean) {
        ////            egret.superSetter(egret.ui.components.PopUpSliderBase,this,"isPrompt",value);
        //            
        //        }
        p.updatePromptValue = function (newValue) {
            if (newValue === void 0) { newValue = NaN; }
            if (!isNaN(newValue)) {
                this._promptValue = newValue;
            }
            this.setValue(this.nearestValidValue(this.promptValue, this.snapInterval));
            this.textInput.text = "";
            this._isPrompt = true;
            this.promptChanged = true;
            this.invalidateProperties();
        };
        p.valueToText = function (value) {
            if (this._labelFunction != null)
                return this.labelFunction(value);
            else
                return String(value);
        };
        return PopUpSliderBase;
    })(eui.SliderBase);
    eui.PopUpSliderBase = PopUpSliderBase;
    egret.registerClass(PopUpSliderBase,'eui.PopUpSliderBase');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var HPopUpSlider = (function (_super) {
        __extends(HPopUpSlider, _super);
        function HPopUpSlider() {
            _super.call(this);
            this.thumb = null;
            this.track = null;
            this.trackHighlight = null;
            this.textInput = null;
            this.openButton = null;
            this.dropDown = null;
        }
        var c=HPopUpSlider,p=c.prototype;
        p.pointToValue = function (x, y) {
            if (!this.thumb || !this.track)
                return 0;
            var range = this.maximum - this.minimum;
            this.track.getLayoutBounds(egret.$TempRectangle);
            var trackLayoutWidht = egret.$TempRectangle.width;
            this.thumb.getLayoutBounds(egret.$TempRectangle);
            var thumbLayoutWidth = egret.$TempRectangle.width;
            var thumbRange = trackLayoutWidht - thumbLayoutWidth;
            return this.minimum + ((thumbRange != 0) ? (x / thumbRange) * range : 0);
        };
        /**
          * @private
          *
          * @returns
          */
        p.getThumbRange = function () {
            var bounds = egret.$TempRectangle;
            this.track.getLayoutBounds(bounds);
            var thumbRange = bounds.width;
            this.thumb.getLayoutBounds(bounds);
            return thumbRange - bounds.width;
        };
        p.updateSkinDisplayList = function () {
            if (!this.thumb || !this.track)
                return;
            var values = this.$Range;
            var thumbRange = this.getThumbRange();
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbPosTrackX = (range > 0) ? ((this.pendingValue - values[2 /* minimum */]) / range) * thumbRange : 0;
            var thumbPos = this.track.localToGlobal(thumbPosTrackX, 0, egret.$TempPoint);
            var thumbPosX = thumbPos.x;
            var thumbPosY = thumbPos.y;
            var thumbPosParentX = this.thumb.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x;
            var bounds = egret.$TempRectangle;
            this.thumb.getLayoutBounds(bounds);
            this.thumb.setLayoutBoundsPosition(Math.round(thumbPosParentX), bounds.y);
            if (this.trackHighlight && this.trackHighlight.$parent) {
                var trackHighlightX = this.trackHighlight.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x - thumbPosTrackX;
                this.trackHighlight.x = Math.round(trackHighlightX);
                this.trackHighlight.width = Math.round(thumbPosTrackX);
            }
        };
        return HPopUpSlider;
    })(eui.PopUpSliderBase);
    eui.HPopUpSlider = HPopUpSlider;
    egret.registerClass(HPopUpSlider,'eui.HPopUpSlider');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ScrollBarBase class helps to position
     * the portion of data that is displayed when there is too much data
     * to fit in a display area.
     * The ScrollBarBase class displays a pair of viewport and a thumb.
     * viewport is a instance that implements IViewport.
     *
     * @see eui.IViewport
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * <code>ScrollBarBase</code> 滚动条基类，该类帮助在因数据太多而不能在显示区域完全显示时定位显示的数据部分。
     * ScrollBarBase 类显示视区的一部分和一个指示滑块。
     * 视区是一个IViewport接口实现的实例。
     *
     * @see eui.IViewport
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var ScrollBarBase = (function (_super) {
        __extends(ScrollBarBase, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个ScrollBarBase实例。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ScrollBarBase() {
            _super.call(this);
            /**
             * @private
             */
            this.$viewport = null;
        }
        var c=ScrollBarBase,p=c.prototype;
        d(p, "viewport"
            /**
             * @language en_US
             * The viewport controlled by this scrollbar.
             *
             * If a viewport is specified, then changes to its actual size, content
             * size, and scroll position cause the corresponding ScrollBarBase methods to
             * run:
             * <ul>
             *     <li><code>onViewportResize()</code></li>
             *     <li><code>onPropertyChanged()</code></li>
             * </ul><p/>
             *
             * The VScrollBar and HScrollBar classes override these methods to keep their properties in
             * sync with the viewport.
             *
             * @default null
             * @see eui.VScrollBar
             * @see eui.HScrollBar
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 由该滚动条控制的视区。
             *
             * 如果指定了视区，则对其实际大小、内容大小和滚动位置的更改会导致运行相对应的 ScrollBarBase 方法：
             * <ul>
             *     <li><code>onViewportResize()</code></li>
             *     <li><code>onPropertyChanged()</code></li>
             * </ul><p/>
             *
             * VScrollBar 和 HScrollBar 类需要重写这些方法以保证属性与视区的同步。
             *
             * @default null
             * @see eui.VScrollBar
             * @see eui.HScrollBar
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$viewport;
            }
            ,function (value) {
                if (value == this.$viewport) {
                    return;
                }
                var viewport = this.$viewport;
                if (viewport) {
                    viewport.removeEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.onPropertyChanged, this);
                    viewport.removeEventListener(egret.Event.RESIZE, this.onViewportResize, this);
                }
                this.$viewport = value;
                if (value) {
                    value.addEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.onPropertyChanged, this);
                    value.addEventListener(egret.Event.RESIZE, this.onViewportResize, this);
                }
                this.invalidateDisplayList();
            }
        );
        /**
         * @private
         *
         * @param event
         */
        p.onViewportResize = function (event) {
            this.invalidateDisplayList();
        };
        /**
         * @language en_US
         * Properties of viewport changed.
         * @param event
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 视区属性发生改变。
         * @param event
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onPropertyChanged = function (event) {
        };
        return ScrollBarBase;
    })(eui.SliderBase);
    eui.ScrollBarBase = ScrollBarBase;
    egret.registerClass(ScrollBarBase,'eui.ScrollBarBase');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The HScrollBar (horizontal scrollbar) control lets you control
     * the portion of data that is displayed when there is too much data
     * to fit horizontally in a display area.
     *
     * <p>Although you can use the HScrollBar control as a stand-alone control,
     * you usually combine it as part of another group of components to
     * provide scrolling functionality.</p>
     *
     * @includeExample  extension/eui/components/HScrollBarExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * HScrollBar（水平 ScrollBar）控件可以在因数据太多而不能在显示区域中以水平方向完全显示时控制显示的数据部分。
     * <p>虽然 HScrollBar 控件可以单独使用，但通常将它与其他组件一起使用来提供滚动功能。</p>
     *
     * @includeExample  extension/eui/components/HScrollBarExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var HScrollBar = (function (_super) {
        __extends(HScrollBar, _super);
        function HScrollBar() {
            _super.apply(this, arguments);
            this.trackLayoutBounds = new egret.Rectangle();
        }
        var c=HScrollBar,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.pointToValue = function (x, y) {
            if (!this.thumb || !this.track)
                return 0;
            var values = this.$Range;
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbRange = this.getThumbRange();
            return values[2 /* minimum */] + (thumbRange != 0 ? (x / thumbRange) * range : 0);
        };
        /**
         * @private
         *
         * @returns
         */
        p.getThumbRange = function () {
            var bounds = egret.$TempRectangle;
            this.track.getLayoutBounds(bounds);
            var thumbRange = bounds.width;
            this.thumb.getLayoutBounds(bounds);
            return thumbRange - bounds.width;
        };
        p.setPendingValue = function (value) {
            if (this.$viewport) {
                this.$viewport.scrollH = value;
            }
            _super.prototype.setPendingValue.call(this, value);
        };
        p.setValue = function (value) {
            if (this.$viewport) {
                this.$viewport.scrollH = value;
            }
            _super.prototype.setValue.call(this, value);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateSkinDisplayList = function () {
            var thumb = this.thumb;
            var track = this.track;
            var viewport = this.$viewport;
            if (!thumb || !viewport) {
                return;
            }
            var trackWidth = track.width;
            var trackX = track.x;
            var thumbY = thumb.y;
            var hsp = viewport.scrollH;
            var contentWidth = viewport.contentWidth;
            var viewWidth = viewport.width;
            //计算thumb的应有宽度
            var calculateWidth = viewWidth / contentWidth * trackWidth;
            thumb.setLayoutBoundsSize(calculateWidth, NaN);
            //计算thumb的X坐标
            var calculateX = trackWidth / contentWidth * hsp + trackX;
            if (calculateX + calculateWidth > trackX + trackWidth)
                calculateX = trackX + trackWidth - calculateWidth;
            thumb.setLayoutBoundsPosition(calculateX, thumbY);
            track.getLayoutBounds(this.trackLayoutBounds);
            thumb.visible = calculateWidth < this.trackLayoutBounds.width;
            track.visible = calculateWidth < this.trackLayoutBounds.width;
            if (calculateWidth < this.trackLayoutBounds.width) {
                var newValue = contentWidth * ((calculateX - trackX) / trackWidth);
                this.setValue(newValue);
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onPropertyChanged = function (event) {
            switch (event.property) {
                case "scrollH":
                case "contentWidth":
                    var self = this, vp = self.$viewport;
                    self.minimum = 0;
                    self.maximum = Math.max(vp.contentWidth - vp.width, 0);
                    self.setValue(vp.scrollH);
                    this.invalidateDisplayList();
                    break;
            }
        };
        return HScrollBar;
    })(eui.ScrollBarBase);
    eui.HScrollBar = HScrollBar;
    egret.registerClass(HScrollBar,'eui.HScrollBar');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The HSlider (horizontal slider) control lets users select a value
     * by moving a slider thumb between the end points of the slider track.
     * The current value of the slider is determined by the relative location of the thumb between
     * the end points of the slider, corresponding to the slider's minimum and maximum values.
     *
     * @includeExample  extension/eui/components/HSliderExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 使用 HSlider（水平滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。
     * 滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。
     *
     * @includeExample  extension/eui/components/HSliderExample.ts
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var HSlider = (function (_super) {
        __extends(HSlider, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function HSlider() {
            _super.call(this);
        }
        var c=HSlider,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.pointToValue = function (x, y) {
            if (!this.thumb || !this.track)
                return 0;
            var values = this.$Range;
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbRange = this.getThumbRange();
            return values[2 /* minimum */] + (thumbRange != 0 ? (x / thumbRange) * range : 0);
        };
        /**
         * @private
         *
         * @returns
         */
        p.getThumbRange = function () {
            var bounds = egret.$TempRectangle;
            this.track.getLayoutBounds(bounds);
            var thumbRange = bounds.width;
            this.thumb.getLayoutBounds(bounds);
            return thumbRange - bounds.width;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateSkinDisplayList = function () {
            if (!this.thumb || !this.track)
                return;
            var values = this.$Range;
            var thumbRange = this.getThumbRange();
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbPosTrackX = (range > 0) ? ((this.pendingValue - values[2 /* minimum */]) / range) * thumbRange : 0;
            var thumbPos = this.track.localToGlobal(thumbPosTrackX, 0, egret.$TempPoint);
            var thumbPosX = thumbPos.x;
            var thumbPosY = thumbPos.y;
            var thumbPosParentX = this.thumb.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x;
            var bounds = egret.$TempRectangle;
            this.thumb.getLayoutBounds(bounds);
            this.thumb.setLayoutBoundsPosition(Math.round(thumbPosParentX), bounds.y);
            if (this.trackHighlight && this.trackHighlight.$parent) {
                var trackHighlightX = this.trackHighlight.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).x - thumbPosTrackX;
                this.trackHighlight.x = Math.round(trackHighlightX);
                this.trackHighlight.width = Math.round(thumbPosTrackX);
            }
        };
        return HSlider;
    })(eui.SliderBase);
    eui.HSlider = HSlider;
    egret.registerClass(HSlider,'eui.HSlider');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The VSlider (vertical slider) control lets users select a value
     * by moving a slider thumb between the end points of the slider track.
     * The current value of the slider is determined by the relative location of the thumb between
     * the end points of the slider, corresponding to the slider's minimum and maximum values.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/VSliderExample.ts
     */
    /**
     * @language zh_CN
     * 使用 VSlider（垂直滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。
     * 滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/VSliderExample.ts
     */
    var VSlider = (function (_super) {
        __extends(VSlider, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function VSlider() {
            _super.call(this);
        }
        var c=VSlider,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.pointToValue = function (x, y) {
            if (!this.thumb || !this.track)
                return 0;
            var values = this.$Range;
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbRange = this.getThumbRange();
            return values[2 /* minimum */] + ((thumbRange != 0) ? ((thumbRange - y) / thumbRange) * range : 0);
        };
        /**
         * @private
         *
         * @returns
         */
        p.getThumbRange = function () {
            var bounds = egret.$TempRectangle;
            this.track.getLayoutBounds(bounds);
            var thumbRange = bounds.height;
            this.thumb.getLayoutBounds(bounds);
            return thumbRange - bounds.height;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateSkinDisplayList = function () {
            if (!this.thumb || !this.track)
                return;
            var values = this.$Range;
            var thumbRange = this.getThumbRange();
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbPosTrackY = (range > 0) ? thumbRange - (((this.pendingValue - values[2 /* minimum */]) / range) * thumbRange) : 0;
            var thumbPos = this.track.localToGlobal(0, thumbPosTrackY, egret.$TempPoint);
            var thumbPosX = thumbPos.x;
            var thumbPosY = thumbPos.y;
            var thumbPosParentY = this.thumb.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).y;
            var bounds = egret.$TempRectangle;
            var thumbHeight = bounds.height;
            this.thumb.getLayoutBounds(bounds);
            this.thumb.setLayoutBoundsPosition(bounds.x, Math.round(thumbPosParentY));
            if (this.trackHighlight) {
                var trackHighlightY = this.trackHighlight.$parent.globalToLocal(thumbPosX, thumbPosY, egret.$TempPoint).y;
                this.trackHighlight.y = Math.round(trackHighlightY + thumbHeight);
                this.trackHighlight.height = Math.round(thumbRange - trackHighlightY);
            }
        };
        return VSlider;
    })(eui.SliderBase);
    eui.VSlider = VSlider;
    egret.registerClass(VSlider,'eui.VSlider');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var HueSlider = (function (_super) {
        __extends(HueSlider, _super);
        function HueSlider() {
            _super.call(this);
            this.isMouseDown = false;
        }
        var c=HueSlider,p=c.prototype;
        p.onTrackTouchBegin = function (event) {
            var _this = this;
            _super.prototype.onTrackTouchBegin.call(this, event);
            this.isMouseDown = true;
            this.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.system_mouseUpSomewhereHandler, this);
            setTimeout(function () { return _this.startThumbDrag(event); }, 50);
        };
        p.startThumbDrag = function (event) {
            if (this.isMouseDown) {
                this.onTrackTouchBegin(event);
            }
        };
        p.system_mouseUpSomewhereHandler = function (event) {
            this.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.system_mouseUpSomewhereHandler, this);
            this.isMouseDown = false;
        };
        return HueSlider;
    })(eui.VSlider);
    eui.HueSlider = HueSlider;
    egret.registerClass(HueSlider,'eui.HueSlider');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ListBase class is the base class for list component.
     * It can display items of list as vertical or horizontal such as SELECT of HTML.
     * @event egret.Event.CHANGE Dispatched after the selection has changed.
     * This event is dispatched when the user interacts with the control.
     * @event egret.Event.CHANGING Dispatched when the selection is going to change.
     * Calling the <code>preventDefault()</code> method
     * on the event prevents the selection from changing.<p/>
     * This event is dispatched when the user interacts with the control.
     *
     * @event eui.ItemTapEvent.ITEM_TAP dispatched when the user tap an item in the control.
     * @event egret.TouchEvent.TOUCH_CANCEL canceled the touch
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * ListBase 是列表控件基类。可显示垂直或水平的项目列表。其功能与 HTML 中的 SELECT 表单元素的功能相似。
     * @event egret.Event.CHANGE 选中的索引已经发生改变,注意：此事件仅在索引改变是由用户触摸操作引起时才抛出。
     * @event egret.Event.CHANGING 选中的索引即将发生改变，可以通过调用事件对象的 preventDefault() 方法来阻止改变。<p/>
     * 注意：此事件仅在索引改变是由用户触摸操作引起时才抛出。
     *
     * @event eui.ItemTapEvent.ITEM_TAP 项呈示器单击事件。
     * @event egret.TouchEvent.TOUCH_CANCEL 取消触摸事件
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var ListBase = (function (_super) {
        __extends(ListBase, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ListBase() {
            _super.call(this);
            this.$ListBase = {
                0: false,
                1: false,
                2: -2,
                3: -1,
                4: false,
                5: undefined,
                6: false,
                7: null,
                8: false //touchCancle
            };
        }
        var c=ListBase,p=c.prototype;
        d(p, "requireSelection"
            /**
             * @language en_US
             * If <code>true</code>, a data item must always be selected in the control.
             * If the value is <code>true</code>, the <code>selectedIndex</code> property
             * is always set to a value between 0 and (<code>dataProvider.length</code> - 1).
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 如果为 true，则控件中必须含有选中的数据项目。
             * 如果该值为 true，则始终将 selectedIndex 属性设置为 0 和 (dataProvider.length - 1) 之间的一个值。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$ListBase[0 /* requireSelection */];
            }
            ,function (value) {
                value = !!value;
                var values = this.$ListBase;
                if (value === values[0 /* requireSelection */]) {
                    return;
                }
                values[0 /* requireSelection */] = value;
                if (value) {
                    values[1 /* requireSelectionChanged */] = true;
                    this.invalidateProperties();
                }
            }
        );
        d(p, "selectedIndex"
            /**
             * @language en_US
             * he 0-based index of the selected item, or -1 if no item is selected.
             * Setting the <code>selectedIndex</code> property deselects the currently selected
             * item and selects the data item at the specified index.<p/>
             *
             * The value is always between -1 and (<code>dataProvider.length</code> - 1).
             * If items at a lower index than <code>selectedIndex</code> are
             * removed from the component, the selected index is adjusted downward
             * accordingly. <p/>
             *
             * If the selected item is removed, the selected index is set to:<p/>
             *
             * <ul>
             *   <li>-1 if <code>requireSelection == false</code> or there are no remaining items.</li>
             *   <li>0 if <code>requireSelection == true</code> and there is at least one item.</li>
             * </ul><p/>
             *
             * When the user changes the <code>selectedIndex</code> property by interacting with the control,
             * the control dispatches the <code>change</code> and <code>changing</code> events.
             * When you change the value of the <code>selectedIndex</code> property programmatically,
             * it does not dispatches the <code>change</code> and <code>changing</code> events.</p>
             *
             * @default -1
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 选中项目的基于 0 的索引。
             * 或者如果未选中项目，则为-1。设置 selectedIndex 属性会取消选择当前选定的项目并选择指定索引位置的数据项目。<p/>
             *
             * 这个值会之中在-1到<code>(dataProvider.length - 1)</code>之间。如果从该组件中删除一个低于
             * <code>selectedIndex</code>的值，则<code>selectedIndex</code>也会相应的调节选定的索引。<p/>
             *
             * 如果删除的项为当前选中项，则该值会变为：<p/>
             *
             * <ul>
             *    <li>-1: 如果 <code>requireSelection == false</code> 或者已经没有剩余项目。</li>
             *    <li> 0: 如果 <code>requireSelection == true</code> 并且当前至少还有一个剩余项目。</li>
             * </ul><p/>
             * 当用户通过与控件交互来更改 selectedIndex 属性时，此控件将分派 change 和 changing 事件。
             * 当以编程方式更改 selectedIndex 属性的值时，此控件不分派 change 和 changing 事件。
             *
             * @default -1
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$getSelectedIndex();
            }
            ,function (value) {
                value = +value | 0;
                this.setSelectedIndex(value, false);
            }
        );
        /**
         * @private
         *
         * @returns
         */
        p.$getSelectedIndex = function () {
            var values = this.$ListBase;
            if (values[2 /* proposedSelectedIndex */] != ListBase.NO_PROPOSED_SELECTION)
                return values[2 /* proposedSelectedIndex */];
            return values[3 /* selectedIndex */];
        };
        /**
         * @language en_US
         * Used internally to specify whether the selectedIndex changed programmatically or due to
         * user interaction.
         * @param value the new index need to select.
         * @param dispatchChangeEvent if true, the component will dispatch a "change" event if the
         * value has changed.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 由程序或者用户设置选中项。
         * @param value 索引值。
         * @param dispatchChangeEvent 当索引值发生改变，且该参数为true的时候，组件派发出一个“change”事件。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setSelectedIndex = function (value, dispatchChangeEvent) {
            if (value == this.selectedIndex) {
                return;
            }
            var values = this.$ListBase;
            if (dispatchChangeEvent)
                values[4 /* dispatchChangeAfterSelection */] =
                    (values[4 /* dispatchChangeAfterSelection */] || dispatchChangeEvent);
            values[2 /* proposedSelectedIndex */] = value;
            this.invalidateProperties();
        };
        d(p, "selectedItem"
            /**
             * @language en_US
             * The item that is currently selected.
             * Setting this property deselects the currently selected
             * item and selects the newly specified item.<p/>
             *
             * Setting <code>selectedItem</code> to an item that is not
             * in this component results in no selection,
             * and <code>selectedItem</code> being set to <code>undefined</code>.<p/>
             *
             * If the selected item is removed, the selected item is set to:<p/>
             * <ul>
             *   <li><code>undefined</code> if <code>requireSelection == false</code>
             *     or there are no remaining items.</li>
             *   <li>The first item if <code>requireSelection</code> = <code>true</code>
             *     and there is at least one item.</li>
             * </ul><p/>
             *
             * When the user changes the <code>selectedItem</code> property by interacting with the control,
             * the control dispatches the <code>change</code> and <code>changing</code> events.
             * When you change the value of the <code>selectedIndex</code> property programmatically,
             * it does not dispatches the <code>change</code> and <code>changing</code> events.</p>
             *
             * @default undefined
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 当前已选中的项目。设置此属性会取消选中当前选定的项目并选择新指定的项目。<p/>
             *
             * 如果设置的<code>selectedItem</code>不在当前列表里那么<code>selectedItem</code>将被设置
             * 为<code>undefined</code>。<p/>
             *
             * 如果选择项目被移除，那选择项会被设置为：<p/>
             * <ul>
             *   <li><code>undefined</code>: 如果 <code>requireSelection == false</code>
             *     或者已经没有剩余项。</li>
             *   <li>第一项: 当 <code>requireSelection == true</code>
             *     并且列表中还至少存有一项.</li>
             * </ul><p/>
             *
             * 当用户通过与控件交互来更改 selectedItem 属性时，此控件将分派 change 和 changing 事件。
             * 当以编程方式更改 selectedItem 属性的值时，此控件不分派 change 和 changing 事件。<p/>
             *
             * @default undefined
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                var values = this.$ListBase;
                if (values[5 /* pendingSelectedItem */] !== undefined)
                    return values[5 /* pendingSelectedItem */];
                var selectedIndex = this.$getSelectedIndex();
                if (selectedIndex == ListBase.NO_SELECTION || this.$dataProvider == null)
                    return undefined;
                return this.$dataProvider.length > selectedIndex ? this.$dataProvider.getItemAt(selectedIndex) : undefined;
            }
            ,function (value) {
                this.setSelectedItem(value, false);
            }
        );
        /**
         * @language en_US
         * Used internally to specify whether the selectedItem changed programmatically or due to
         * user interaction.
         * @param value the new item need to select.
         * @param dispatchChangeEvent if true, the component will dispatch a "change" event if the
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 由程序或用户设置选中项数据源。
         * @param value 要选中的项。
         * @param dispatchChangeEvent 当索引值发生改变，且该参数为true的时候，组件派发出一个“change”事件。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setSelectedItem = function (value, dispatchChangeEvent) {
            if (dispatchChangeEvent === void 0) { dispatchChangeEvent = false; }
            if (this.selectedItem === value)
                return;
            var values = this.$ListBase;
            if (dispatchChangeEvent)
                values[4 /* dispatchChangeAfterSelection */] =
                    (values[4 /* dispatchChangeAfterSelection */] || dispatchChangeEvent);
            values[5 /* pendingSelectedItem */] = value;
            this.invalidateProperties();
        };
        /**
         * @language en_US
         * Processes the properties set on the component.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 处理对组件设置的属性
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            var dataProviderChanged = this.$dataProviderChanged;
            _super.prototype.commitProperties.call(this);
            var values = this.$ListBase;
            var selectedIndex = this.$getSelectedIndex();
            var dataProvider = this.$dataProvider;
            if (dataProviderChanged) {
                if (selectedIndex >= 0 && dataProvider && selectedIndex < dataProvider.length)
                    this.itemSelected(selectedIndex, true);
                else if (this.requireSelection)
                    values[2 /* proposedSelectedIndex */] = 0;
                else
                    this.setSelectedIndex(-1, false);
            }
            if (values[1 /* requireSelectionChanged */]) {
                values[1 /* requireSelectionChanged */] = false;
                if (values[0 /* requireSelection */] &&
                    selectedIndex == ListBase.NO_SELECTION &&
                    dataProvider &&
                    dataProvider.length > 0) {
                    values[2 /* proposedSelectedIndex */] = 0;
                }
            }
            if (values[5 /* pendingSelectedItem */] !== undefined) {
                if (dataProvider)
                    values[2 /* proposedSelectedIndex */] =
                        dataProvider.getItemIndex(values[5 /* pendingSelectedItem */]);
                else
                    values[2 /* proposedSelectedIndex */] = ListBase.NO_SELECTION;
                values[5 /* pendingSelectedItem */] = undefined;
            }
            var changedSelection = false;
            if (values[2 /* proposedSelectedIndex */] != ListBase.NO_PROPOSED_SELECTION)
                changedSelection = this.commitSelection();
            if (values[6 /* selectedIndexAdjusted */]) {
                values[6 /* selectedIndexAdjusted */] = false;
                if (!changedSelection) {
                    eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedIndex");
                }
            }
        };
        /**
         * @language en_US
         * Updates an item renderer for use or reuse.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 更新项呈示器，以备使用或重用
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateRenderer = function (renderer, itemIndex, data) {
            this.itemSelected(itemIndex, this.$isItemIndexSelected(itemIndex));
            return _super.prototype.updateRenderer.call(this, renderer, itemIndex, data);
        };
        /**
         * @language en_US
         * Called when an item is selected or deselected.
         * Subclasses must override this method to display the selection.
         * @param index The item index that was selected.
         * @param selected <code>true</code> if the item is selected,
         * and <code>false</code> if it is deselected.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 选中或取消选中项目时调用。子类必须覆盖此方法才可设置选中项。
         * @param index 已选中的项目索引。
         * @param selected <code>true</code>为选中，<code>false</code>取消选中
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.itemSelected = function (index, selected) {
            var renderer = this.$indexToRenderer[index];
            if (renderer) {
                renderer.selected = selected;
            }
        };
        /**
         * @private
         * 返回指定索引是否等于当前选中索引
         */
        p.$isItemIndexSelected = function (index) {
            return index == this.selectedIndex;
        };
        /**
         * @language en_US
         * The selection validation and commitment workhorse method.
         * Called to commit the pending selected index. This method dispatches
         * the "changing" event, and if the event is not cancelled,
         * commits the selection change and then dispatches the "change"
         * event.
         * @param dispatchChangedEvents if dispatch a "changed" event.
         * @return true if the selection was committed, or false if the selection
         * was cancelled.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 提交选中项属性。该方法会派发一个“changing”事件，如果该事件没有被阻止，
         * 该方法将会提交选择项病根据参数派发“change”事件。
         * @param dispatchChangedEvents 是否派发一个“changed”事件。
         * @return true 表示提交成功, false表示被取消
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitSelection = function (dispatchChangedEvents) {
            if (dispatchChangedEvents === void 0) { dispatchChangedEvents = true; }
            var dataProvider = this.$dataProvider;
            var values = this.$ListBase;
            var maxIndex = dataProvider ? dataProvider.length - 1 : -1;
            var oldSelectedIndex = values[3 /* selectedIndex */];
            var tmpProposedIndex = values[2 /* proposedSelectedIndex */];
            if (tmpProposedIndex < ListBase.NO_SELECTION)
                tmpProposedIndex = ListBase.NO_SELECTION;
            if (tmpProposedIndex > maxIndex)
                tmpProposedIndex = maxIndex;
            if (values[0 /* requireSelection */] && tmpProposedIndex == ListBase.NO_SELECTION &&
                dataProvider && dataProvider.length > 0) {
                values[2 /* proposedSelectedIndex */] = ListBase.NO_PROPOSED_SELECTION;
                values[4 /* dispatchChangeAfterSelection */] = false;
                return false;
            }
            if (values[4 /* dispatchChangeAfterSelection */]) {
                var result = this.dispatchEventWith(egret.Event.CHANGING, false, true);
                if (!result) {
                    this.itemSelected(values[2 /* proposedSelectedIndex */], false);
                    values[2 /* proposedSelectedIndex */] = ListBase.NO_PROPOSED_SELECTION;
                    values[4 /* dispatchChangeAfterSelection */] = false;
                    return false;
                }
            }
            values[3 /* selectedIndex */] = tmpProposedIndex;
            values[2 /* proposedSelectedIndex */] = ListBase.NO_PROPOSED_SELECTION;
            if (oldSelectedIndex != ListBase.NO_SELECTION)
                this.itemSelected(oldSelectedIndex, false);
            if (values[3 /* selectedIndex */] != ListBase.NO_SELECTION)
                this.itemSelected(values[3 /* selectedIndex */], true);
            //子类若需要自身抛出Change事件，而不是在此处抛出，可以设置dispatchChangedEvents为false
            if (dispatchChangedEvents) {
                if (values[4 /* dispatchChangeAfterSelection */]) {
                    this.dispatchEventWith(egret.Event.CHANGE);
                    values[4 /* dispatchChangeAfterSelection */] = false;
                }
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedIndex");
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedItem");
            }
            return true;
        };
        /**
         * @language en_US
         * Adjusts the selected index to account for items being added to or
         * removed from this component.
         * It does not dispatch a <code>change</code> event because the change did not
         * occur as a direct result of user-interaction.  Moreover,
         * it does not dispatch a <code>changing</code> event
         * or allow the cancellation of the selection.
         * It also does not call the <code>itemSelected()</code> method,
         * since the same item is selected;
         * @param newIndex The new index.
         * @param add <code>true</code> if an item was added to the component,
         *  and <code>false</code> if an item was removed.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 仅调整选中索引值而不更新选中项,即在提交属性阶段itemSelected方法不会被调用，也不会触发changing和change事件。
         * @param newIndex 新索引。
         * @param add 如果已将项目添加到组件，则为<code>true</code>；如果已删除项目，则为<code>false</code>。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.adjustSelection = function (newIndex, add) {
            if (add === void 0) { add = false; }
            var values = this.$ListBase;
            if (values[2 /* proposedSelectedIndex */] != ListBase.NO_PROPOSED_SELECTION)
                values[2 /* proposedSelectedIndex */] = newIndex;
            else
                values[3 /* selectedIndex */] = newIndex;
            values[6 /* selectedIndexAdjusted */] = true;
            this.invalidateProperties();
        };
        /**
         * @language en_US
         * Called when an item has been added to this component. Selection
         * and caret related properties are adjusted accordingly.
         * @param item The item being added.
         * @param index The index of the item being added.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 数据项添加
         * @param item 被添加的项。
         * @param index 被添加的项的索引。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.itemAdded = function (item, index) {
            _super.prototype.itemAdded.call(this, item, index);
            var selectedIndex = this.$getSelectedIndex();
            if (selectedIndex == ListBase.NO_SELECTION) {
                if (this.$ListBase[0 /* requireSelection */])
                    this.adjustSelection(index, true);
            }
            else if (index <= selectedIndex) {
                this.adjustSelection(selectedIndex + 1, true);
            }
        };
        /**
         * @language en_US
         * Called when an item has been removed from this component.
         * Selection and caret related properties are adjusted
         * accordingly.
         * @param item The item being removed.
         * @param index The index of the item being removed.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 数据项移除
         * @param item 被移除的项。
         * @param index 被移除的项的索引。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.itemRemoved = function (item, index) {
            _super.prototype.itemRemoved.call(this, item, index);
            if (this.selectedIndex == ListBase.NO_SELECTION)
                return;
            var selectedIndex = this.$getSelectedIndex();
            if (index == selectedIndex) {
                if (this.requireSelection && this.$dataProvider && this.$dataProvider.length > 0) {
                    if (index == 0) {
                        this.$ListBase[2 /* proposedSelectedIndex */] = 0;
                        this.invalidateProperties();
                    }
                    else
                        this.setSelectedIndex(0, false);
                }
                else
                    this.adjustSelection(-1, false);
            }
            else if (index < selectedIndex) {
                this.adjustSelection(selectedIndex - 1, false);
            }
        };
        /**
         * @language en_US
         * Event Listener of source data changed.
         * @param The <code>egret.gui.CollectionEvent</code> object.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 数据源改变事件处理。
         * @param event 事件 <code>egret.gui.CollectionEvent</code> 的对象。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onCollectionChange = function (event) {
            _super.prototype.onCollectionChange.call(this, event);
            if (event.kind == eui.CollectionEventKind.RESET) {
                if (this.$dataProvider.length == 0) {
                    this.setSelectedIndex(ListBase.NO_SELECTION, false);
                }
            }
            else if (event.kind == eui.CollectionEventKind.REFRESH) {
                this.dataProviderRefreshed();
            }
        };
        /**
         * @language en_US
         * Default response to dataProvider refresh events: clear the selection and caret.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 数据源刷新
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.dataProviderRefreshed = function () {
            this.setSelectedIndex(ListBase.NO_SELECTION, false);
        };
        /**
         * @language en_US
         * Called when an item has been added to this component.
         * @param renderer the renderer being added.
         * @param index the index of renderer
         * @param item the data of renderer
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 项呈示器被添加
         * @param renderer 添加的项呈示器
         * @param index 项呈示器的索引
         * @param item 项呈示器对应的数据
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.rendererAdded = function (renderer, index, item) {
            renderer.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onRendererTouchBegin, this);
            renderer.addEventListener(egret.MouseEvent.MOUSE_UP, this.onRendererTouchEnd, this);
            renderer.addEventListener(egret.TouchEvent.TOUCH_CANCEL, this.onRendererTouchCancle, this);
        };
        /**
         * @language en_US
         * Called when an item has been removed to this component.
         * @param renderer the renderer being removed.
         * @param index the index of renderer.
         * @param item the data of renderer.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 项呈示器被移除
         * @param renderer 移除的项呈示器
         * @param index 项呈示器的索引
         * @param item 项呈示器对应的数据
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.rendererRemoved = function (renderer, index, item) {
            renderer.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.onRendererTouchBegin, this);
            renderer.removeEventListener(egret.MouseEvent.MOUSE_UP, this.onRendererTouchEnd, this);
            renderer.removeEventListener(egret.TouchEvent.TOUCH_CANCEL, this.onRendererTouchCancle, this);
        };
        /**
         * @language en_US
         * Handles <code>egret.TouchEvent.TOUCH_BEGIN</code> events from any of the
         * item renderers. This method handles <code>egret.TouchEvent.TOUCH_END</code>.
         * @param event The <code>egret.TouchEvent</code> object.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 侦听项呈示器<code>egret.TouchEvent.TOUCH_BEGIN</code>事件的方法。同时会添加对舞台<code>egret.TouchEvent.TOUCH_END</code>
         * 事件的侦听。
         * @param event 事件<code>egret.TouchEvent</code>的对象。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onRendererTouchBegin = function (event) {
            var values = this.$ListBase;
            if (event.$isDefaultPrevented)
                return;
            values[8 /* touchCancle */] = false;
            values[7 /* touchDownItemRenderer */] = (event.$currentTarget);
            this.$stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.stage_touchEndHandler, this);
        };
        /**
         * @language en_US
         * Handles <code>egret.TouchEvent.TOUCH_CANCLE</code> events from any of the
         * item renderers. This method will cancle the handles <code>egret.TouchEvent.TOUCH_END</code> and <code>egret.TouchEvent.TOUCH_TAP</code>.
         * @param event The <code>egret.TouchEvent</code> object.
         * @version Egret 3.0.1
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 侦听项呈示器<code>egret.TouchEvent.TOUCH_CANCLE</code>事件的方法。触发时会取消对舞台<code>egret.TouchEvent.TOUCH_END</code>
         * 和<code>egret.TouchEvent.TOUCH_TAP</code>事件的侦听。
         * @param event 事件<code>egret.TouchEvent</code>的对象。
         * @version Egret 3.0.1
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onRendererTouchCancle = function (event) {
            var values = this.$ListBase;
            values[7 /* touchDownItemRenderer */] = null;
            values[8 /* touchCancle */] = true;
            if (this.$stage) {
                this.$stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_touchEndHandler, this);
            }
        };
        /**
         * @language en_US
         * Handles <code>egret.TouchEvent.TOUCH_END</code> events and dispatch <code>ItemTapEvent.ITEM_TAP</code> event.
         * @param event The <code>egret.TouchEvent</code> object.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 触摸在项呈示器上结束，抛出<code>ItemTapEvent.ITEM_TAP</code>事件。
         * @param event 事件<code>egret.TouchEvent</code>的对象。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onRendererTouchEnd = function (event) {
            var values = this.$ListBase;
            var itemRenderer = (event.$currentTarget);
            var touchDownItemRenderer = values[7 /* touchDownItemRenderer */];
            if (itemRenderer != touchDownItemRenderer)
                return;
            if (!values[8 /* touchCancle */]) {
                this.setSelectedIndex(itemRenderer.itemIndex, true);
                eui.ItemTapEvent.dispatchItemTapEvent(this, eui.ItemTapEvent.ITEM_TAP, itemRenderer);
            }
            values[8 /* touchCancle */] = false;
        };
        /**
         * @private
         * 触摸在舞台上结束
         */
        p.stage_touchEndHandler = function (event) {
            var stage = event.$currentTarget;
            stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.stage_touchEndHandler, this);
            this.$ListBase[7 /* touchDownItemRenderer */] = null;
        };
        /**
         * @language en_US
         * Static constant representing the value "no selection".
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 未选中任何项时的索引值
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ListBase.NO_SELECTION = -1;
        /**
         * @language en_US
         * Static constant representing no proposed selection.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 未设置缓存选中项的值
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ListBase.NO_PROPOSED_SELECTION = -2;
        return ListBase;
    })(eui.DataGroup);
    eui.ListBase = ListBase;
    egret.registerClass(ListBase,'eui.ListBase');
    eui.registerBindable(ListBase.prototype, "selectedIndex");
    eui.registerBindable(ListBase.prototype, "selectedItem");
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The TabBar class displays a set of identical tabs.
     * One tab can be selected at a time, and the first tab is selected by default.
     * <p>The set of tabs is defined by the <code>dataProvider</code> property.
     * The appearance of each tab is defined by the <code>ItemRenderer</code> class.</p>
     * <p>You can use the TabBar control to set the active child of a ViewStack container,
     * as the following example shows:</p>
     * <pre>
     *       <s:TabBar dataProvider="{viewStack}"/>
     *       <s:ViewStack id="viewStack">
     *          <s:Group name="tab1"/>
     *          <s:Group name="tab2"/>
     *          <s:Group name="tab3"/>
     *       </s:ViewStack>
     * </pre>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/TabBarExample.ts
     */
    /**
     * @language zh_CN
     * TabBar 类显示一组相同的选项卡。一次可以选择一个选项卡，且默认情况下选择第一个选项卡。
     * <p>该组选项卡由 <code>dataProvider</code> 属性定义。
     * 每个选项卡的外观由 <code>ItemRenderer</code> 定义。</p>
     * <p>可以使用 TabBar 控件设置 ViewStack 容器的活动子代，如下例所示：</p>
     * <pre>
     *       <s:TabBar dataProvider="{viewStack}"/>
     *       <s:ViewStack id="viewStack">
     *          <s:Group name="tab1"/>
     *          <s:Group name="tab2"/>
     *          <s:Group name="tab3"/>
     *       </s:ViewStack>
     * </pre>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/TabBarExample.ts
     */
    var TabBar = (function (_super) {
        __extends(TabBar, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function TabBar() {
            _super.call(this);
            /**
             * @private
             */
            this.indexBeingUpdated = false;
            this.requireSelection = true;
            this.useVirtualLayout = false;
        }
        var c=TabBar,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            if (!this.$layout) {
                var layout = new eui.HorizontalLayout();
                layout.gap = 0;
                layout.horizontalAlign = eui.JustifyAlign.JUSTIFY;
                layout.verticalAlign = eui.JustifyAlign.CONTENT_JUSTIFY;
                this.$setLayout(layout);
            }
            _super.prototype.createChildren.call(this);
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setDataProvider = function (value) {
            var dp = this.$dataProvider;
            if (dp && dp instanceof eui.ViewStack) {
                dp.removeEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.onViewStackIndexChange, this);
                this.removeEventListener(egret.Event.CHANGE, this.onIndexChanged, this);
            }
            if (value && value instanceof eui.ViewStack) {
                value.addEventListener(eui.PropertyEvent.PROPERTY_CHANGE, this.onViewStackIndexChange, this);
                this.addEventListener(egret.Event.CHANGE, this.onIndexChanged, this);
            }
            return _super.prototype.$setDataProvider.call(this, value);
        };
        /**
         * @private
         * 触摸点击的选中项改变
         */
        p.onIndexChanged = function (event) {
            this.indexBeingUpdated = true;
            (this.$dataProvider).selectedIndex = this.selectedIndex;
            this.indexBeingUpdated = false;
        };
        /**
         * @private
         * ViewStack选中项发生改变
         */
        p.onViewStackIndexChange = function (event) {
            if (event.property == "selectedIndex" && !this.indexBeingUpdated) {
                this.setSelectedIndex((this.$dataProvider).selectedIndex, false);
            }
        };
        return TabBar;
    })(eui.ListBase);
    eui.TabBar = TabBar;
    egret.registerClass(TabBar,'eui.TabBar');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * featherJ
     * @author 图标选项卡组件
     */
    var IconTabBar = (function (_super) {
        __extends(IconTabBar, _super);
        function IconTabBar() {
            _super.call(this);
        }
        var c=IconTabBar,p=c.prototype;
        p.rendererAdded = function (renderer, index, item) {
            _super.prototype.rendererAdded.call(this, renderer, index, item);
            renderer.addEventListener(egret.MouseEvent.CLICK, this.item_mouseDownHandler, this);
        };
        p.updateRenderer = function (renderer, itemIndex, data) {
            return _super.prototype.updateRenderer.call(this, renderer, itemIndex, data);
        };
        p.rendererRemoved = function (renderer, index, item) {
            _super.prototype.rendererRemoved.call(this, renderer, index, item);
            renderer.removeEventListener(egret.MouseEvent.CLICK, this.item_mouseDownHandler, this);
        };
        p.item_mouseDownHandler = function (event) {
            var newIndex;
            if (egret.is(event.currentTarget, "eui.IItemRenderer"))
                newIndex = event.currentTarget.itemIndex;
            else
                newIndex = this.getChildIndex(event.currentTarget);
            var oldSelectedIndex = this.selectedIndex;
            if (newIndex == this.selectedIndex) {
                if (!this.requireSelection)
                    this.setSelectedIndex(-1, true);
            }
            else
                this.setSelectedIndex(newIndex, true);
        };
        return IconTabBar;
    })(eui.TabBar);
    eui.IconTabBar = IconTabBar;
    egret.registerClass(IconTabBar,'eui.IconTabBar');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var IconTabBarButton = (function (_super) {
        __extends(IconTabBarButton, _super);
        function IconTabBarButton() {
            _super.call(this);
        }
        var c=IconTabBarButton,p=c.prototype;
        p.dataChanged = function () {
            _super.prototype.dataChanged.call(this);
            if (this.iconDisplay != null && this.data.hasOwnProperty("icon"))
                this.iconDisplay.source = this.data["icon"];
            if (this.data.hasOwnProperty("toolTip")) {
            }
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (this.data && instance == this.iconDisplay) {
                this.iconDisplay.source = this.data["icon"];
            }
        };
        return IconTabBarButton;
    })(eui.ItemRenderer);
    eui.IconTabBarButton = IconTabBarButton;
    egret.registerClass(IconTabBarButton,'eui.IconTabBarButton');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var loaderPool = [];
    var callBackMap = {};
    var loaderMap = {};
    /**
     * @language en_US
     * Default instance of interface <code>IAssetAdapter</code>.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/supportClasses/DefaultAssetAdapterExample.ts
     */
    /**
     * @language zh_CN
     * 默认的IAssetAdapter接口实现。
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample extension/eui/components/supportClasses/DefaultAssetAdapterExample.ts
     */
    var DefaultAssetAdapter = (function () {
        function DefaultAssetAdapter() {
        }
        var c=DefaultAssetAdapter,p=c.prototype;
        /**
         * @language en_US
         * resolve asset.
         * @param source the identifier of new asset need to be resolved
         * @param callBack callback function when resolving complete
         * example：callBack(content:any,source:string):void;
         * @param thisObject <code>this</code> object of callback method
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 解析素材
         * @param source 待解析的新素材标识符
         * @param callBack 解析完成回调函数，示例：callBack(content:any,source:string):void;
         * @param thisObject callBack的 this 引用
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getAsset = function (source, callBack, thisObject) {
            var list = callBackMap[source];
            if (list) {
                list.push([callBack, thisObject]);
                return;
            }
            var loader = loaderPool.pop();
            if (!loader) {
                loader = new egret.ImageLoader();
            }
            callBackMap[source] = [[callBack, thisObject]];
            loaderMap[loader.$hashCode] = source;
            loader.addEventListener(egret.Event.COMPLETE, this.onLoadFinish, this);
            loader.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onLoadFinish, this);
            loader.load(source);
        };
        /**
         * @private
         *
         * @param event
         */
        p.onLoadFinish = function (event) {
            var loader = event.currentTarget;
            loader.removeEventListener(egret.Event.COMPLETE, this.onLoadFinish, this);
            loader.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onLoadFinish, this);
            var data;
            if (event.$type == egret.Event.COMPLETE) {
                data = new egret.Texture();
                data._setBitmapData(loader.data);
                loader.data = null;
            }
            loaderPool.push(loader);
            var source = loaderMap[loader.$hashCode];
            delete loaderMap[loader.$hashCode];
            var list = callBackMap[source];
            delete callBackMap[source];
            var length = list.length;
            for (var i = 0; i < length; i++) {
                var arr = list[i];
                arr[0].call(arr[1], data, source);
            }
        };
        return DefaultAssetAdapter;
    })();
    eui.DefaultAssetAdapter = DefaultAssetAdapter;
    egret.registerClass(DefaultAssetAdapter,'eui.DefaultAssetAdapter',["eui.IAssetAdapter"]);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="supportClasses/DefaultAssetAdapter.ts" />
var eui;
(function (eui) {
    /**
     * @private
     * 默认的皮肤适配器
     */
    var assetAdapter = new eui.DefaultAssetAdapter();
    /**
     * @language en_US
     * The Image control lets you show JPEG, PNG, and GIF files
     * at runtime. Image inherit Bitmap，so you can set the <code>bitmapData</code> property
     * to show the data. you can also set the <code>source</code> property, Image will auto load
     * and show the url image or the bitmapData.
     *
     * @event egret.Event.COMPLETE Dispatched when the image loaded complete.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ImageExample.ts
     */
    /**
     * @language zh_CN
     * Image 控件允许您在运行时显示 JPEG、PNG 等图片文件文件。Image 继承至 Bitmap，因此您可以直接对其 bitmapData 属性，
     * 赋值从外部加载得到的位图数据以显示对应图片。同时，Image 还提供了更加方便的 source 属性，source 属性可以接受一个网络图片url作为值，
     * 赋值为url后，它内部会自动去加载并显示图片。并且您同样也可以直接把 BitmapData 对象赋值给 source 属性以显示图片。
     *
     * @event egret.Event.COMPLETE 当图片加载完成后调度
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ImageExample.ts
     */
    var Image = (function (_super) {
        __extends(Image, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @param source The source used for the bitmap fill. the value can be
         * a string or an instance of <code>egret.Texture</code>
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @param source 用于位图填充的源。可以是一个字符串或者 <code>egret.Texture</code> 对象
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Image(source) {
            _super.call(this);
            this._focusEnabled = false;
            //endif*/
            /**
             * @private
             */
            this.sourceChanged = false;
            /**
             * @private
             */
            this._source = null;
            this.initializeUIValues();
            if (source) {
                this.source = source;
            }
        }
        var c=Image,p=c.prototype;
        d(p, "scale9Grid"
            /**
             * @language en_US
             * Represent a Rectangle Area that the 9 scale area of Image.
             * Notice: This property is valid only when <code>fillMode</code>
             * is <code>BitmapFillMode.SCALE</code>.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 矩形区域，它定义素材对象的九个缩放区域。
             * 注意:此属性仅在<code>fillMode</code>为<code>BitmapFillMode.SCALE</code>时有效。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$scale9Grid;
            }
            ,function (value) {
                this.$scale9Grid = value;
                this.$invalidateContentBounds();
                this.invalidateDisplayList();
            }
        );
        d(p, "fillMode"
            /**
             * @language en_US
             * Determines how the bitmap fills in the dimensions.
             * <p>When set to <code>BitmapFillMode.CLIP</code>, the bitmap
             * ends at the edge of the region.</p>
             * <p>When set to <code>BitmapFillMode.REPEAT</code>, the bitmap
             * repeats to fill the region.</p>
             * <p>When set to <code>BitmapFillMode.SCALE</code>, the bitmap
             * stretches to fill the region.</p>
             *
             * @default <code>BitmapFillMode.SCALE</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 确定位图填充尺寸的方式。
             * <p>设置为 <code>BitmapFillMode.CLIP</code>时，位图将在边缘处被截断。</p>
             * <p>设置为 <code>BitmapFillMode.REPEAT</code>时，位图将重复以填充区域。</p>
             * <p>设置为 <code>BitmapFillMode.SCALE</code>时，位图将拉伸以填充区域。</p>
             *
             * @default <code>BitmapFillMode.SCALE</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$fillMode;
            }
            ,function (value) {
                if (value == this.$fillMode) {
                    return;
                }
                this.$fillMode = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "focusEnabled"
            ,function () {
                return this._focusEnabled;
            }
            /**
            * @language en_US
            * FocusEnabled.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 焦点是否可用。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (v) {
                this._focusEnabled = v;
            }
        );
        /**
        * @language en_US
        * SetFocus.
        * @version Egret 2.4
        * @version eui 1.0
        * @platform Web,Native
        */
        /**
         * @language zh_CN
         * 设置焦点。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setFocus = function () {
            if (this.stage) {
                this.stage.focus = this;
            }
        };
        //if egret
        p.$setFillMode = function (value) {
            var result = _super.prototype.$setFillMode.call(this, value);
            this.invalidateDisplayList();
            return result;
        };
        d(p, "source"
            /**
             * @language en_US
             * The source used for the bitmap fill. the value can be
             * a string or an instance of <code>egret.Texture</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 用于位图填充的源。可以是一个字符串或者 <code>egret.Texture</code> 对象
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._source;
            }
            ,function (value) {
                if (value == this._source) {
                    return;
                }
                this._source = value;
                if (this.$stage) {
                    this.parseSource();
                }
                else {
                    this.sourceChanged = true;
                    this.invalidateProperties();
                }
            }
        );
        p.$setBitmapData = function (value) {
            if (value == this.$Bitmap[0 /* bitmapData */]) {
                return false;
            }
            var result = _super.prototype.$setBitmapData.call(this, value);
            this.sourceChanged = false;
            this.invalidateSize();
            this.invalidateDisplayList();
            return result;
        };
        /**
         * @private
         * 解析source
         */
        p.parseSource = function () {
            this.sourceChanged = false;
            var source = this._source;
            if (source && typeof source == "string") {
                var adapter = this.$stage.getImplementation("eui.IAssetAdapter");
                if (!adapter) {
                    adapter = assetAdapter;
                }
                adapter.getAsset(this._source, this.contentChanged, this);
            }
            else {
                this.$setBitmapData(source);
            }
        };
        /**
         * @private
         * 资源发生改变
         */
        p.contentChanged = function (data, source) {
            if (source !== this._source)
                return;
            if (!egret.is(data, "egret.Texture")) {
                return;
            }
            this.$setBitmapData(data);
            if (data) {
                this.dispatchEventWith(egret.Event.COMPLETE);
            }
            else if (DEBUG) {
                egret.$warn(2301, source);
            }
        };
        p.$measureContentBounds = function (bounds) {
            var values = this.$Bitmap;
            var image = this.$Bitmap[0 /* bitmapData */];
            if (image) {
                var uiValues = this.$UIComponent;
                var width = uiValues[10 /* width */];
                var height = uiValues[11 /* height */];
                if (isNaN(width) || isNaN(height)) {
                    bounds.setEmpty();
                    return;
                }
                if (this.$fillMode == "clip") {
                    if (width > image.$getTextureWidth()) {
                        width = image.$getTextureWidth();
                    }
                    if (height > image.$getTextureHeight()) {
                        height = image.$getTextureHeight();
                    }
                }
                bounds.setTo(0, 0, width, height);
            }
            else {
                bounds.setEmpty();
            }
        };
        /**
         * @private
         *
         * @param context
         */
        p.$render = function (context) {
            var image = this.$Bitmap[0 /* bitmapData */];
            if (!image) {
                return;
            }
            var uiValues = this.$UIComponent;
            var width = uiValues[10 /* width */];
            var height = uiValues[11 /* height */];
            if (width === 0 || height === 0) {
                return;
            }
            var values = this.$Bitmap;
            egret.Bitmap.$drawImage(context, values[1 /* image */], values[2 /* clipX */], values[3 /* clipY */], values[4 /* clipWidth */], values[5 /* clipHeight */], values[6 /* offsetX */], values[7 /* offsetY */], values[8 /* width */], values[9 /* height */], width, height, this.$scale9Grid, this.$fillMode, values[10 /* smoothing */]);
        };
        /**
         * @copy eui.UIComponent#createChildren
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
            if (this.sourceChanged) {
                this.parseSource();
            }
        };
        /**
         * @copy eui.UIComponent#childrenCreated
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.childrenCreated = function () {
        };
        /**
         * @copy eui.UIComponent#commitProperties
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            eui.sys.UIComponentImpl.prototype["commitProperties"].call(this);
            if (this.sourceChanged) {
                this.parseSource();
            }
        };
        /**
         * @copy eui.UIComponent#measure
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            var bitmapData = this.$Bitmap[0 /* bitmapData */];
            if (bitmapData) {
                this.setMeasuredSize(bitmapData.$getTextureWidth(), bitmapData.$getTextureHeight());
            }
            else {
                this.setMeasuredSize(0, 0);
            }
        };
        /**
         * @copy eui.UIComponent#updateDisplayList
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            this.$invalidateContentBounds();
        };
        /**
         * @copy eui.UIComponent#invalidateParentLayout
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateParentLayout = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setMeasuredSize = function (width, height) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateSize = function (recursive) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateNow = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsPosition = function (x, y) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getLayoutBounds = function (bounds) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getPreferredBounds = function (bounds) {
        };
        return Image;
    })(egret.Bitmap);
    eui.Image = Image;
    egret.registerClass(Image,'eui.Image',["eui.UIComponent"]);
    eui.sys.implementUIComponent(Image, egret.Bitmap);
    eui.registerProperty(Image, "scale9Grid", "egret.Rectangle");
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var UIImpl = eui.sys.UIComponentImpl;
    /**
     * @language en_US
     * Label is an UIComponent that can render one or more lines of text.
     * The text to be displayed is determined by the <code>text</code> property.
     * The formatting of the text is specified by the styles，
     * such as <code>fontFamily</code> and <code>size</code>.
     *
     * <p>Because Label is fast and lightweight, it is especially suitable
     * for use cases that involve rendering many small pieces of non-interactive
     * text, such as item renderers and labels in Button skins.</p>
     *
     * <p>In Label, three character sequences are recognized
     * as explicit line breaks: CR (<code>"\r"</code>), LF (<code>"\n"</code>),
     * and CR+LF (<code>"\r\n"</code>).</p>
     *
     * <p>If you don't specify any kind of width for a Label,
     * then the longest line, as determined by these explicit line breaks,
     * determines the width of the Label.</p>
     *
     * <p>If you do specify some kind of width, then the specified text is
     * word-wrapped at the right edge of the component's bounds.
     * If the text extends below the bottom of the component,
     * it is clipped.</p>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/LabelExample.ts
     */
    /**
     * @language zh_CN
     * Label 是可以呈示一行或多行统一格式文本的UI组件。要显示的文本由 text 属性确定。文本格式由样式属性指定，例如 fontFamily 和 size。
     * 因为 Label 运行速度快且占用内存少，所以它特别适合用于显示多个小型非交互式文本的情况，例如，项呈示器和 Button 外观中的标签。
     * 在 Label 中，将以下三个字符序列识别为显式换行符：CR（“\r”）、LF（“\n”）和 CR+LF（“\r\n”）。
     * 如果没有为 Label 指定宽度，则由这些显式换行符确定的最长行确定 Label 的宽度。
     * 如果指定了宽度，则指定文本将在组件边界的右边缘换行，如果文本扩展到低于组件底部，则将被剪切。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/LabelExample.ts
     */
    var Label = (function (_super) {
        __extends(Label, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @param text The text displayed by this text component.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @param text 此文本组件所显示的文本。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Label(text) {
            _super.call(this);
            /**
             * @private
             */
            this._widthConstraint = NaN;
            this._focusEnabled = false;
            this.initializeUIValues();
            this.text = text;
        }
        var c=Label,p=c.prototype;
        /**
         * @private
         *
         */
        p.$invalidateContentBounds = function () {
            _super.prototype.$invalidateContentBounds.call(this);
            this.invalidateSize();
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setWidth = function (value) {
            var result1 = _super.prototype.$setWidth.call(this, value);
            var result2 = UIImpl.prototype.$setWidth.call(this, value);
            return result1 && result2;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setHeight = function (value) {
            var result1 = _super.prototype.$setHeight.call(this, value);
            var result2 = UIImpl.prototype.$setHeight.call(this, value);
            return result1 && result2;
        };
        /**
         * @private
         *
         * @param value
         */
        p.$setText = function (value) {
            var result = _super.prototype.$setText.call(this, value);
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "text");
            return result;
        };
        d(p, "focusEnabled"
            ,function () {
                return this._focusEnabled;
            }
            /**
            * @language en_US
            * FocusEnabled.
            * @version Egret 2.4
            * @version eui 1.0
            * @platform Web,Native
            */
            /**
             * @language zh_CN
             * 焦点是否可用。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (v) {
                this._focusEnabled = v;
            }
        );
        /**
        * @language en_US
        * SetFocus.
        * @version Egret 2.4
        * @version eui 1.0
        * @platform Web,Native
        */
        /**
         * @language zh_CN
         * 设置焦点。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setFocus = function () {
            if (this.stage) {
                this.stage.focus = this;
            }
        };
        /**
         * @copy eui.UIComponent#createChildren
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.createChildren = function () {
        };
        /**
         * @copy eui.UIComponent#childrenCreated
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.childrenCreated = function () {
        };
        /**
         * @copy eui.UIComponent#commitProperties
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
        };
        /**
         * @copy eui.UIComponent#measure
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            var values = this.$UIComponent;
            var textValues = this.$TextField;
            var oldWidth = textValues[3 /* textFieldWidth */];
            var availableWidth = NaN;
            if (!isNaN(this._widthConstraint)) {
                availableWidth = this._widthConstraint;
                this._widthConstraint = NaN;
            }
            else if (!isNaN(values[8 /* explicitWidth */])) {
                availableWidth = values[8 /* explicitWidth */];
            }
            else if (values[13 /* maxWidth */] != 100000) {
                availableWidth = values[13 /* maxWidth */];
            }
            _super.prototype.$setWidth.call(this, availableWidth);
            this.setMeasuredSize(this.textWidth, this.textHeight);
            _super.prototype.$setWidth.call(this, oldWidth);
        };
        /**
         * @copy eui.UIComponent#updateDisplayList
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.$setWidth.call(this, unscaledWidth);
            _super.prototype.$setHeight.call(this, unscaledHeight);
        };
        /**
         * @copy eui.UIComponent#invalidateParentLayout
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateParentLayout = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setMeasuredSize = function (width, height) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateProperties = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateSize = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateSize = function (recursive) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateDisplayList = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.validateNow = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsSize = function (layoutWidth, layoutHeight) {
            UIImpl.prototype.setLayoutBoundsSize.call(this, layoutWidth, layoutHeight);
            if (isNaN(layoutWidth) || layoutWidth === this._widthConstraint || layoutWidth == 0) {
                return;
            }
            var values = this.$UIComponent;
            if (!isNaN(values[9 /* explicitHeight */])) {
                return;
            }
            if (layoutWidth == values[16 /* measuredWidth */]) {
                return;
            }
            this._widthConstraint = layoutWidth;
            this.invalidateSize();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setLayoutBoundsPosition = function (x, y) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getLayoutBounds = function (bounds) {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getPreferredBounds = function (bounds) {
        };
        return Label;
    })(egret.TextField);
    eui.Label = Label;
    egret.registerClass(Label,'eui.Label',["eui.UIComponent","eui.IDisplayText"]);
    eui.sys.implementUIComponent(Label, egret.TextField);
    eui.registerBindable(Label.prototype, "text");
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The List control displays a vertical or horizontal list of items.
     * The user can select one or more items from the list, depending
     * on the value of the <code>allowMultipleSelection</code> property.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ListExample.ts
     */
    /**
     * @language zh_CN
     * List 控件可显示垂直或水平的项目列表。用户可以根据 <code>allowMultipleSelection</code> 属性的值从列表中选择一个或多个项目。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ListExample.ts
     */
    var List = (function (_super) {
        __extends(List, _super);
        function List() {
            var _this = this;
            _super.call(this);
            /**
             * @language en_US
             * whether are allowed to multiple selection.
             * If <code>true</code> tap an unselected item will be selected,
             * and tap the item again will cancel selection.
             *
             * @default false
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 是否允许同时选中多项,设置为 <code>true</code> 时，触摸按下未选中的项呈示器，将会设置该项选中，再次按下将会取消选中。
             * 可以设置多项为选中状态。
             *
             * @default false
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.allowMultipleSelection = false;
            /**
             * @private
             */
            this._selectedIndices = [];
            /**
             * @private
             * 是否是有效的索引
             */
            this.isValidIndex = function (item, index, v) {
                return _this.$dataProvider && (item >= 0) && (item < _this.$dataProvider.length) && item % 1 == 0;
            };
            this._selectedByKeyboard = false;
            this._keyboardUpAndDownLoop = false;
            // this.addEventListener(egret.KeyboardEvent.KEY_DOWN, this.keyDown_handler, this);            
            this.selectedByKeyboard = true;
            this.keyboardUpAndDownLoop = true;
        }
        var c=List,p=c.prototype;
        p.$onAddToStage = function (stage, nestLevel) {
            _super.prototype.$onAddToStage.call(this, stage, nestLevel);
            stage.addEventListener(egret.Event.RESIZE, this.onResize_handler, this);
        };
        d(p, "selectedIndices"
            /**
             * @language en_US
             * An Array of numbers representing the indices of the currently selected
             * item or items.
             *
             * @default []
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 当前选中的一个或多个项目的索引列表。
             *
             * @default []
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this._proposedSelectedIndices)
                    return this._proposedSelectedIndices;
                return this._selectedIndices;
            }
            ,function (value) {
                this.setSelectedIndices(value, false);
            }
        );
        d(p, "selectedIndex"
            /**
             * @inheritDoc
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this._proposedSelectedIndices) {
                    if (this._proposedSelectedIndices.length > 0)
                        return this._proposedSelectedIndices[0];
                    return -1;
                }
                return this.$getSelectedIndex();
            }
            ,function (value) {
                this.setSelectedIndex(value);
            }
        );
        d(p, "selectedItems"
            /**
             * @language en_US
             * An Array representing the currently selected data items.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 表示当前选定数据项的列表
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                var result = [];
                var list = this.selectedIndices;
                if (list) {
                    var count = list.length;
                    for (var i = 0; i < count; i++) {
                        result[i] = this.$dataProvider.getItemAt(list[i]);
                    }
                }
                return result;
            }
            ,function (value) {
                var indices = [];
                if (value) {
                    var count = value.length;
                    for (var i = 0; i < count; i++) {
                        var index = this.$dataProvider.getItemIndex(value[i]);
                        if (index != -1) {
                            indices.splice(0, 0, index);
                        }
                        if (index == -1) {
                            indices = [];
                            break;
                        }
                    }
                }
                this.setSelectedIndices(indices, false);
            }
        );
        /**
         * @language en_US
         * Specify whether the selectedIndices changed programmatically or due to
         * user interaction.
         *
         * @param value An array of numbers representing the indices of the selected
         * @param dispatchChangeEvent whether dispatched a change event.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 设置多个选中项。
         *
         * @param value 选中项索引的数组
         * @param dispatchChangeEvent 是否派发changed事件
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setSelectedIndices = function (value, dispatchChangeEvent) {
            var values = this.$ListBase;
            if (dispatchChangeEvent)
                values[4 /* dispatchChangeAfterSelection */] =
                    (values[4 /* dispatchChangeAfterSelection */] || dispatchChangeEvent);
            if (value)
                this._proposedSelectedIndices = value;
            else
                this._proposedSelectedIndices = [];
            this.invalidateProperties();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this._proposedSelectedIndices) {
                this.commitSelection();
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitSelection = function (dispatchChangedEvents) {
            if (dispatchChangedEvents === void 0) { dispatchChangedEvents = true; }
            var values = this.$ListBase;
            var oldSelectedIndex = values[3 /* selectedIndex */];
            if (this._proposedSelectedIndices) {
                this._proposedSelectedIndices = this._proposedSelectedIndices.filter(this.isValidIndex);
                if (!this.allowMultipleSelection && this._proposedSelectedIndices.length > 0) {
                    var temp = [];
                    temp.push(this._proposedSelectedIndices[0]);
                    this._proposedSelectedIndices = temp;
                }
                if (this._proposedSelectedIndices.length > 0) {
                    values[2 /* proposedSelectedIndex */] = this._proposedSelectedIndices[0];
                }
                else {
                    values[2 /* proposedSelectedIndex */] = -1;
                }
            }
            var retVal = _super.prototype.commitSelection.call(this, false);
            if (!retVal) {
                this._proposedSelectedIndices = null;
                return false;
            }
            var selectedIndex = this.$getSelectedIndex();
            if (selectedIndex > eui.ListBase.NO_SELECTION) {
                if (this._proposedSelectedIndices) {
                    if (this._proposedSelectedIndices.indexOf(selectedIndex) == -1)
                        this._proposedSelectedIndices.push(selectedIndex);
                }
                else {
                    this._proposedSelectedIndices = [selectedIndex];
                }
            }
            if (this._proposedSelectedIndices) {
                if (this._proposedSelectedIndices.indexOf(oldSelectedIndex) != -1)
                    this.itemSelected(oldSelectedIndex, true);
                this.commitMultipleSelection();
            }
            if (dispatchChangedEvents && retVal) {
                if (values[4 /* dispatchChangeAfterSelection */]) {
                    this.dispatchEventWith(egret.Event.CHANGE);
                    values[4 /* dispatchChangeAfterSelection */] = false;
                }
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedIndex");
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedItem");
            }
            return retVal;
        };
        /**
         * @language en_US
         * Given a new selection interval, figure out which
         * items are newly added/removed from the selection interval and update
         * selection properties and view accordingly.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 从给定的选择区间中找出新增或者移除的项，并更新属性。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitMultipleSelection = function () {
            var removedItems = [];
            var addedItems = [];
            var i;
            var count;
            var selectedIndices = this._selectedIndices;
            var proposedSelectedIndices = this._proposedSelectedIndices;
            if (selectedIndices.length > 0 && proposedSelectedIndices.length > 0) {
                count = proposedSelectedIndices.length;
                for (i = 0; i < count; i++) {
                    if (selectedIndices.indexOf(proposedSelectedIndices[i]) == -1)
                        addedItems.push(proposedSelectedIndices[i]);
                }
                count = selectedIndices.length;
                for (i = 0; i < count; i++) {
                    if (proposedSelectedIndices.indexOf(selectedIndices[i]) == -1)
                        removedItems.push(selectedIndices[i]);
                }
            }
            else if (selectedIndices.length > 0) {
                removedItems = selectedIndices;
            }
            else if (proposedSelectedIndices.length > 0) {
                addedItems = proposedSelectedIndices;
            }
            this._selectedIndices = proposedSelectedIndices;
            if (removedItems.length > 0) {
                count = removedItems.length;
                for (i = 0; i < count; i++) {
                    this.itemSelected(removedItems[i], false);
                }
            }
            if (addedItems.length > 0) {
                count = addedItems.length;
                for (i = 0; i < count; i++) {
                    this.itemSelected(addedItems[i], true);
                }
            }
            this._proposedSelectedIndices = null;
        };
        /**
         * @private
         *
         * @param index
         * @returns
         */
        p.$isItemIndexSelected = function (index) {
            if (this.allowMultipleSelection)
                return this._selectedIndices.indexOf(index) != -1;
            return _super.prototype.$isItemIndexSelected.call(this, index);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.dataProviderRefreshed = function () {
            if (this.allowMultipleSelection) {
                return;
            }
            _super.prototype.dataProviderRefreshed.call(this);
        };
        /**
         * @private
         * 计算当前的选中项列表
         */
        p.calculateSelectedIndices = function (index, shiftKey, ctrlKey) {
            var i;
            var interval = [];
            var selectedIndices = this._selectedIndices;
            if (!shiftKey) {
                if (ctrlKey) {
                    if (selectedIndices.length > 0) {
                        if (selectedIndices.length == 1 && (selectedIndices[0] == index)) {
                            if (!this.requireSelection)
                                return interval;
                            interval.splice(0, 0, selectedIndices[0]);
                            return interval;
                        }
                        else {
                            var found = false;
                            for (i = 0; i < selectedIndices.length; i++) {
                                if (selectedIndices[i] == index)
                                    found = true;
                                else if (selectedIndices[i] != index)
                                    interval.splice(0, 0, selectedIndices[i]);
                            }
                            if (!found) {
                                interval.splice(0, 0, index);
                            }
                            return interval;
                        }
                    }
                    else {
                        interval.splice(0, 0, index);
                        return interval;
                    }
                }
                else {
                    interval.splice(0, 0, index);
                    return interval;
                }
            }
            else {
                var start = selectedIndices.length > 0 ? selectedIndices[selectedIndices.length - 1] : 0;
                var end = index;
                if (start < end) {
                    for (i = start; i <= end; i++) {
                        interval.splice(0, 0, i);
                    }
                }
                else {
                    for (i = start; i >= end; i--) {
                        interval.splice(0, 0, i);
                    }
                }
                return interval;
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onRendererTouchEnd = function (event) {
            if (this.allowMultipleSelection) {
                var itemRenderer = (event.currentTarget);
                var touchDownItemRenderer = this.$ListBase[7 /* touchDownItemRenderer */];
                if (itemRenderer != touchDownItemRenderer)
                    return;
                this.setSelectedIndices(this.calculateSelectedIndices(itemRenderer.itemIndex, event.shiftKey, event.ctrlKey || event.commandKey), true);
                eui.ItemTapEvent.dispatchItemTapEvent(this, eui.ItemTapEvent.ITEM_TAP, itemRenderer);
            }
            else {
                _super.prototype.onRendererTouchEnd.call(this, event);
            }
        };
        p.onRendererTouchBegin = function (event) {
            _super.prototype.onRendererTouchBegin.call(this, event);
            event.currentTarget.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.item_mouseMoveHandler, this, false, 1000);
        };
        p.item_mouseMoveHandler = function (event) {
            event.currentTarget.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.item_mouseMoveHandler, this);
            var itemRenderer = event.currentTarget;
            var isInSelected = false;
            for (var i = 0; i < this.selectedItems.length; i++) {
                if (itemRenderer.data == this.selectedItems[i]) {
                    isInSelected = true;
                    break;
                }
            }
            if (isInSelected)
                return;
            var values = this.$ListBase;
            var touchDownItemRenderer = values[7 /* touchDownItemRenderer */];
            if (itemRenderer != touchDownItemRenderer)
                return;
            var newIndex;
            if (itemRenderer)
                newIndex = itemRenderer.itemIndex;
            else
                newIndex = this.getChildIndex(event.currentTarget);
            if (this.allowMultipleSelection) {
                this.setSelectedIndices(this.calculateSelectedIndices(newIndex, event.shiftKey, event.ctrlKey || event.commandKey), true);
            }
            else {
                this.setSelectedIndices([newIndex], true);
            }
        };
        /**键盘事件 */
        p.keyDown_handler = function (event) {
            switch (event.keyCode) {
                case egret.Keyboard.ENTER:
                    if (this.dataProvider instanceof eui.ObjectCollection && this.selectedItem) {
                        var oc = this.dataProvider;
                        if (!oc.isItemOpen(this.selectedItem)) {
                            oc.expandItem(this.selectedItem);
                        }
                        else {
                            oc.expandItem(this.selectedItem, false);
                        }
                    }
                    break;
                case egret.Keyboard.UP:
                    var nextSelectedIndex = this.selectedIndex - 1 < 0 ? this.numElements - 1 : this.selectedIndex - 1;
                    this.autoScrollToIndex(nextSelectedIndex);
                    this.setSelectedIndex(nextSelectedIndex, true);
                    break;
                case egret.Keyboard.DOWN:
                    nextSelectedIndex = this.selectedIndex + 1 >= this.numElements ? 0 : this.selectedIndex + 1;
                    this.autoScrollToIndex(nextSelectedIndex);
                    this.setSelectedIndex(nextSelectedIndex, true);
                    break;
                default:
                    break;
            }
            //console.log('keyCode:', event.keyCode, selectedIndex', this.selectedIndex);
        };
        /**
         * 列表的自动滚动
         * @param nextSelectedIndex 下次要滚动到的Index
         */
        p.autoScrollToIndex = function (nextSelectedIndex) {
            if (nextSelectedIndex === void 0) { nextSelectedIndex = 0; }
            var virtualElement = this.getVirtualElementAt(0);
            if (virtualElement) {
                var h = virtualElement.height * (1 + nextSelectedIndex) - this.scrollRect.height;
                h = Math.max(0, h);
                this.scrollV = h;
            }
        };
        /**
         * 舞台大小产生改变之后，如果新的大小大于滚动区则复原滚动位置
         */
        p.onResize_handler = function (event) {
            var _this = this;
            egret.callLater(function () {
                if (_this.scrollV > 0) {
                    if (_this.height > _this.contentHeight) {
                        _this.scrollV = 0;
                    }
                }
                else if (_this.scrollH > 0) {
                    if (_this.width > _this.contentWidth) {
                        _this.scrollH = 0;
                    }
                }
            }, this);
        };
        d(p, "selectedByKeyboard"
            /**
             * 能否使用键盘来控制选中项
             */
            ,function () {
                return this._selectedByKeyboard;
            }
            ,function (value) {
                this._selectedByKeyboard = value;
                if (this._selectedByKeyboard)
                    this.addEventListener(egret.KeyboardEvent.KEY_DOWN, this.adjustSelectionAndCaretUponNavigation, this);
                else
                    this.removeEventListener(egret.KeyboardEvent.KEY_DOWN, this.adjustSelectionAndCaretUponNavigation, this);
            }
        );
        /**
         * 通过键盘导航键调整选中项
         */
        p.adjustSelectionAndCaretUponNavigation = function (event) {
            var navigationUnit = event.keyCode;
            if (navigationUnit == egret.Keyboard.ENTER) {
                if (this.dataProvider instanceof eui.ObjectCollection && this.selectedItem) {
                    var oc = this.dataProvider;
                    if (!oc.isItemOpen(this.selectedItem)) {
                        oc.expandItem(this.selectedItem);
                    }
                    else {
                        oc.expandItem(this.selectedItem, false);
                    }
                }
                return;
            }
            if (!eui.NavigationUnit.isNavigationUnit(event.keyCode))
                return;
            this.layout.keyboardUpAndDownLoop = this.keyboardUpAndDownLoop;
            var proposedNewIndex = this.layout.getNavigationDestinationIndex(this.selectedIndex, navigationUnit);
            if (proposedNewIndex == -1)
                return;
            event.preventDefault();
            if (this.allowMultipleSelection && event.shiftKey && this.selectedIndices) {
                var startIndex = 0;
                if (this.selectedIndices && this.selectedIndices.length > 0)
                    startIndex = this.selectedIndices[this.selectedIndices.length - 1];
                var newInterval = new Array();
                var i;
                if (startIndex <= proposedNewIndex) {
                    for (i = startIndex; i <= proposedNewIndex; i++) {
                        newInterval.splice(0, 0, i);
                    }
                }
                else {
                    for (i = startIndex; i >= proposedNewIndex; i--) {
                        newInterval.splice(0, 0, i);
                    }
                }
                this.setSelectedIndices(newInterval, true);
                this.ensureIndexIsVisible(proposedNewIndex);
            }
            else {
                this.setSelectedIndex(proposedNewIndex, true);
                this.ensureIndexIsVisible(proposedNewIndex);
            }
            if (this.stage && !this.stage.focus)
                this.setFocus();
        };
        d(p, "keyboardUpAndDownLoop"
            /**
             * 是否up 、down 按键循环
             */
            ,function () {
                return this._keyboardUpAndDownLoop;
            }
            ,function (_val) {
                this._keyboardUpAndDownLoop = _val;
            }
        );
        /**
         * 滚动数据项以使其可见的简便处理方法
         */
        p.ensureIndexIsVisible = function (index) {
            if (!this.layout)
                return;
            var spDelta = this.layout.getScrollPositionDeltaToElement(index);
            if (spDelta) {
                this.layout.target.scrollH += spDelta.x;
                this.layout.target.scrollV += spDelta.y;
                this.validateNow();
            }
        };
        return List;
    })(eui.ListBase);
    eui.List = List;
    egret.registerClass(List,'eui.List');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 数字调节器,能通过左右或者上下拖拽以及输入的形式调节指定范围内的数字
     * 当TextInput在获取焦点后  无法移除焦点 无法隐藏的BUG修复后 修改todo内容
     */
    var NumberRegulator = (function (_super) {
        __extends(NumberRegulator, _super);
        function NumberRegulator() {
            _super.call(this);
            this.promptChanged = false;
            this._promptValue = NaN;
            this._isPrompt = false;
            this._openLabelWheel = false;
            this._stepSize = 1;
            /**
             * 单步大小改变的标志
             */
            this.stepSizeChanged = false;
            this.isEditModel = false;
            this._isDragging = false;
            this.lastPoint = new egret.Point();
            this.lastValue = NaN;
            this.hasUpdateValue = false;
            this.focusEnabled = false;
        }
        var c=NumberRegulator,p=c.prototype;
        d(p, "value"
            ,function () {
                return egret.superGetter(eui.NumberRegulator, this, "value");
            }
            ,function (newValue) {
                this._isPrompt = false;
                egret.superSetter(eui.NumberRegulator, this, "value", newValue);
                this.invalidateState();
            }
        );
        d(p, "promptValue"
            ,function () {
                if (isNaN(this._promptValue)) {
                    return 0;
                }
                return this._promptValue;
            }
            ,function (value) {
                this._promptValue = value;
                this.promptChanged = true;
                this.invalidateProperties();
            }
        );
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.promptChanged) {
                this.promptChanged = false;
                if (this.getCurrentState() == "prompt") {
                    this._isPrompt = false;
                    this.setValue(this.nearestValidValue(this.promptValue, this.snapInterval));
                    this._isPrompt = true;
                }
            }
        };
        d(p, "isPrompt"
            ,function () {
                return this._isPrompt;
            }
            ,function (value) {
                egret.superSetter(eui.NumberRegulator, this, "isPrompt", value);
            }
        );
        d(p, "openLabelWheel"
            ,function () {
                return this._openLabelWheel;
            }
            ,function (value) {
                if (this._openLabelWheel == value)
                    return;
                this._openLabelWheel = value;
                if (this.labelDisplay) {
                    if (value)
                        this.addEventListener(egret.MouseEvent.MOUSE_WHEEL, this.labelDisplay_mouseWheelHandler, this, true);
                    else
                        this.removeEventListener(egret.MouseEvent.MOUSE_WHEEL, this.labelDisplay_mouseWheelHandler, this, true);
                }
            }
        );
        p.updatePromptValue = function (newValue) {
            if (newValue === void 0) { newValue = NaN; }
            if (!isNaN(newValue)) {
                this._promptValue = newValue;
            }
            this.setValue(this.nearestValidValue(this.promptValue, this.snapInterval));
            this._isPrompt = true;
            this.invalidateState();
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            //todo
            //为了处理TextInput在获取焦点后无法应用Visible = false 和程序移除焦点的操作
            //输入enter和esc 后无法移除焦点,会出现 输入和呈现文本 同时显示的bug
            if (instance == this.editableText) {
                this.editableText.text = this.value.toString();
                this.editableText.addEventListener(egret.TextEvent.COMMIT, this.editableTextTextCommitHandler, this);
            }
            else if (instance == this.labelDisplay) {
                this.labelDisplay.text = this.value.toString();
                if (this.openLabelWheel)
                    this.addEventListener(egret.MouseEvent.MOUSE_WHEEL, this.labelDisplay_mouseWheelHandler, this, true);
                this.addEventListener(egret.MouseEvent.ROLL_OVER, this.labelDisplay_rollOverHandler, this);
                this.addEventListener(egret.MouseEvent.ROLL_OUT, this.labelDisplay_rollOutHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.labelDisplay_mouseDownHandler, this);
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.labelDisplay_mouseClickHandler, this);
            }
        };
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.editableText) {
                this.editableText.removeEventListener(egret.TextEvent.COMMIT, this.editableTextTextCommitHandler, this);
            }
            else if (instance == this.labelDisplay) {
                this.removeEventListener(egret.MouseEvent.MOUSE_WHEEL, this.labelDisplay_mouseWheelHandler, this, true);
                this.removeEventListener(egret.MouseEvent.ROLL_OVER, this.labelDisplay_rollOverHandler, this);
                this.removeEventListener(egret.MouseEvent.ROLL_OUT, this.labelDisplay_rollOutHandler, this);
                this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.labelDisplay_mouseDownHandler, this);
                this.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.labelDisplay_mouseClickHandler, this);
            }
        };
        p.labelDisplay_mouseWheelHandler = function (event) {
            var _self__ = this;
            event.stopImmediatePropagation();
            if (this._isDragging || this.isEditModel) {
                return;
            }
            this.cursor = egret.MouseCursor.ROW_RESIZE;
            var prevValue = this.value;
            this.changeValueByStep(event["delta"] > 0);
            if (this.value != this.promptValue)
                _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
        };
        /**
         * 按 stepSize增大或减小当前值
         * @param increase 若为 true，则向value增加stepSize，否则减去它。
         */
        p.changeValueByStep = function (increase) {
            if (increase === void 0) { increase = true; }
            if (this.stepSize == 0)
                return;
            var newValue = (increase) ? this.value + this.stepSize : this.value - this.stepSize;
            this.setValue(this.nearestValidValue(newValue, this.snapInterval));
        };
        d(p, "stepSize"
            /**
             * 调用 changeValueByStep() 方法时 value 属性更改的单步大小。默认值为 1。<br/>
             * 除非 snapInterval 为 0，否则它必须是 snapInterval 的倍数。<br/>
             * 如果 stepSize 不是倍数，则会将它近似到大于或等于 snapInterval 的最近的倍数。<br/>
             */
            ,function () {
                return this._stepSize;
            }
            ,function (value) {
                if (value == this._stepSize)
                    return;
                this._stepSize = value;
                this.stepSizeChanged = true;
                this.invalidateProperties();
            }
        );
        p.labelDisplay_rollOutHandler = function (event) {
            if (!this._isDragging && !this.isEditModel)
                this.cursor = egret.MouseCursor.ARROW;
        };
        p.labelDisplay_rollOverHandler = function (event) {
            if (!this._isDragging && !this.isEditModel)
                this.cursor = egret.MouseCursor.COL_RESIZE;
        };
        p.editableText_mouseWheelHandler = function (event) {
            event.stopImmediatePropagation();
            var textValue = this.editableText.text;
            if (isNaN(textValue)) {
                this.editableText.text = String(this.value);
                return;
            }
            var newValue = (event["delta"] > 0) ? textValue + this.promptValue : textValue - this.promptValue;
            this.editableText.text = String(this.nearestValidValue(newValue, this.snapInterval));
            this.editableText.setFocus();
        };
        p.labelDisplay_mouseClickHandler = function (event) {
            if (!this.isEditModel && !this.hasUpdateValue) {
                this.enterEditMode();
            }
        };
        p.enterEditMode = function () {
            this.isEditModel = true;
            this.cursor = egret.MouseCursor.IBEAM;
            this.editableText.text = this.value.toString();
            this.editableText.setFocus();
            this.stage.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.stage_mouseDownHandler, this);
            this.invalidateState();
        };
        p.editableTextTextCommitHandler = function (event) {
            this.syncTextInputValue(true);
        };
        p.stage_mouseDownHandler = function (event) {
            if (this.contains(event.target))
                return;
            this.exitEditMode();
        };
        p.exitEditMode = function (save) {
            if (save === void 0) { save = true; }
            var _self__ = this;
            this.cursor = egret.MouseCursor.AUTO;
            this.isEditModel = false;
            this.stage.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.stage_mouseDownHandler, this);
            if (save) {
                this.syncTextInputValue(true);
            }
            this.invalidateState();
        };
        p.syncTextInputValue = function (triggerEvent) {
            var _self__ = this;
            if (!this.editableText.text) {
                this.updatePromptValue();
                if (triggerEvent) {
                    _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
                }
            }
            else {
                var newValue = this.editableText.text;
                if (!isNaN(newValue)) {
                    newValue = this.nearestValidValue(newValue, this.snapInterval);
                    if (this.isPrompt || newValue != this.value) {
                        this.setValue(newValue);
                        if (triggerEvent) {
                            _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
                        }
                    }
                }
            }
        };
        d(p, "isDragging"
            ,function () {
                return this._isDragging;
            }
            ,function (value) {
                egret.superSetter(eui.NumberRegulator, this, "isDragging", value);
            }
        );
        p.labelDisplay_mouseDownHandler = function (event) {
            if (this.isEditModel)
                return;
            this.lastValue = this.value;
            this.lastPoint.x = event["stageX"];
            this.lastPoint.y = event["stageY"];
            this._isDragging = true;
            this.hasUpdateValue = false;
            this.cursor = egret.MouseCursor.COL_RESIZE;
            this.stage.addEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
            this.stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
        };
        p.stage_mouseMoveHandler = function (event) {
            this.updateWhenMouseMove();
        };
        p.updateWhenMouseMove = function () {
            var _self__ = this;
            var changeValue = this.stage.mouseX - this.lastPoint.x + this.stage.mouseY - this.lastPoint.y;
            var prevValue = this.value;
            var newValue = this.nearestValidValue(this.lastValue + changeValue, this.snapInterval);
            if (prevValue != newValue) {
                this.setValue(newValue);
            }
            this.lastValue = this.value;
            this.lastPoint.x = this.stage.mouseX;
            this.lastPoint.y = this.stage.mouseY;
            if (this.value != prevValue) {
                this.hasUpdateValue = true;
                _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
            }
        };
        p.stage_mouseUpHandler = function (event) {
            var _self__ = this;
            this._isDragging = false;
            this.cursor = egret.MouseCursor.AUTO;
            if (egret.is(this.labelDisplay, "egret.DisplayObject")) {
                if (this.labelDisplay.getBounds().contains(event.stageX, event.stageY)) {
                    this.cursor = egret.MouseCursor.COL_RESIZE;
                }
            }
            this.stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.stage_mouseUpHandler, this);
            this.stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.stage_mouseMoveHandler, this);
            if (this.hasUpdateValue)
                _self__.dispatchEvent(new egret.Event(egret.Event.CHANGE));
        };
        p.getCurrentState = function () {
            if (this.isEditModel && this.enabled)
                return "edit";
            else if (this._isPrompt)
                return "prompt";
            return this.enabled ? "normal" : "disabled";
        };
        p.setValue = function (value) {
            _super.prototype.setValue.call(this, value);
            if (this.editableText)
                this.editableText.text = value.toString();
            if (this.labelDisplay)
                this.labelDisplay.text = value.toString();
            if (this._isPrompt) {
                this._isPrompt = false;
                this.invalidateState();
            }
        };
        return NumberRegulator;
    })(eui.Range);
    eui.NumberRegulator = NumberRegulator;
    egret.registerClass(NumberRegulator,'eui.NumberRegulator');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 盒式布局面板区域容器
     * @author dom
     */
    var PanelArea = (function (_super) {
        __extends(PanelArea, _super);
        function PanelArea() {
            _super.call(this);
            //		/**
            //		 * 状态栏文字
            //		 */		
            //		public  get status():string
            //		{
            //			return this.statusBar.status;
            //		}
            //		public  set status(value:string)
            //		{
            //			this.statusBar.status = value;
            //		}
            this._boxContainer = new eui.BoxContainer();
            /**是否响应TabBar双击事件 true 响应  false 禁用*/
            this.tabDoubleClickEnabled = true;
            this.restoreList = [];
            this.offsetY = 0;
            this.panelHeightDic = new egret.Dictionary(true);
            //		protected  statusClickHandler(event:eui.StatusClickEvent):void
            //		{
            //            this.closeQuickPanel();
            //            var element: UIComponent = event.data as UIComponent;
            //			if(!element) return;
            //            if(egret.is(element,"eui.IBoxElement"))
            //			{
            //                this.statusBar.removeBoxElement(<IBoxElement><any>element);
            //                (<IBoxElement><any>element).minimized = false;
            //			}
            //            else if(egret.is(element,"eui.TabPanel"))
            //			{
            //                this.quickPanel = <TabPanel>element;
            //                this.oldParent = <TabGroup>element.parent;
            //                this.oldPanelIndex = this.quickPanel.itemIndex;
            //                if(isNaN(this.panelHeightDic[<any>element]))
            //                    this.quickGroup.height = Math.ceil(this._boxContainer.height*0.30);
            //				else
            //                    this.quickGroup.height = this.panelHeightDic[<any>element];
            //				
            //				egret.callLater(function():void{
            //                    this.separator.bottom = this.quickGroup.height+30;
            //                    this.quickGroup.visible = true;
            //                    this.separator.visible = true;
            //                    this.quickGroup.addElement(<ITabPanel>element);
            //				},this);
            //			}
            //            this.refreshRestoreList();
            //		}
            this.oldPanelIndex = 0;
            this.classMap = { "BoxElement": eui.BoxElement, "TabGroup": eui.TabGroup, "TabPanel": eui.TabPanel, "Document": eui.BoxContainer };
            this.minimizedChanged = false;
            this.addEventListener(eui.DocumentEvent.SELECTED_DOC_CHANGE, this.onDocChanged, this);
            this.addEventListener(eui.DocumentEvent.DOC_FOCUS_IN, this.onDocFocusIn, this);
        }
        var c=PanelArea,p=c.prototype;
        d(p, "exmlConfig"
            ,function () {
                return this._exmlConfig;
            }
            ,function (value) {
                this._exmlConfig = value;
            }
        );
        d(p, "projectModel"
            ,function () {
                return this._projectModel;
            }
            ,function (value) {
                this._projectModel = value;
            }
        );
        d(p, "classMaps"
            /**
             * wing 中传入的类映射
             */
            ,function () {
                return this._classMaps;
            }
            ,function (value) {
                this._classMaps = value;
            }
        );
        p.onDocChanged = function (event) {
            if (event.target == this)
                return;
            event.stopImmediatePropagation();
            this.dispatchDocChange(event.newData);
        };
        p.onDocFocusIn = function (event) {
            var docGroup = event.target;
            if (!docGroup)
                return;
            this.dispatchDocChange(docGroup.selectedDocument);
        };
        /**
         * 派发选中文档改变的事件
         */
        p.dispatchDocChange = function (newDocument) {
            if (newDocument != this.selectedDocument) {
                var event = new eui.DocumentEvent(eui.DocumentEvent.SELECTED_DOC_CHANGE);
                event.newData = newDocument;
                event.oldData = this.selectedDocument;
                this.selectedDocument = newDocument;
                this.dispatchEvent(event);
            }
        };
        d(p, "boxContainer"
            //		private _statusBar:StatusBar = new StatusBar();
            //		
            //		/**
            //		 * 状态栏
            //		 */
            //		public  get statusBar():StatusBar
            //		{
            //			return this._statusBar;
            //		}
            /**
             * 外层盒式布局容器
             */
            ,function () {
                return this._boxContainer;
            }
        );
        d(p, "documentBox"
            /**
             * 文档区域盒子
             */
            ,function () {
                if (!this._boxContainer)
                    return null;
                return this._boxContainer.documentBox;
            }
        );
        d(p, "documentGroup"
            /**
             * 文档选项卡组，如果存在多个的情况取最新的那个
             */
            ,function () {
                if (!this._boxContainer || !this._boxContainer.documentBox)
                    return null;
                return this.getDocment(this._boxContainer.documentBox.rootBox);
            }
        );
        p.getDocment = function (box) {
            if (egret.is(box, "eui.DocTabGroup"))
                return box;
            if (egret.is(box, "eui.BoxElement")) {
                var tabGroup = this.getDocment(box.secondElement);
                if (tabGroup)
                    return tabGroup;
                return this.getDocment(box.firstElement);
            }
            return null;
        };
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.addEventListener(eui.TabGroupEvent.MAXIMIZED, this.onTabGroupEvent, this);
            this.addEventListener(eui.TabGroupEvent.MINIMIZED, this.onTabGroupEvent, this);
            this.addEventListener(eui.TabGroupEvent.CLOSE, this.onTabGroupEvent, this);
            this.addEventListener("minimizedChanged", this.onMinimizedChanged, this);
            this._boxContainer.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onBoxContainerMouseDown, this);
            this._boxContainer.left = this._boxContainer.right = -1;
            this._boxContainer.top = 0;
            //			this._boxContainer.bottom = 31;
            this._boxContainer.bottom = 0;
            this.addChild(this._boxContainer);
            //            this.statusBar.left = this.statusBar.right = this.statusBar.bottom = -1;
            //            this.statusBar.height = 33;
            //            this.statusBar.addEventListener(eui.StatusClickEvent.STATUS_CLICK,this.statusClickHandler,this);
            //            this.addChild(this.statusBar);
            this.quickGroup = new eui.TabGroup();
            this.quickGroup.left = this.quickGroup.right = 0;
            this.quickGroup.bottom = 0;
            //             this.quickGroup.bottom = 31;
            this.quickGroup.visible = false;
            this.addChild(this.quickGroup);
            this.separator = new eui.Separator();
            this.separator.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onSepMouseDown, this);
            this.separator.addEventListener(egret.MouseEvent.ROLL_OVER, this.onSepRollOver, this);
            this.separator.addEventListener(egret.MouseEvent.ROLL_OUT, this.onSepRollOut, this);
            this.separator.left = this.separator.right = 0;
            this.separator.height = 3;
            this.separator.visible = false;
            this.addChild(this.separator);
        };
        p.onMinimizedChanged = function (event) {
            this.invalidateMinimized();
            event.stopImmediatePropagation();
        };
        p.onTabGroupEvent = function (event) {
            if (!this.tabDoubleClickEnabled)
                return;
            var target = event.target;
            var length = this._boxContainer.numChildren;
            var targetBox;
            if (this.quickGroup.contains(target)) {
                targetBox = this.quickGroup;
            }
            else {
                for (var i = 0; i < length; i++) {
                    var child = this._boxContainer.getChildAt(i);
                    if (!child || egret.is(child, "eui.Separator")) {
                        continue;
                    }
                    if (child.contains(target)) {
                        targetBox = child;
                        break;
                    }
                }
            }
            if (!targetBox)
                return;
            switch (event.type) {
                case eui.TabGroupEvent.MAXIMIZED:
                    this.maximizedBox(targetBox);
                    break;
                case eui.TabGroupEvent.MINIMIZED:
                    if (targetBox == this.quickGroup)
                        this.closeQuickPanel();
                    else
                        targetBox.minimized = true;
                    this.invalidateMinimized();
                    break;
                case eui.TabGroupEvent.CLOSE:
                    this.closeBox(targetBox, event.target);
                    break;
            }
            event.stopImmediatePropagation();
        };
        p.closeBox = function (targetBox, target) {
            if (target === void 0) { target = null; }
            if (targetBox == this.quickGroup) {
                if (!this.oldParent || !this.quickPanel)
                    return;
                var parent = this.oldParent;
                var panel = this.quickPanel;
                this.closeQuickPanel();
                parent.removeElement(panel);
                if (parent.numElements == 0)
                    this._boxContainer.removeElement(parent);
            }
            else if (egret.is(targetBox, "eui.BoxContainer")) {
                if (egret.is(target, "eui.IBoxElement") && egret.is(targetBox.rootBox, "eui.BoxElement"))
                    targetBox.removeElement(target);
            }
            else {
                this._boxContainer.removeElement(targetBox);
            }
        };
        p.maximizedBox = function (targetBox) {
            if (this.restoreList.length > 0) {
                this.restorePanels();
                return;
            }
            var length = this._boxContainer.numChildren;
            for (var i = 0; i < length; i++) {
                var box = this._boxContainer.getChildAt(i);
                if (!box || box == targetBox)
                    continue;
                if (!box.minimized) {
                    box.minimized = true;
                    this.restoreList.push(box);
                }
            }
        };
        p.restorePanels = function () {
            for (var i = 0; i < this.restoreList.length; i++) {
                this.restoreList[i].minimized = false;
            }
            this.restoreList = [];
            this.invalidateMinimized();
        };
        p.refreshRestoreList = function () {
            for (var i = 0; i < this.restoreList.length; i++) {
                if (this.restoreList[i].minimized == false) {
                    for (var j = i; j < this.restoreList.length - 1; j++) {
                        this.restoreList[j] = this.restoreList[j + 1];
                    }
                    this.restoreList.pop();
                    i--;
                }
            }
        };
        /**
         * 鼠标经过
         */
        p.onSepRollOver = function (event) {
            if (event.buttonDown)
                return;
            //			CursorManager.setCursor(Cursors.DESKTOP_RESIZE_NS);
        };
        /**
         * 鼠标移出
         */
        p.onSepRollOut = function (event) {
            if (event.buttonDown)
                return;
            //			CursorManager.setCursor(Cursors.AUTO);
        };
        p.onSepMouseDown = function (event) {
            this.offsetY = this.separator.y - this.stage.mouseY;
            this.stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.onSepMouseMove, this);
            this.stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.onSepMouseUp, this);
            this.stage.addEventListener(egret.MouseEvent.RIGHT_MOUSE_UP, this.onSepMouseUp, this);
            this.touchEnabled = false;
        };
        p.onSepMouseUp = function (event) {
            egret.callLater(function () {
                //				CursorManager.setCursor(Cursors.AUTO);
            }, this);
            this.touchEnabled = true;
            var stage = event.currentTarget;
            stage.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.onSepMouseMove, this);
            stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.onSepMouseUp, this);
            stage.removeEventListener(egret.MouseEvent.RIGHT_MOUSE_UP, this.onSepMouseUp, this);
            this.panelHeightDic.setItem(this.quickPanel, this.quickGroup.height);
        };
        p.onSepMouseMove = function (event) {
            var offset = 0;
            var minSize = eui.BoxContainer.MIN_SIZE;
            offset = Math.round(this.offsetY + event.stageY - this.separator.y);
            this.quickGroup.height = Math.min(this.quickGroup.height - offset, this._boxContainer.height - 1 - minSize);
            this.quickGroup.height = Math.max(minSize, this.quickGroup.height);
            this.separator.bottom = this.quickGroup.height + 30;
            //			UIGlobals.layoutManager.validateNow();
            event.updateAfterEvent();
        };
        p.onBoxContainerMouseDown = function (event) {
            //            this.statusBar.clearSelectedItem();
            this.closeQuickPanel();
        };
        /**
         * 关闭当前弹出的快速窗口
         */
        p.closeQuickPanel = function () {
            if (!this.quickPanel)
                return;
            this.oldParent.addElementAt(this.quickPanel, this.oldPanelIndex);
            this.quickGroup.visible = false;
            this.separator.visible = false;
            this.oldParent = null;
            this.quickPanel = null;
        };
        d(p, "contentXML"
            /**
             * 窗口布局数据
             */
            ,function () {
                this._contentXML = this.createXMLByPanel(this._boxContainer.rootBox);
                return this._contentXML;
            }
            ,function (value) {
                this._contentXML = value;
                this.restoreList = [];
                //			this.statusBar.removeAllBoxElement();
                if (this.tabPanels) {
                    for (var i = 0; i < this.tabPanels.length; i++) {
                        this.tabPanels[i].parent && this.tabPanels[i].parent.removeChild(this.tabPanels[i]);
                    }
                }
                this.tabPanels = [];
                var box = this.createPanelByXML(value);
                this._boxContainer.removeElement(this._boxContainer.rootBox);
                this._boxContainer.addElement(box);
                this.invalidateMinimized();
            }
        );
        p.getContentXML = function (ignoreSize) {
            return this.createXMLByPanel(this._boxContainer.rootBox, ignoreSize);
        };
        p.createXMLByPanel = function (box, ignoreSize) {
            if (ignoreSize === void 0) { ignoreSize = false; }
            var value = egret.XML.parse("<BoxElement/>");
            if (egret.is(box, "eui.BoxElement")) {
                value.localName = "BoxElement";
                var firstElement = this.createXMLByPanel(box.firstElement, ignoreSize);
                value.children.push(firstElement);
                var secondElement = this.createXMLByPanel(box.secondElement, ignoreSize);
                value.children.push(secondElement);
                if (box["isVertical"])
                    value.attributes["isVertical"] = "true";
                if (ignoreSize) {
                    if (box["percentSize"] != 0.5)
                        value.attributes["percentSize"] = box.percentSize;
                }
            }
            else if (egret.is(box, "eui.TabGroup")) {
                value.localName = "TabGroup";
                var numElements = box.numElements;
                for (var i = 0; i < numElements; i++) {
                    var panel = box.getElementAt(i);
                    if (panel) {
                        var panelXML = this.createXMLByPanel(panel, ignoreSize);
                        value.children.push(panelXML);
                    }
                }
                if (box["selectedIndex"] >= 0)
                    value.attributes.selectedIndex = (box).selectedIndex;
            }
            else if (egret.is(box, "eui.BoxContainer")) {
                value.localName = "Document";
            }
            else if (egret.is(box, "eui.TabPanel")) {
                value.localName = "TabPanel";
                var content = egret.getQualifiedSuperclassName(box); //""//PanelUtil.getPanelType(box);
                value.attributes.title = (box).title;
                value.attributes.content = box.name; //这么写只是为了混淆时忽然这个关键字
            }
            if (egret.is(box, "eui.IBoxElement")) {
                if (!isNaN(box.width) && box.width != 0 && !ignoreSize)
                    value.attributes.width = box.width;
                if (!isNaN(box.height) && box.height != 0 && !ignoreSize)
                    value.attributes.height = box.height;
                if (box["minimized"])
                    value.attributes.minimized = "true";
                if (box.elementId != -1)
                    value.attributes.id = box.elementId;
            }
            return value;
        };
        /**
         * 从xml数据实例化窗口列表
         */
        p.createPanelByXML = function (value) {
            if (!value)
                return null;
            var clazz = this.classMap[value.localName];
            if (!clazz)
                return null;
            var box;
            if (this.instanceFunc) {
                box = this.instanceFunc(clazz);
            }
            else {
                box = new clazz();
            }
            if (egret.is(box, "eui.BoxElement")) {
                box.firstElement = this.createPanelByXML(value.children[0]);
                box.secondElement = this.createPanelByXML(value.children[1]);
                box.isVertical = value.attributes["isVertical"] == "true";
                if (value.attributes["percentSize"])
                    box.percentSize = Number(value.attributes["percentSize"]);
            }
            else if (egret.is(box, "eui.TabGroup")) {
                for (var xml in value.children) {
                    var panel = this.createPanelByXML(value.children[xml]);
                    if (!panel)
                        continue;
                    box.addElement(panel);
                }
                if (value.children && value.children.length == 0) {
                    box.visible = false;
                    box.includeInLayout = false;
                }
                if (value.attributes["selectedIndex"]) {
                    var index = Number(value.attributes["selectedIndex"]);
                    if (index >= 0 && index < box.numElements) {
                        box.selectedIndex = index;
                    }
                }
            }
            else if (egret.is(box, "eui.BoxContainer")) {
                if (this._boxContainer.documentBox) {
                    box = this._boxContainer.documentBox;
                }
                else {
                    this._boxContainer.documentBox = box;
                    box.isDoc = true;
                }
            }
            else if (egret.is(box, "eui.TabPanel")) {
                var panelName = value.attributes["content"];
                if (this.instancePanelFunc) {
                    var content = this.instancePanelFunc(panelName);
                }
                else {
                    var objclass = this.classMaps[panelName];
                    var content = new objclass();
                }
                this.tabPanels.push(content);
                if (egret.is(content, "eui.TabPanel")) {
                    box = content;
                }
                else if (content) {
                    box.addChild(content);
                }
                if (value.attributes.hasOwnProperty("title")) {
                    box.title = value.attributes["title"];
                }
                box.name = value.attributes["content"];
            }
            if (egret.is(box, "eui.IBoxElement")) {
                if (value.attributes.hasOwnProperty("id")) {
                    box.elementId = value.attributes["id"];
                }
                else {
                    box.elementId = eui.BoxElementIdUtil.newId();
                }
                if (value.attributes.hasOwnProperty("width"))
                    box.width = Number(value.attributes["width"]);
                if (value.attributes.hasOwnProperty("height"))
                    box.height = Number(value.attributes["height"]);
                ;
                box.minimized = value.attributes["minimized"] == "true";
            }
            return box;
        };
        /**
         * 刷新数据
         */
        p.destory = function () {
            this.removeEventListener(eui.DocumentEvent.SELECTED_DOC_CHANGE, this.onDocChanged, this);
            this.removeEventListener(eui.DocumentEvent.DOC_FOCUS_IN, this.onDocFocusIn, this);
            this.classMap = null;
            this.classMaps = null;
            if (!this.tabPanels || this.tabPanels.length == 0) {
                return;
            }
            for (var i = 0; i < this.tabPanels.length; i++) {
                this.tabPanels[i]["distory"]();
            }
        };
        /**
         * 根据窗口标题获取窗口引用
         */
        p.getPanelByTitle = function (title) {
            return this.findPanel(this._boxContainer.rootBox, title);
        };
        p.findPanel = function (box, title) {
            if (!box)
                return null;
            var panel;
            if (egret.is(box, "eui.BoxElement")) {
                panel = this.findPanel(box.firstElement, title);
                if (panel)
                    return panel;
                return this.findPanel(box.secondElement, title);
            }
            else if (egret.is(box, "eui.TabGroup")) {
                var length = box.numElements;
                for (var i = 0; i < length; i++) {
                    panel = (box.getElementAt(i));
                    if (panel.title == title)
                        return panel;
                }
            }
            return null;
        };
        /**
         * 添加一个文档窗口
         */
        p.addDocument = function (documentData) {
            var docGroup = this.documentGroup;
            if (!docGroup)
                return;
            docGroup.addDocument(documentData);
            docGroup.selectedDocument = documentData;
        };
        /**
         * 添加一个普通窗口
         */
        p.addTabPanel = function (panel) {
            if (!this._boxContainer)
                return;
            var tabGroup = this.findTabGroup(this._boxContainer.rootBox);
            if (!tabGroup) {
                tabGroup = new eui.TabGroup();
                this._boxContainer.addElement(tabGroup);
            }
            tabGroup.addElement(panel);
        };
        p.findTabGroup = function (box) {
            if (egret.is(box, "eui.TabGroup") && !box.minimized)
                return box;
            if (egret.is(box, "eui.BoxElement")) {
                var tabGroup = this.findTabGroup(box.firstElement);
                if (tabGroup)
                    return tabGroup;
                return this.findTabGroup(box.secondElement);
            }
            return null;
        };
        p.invalidateMinimized = function () {
            if (this.minimizedChanged)
                return;
            this.minimizedChanged = true;
            this.invalidateProperties();
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.minimizedChanged) {
                this.minimizedChanged = false;
                //				this.statusBar.removeAllBoxElement();
                this.restoreList = [];
                this.updateMinimized(this._boxContainer.rootBox);
            }
        };
        /**
         * 更新最小化窗口列表
         */
        p.updateMinimized = function (box) {
            if (box == null)
                return;
            if (box.minimized) {
                if (egret.is(box, "eui.TabGroup") || egret.is(box, "eui.BoxContainer")) {
                    //					this.statusBar.addBoxElement(box);
                    this.restoreList.push(box);
                }
            }
            if (egret.is(box, "eui.BoxElement")) {
                this.updateMinimized(box.firstElement);
                this.updateMinimized(box.secondElement);
            }
        };
        return PanelArea;
    })(eui.Group);
    eui.PanelArea = PanelArea;
    egret.registerClass(PanelArea,'eui.PanelArea');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * PopUpAnchor组件用于定位布局中的弹出控件或下拉控件
     * @author dom
     */
    var PopUpAnchor = (function (_super) {
        __extends(PopUpAnchor, _super);
        /**
         * 构造函数
         */
        function PopUpAnchor() {
            var _this = this;
            _super.call(this);
            /**
             * popUp已经弹出的标志
             */
            this.popUpIsDisplayed = false;
            /**
             * 自身已经添加到舞台标志
             */
            this.addedToStage = false;
            this._popUpHeightMatchesAnchorHeight = false;
            this._popUpWidthMatchesAnchorWidth = false;
            this._displayPopUp = false;
            this._popUpPosition = eui.PopUpPosition.TOP_LEFT;
            this._popUpPositionAdjust = eui.PopUpPosition.TOP_LEFT;
            //垂直方向 动画反转  默认从下向上 反转后是从下向上 
            this.vVeversal = false;
            //水平方向 动画反转  默认是从左向右 反转后是从右向左
            this.hVeversal = false;
            this._openDuration = 250;
            this._closeDuration = 150;
            this.inUpdating = false;
            this.animationUpdateHandler = function (animation) {
                _this.inUpdating = true;
                var rect;
                // if(this.vVeversal)
                // {
                //     rect = new egret.Rectangle(0,-(this.popUp.height - Math.round(animation.currentValue)),this.popUp.width,(this.popUp.height));
                // }
                // else
                {
                    rect = new egret.Rectangle(0, -Math.round(animation.currentValue), _this.popUp.width, _this.popUp.height);
                }
                _this.popUp.scrollRect = rect;
                _this.inUpdating = false;
            };
            this.inAnimation = false;
            this._animator = null;
            this.valueRange = 1;
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.addedToStageHandler, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.removedFromStageHandler, this);
        }
        var c=PopUpAnchor,p=c.prototype;
        d(p, "popUpHeightMatchesAnchorHeight"
            /**
             * 如果为 true，则将popUp控件的高度设置为 PopUpAnchor的高度值。
             */
            ,function () {
                return this._popUpHeightMatchesAnchorHeight;
            }
            ,function (value) {
                if (this._popUpHeightMatchesAnchorHeight == value)
                    return;
                this._popUpHeightMatchesAnchorHeight = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "popUpWidthMatchesAnchorWidth"
            /**
             * 如果为true，则将popUp控件的宽度设置为PopUpAnchor的宽度值。
             */
            ,function () {
                return this._popUpWidthMatchesAnchorWidth;
            }
            ,function (value) {
                if (this._popUpWidthMatchesAnchorWidth == value)
                    return;
                this._popUpWidthMatchesAnchorWidth = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "displayPopUp"
            /**
             * 如果为 true，则将popUp对象弹出。若为false，关闭弹出的popUp。
             */
            ,function () {
                return this._displayPopUp;
            }
            ,function (value) {
                if (this._displayPopUp == value)
                    return;
                this._displayPopUp = value;
                this.addOrRemovePopUp();
            }
        );
        d(p, "popUp"
            /**
             * 要弹出或移除的目标显示对象。
             */
            ,function () {
                return this._popUp;
            }
            ,function (value) {
                if (this._popUp == value)
                    return;
                this._popUp = value;
                this._popUp.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.mouseDownHandler, this, false, -50);
                this.dispatchEvent(new egret.Event("popUpChanged"));
            }
        );
        p.mouseDownHandler = function (e) {
            e.stopPropagation();
        };
        d(p, "popUpPosition"
            /**
            * popUp相对于PopUpAnchor的弹出位置。请使用PopUpPosition里定义的常量。默认值TOP_LEFT。
            * @see egret.core.PopUpPosition
            */
            ,function () {
                return this._popUpPosition;
            }
            ,function (value) {
                if (this._popUpPosition == value)
                    return;
                this._popUpPosition = value;
                this.invalidateDisplayList();
            }
        );
        /**
         * @inheritDoc
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            this.applyPopUpTransform(unscaledWidth, unscaledHeight);
        };
        /**
         * 手动刷新popUp的弹出位置和尺寸。
         */
        p.updatePopUpTransform = function () {
            this.applyPopUpTransform(this.width, this.height);
        };
        /**
         * 计算popUp的弹出位置
         */
        p.calculatePopUpPosition = function () {
            this.vVeversal = false;
            var registrationPoint = new egret.Point();
            this._popUpPositionAdjust = this._popUpPosition;
            switch (this._popUpPosition) {
                case eui.PopUpPosition.BELOW:
                    registrationPoint.x = 0;
                    registrationPoint.y = this.height;
                    break;
                case eui.PopUpPosition.ABOVE:
                    registrationPoint.x = 0;
                    var bound = new egret.Rectangle();
                    this.popUp.getLayoutBounds(bound);
                    registrationPoint.y = -bound.height;
                    break;
                case eui.PopUpPosition.LEFT:
                    var bound = new egret.Rectangle();
                    this.popUp.getLayoutBounds(bound);
                    registrationPoint.x = -bound.width;
                    registrationPoint.y = 0;
                    break;
                case eui.PopUpPosition.RIGHT:
                    registrationPoint.x = this.width;
                    registrationPoint.y = 0;
                    break;
                case eui.PopUpPosition.CENTER:
                    var bound = new egret.Rectangle();
                    this.popUp.getLayoutBounds(bound);
                    registrationPoint.x = (this.width - bound.width) * 0.5;
                    registrationPoint.y = (this.height - bound.height) * 0.5;
                    break;
                case eui.PopUpPosition.TOP_LEFT:
                    break;
            }
            registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y);
            registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y);
            var bound = new egret.Rectangle();
            this.popUp.getLayoutBounds(bound);
            if (registrationPoint.y + bound.height > this.stage.stageHeight && this._popUpPosition == eui.PopUpPosition.BELOW) {
                this._popUpPositionAdjust = eui.PopUpPosition.ABOVE;
                registrationPoint.x = 0;
                registrationPoint.y = -bound.height;
                registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y);
                registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y);
                this.vVeversal = true;
            }
            if (registrationPoint.x + bound.width > this.stage.stageWidth && this._popUpPosition == eui.PopUpPosition.BELOW) {
                this._popUpPositionAdjust = eui.PopUpPosition.BELOW;
                registrationPoint.y = this.height;
                registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y);
                registrationPoint.x = this.stage.stageWidth - bound.width;
                registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y);
            }
            if (registrationPoint.y - bound.height < 0 && this._popUpPosition == eui.PopUpPosition.ABOVE) {
                this._popUpPositionAdjust = eui.PopUpPosition.BELOW;
                registrationPoint.x = 0;
                registrationPoint.y = this.height;
                registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y);
                registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y);
                this.vVeversal = true;
            }
            if (registrationPoint.x + bound.width > this.stage.stageWidth && this._popUpPosition == eui.PopUpPosition.RIGHT) {
                this._popUpPositionAdjust = eui.PopUpPosition.LEFT;
                registrationPoint.x = -bound.width;
                registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y);
                registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y);
                registrationPoint.y = 0;
            }
            if (registrationPoint.x - bound.width < 0 && this._popUpPosition == eui.PopUpPosition.LEFT) {
                this._popUpPositionAdjust = eui.PopUpPosition.RIGHT;
                registrationPoint.x = this.width;
                registrationPoint.y = 0;
                registrationPoint = this.localToGlobal(registrationPoint.x, registrationPoint.y);
                registrationPoint = this.popUp.parent.globalToLocal(registrationPoint.x, registrationPoint.y);
            }
            return registrationPoint;
        };
        d(p, "openDuration"
            ,function () {
                return this._openDuration;
            }
            ,function (value) {
                this._openDuration = value;
            }
        );
        d(p, "closeDuration"
            ,function () {
                return this._closeDuration;
            }
            ,function (value) {
                this._closeDuration = value;
            }
        );
        p.addOrRemovePopUp = function () {
            var _self__ = this;
            if (!this.addedToStage || !this.popUp)
                return;
            if (this.popUp.parent == null && this.displayPopUp) {
                this.stage.addChild(this.popUp);
                this.popUpIsDisplayed = true;
                if (this.animator.isPlaying)
                    this.animator.stop();
                this.applyPopUpTransform(this.width, this.height);
                if (this._openDuration > 0)
                    this.startAnimation();
            }
            else if (this.popUp.parent != null && !this.displayPopUp) {
                this.removeAndResetPopUp();
            }
        };
        p.removeAndResetPopUp = function () {
            if (this.animator.isPlaying)
                this.animator.stop();
            this.popUpIsDisplayed = false;
            if (this._closeDuration > 0) {
                this.startAnimation();
            }
            else {
                if (this.popUp.parent)
                    this.popUp.parent.removeChild(this.popUp);
                this.popUp.x = this.popUp.y = 0;
            }
        };
        p.applyPopUpTransform = function (unscaledWidth, unscaledHeight) {
            if (!this.popUpIsDisplayed)
                return;
            if (this.popUpWidthMatchesAnchorWidth) {
                this.popUp.width = unscaledWidth;
            }
            if (this.popUpHeightMatchesAnchorHeight)
                this.popUp.height = unscaledHeight;
            if (this.popUp.validateNow)
                this.popUp.validateNow();
            var popUpPoint = this.calculatePopUpPosition();
            this.popUp.x = popUpPoint.x;
            this.popUp.y = popUpPoint.y;
        };
        p.animationEndHandler = function (animation) {
            this.inAnimation = false;
            if (egret.is(this.popUp, "eui.Component"))
                (this.popUp).enabled = true;
            (this.popUp).scrollRect = null;
            if (!this.popUpIsDisplayed) {
                if (this.popUp.parent)
                    this.popUp.parent.removeChild(this.popUp);
                this.popUp.x = this.popUp.y = 0;
            }
        };
        d(p, "animator"
            ,function () {
                if (this._animator)
                    return this._animator;
                this._animator = new eui.sys.Animation(this.animationUpdateHandler, this);
                this._animator.endFunction = this.animationEndHandler;
                return this._animator;
            }
        );
        p.startAnimation = function () {
            if (this.popUpIsDisplayed) {
                this.animator.duration = this._openDuration;
                if (this.vVeversal) {
                    this.animator.from = this.popUp.height;
                    this.animator.to = 0;
                }
                else {
                    this.animator.from = -this.popUp.height;
                    this.animator.to = 0;
                }
            }
            else {
                this.animator.duration = this._closeDuration;
                if (this.vVeversal) {
                    this.animator.from = 0;
                    this.animator.to = this.popUp.height;
                }
                else {
                    this.animator.from = 0;
                    this.animator.to = -this.popUp.height;
                }
            }
            this.animator.play();
        };
        p.addedToStageHandler = function (event) {
            this.addedToStage = true;
            egret.callLater(this.checkPopUpState, this);
        };
        p.checkPopUpState = function () {
            if (this.addedToStage) {
                this.addOrRemovePopUp();
            }
            else {
                if (this.popUp != null && (this.popUp).parent != null)
                    this.removeAndResetPopUp();
            }
        };
        p.removedFromStageHandler = function (event) {
            this.addedToStage = false;
            egret.callLater(this.checkPopUpState, this);
        };
        return PopUpAnchor;
    })(eui.Component);
    eui.PopUpAnchor = PopUpAnchor;
    egret.registerClass(PopUpAnchor,'eui.PopUpAnchor');
    eui.registerProperty(PopUpAnchor, "popUp", "eui.UIComponent", true);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ProgressBar control provides a visual representation of the progress of a task over time.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ProgressBarExample.ts
     */
    /**
     * @language zh_CN
     * ProgressBar 控件为随时间而变的任务进度提供了形象化的表示。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ProgressBarExample.ts
     */
    var ProgressBar = (function (_super) {
        __extends(ProgressBar, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ProgressBar() {
            _super.call(this);
            /**
             * @language en_US
             * this hightlight component of the progressbar.
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 进度高亮显示对象。
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.thumb = null;
            /**
             * @language en_US
             * the label of the progressbar.
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 进度条文本
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.labelDisplay = null;
            /**
             * @private
             */
            this._labelFunction = null;
            /**
             * @private
             */
            this._slideDuration = 500;
            /**
             * @private
             */
            this._direction = eui.Direction.LTR;
            /**
             * @private
             * 动画播放结束时要到达的value。
             */
            this.slideToValue = 0;
            /**
             * @private
             */
            this.animationValue = 0;
            this.animation = new eui.sys.Animation(this.animationUpdateHandler, this);
        }
        var c=ProgressBar,p=c.prototype;
        d(p, "labelFunction"
            /**
             * @language en_US
             * a text format callback function。example：
             * <code>labelFunction(value:Number,maximum:Number):String;</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 进度条文本格式化回调函数。示例：
             * <code>labelFunction(value:Number,maximum:Number):String;</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._labelFunction;
            }
            ,function (value) {
                if (this._labelFunction == value)
                    return;
                this._labelFunction = value;
                this.invalidateDisplayList();
            }
        );
        /**
         * @language en_US
         * Convert the current value to display text
         *
         * @param value the current value
         * @param maximum the maximum value
         *
         * @return a converted text
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 将当前value转换成文本
         *
         * @param value 当前值
         * @param maximum 最大值
         *
         * @return 转换后的文本
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.valueToLabel = function (value, maximum) {
            if (this.labelFunction != null) {
                return this._labelFunction(value, maximum);
            }
            return value + " / " + maximum;
        };
        d(p, "slideDuration"
            /**
             * @language en_US
             * Duration in milliseconds for a sliding animation
             * when the value changing. If the vlaue is 0, no animation will be done.
             *
             * @default 500
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * value改变时更新视图的缓动动画时间(毫秒为单位)。设置为0则不执行缓动。
             *
             * @default 500
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._slideDuration;
            }
            ,function (value) {
                value = +value | 0;
                if (this._slideDuration === value)
                    return;
                this._slideDuration = value;
                if (this.animation.isPlaying) {
                    this.animation.stop();
                    this.setValue(this.slideToValue);
                }
            }
        );
        d(p, "direction"
            /**
             * @language en_US
             * Direction in which the fill of the ProgressBar expands toward completion.
             * you should use the <code>Direction</code> class constants to set the property.
             *
             * @default Direction.LTR
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * ProgressBar 填充在逐步完成过程中扩展的方向。使用 <code>Direction</code> 类定义的常量。
             *
             * @default Direction.LTR
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._direction;
            }
            ,function (value) {
                if (this._direction == value)
                    return;
                this._direction = value;
                this.invalidateDisplayList();
            }
        );
        /**
         * @private
         *
         * @param newValue
         */
        p.$setValue = function (newValue) {
            if (this.value === newValue)
                return false;
            var values = this.$Range;
            var result = _super.prototype.$setValue.call(this, newValue);
            if (this._slideDuration > 0 && this.$stage) {
                this.validateProperties(); //最大值最小值发生改变时要立即应用，防止当前起始值不正确。
                var animation = this.animation;
                if (animation.isPlaying) {
                    this.animationValue = this.slideToValue;
                    this.invalidateDisplayList();
                    animation.stop();
                }
                this.slideToValue = this.nearestValidValue(newValue, values[7 /* snapInterval */]);
                if (this.slideToValue === this.animationValue)
                    return result;
                var duration = this._slideDuration *
                    (Math.abs(this.animationValue - this.slideToValue) / (values[0 /* maximum */] - values[2 /* minimum */]));
                animation.duration = duration === Infinity ? 0 : duration;
                animation.from = this.animationValue;
                animation.to = this.slideToValue;
                animation.play();
            }
            else {
                this.animationValue = this.value;
            }
            return result;
        };
        /**
         * @private
         * 动画播放更新数值
         */
        p.animationUpdateHandler = function (animation) {
            var values = this.$Range;
            var value = this.nearestValidValue(animation.currentValue, values[7 /* snapInterval */]);
            this.animationValue = Math.min(values[0 /* maximum */], Math.max(values[2 /* minimum */], value));
            this.invalidateDisplayList();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance === this.thumb) {
                this.thumb.addEventListener(egret.Event.RESIZE, this.onThumbResize, this);
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance === this.thumb) {
                this.thumb.removeEventListener(egret.Event.RESIZE, this.onThumbResize, this);
            }
        };
        /**
         * @private
         * thumb的位置或尺寸发生改变
         */
        p.onThumbResize = function (event) {
            this.updateSkinDisplayList();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateSkinDisplayList = function () {
            var currentValue = this.animation.isPlaying ? this.animationValue : this.value;
            var maxValue = this.maximum;
            var thumb = this.thumb;
            if (thumb) {
                var thumbWidth = thumb.width;
                var thumbHeight = thumb.height;
                var clipWidth = Math.round((currentValue / maxValue) * thumbWidth);
                if (clipWidth < 0 || clipWidth === Infinity)
                    clipWidth = 0;
                var clipHeight = Math.round((currentValue / maxValue) * thumbHeight);
                if (clipHeight < 0 || clipHeight === Infinity)
                    clipHeight = 0;
                var rect = thumb.$scrollRect;
                if (!rect) {
                    rect = egret.$TempRectangle;
                }
                rect.setTo(0, 0, thumbWidth, thumbHeight);
                var thumbPosX = thumb.x - rect.x;
                var thumbPosY = thumb.y - rect.y;
                switch (this._direction) {
                    case eui.Direction.LTR:
                        rect.width = clipWidth;
                        thumb.x = thumbPosX;
                        break;
                    case eui.Direction.RTL:
                        rect.width = clipWidth;
                        rect.x = thumbWidth - clipWidth;
                        thumb.x = rect.x;
                        break;
                    case eui.Direction.TTB:
                        rect.height = clipHeight;
                        thumb.y = thumbPosY;
                        break;
                    case eui.Direction.BTT:
                        rect.height = clipHeight;
                        rect.y = thumbHeight - clipHeight;
                        thumb.y = rect.y;
                        break;
                }
                thumb.scrollRect = rect;
            }
            if (this.labelDisplay) {
                this.labelDisplay.text = this.valueToLabel(currentValue, maxValue);
            }
        };
        return ProgressBar;
    })(eui.Range);
    eui.ProgressBar = ProgressBar;
    egret.registerClass(ProgressBar,'eui.ProgressBar');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @private
     * 存储根据groupName自动创建的RadioButtonGroup列表
     */
    var automaticRadioButtonGroups = {};
    /**
     * @language en_US
     * The RadioButton component allows the user make a single choice
     * within a set of mutually exclusive choices.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/RadioButtonExample.ts
     */
    /**
     * @language zh_CN
     * RadioButton 组件使用户可在一组互相排斥的选择中做出一种选择
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/RadioButtonExample.ts
     */
    var RadioButton = (function (_super) {
        __extends(RadioButton, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function RadioButton() {
            _super.call(this);
            /**
             * @private
             * 在RadioButtonGroup中的索引
             */
            this.$indexNumber = 0;
            /**
             * @private
             * 所属的RadioButtonGroup
             */
            this.$radioButtonGroup = null;
            /**
             * @private
             */
            this._group = null;
            /**
             * @private
             */
            this.groupChanged = false;
            /**
             * @private
             */
            this._groupName = "radioGroup";
            /**
             * @private
             */
            this._value = null;
            this.groupName = "radioGroup";
        }
        var c=RadioButton,p=c.prototype;
        d(p, "enabled"
            /**
             * @language en_US
             * The RadioButton component is enabled if the
             * RadioButtonGroup is enabled and the RadioButton itself is enabled.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 如果 RadioButtonGroup 启用且 RadioButton 本身也启用，则 RadioButton 组件启用。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (!this.$Component[3 /* enabled */]) {
                    return false;
                }
                return !this.$radioButtonGroup ||
                    this.$radioButtonGroup.$enabled;
            }
            ,function (value) {
                this.$setEnabled(value);
            }
        );
        d(p, "group"
            /**
             * @language en_US
             * The RadioButtonGroup component to which this RadioButton belongs.
             * If this property is not set,
             * a unique RadioButtonGroup is created automatically based on the groupName property.
             *
             * @see eui.RadioButton#groupName
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此 RadioButton 所属的 RadioButtonGroup 组件。
             * 若不设置此属性，则根据groupName属性自动创建一个唯一的RadioButtonGroup。
             *
             * @see eui.RadioButton#groupName
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (!this._group && this._groupName) {
                    var g = automaticRadioButtonGroups[this._groupName];
                    if (!g) {
                        g = new eui.RadioButtonGroup();
                        g.$name = this._groupName;
                        automaticRadioButtonGroups[this._groupName] = g;
                    }
                    this._group = g;
                }
                return this._group;
            }
            ,function (value) {
                if (this._group == value)
                    return;
                if (this.$radioButtonGroup)
                    this.$radioButtonGroup.$removeInstance(this, false);
                this._group = value;
                this._groupName = value ? this.group.$name : "radioGroup";
                this.groupChanged = true;
                this.invalidateProperties();
                this.invalidateDisplayList();
            }
        );
        d(p, "groupName"
            /**
             * @language en_US
             * Specifies the name of the group to which this RadioButton component belongs
             *
             * @default “radioGroup”
             *
             * @see eui.RadioButton#group
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * RadioButton 组件所属的组的名称
             *
             * @default “radioGroup”
             *
             * @see eui.RadioButton#group
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._groupName;
            }
            ,function (value) {
                if (!value || value == "")
                    return;
                this._groupName = value;
                if (this.$radioButtonGroup)
                    this.$radioButtonGroup.$removeInstance(this, false);
                this._group = null;
                this.groupChanged = true;
                this.invalidateProperties();
                this.invalidateDisplayList();
            }
        );
        /**
         * @private
         *
         * @param value
         */
        p.$setSelected = function (value) {
            var result = _super.prototype.$setSelected.call(this, value);
            this.invalidateDisplayList();
            return result;
        };
        d(p, "value"
            /**
             * @language en_US
             * Optional user-defined value
             * that is associated with a RadioButton component.
             *
             * @default null
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 与 RadioButton 组件关联的可选用户定义值。
             *
             * @default null
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._value;
            }
            ,function (value) {
                if (this._value == value)
                    return;
                this._value = value;
                if (this.$selected && this.group) {
                    eui.PropertyEvent.dispatchPropertyEvent(this.group, eui.PropertyEvent.PROPERTY_CHANGE, "selectedValue");
                }
            }
        );
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            if (this.groupChanged) {
                this.addToGroup();
                this.groupChanged = false;
            }
            _super.prototype.commitProperties.call(this);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            if (this.group) {
                if (this.$selected)
                    this._group.$setSelection(this, false);
                else if (this.group.selection == this)
                    this._group.$setSelection(null, false);
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.buttonReleased = function () {
            if (!this.enabled || this.selected)
                return;
            if (!this.$radioButtonGroup)
                this.addToGroup();
            _super.prototype.buttonReleased.call(this);
            this.group.$setSelection(this, true);
        };
        /**
         * @private
         * 添此单选按钮加到组
         */
        p.addToGroup = function () {
            var g = this.group;
            if (g)
                g.$addInstance(this);
            return g;
        };
        return RadioButton;
    })(eui.ToggleButton);
    eui.RadioButton = RadioButton;
    egret.registerClass(RadioButton,'eui.RadioButton');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var groupCount = 0;
    /**
     * @private
     * 显示列表深度排序
     */
    function breadthOrderCompare(a, b) {
        var aParent = a.parent;
        var bParent = b.parent;
        if (!aParent || !bParent)
            return 0;
        var aNestLevel = a.$nestLevel;
        var bNestLevel = b.$nestLevel;
        var aIndex = 0;
        var bIndex = 0;
        if (aParent == bParent) {
            aIndex = aParent.getChildIndex(a);
            bIndex = bParent.getChildIndex(b);
        }
        if (aNestLevel > bNestLevel || aIndex > bIndex)
            return 1;
        if (aNestLevel < bNestLevel || bIndex > aIndex)
            return -1;
        if (a == b)
            return 0;
        return breadthOrderCompare(aParent, bParent);
    }
    /**
     * @language en_US
     * The RadioButtonGroup component defines a group of RadioButton components
     * that act as a single mutually exclusive component; therefore,
     * a user can select only one RadioButton component at a time.
     *
     * @event egret.Event.CHANGE Dispatched when the value of the selected RadioButton component in
     * this group changes.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/RadioButtonGroupExample.ts
     */
    /**
     * @language zh_CN
     * RadioButtonGroup 组件定义一组 RadioButton 组件，这些组件相互排斥；因此，用户每次只能选择一个 RadioButton 组件
     *
     * @event egret.Event.CHANGE 此组中所选 RadioButton 组件的值更改时分派。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/RadioButtonGroupExample.ts
     */
    var RadioButtonGroup = (function (_super) {
        __extends(RadioButtonGroup, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function RadioButtonGroup() {
            _super.call(this);
            /**
             * @private
             * 组名
             */
            this.$name = null;
            /**
             * @private
             * 单选按钮列表
             */
            this.radioButtons = [];
            /**
             * @private
             */
            this.$enabled = true;
            /**
             * @private
             */
            this._selectedValue = null;
            /**
             * @private
             */
            this._selection = null;
            this.$name = "_radioButtonGroup" + groupCount++;
        }
        var c=RadioButtonGroup,p=c.prototype;
        /**
         * @language en_US
         * Returns the RadioButton component at the specified index.
         *
         * @param index The 0-based index of the RadioButton in the
         * RadioButtonGroup.
         *
         * @return The specified RadioButton component if index is between
         * 0 and <code>numRadioButtons</code> - 1.  Returns
         * <code>null</code> if the index is invalid.
         *
         * @see eui.RadioButtonGroup#numRadioButtons
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 返回指定索引处的 RadioButton 组件。
         *
         * @param index RadioButtonGroup 中的 RadioButton 的从零开始的索引。
         *
         * @return 当索引位于 0 和 <code>numRadioButtons</code> 之间时，指定的 RadioButton 组件为 1。
         * 如果索引无效，则返回 <code>null</code>。
         *
         * @see eui.RadioButtonGroup#numRadioButtons
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getRadioButtonAt = function (index) {
            return this.radioButtons[index];
        };
        d(p, "enabled"
            /**
             * @language en_US
             * Determines whether selection is allowed.  Note that the value returned
             * only reflects the value that was explicitly set on the
             * <code>RadioButtonGroup</code> and does not reflect any values explicitly
             * set on the individual RadioButtons.
             *
             * @default true
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 确定是否允许选择。请注意，返回的值仅反映对 <code>RadioButtonGroup</code> 显式设置的值，
             * 而不反映对各个 RadioButton 显式设置的任何值。
             *
             * @default true
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$enabled;
            }
            ,function (value) {
                value = !!value;
                if (this.$enabled === value)
                    return;
                this.$enabled = value;
                var buttons = this.radioButtons;
                var length = buttons.length;
                for (var i = 0; i < length; i++)
                    buttons[i].invalidateState();
            }
        );
        d(p, "numRadioButtons"
            /**
             * @language en_US
             * The number of RadioButtons that belong to this RadioButtonGroup.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             *  属于此 RadioButtonGroup 的 RadioButton 数。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.radioButtons.length;
            }
        );
        d(p, "selectedValue"
            /**
             * @language en_US
             * The <code>value</code> property of the selected
             * RadioButton component in the group, if it has been set,
             * otherwise, the <code>label</code> property of the selected RadioButton.
             * If no RadioButton is selected, this property is <code>null</code>.
             *
             * <p>If you set <code>selectedValue</code>, selects the
             * first RadioButton component whose <code>value</code> or
             * <code>label</code> property matches this value.</p>
             *
             * @default null
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 组中所选 RadioButton 组件的 <code>value</code> 属性（如果未设置），
             * 否则为所选 RadioButton 组件的 <code>label</code> 属性。
             * 如果未选择任何 RadioButton，则此属性为 <code>null</code>。
             *
             * <p>如果设置了 <code>selectedValue</code>，则会选择 <code>value</code> 或 <code>label</code> 属性
             * 与此值匹配的第一个 RadioButton 组件。</p>
             *
             * @default null
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.selection) {
                    return this.selection.value != null ?
                        this.selection.value :
                        this.selection.label;
                }
                return null;
            }
            ,function (value) {
                this._selectedValue = value;
                if (value == null) {
                    this.$setSelection(null, false);
                    return;
                }
                var n = this.numRadioButtons;
                for (var i = 0; i < n; i++) {
                    var radioButton = this.radioButtons[i];
                    if (radioButton.value == value ||
                        radioButton.label == value) {
                        this.changeSelection(i, false);
                        this._selectedValue = null;
                        eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedValue");
                        break;
                    }
                }
            }
        );
        d(p, "selection"
            /**
             * @language en_US
             * Contains a reference to the currently selected
             * RadioButton component in the group.This property is valid only
             * when the target RadioButton is displayed on the display list
             *
             * @default null
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 当前被选中的单选按钮引用。此属性仅当目标RadioButton在显示列表时有效。
             *
             * @default null
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._selection;
            }
            ,function (value) {
                if (this._selection == value)
                    return;
                this.$setSelection(value, false);
            }
        );
        /**
         * @private
         * 添加单选按钮到组内
         */
        p.$addInstance = function (instance) {
            instance.addEventListener(egret.Event.REMOVED, this.removedHandler, this);
            var buttons = this.radioButtons;
            buttons.push(instance);
            buttons.sort(breadthOrderCompare);
            var length = buttons.length;
            for (var i = 0; i < length; i++) {
                buttons[i].$indexNumber = i;
            }
            if (this._selectedValue)
                this.selectedValue = this._selectedValue;
            if (instance.selected == true)
                this.selection = instance;
            instance.$radioButtonGroup = this;
            instance.invalidateState();
        };
        /**
         * @private
         * 从组里移除单选按钮
         */
        p.$removeInstance = function (instance, addListener) {
            if (instance) {
                var foundInstance = false;
                var buttons = this.radioButtons;
                var length = buttons.length;
                for (var i = 0; i < length; i++) {
                    var rb = buttons[i];
                    if (foundInstance) {
                        rb.$indexNumber = rb.$indexNumber - 1;
                    }
                    else if (rb == instance) {
                        if (addListener)
                            instance.addEventListener(egret.Event.ADDED, this.addedHandler, this);
                        if (instance == this._selection)
                            this._selection = null;
                        instance.$radioButtonGroup = null;
                        instance.invalidateState();
                        this.radioButtons.splice(i, 1);
                        foundInstance = true;
                        i--;
                        length--;
                    }
                }
            }
        };
        /**
         * @private
         * 设置选中的单选按钮
         */
        p.$setSelection = function (value, fireChange) {
            if (this._selection == value)
                return false;
            if (!value) {
                if (this._selection) {
                    this._selection.selected = false;
                    this._selection = null;
                    if (fireChange)
                        this.dispatchEventWith(egret.Event.CHANGE);
                }
            }
            else {
                var n = this.numRadioButtons;
                for (var i = 0; i < n; i++) {
                    if (value == this.getRadioButtonAt(i)) {
                        this.changeSelection(i, fireChange);
                        break;
                    }
                }
            }
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedValue");
            return true;
        };
        /**
         * @private
         * 改变选中项
         */
        p.changeSelection = function (index, fireChange) {
            var rb = this.getRadioButtonAt(index);
            if (rb && rb != this._selection) {
                if (this._selection)
                    this._selection.selected = false;
                this._selection = rb;
                this._selection.selected = true;
                if (fireChange)
                    this.dispatchEventWith(egret.Event.CHANGE);
            }
        };
        /**
         * @private
         * 单选按钮添加到显示列表
         */
        p.addedHandler = function (event) {
            var rb = event.target;
            if (rb) {
                rb.removeEventListener(egret.Event.ADDED, this.addedHandler, this);
                this.$addInstance(rb);
            }
        };
        /**
         * @private
         * 单选按钮从显示列表移除
         */
        p.removedHandler = function (event) {
            var rb = event.target;
            if (rb) {
                rb.removeEventListener(egret.Event.REMOVED, this.removedHandler, this);
                this.$removeInstance(rb, true);
            }
        };
        return RadioButtonGroup;
    })(egret.EventDispatcher);
    eui.RadioButtonGroup = RadioButtonGroup;
    egret.registerClass(RadioButtonGroup,'eui.RadioButtonGroup');
    eui.registerBindable(RadioButtonGroup.prototype, "selectedValue");
    if (DEBUG) {
        egret.$markReadOnly(RadioButtonGroup, "numRadioButtons");
    }
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var scrollerThrowEvent;
    /**
     * @language en_US
     * The Scroller component displays a single scrollable component,
     * called a viewport, and horizontal and vertical scroll bars.
     * The viewport must implement the IViewport interface.
     * <p>The Group components implement the IViewport interface
     * and can be used as the children of the Scroller control,
     * as the following example shows:</p>
     * <pre>
     *       <s:Scroller width="100" height="100">
     *           <s:Group>
     *               <s:Image width="300" height="400" source="assets/logo.jpg"/>
     *           </s:Group>
     *       </s:Scroller>
     * </pre>
     * <p>The size of the Image control is set larger than that of its parent Group container.
     * By default, the child extends past the boundaries of the parent container.
     * Rather than allow the child to extend past the boundaries of the parent container,
     * the Scroller specifies to clip the child to the boundaries and display scroll bars.</p>
     *
     * @event eui.UIEvent.CHANGE_START Dispatched when the scroll position is going to change
     * @event eui.UIEvent.CHANGE_END Dispatched when the scroll position changed complete
     * @event egret.Event.CHANGE Dispatched when the scroll position is changing
     * @event egret.TouchEvent.TOUCH_CANCEL canceled the touch
     *
     * @defaultProperty viewport
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ScrollerExample.ts
     */
    /**
     * @language zh_CN
     * Scroller 组件显示一个称为视域的单个可滚动组件，以及水平滚动条和垂直滚动条。该视域必须实现 IViewport 接口。
     * <p>Group 组件实现 IViewport 接口，且可以用作 Scroller 控件的子代，如下例所示：</p>
     * <pre>
     *       <s:Scroller width="100" height="100">
     *           <s:Group>
     *               <s:Image width="300" height="400" source="assets/logo.jpg"/>
     *           </s:Group>
     *       </s:Scroller>
     * </pre>
     * Image 控件的大小比其父 Group 容器设置得大。默认情况下，子代超过父容器的边界。
     * Scroller 会指定将子代剪切到边界并显示滚动条，而不是让子代超过父容器的边界。
     *
     * @event eui.UIEvent.CHANGE_START 滚动位置改变开始
     * @event eui.UIEvent.CHANGE_END 滚动位置改变结束
     * @event egret.Event.CHANGE 滚动位置改变的时候
     * @event egret.TouchEvent.TOUCH_CANCEL 取消触摸事件
     *
     * @defaultProperty viewport
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ScrollerExample.ts
     */
    var Scroller = (function (_super) {
        __extends(Scroller, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Scroller() {
            _super.call(this);
            this.$bounces = true;
            /**
             * @language en_US
             * the horizontal scroll bar
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 水平滚动条
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.horizontalScrollBar = null;
            /**
             * @language en_US
             * the vertical scroll bar
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 垂直滚动条
             *
             * @skinPart
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.verticalScrollBar = null;
            this._enableMouseDrag = true;
            var touchScrollH = new eui.sys.TouchScroll(this.horizontalUpdateHandler, this.horizontalEndHandler, this);
            var touchScrollV = new eui.sys.TouchScroll(this.verticalUpdateHandler, this.verticalEndHanlder, this);
            this.$Scroller = {
                0: "auto",
                1: "auto",
                2: null,
                3: 0,
                4: 0,
                5: false,
                6: false,
                7: false,
                8: touchScrollH,
                9: touchScrollV,
                10: null,
                11: false,
                12: false,
                13: false //auto hide
            };
        }
        var c=Scroller,p=c.prototype;
        d(p, "bounces"
            /**
             * @language en_US
             * Whether to enable rebound, rebound When enabled, ScrollView contents allowed to continue to drag the border after arriving at the end user drag operation, and then bounce back boundary position
             * @default true
             * @version Egret 2.5.6
             */
            /**
             * @language zh_CN
             * 是否启用回弹，当启用回弹后，ScrollView中内容在到达边界后允许继续拖动，在用户拖动操作结束后，再反弹回边界位置
             * @default true
             * @version Egret 2.5.6
             */
            ,function () {
                return this.$bounces;
            }
            ,function (value) {
                this.$bounces = !!value;
                var touchScrollH = this.$Scroller[8 /* touchScrollH */];
                if (touchScrollH) {
                    touchScrollH.$bounces = this.$bounces;
                }
                var touchScrollV = this.$Scroller[9 /* touchScrollV */];
                if (touchScrollV) {
                    touchScrollV.$bounces = this.$bounces;
                }
            }
        );
        d(p, "autoHideScrollBar"
            ,function () {
                return this.$Scroller[13 /* autoHideScrollBar */];
            }
            ,function (value) {
                value = !!value;
                this.$Scroller[13 /* autoHideScrollBar */] = value;
                this.updateScrollBar();
            }
        );
        d(p, "throwSpeed"
            ,function () {
                return this.$Scroller[8 /* touchScrollH */].$scrollFactor;
            }
            /**
             * @language en_US
             * Adjust the speed to get out of the slide end.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 调节滑动结束时滚出的速度。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (val) {
                val = +val;
                val = val < 0.01 ? 0.01 : val;
                this.$Scroller[8 /* touchScrollH */].$scrollFactor = val;
                this.$Scroller[9 /* touchScrollV */].$scrollFactor = val;
            }
        );
        /**
         * @private
         */
        p.$getThrowInfo = function (currentPos, toPos) {
            if (!scrollerThrowEvent) {
                scrollerThrowEvent = new eui.ScrollerThrowEvent(eui.ScrollerThrowEvent.THROW, false, false, currentPos, toPos);
            }
            else {
                scrollerThrowEvent.currentPos = currentPos;
                scrollerThrowEvent.toPos = toPos;
            }
            return scrollerThrowEvent;
        };
        d(p, "scrollPolicyV"
            /**
             * @language en_US
             * Indicates under what conditions the scroller can be moved and the vertical scroll bar is displayed.
             * <p><code>ScrollPolicy.ON</code> - the scroller can be moved, and the scroll bar is displayed when it's move.</p>
             * <p><code>ScrollPolicy.OFF</code> - the scroller can not be moved, the scroll bar is never displayed.</p>
             * <p><code>ScrollPolicy.AUTO</code> - the scroller can not be moved when
             *  the viewport's contentHeight is larger than its height. the scroll bar is displayed when it's move.
             *
             * @default ScrollPolicy.AUTO
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 指示在哪些条件可以滚动并且显示垂直滑动条。
             * <p><code>ScrollPolicy.ON</code> - 可以滚动，滚动时显示滚动条。</p>
             * <p><code>ScrollPolicy.OFF</code> - 不可以滚动并且不显示滚动条。</p>
             * <p><code>ScrollPolicy.AUTO</code> - 当视域的 contentHeight 大于其自身的高度时可以滚动，滚动时显示滚动条。</p>
             *
             * @default ScrollPolicy.AUTO
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Scroller[0 /* scrollPolicyV */];
            }
            ,function (value) {
                var values = this.$Scroller;
                if (values[0 /* scrollPolicyV */] == value) {
                    return;
                }
                values[0 /* scrollPolicyV */] = value;
                this.checkScrollPolicy();
            }
        );
        d(p, "scrollPolicyH"
            /**
             * @language en_US
             * Indicates under what conditions the scroller can be moved and the horizontal scroll bar is displayed.
             * <p><code>ScrollPolicy.ON</code> - the scroller can be moved, and the scroll bar is displayed when it's move.</p>
             * <p><code>ScrollPolicy.OFF</code> - the scroller can not be moved, the scroll bar is never displayed.</p>
             * <p><code>ScrollPolicy.AUTO</code> - the can not be moved  when
             *  the viewport's contentWidth is larger than its width. the scroll bar is displayed when it's move.
             *
             * @default ScrollPolicy.AUTO
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 指示在哪些条件下可以滚动并且显示水平滑动条。
             * <p><code>ScrollPolicy.ON</code> - 可以滚动，滚动时显示滚动条。</p>
             * <p><code>ScrollPolicy.OFF</code> - 不可以滚动并且不显示滚动条。</p>
             * <p><code>ScrollPolicy.AUTO</code> - 当视域的 contentWidth 大于其自身的宽度时可以滚动，滚动时显示滚动条。</p>
             *
             * @default ScrollPolicy.AUTO
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Scroller[1 /* scrollPolicyH */];
            }
            ,function (value) {
                var values = this.$Scroller;
                if (values[1 /* scrollPolicyH */] == value) {
                    return;
                }
                values[1 /* scrollPolicyH */] = value;
                this.checkScrollPolicy();
            }
        );
        d(p, "viewport"
            /**
             * @language en_US
             * The viewport component to be scrolled.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 要滚动的视域组件。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$Scroller[10 /* viewport */];
            }
            ,function (value) {
                var values = this.$Scroller;
                if (value == values[10 /* viewport */])
                    return;
                this.uninstallViewport();
                values[10 /* viewport */] = value;
                values[11 /* viewprotRemovedEvent */] = false;
                this.installViewport();
            }
        );
        d(p, "enableMouseDrag"
            /** 启动点击viewport 对象拖动 ，默认true 表示起用，false 表示不启用 */
            ,function () {
                return this._enableMouseDrag;
            }
            ,function (value) {
                this._enableMouseDrag = value;
            }
        );
        /**
         * @private
         * 安装并初始化视域组件
         */
        p.installViewport = function () {
            var viewport = this.viewport;
            if (viewport) {
                this.addChildAt(viewport, 0);
                viewport.scrollEnabled = true;
                if (this.enableMouseDrag) {
                    viewport.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBeginCapture, this, true);
                    viewport.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEndCapture, this, true);
                }
                viewport.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapCapture, this, true);
                viewport.addEventListener(egret.Event.REMOVED, this.onViewPortRemove, this);
                viewport.addEventListener(egret.MouseEvent.MOUSE_WHEEL, this.onMouseWheel, this);
            }
            if (this.horizontalScrollBar) {
                this.horizontalScrollBar.viewport = viewport;
            }
            if (this.verticalScrollBar) {
                this.verticalScrollBar.viewport = viewport;
            }
        };
        /**
         * @private
         * 卸载视域组件
         */
        p.uninstallViewport = function () {
            if (this.horizontalScrollBar) {
                this.horizontalScrollBar.viewport = null;
            }
            if (this.verticalScrollBar) {
                this.verticalScrollBar.viewport = null;
            }
            var viewport = this.viewport;
            if (viewport) {
                viewport.scrollEnabled = false;
                viewport.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBeginCapture, this, true);
                viewport.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEndCapture, this, true);
                viewport.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapCapture, this, true);
                viewport.removeEventListener(egret.Event.REMOVED, this.onViewPortRemove, this);
                viewport.removeEventListener(egret.MouseEvent.MOUSE_WHEEL, this.onMouseWheel, this);
                if (this.$Scroller[11 /* viewprotRemovedEvent */] == false) {
                    this.removeChild(viewport);
                }
            }
        };
        p.onViewPortRemove = function (event) {
            if (event.target == this.viewport) {
                this.$Scroller[11 /* viewprotRemovedEvent */] = true;
                this.viewport = null;
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setSkin = function (skin) {
            _super.prototype.setSkin.call(this, skin);
            var viewport = this.viewport;
            if (viewport) {
                this.addChildAt(viewport, 0);
            }
        };
        /**
         * @private
         * @param event
         */
        p.onTouchBeginCapture = function (event) {
            if (!this.enableMouseDrag)
                return;
            this.$Scroller[12 /* touchCancle */] = false;
            var canScroll = this.checkScrollPolicy();
            if (!canScroll) {
                return;
            }
            var target = event.target;
            while (target && target != this) {
                if (target instanceof Scroller) {
                    canScroll = target.checkScrollPolicy();
                    if (canScroll) {
                        return;
                    }
                }
                target = target.$parent;
            }
            this.onTouchBegin(event);
        };
        /**
         * @private
         * @param event
         */
        p.onTouchEndCapture = function (event) {
            if (this.$Scroller[12 /* touchCancle */]) {
                event.stopPropagation();
                this.onTouchEnd(event);
            }
        };
        /**
         * @private
         * @param event
         */
        p.onTouchTapCapture = function (event) {
            if (this.$Scroller[12 /* touchCancle */]) {
                event.stopPropagation();
            }
        };
        /**
         * @private
         * 检查当前滚动策略，若有一个方向可以滚动，返回true。
         */
        p.checkScrollPolicy = function () {
            var values = this.$Scroller;
            var viewport = values[10 /* viewport */];
            if (!viewport) {
                return false;
            }
            var hCanScroll;
            var uiValues = viewport.$UIComponent;
            switch (values[1 /* scrollPolicyH */]) {
                case "auto":
                    if (viewport.contentWidth > uiValues[10 /* width */]) {
                        hCanScroll = true;
                    }
                    else {
                        hCanScroll = false;
                    }
                    break;
                case "on":
                    hCanScroll = true;
                    break;
                case "off":
                    hCanScroll = false;
                    break;
            }
            values[6 /* horizontalCanScroll */] = hCanScroll;
            var vCanScroll;
            switch (values[0 /* scrollPolicyV */]) {
                case "auto":
                    if (viewport.contentHeight > uiValues[11 /* height */]) {
                        vCanScroll = true;
                    }
                    else {
                        vCanScroll = false;
                    }
                    break;
                case "on":
                    vCanScroll = true;
                    break;
                case "off":
                    vCanScroll = false;
                    break;
            }
            values[7 /* verticalCanScroll */] = vCanScroll;
            return hCanScroll || vCanScroll;
        };
        /**
         * @private
         *
         * @param event
         */
        p.onTouchBegin = function (event) {
            if (event.isDefaultPrevented()) {
                return;
            }
            if (!this.checkScrollPolicy()) {
                return;
            }
            var values = this.$Scroller;
            values[9 /* touchScrollV */].stop();
            values[8 /* touchScrollH */].stop();
            var viewport = values[10 /* viewport */];
            values[3 /* touchStartX */] = event.$stageX;
            values[4 /* touchStartY */] = event.$stageY;
            var uiValues = viewport.$UIComponent;
            if (values[6 /* horizontalCanScroll */]) {
                values[8 /* touchScrollH */].start(event.$stageX, viewport.scrollH, viewport.contentWidth - uiValues[10 /* width */]);
            }
            if (values[7 /* verticalCanScroll */]) {
                values[9 /* touchScrollV */].start(event.$stageY, viewport.scrollV, viewport.contentHeight - uiValues[11 /* height */]);
            }
            var stage = this.$stage;
            stage.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            stage.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
        };
        p.onMouseWheel = function (event) {
            if (event.isDefaultPrevented()) {
                return;
            }
            if (!this.checkScrollPolicy()) {
                return;
            }
            var values = this.$Scroller;
            values[9 /* touchScrollV */].stop();
            values[8 /* touchScrollH */].stop();
            var viewport = values[10 /* viewport */];
            var horizontalBar = this.horizontalScrollBar;
            var verticalBar = this.verticalScrollBar;
            var uiValues = viewport.$UIComponent;
            if (values[6 /* horizontalCanScroll */]) {
                var deltaX = this.getDeltaX(event);
                var targetX = viewport.scrollH - deltaX;
                targetX = Math.max(targetX, 0);
                targetX = Math.min(targetX, viewport.contentWidth - uiValues[10 /* width */]);
                this.horizontalUpdateHandler(targetX);
                if (horizontalBar) {
                    horizontalBar.visible = true;
                }
            }
            if (values[7 /* verticalCanScroll */]) {
                var deltaY = this.getDeltaY(event);
                var targetY = viewport.scrollV - deltaY;
                targetY = Math.max(targetY, 0);
                targetY = Math.min(targetY, viewport.contentHeight - uiValues[11 /* height */]);
                this.verticalUpdateHandler(targetY);
                if (verticalBar) {
                    verticalBar.visible = true;
                }
            }
            this.onChangeEnd();
        };
        p.getDeltaX = function (event) {
            return event.deltaX;
        };
        p.getDeltaY = function (event) {
            return event.delta;
        };
        /**
         * @private
         *
         * @param event
         */
        p.onTouchMove = function (event) {
            var values = this.$Scroller;
            if (!values[5 /* touchMoved */]) {
                if (Math.abs(values[3 /* touchStartX */] - event.$stageX) < Scroller.scrollThreshold &&
                    Math.abs(values[4 /* touchStartY */] - event.$stageY) < Scroller.scrollThreshold) {
                    return;
                }
                values[12 /* touchCancle */] = true;
                this.dispatchCancleEvent(event);
                values[5 /* touchMoved */] = true;
                var horizontalBar = this.horizontalScrollBar;
                var verticalBar = this.verticalScrollBar;
                if (horizontalBar && values[6 /* horizontalCanScroll */]) {
                    horizontalBar.visible = true;
                }
                if (verticalBar && values[7 /* verticalCanScroll */]) {
                    verticalBar.visible = true;
                }
                if (values[2 /* autoHideTimer */]) {
                    values[2 /* autoHideTimer */].reset();
                }
                eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_START);
            }
            var viewport = values[10 /* viewport */];
            var uiValues = viewport.$UIComponent;
            if (values[6 /* horizontalCanScroll */]) {
                values[8 /* touchScrollH */].update(event.$stageX, viewport.contentWidth - uiValues[10 /* width */]);
            }
            if (values[7 /* verticalCanScroll */]) {
                values[9 /* touchScrollV */].update(event.$stageY, viewport.contentHeight - uiValues[11 /* height */]);
            }
        };
        /**
         * @private
         * @param event
         */
        p.dispatchCancleEvent = function (event) {
            var viewport = this.$Scroller[10 /* viewport */];
            if (!viewport) {
                return;
            }
            var cancleEvent = new egret.TouchEvent(egret.TouchEvent.TOUCH_CANCEL, event.bubbles, event.cancelable);
            var target = event.$target;
            var list = this.$getPropagationList(target);
            var length = list.length;
            var targetIndex = list.length * 0.5;
            var startIndex = -1;
            for (var i = 0; i < length; i++) {
                if (list[i] === viewport) {
                    startIndex = i;
                    break;
                }
            }
            list.splice(0, startIndex + 1);
            targetIndex -= startIndex + 1;
            //            console.log()
            this.$dispatchPropagationEvent(cancleEvent, list, targetIndex);
            egret.Event.release(cancleEvent);
        };
        /**
         * @private
         * @param event
         */
        p.onTouchEnd = function (event) {
            var values = this.$Scroller;
            values[5 /* touchMoved */] = false;
            var stage = event.$currentTarget;
            stage.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            stage.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            var viewport = values[10 /* viewport */];
            var uiValues = viewport.$UIComponent;
            if (values[8 /* touchScrollH */].isStarted()) {
                values[8 /* touchScrollH */].finish(viewport.scrollH, viewport.contentWidth - uiValues[10 /* width */]);
            }
            if (values[9 /* touchScrollV */].isStarted()) {
                values[9 /* touchScrollV */].finish(viewport.scrollV, viewport.contentHeight - uiValues[11 /* height */]);
            }
        };
        /**
         * @private
         *
         * @param scrollPos
         */
        p.horizontalUpdateHandler = function (scrollPos) {
            this.dispatchEventWith(egret.Event.CHANGE);
            this.$Scroller[10 /* viewport */].scrollH = scrollPos;
        };
        /**
         * @private
         *
         * @param scrollPos
         */
        p.verticalUpdateHandler = function (scrollPos) {
            this.dispatchEventWith(egret.Event.CHANGE);
            this.$Scroller[10 /* viewport */].scrollV = scrollPos;
        };
        /**
         * @private
         *
         */
        p.horizontalEndHandler = function () {
            if (!this.$Scroller[9 /* touchScrollV */].isPlaying()) {
                this.onChangeEnd();
            }
        };
        /**
         * @private
         *
         */
        p.verticalEndHanlder = function () {
            if (!this.$Scroller[8 /* touchScrollH */].isPlaying()) {
                this.onChangeEnd();
            }
        };
        /**
         * @private
         *
         */
        p.onChangeEnd = function () {
            this.updateScrollBar();
            eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CHANGE_END);
        };
        p.updateScrollBar = function () {
            var values = this.$Scroller;
            var horizontalBar = this.horizontalScrollBar;
            var verticalBar = this.verticalScrollBar;
            if (values[13 /* autoHideScrollBar */] && (horizontalBar && horizontalBar.visible || verticalBar && verticalBar.visible)) {
                if (!values[2 /* autoHideTimer */]) {
                    values[2 /* autoHideTimer */] = new egret.Timer(200, 1);
                    values[2 /* autoHideTimer */].addEventListener(egret.TimerEvent.TIMER_COMPLETE, this.onAutoHideTimer, this);
                }
                values[2 /* autoHideTimer */].reset();
                values[2 /* autoHideTimer */].start();
            }
            if (!values[13 /* autoHideScrollBar */]) {
                if (horizontalBar && values[6 /* horizontalCanScroll */])
                    horizontalBar.visible = true;
                if (verticalBar && values[7 /* verticalCanScroll */])
                    verticalBar.visible = true;
            }
        };
        /**
         * @private
         *
         * @param event
         */
        p.onAutoHideTimer = function (event) {
            var horizontalBar = this.horizontalScrollBar;
            var verticalBar = this.verticalScrollBar;
            if (horizontalBar) {
                horizontalBar.visible = false;
            }
            if (verticalBar) {
                verticalBar.visible = false;
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            var viewport = this.viewport;
            if (viewport) {
                //必须先调用setLayoutBoundsSize()，因为尺寸改变会影响布局位置。
                viewport.setLayoutBoundsSize(unscaledWidth, unscaledHeight);
                viewport.setLayoutBoundsPosition(0, 0);
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            var values = this.$Scroller;
            if (instance == this.horizontalScrollBar) {
                this.horizontalScrollBar.viewport = this.viewport;
                this.horizontalScrollBar.visible = false;
                this.horizontalScrollBar.addEventListener(eui.UIEvent.CHANGE_START, this.onHScrollBarChange, this);
                this.horizontalScrollBar.addEventListener(eui.UIEvent.CHANGE, this.onHScrollBarChange, this);
            }
            else if (instance == this.verticalScrollBar) {
                this.verticalScrollBar.viewport = this.viewport;
                this.verticalScrollBar.visible = false;
                this.verticalScrollBar.addEventListener(eui.UIEvent.CHANGE_START, this.onVScrollBarChange, this);
                this.verticalScrollBar.addEventListener(eui.UIEvent.CHANGE, this.onVScrollBarChange, this);
            }
        };
        p.onHScrollBarChange = function () {
            var values = this.$Scroller;
            values[8 /* touchScrollH */].stop();
            var vp = this.viewport;
            var hposition = vp.scrollH;
            hposition = Math.max(hposition, 0);
            hposition = Math.min(hposition, vp.contentWidth - vp.width);
            if (vp.scrollH != hposition)
                vp.scrollH = hposition;
        };
        p.onVScrollBarChange = function () {
            var values = this.$Scroller;
            values[9 /* touchScrollV */].stop();
            var vp = this.viewport;
            var hposition = vp.scrollH;
            hposition = Math.max(hposition, 0);
            hposition = Math.min(hposition, vp.contentWidth - vp.width);
            if (vp.scrollH != hposition)
                vp.scrollH = hposition;
        };
        /**
         * @language en_US
         * The threshold value(in pixels) trigger the rolling.
         * when the touch points deviate from the initial touch point than this value will trigger the rolling.
         *
         * @default 5
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 开始触发滚动的阈值（以像素为单位），当触摸点偏离初始触摸点的距离超过这个值时才会触发滚动。
         *
         * @default 5
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Scroller.scrollThreshold = 5;
        return Scroller;
    })(eui.Component);
    eui.Scroller = Scroller;
    egret.registerClass(Scroller,'eui.Scroller');
    eui.registerProperty(Scroller, "viewport", "eui.IViewport", true);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The Skin class defines the base class for all skins.
     * You typically don't need to manually create the instance of this class.
     * It can be created by resolving a EXML.<p/>
     *
     * @example You typically write the skin classes in EXML, as the followiong example shows:<p/>
     * <pre>
     *      <?xml version="1.0" encoding="utf-8"?>
     *      <s:Skin xmlns:s="http://ns.egret.com/eui" xmlns:w="http://ns.egret.com/wing">
     *          <states>
     *              <!-- Specify the states controlled by this skin. -->
     *          </states>
     *          <!-- Define skin. -->
     *      </s:Skin>
     * </pre>
     *
     * @defaultProperty elementsContent
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/SkinExample.ts
     */
    /**
     * @language zh_CN
     * 皮肤基类。通常情况下，您不需要手动创建这个类的实例，而是通过解析EXML文件后自动生成。<p/>
     *
     * @example 通常您可以按照如下方式写EXML代码：<p/>
     * <pre>
     *      <?xml version="1.0" encoding="utf-8"?>
     *      <s:Skin xmlns:s="http://ns.egret.com/eui" xmlns:w="http://ns.egret.com/wing">
     *          <states>
     *              <!-- Specify the states controlled by this skin. -->
     *          </states>
     *          <!-- Define skin. -->
     *      </s:Skin>
     * </pre>
     *
     * @defaultProperty elementsContent
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/SkinExample.ts
     */
    var Skin = (function (_super) {
        __extends(Skin, _super);
        function Skin() {
            _super.apply(this, arguments);
            /**
             * @language en_US
             * The maximum recommended width of the component to be considered.
             * This property can only affect measure result of host component.
             *
             * @default 100000
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤的最大宽度。仅影响主机组件的测量结果。
             *
             * @default 100000
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.maxWidth = 100000;
            /**
             * @language en_US
             * The minimum recommended width of the component to be considered.
             * This property can only affect measure result of host component.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤的最小宽度,此属性设置为大于maxWidth的值时无效。仅影响主机组件的测量结果。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.minWidth = 0;
            /**
             * @language en_US
             * The maximum recommended height of the component to be considered.
             * This property can only affect measure result of host component.
             *
             * @default 100000
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤的最大高度。仅影响主机组件的测量结果。
             *
             * @default 100000
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.maxHeight = 100000;
            /**
             * @language en_US
             * The minimum recommended height of the component to be considered.
             * This property can only affect measure result of host component.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤的最小高度,此属性设置为大于maxHeight的值时无效。仅影响主机组件的测量结果。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.minHeight = 0;
            /**
             * @language en_US
             * Number that specifies the explicit width of the skin.
             * This property can only affect measure result of host component.
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤显式设置宽度,设置为 NaN 表示不显式设置。仅影响主机组件的测量结果。
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.width = NaN;
            /**
             * @language en_US
             * Number that specifies the explicit height of the skin.
             * This property can only affect measure result of host component.
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 皮肤显式设置高度,设置为 NaN 表示不显式设置。仅影响主机组件的测量结果。
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.height = NaN;
            /**
             * @private
             */
            this.$elementsContent = [];
            /**
             * @private
             */
            this._hostComponent = null;
            /**
             * @private
             */
            this.$stateValues = new eui.sys.StateValues();
        }
        var c=Skin,p=c.prototype;
        d(p, "elementsContent",undefined
            ,function (value) {
                this.$elementsContent = value;
            }
        );
        d(p, "hostComponent"
            /**
             * @language en_US
             * The host component which the skin will be attached.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此皮肤附加到的主机组件
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._hostComponent;
            }
            ,function (value) {
                if (this._hostComponent == value)
                    return;
                if (this._hostComponent) {
                    this._hostComponent.removeEventListener(egret.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                }
                this._hostComponent = value;
                var values = this.$stateValues;
                values.parent = value;
                if (value) {
                    this.commitCurrentState();
                    if (!this.$stateValues.intialized) {
                        if (value.$stage) {
                            this.initializeStates(value.$stage);
                        }
                        else {
                            value.once(egret.Event.ADDED_TO_STAGE, this.onAddedToStage, this);
                        }
                    }
                }
                eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "hostComponent");
            }
        );
        /**
         * @private
         *
         * @param event
         */
        p.onAddedToStage = function (event) {
            this.initializeStates(this._hostComponent.$stage);
        };
        return Skin;
    })(egret.EventDispatcher);
    eui.Skin = Skin;
    egret.registerClass(Skin,'eui.Skin');
    eui.sys.mixin(Skin, eui.sys.StateClient);
    eui.registerProperty(Skin, "elementsContent", "Array", true);
    eui.registerProperty(Skin, "states", "State[]");
    eui.registerBindable(Skin.prototype, "hostComponent");
})(eui || (eui = {}));
var eui;
(function (eui) {
    var TabBarButton = (function (_super) {
        __extends(TabBarButton, _super);
        function TabBarButton() {
            _super.call(this);
            this._allowDeselection = true;
            this._itemIndex = 0;
            this.labelDisplay = null;
        }
        var c=TabBarButton,p=c.prototype;
        d(p, "allowDeselection"
            ,function () {
                return this._allowDeselection;
            }
            ,function (value) {
                this._allowDeselection = value;
            }
        );
        d(p, "data"
            ,function () {
                return this._data;
            }
            ,function (value) {
                this.$setData(value);
            }
        );
        p.$setData = function (value) {
            this._data = value;
            this.dispatchEvent(new egret.Event("dataChange"));
        };
        d(p, "itemIndex"
            ,function () {
                return this._itemIndex;
            }
            ,function (value) {
                this._itemIndex = value;
            }
        );
        p.buttonReleased = function () {
            if (this.selected && !this.allowDeselection)
                return;
            _super.prototype.buttonReleased.call(this);
        };
        return TabBarButton;
    })(eui.ToggleButton);
    eui.TabBarButton = TabBarButton;
    egret.registerClass(TabBarButton,'eui.TabBarButton',["eui.IItemRenderer","eui.UIComponent"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var TabPanel = (function (_super) {
        __extends(TabPanel, _super);
        function TabPanel() {
            _super.call(this);
            this._show = false;
            this._itemIndex = -1;
            this._data = {};
            this.percentHeight = 100;
            this.percentWidth = 100;
            //this.focusEnabled = true;
            this.skinName = "skins.TabPanelSkin";
        }
        var c=TabPanel,p=c.prototype;
        /***
         * 使用皮肤中contentContainer 的布局，如果不是用此方法 则布局是错误的
         */
        p.addToContentGroup = function (child) {
            if (!this.contentContainer) {
                throw new Error("contentContainer 一定要存在");
                return;
            }
            this.contentContainer.addChild(child);
        };
        d(p, "show"
            ,function () {
                return this._show;
            }
            ,function (value) {
                var _self__ = this;
                if (value == this._show)
                    return;
                this._show = value;
                var event = new eui.UIEvent(eui.UIEvent.CHANGE);
                _self__.dispatchEvent(event);
                this.showChanged();
            }
        );
        p.dataChanged = function () {
        };
        p.showChanged = function () {
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
        };
        d(p, "itemIndex"
            ,function () {
                return this._itemIndex;
            }
            ,function (value) {
                this._itemIndex = value;
            }
        );
        d(p, "icon"
            ,function () {
                return this._icon;
            }
            ,function (value) {
                this._icon = value;
                this._data["icon"] = value;
                this.updateOwner();
            }
        );
        d(p, "title"
            ,function () {
                if (!this._title && this._data["label"]) {
                    return this._data["label"];
                }
                return this._title;
            }
            ,function (value) {
                if (this._title == value)
                    return;
                this._title = value;
                this._data["label"] = value;
                this.updateOwner();
            }
        );
        d(p, "data"
            ,function () {
                return this._data;
            }
            ,function (value) {
                this._data = value;
                this.dataChanged();
            }
        );
        p.updateOwner = function () {
            if (this.$owner && (this.$owner instanceof eui.TabGroup))
                this.$owner.dataProvider.itemUpdated(this.data);
        };
        return TabPanel;
    })(eui.Component);
    eui.TabPanel = TabPanel;
    egret.registerClass(TabPanel,'eui.TabPanel',["eui.ITabPanel","eui.UIComponent","eui.IDataRenderer"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var FocusEvent = egret.FocusEvent;
    /**
     *
     */
    /**
     * @language en_US
     * The TextInput is a textfield input component, the user can input and edit the text.
     *
     * @version Egret 2.5.7
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/TextInputExample.ts
     */
    /**
     * @language zh_CN
     * TextInput 是一个文本输入控件，供用户输入和编辑统一格式文本
     *
     * @version Egret 2.5.7
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/TextInputExample.ts
     */
    var TextInput = (function (_super) {
        __extends(TextInput, _super);
        function TextInput() {
            _super.call(this);
            /**
             * @private
             */
            this.isFocus = false;
            this.$TextInput = {
                0: null,
                1: null,
                2: null,
                3: null,
                4: null,
                5: null,
                6: "",
                7: null //restrict
            };
        }
        var c=TextInput,p=c.prototype;
        d(p, "prompt"
            /**
             * @copy eui.EditableText#prompt
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.promptDisplay) {
                    return this.promptDisplay.text;
                }
                return this.$TextInput[0 /* prompt */];
            }
            /**
             * @copy eui.EditableText#prompt
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[0 /* prompt */] = value;
                if (this.promptDisplay) {
                    this.promptDisplay.text = value;
                }
                this.invalidateProperties();
                this.invalidateState();
            }
        );
        d(p, "displayAsPassword"
            /**
             * @copy egret.TextField#displayAsPassword
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                    return this.textDisplay.displayAsPassword;
                }
                var v = this.$TextInput[1 /* displayAsPassword */];
                return v ? v : false;
            }
            /**
             * @copy egret.TextField#displayAsPassword
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[1 /* displayAsPassword */] = value;
                if (this.textDisplay) {
                    this.textDisplay.displayAsPassword = value;
                }
                this.invalidateProperties();
            }
        );
        d(p, "textColor"
            /**
             * @copy egret.TextField#textColor
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                    return this.textDisplay.textColor;
                }
                return this.$TextInput[2 /* textColor */];
            }
            /**
             * @copy egret.TextField#textColor
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[2 /* textColor */] = value;
                if (this.textDisplay) {
                    this.textDisplay.textColor = value;
                }
                this.invalidateProperties();
            }
        );
        d(p, "maxChars"
            /**
             * @copy egret.TextField#maxChars
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                    return this.textDisplay.maxChars;
                }
                var v = this.$TextInput[3 /* maxChars */];
                return v ? v : 0;
            }
            /**
             * @copy egret.TextField#maxChars
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[3 /* maxChars */] = value;
                if (this.textDisplay) {
                    this.textDisplay.maxChars = value;
                }
                this.invalidateProperties();
            }
        );
        d(p, "maxWidth"
            /**
             * @inheritDoc
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                    return this.textDisplay.maxWidth;
                }
                var v = this.$TextInput[4 /* maxWidth */];
                return v ? v : 100000;
            }
            /**
             * @inheritDoc
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[4 /* maxWidth */] = value;
                if (this.textDisplay) {
                    this.textDisplay.maxWidth = value;
                }
                this.invalidateProperties();
            }
        );
        d(p, "maxHeight"
            /**
             * @inheritDoc
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                }
                var v = this.$TextInput[5 /* maxHeight */];
                return v ? v : 100000;
            }
            /**
             * @inheritDoc
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[5 /* maxHeight */] = value;
                if (this.textDisplay) {
                    this.textDisplay.maxHeight = value;
                }
                this.invalidateProperties();
            }
        );
        d(p, "text"
            /**
             * @copy egret.TextField#text
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                    return this.textDisplay.text;
                }
                return this.$TextInput[6 /* text */];
            }
            /**
             * @copy egret.TextField#text
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[6 /* text */] = value;
                if (this.textDisplay) {
                    this.textDisplay.text = value;
                }
                this.invalidateProperties();
                this.invalidateState();
            }
        );
        d(p, "restrict"
            /**
             * @copy egret.TextField#restrict
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                if (this.textDisplay) {
                    return this.textDisplay.restrict;
                }
                return this.$TextInput[7 /* restrict */];
            }
            /**
             * @copy egret.TextField#restrict
             *
             * @version Egret 2.5.7
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function (value) {
                this.$TextInput[7 /* restrict */] = value;
                if (this.textDisplay) {
                    this.textDisplay.restrict = value;
                }
                this.invalidateProperties();
            }
        );
        /**
         * @private
         * 焦点移入
         */
        p.focusInHandler = function (event) {
            this.addEventListener(egret.KeyboardEvent.KEY_DOWN, this.keyDownHandler, this);
            this.isFocus = true;
            this.invalidateState();
        };
        p.keyDownHandler = function (e) {
            if (e.keyCode == egret.Keyboard.ENTER && this.stage) {
                this.dispatchEvent(new egret.TextEvent(egret.TextEvent.COMMIT, true));
            }
        };
        /**
         * @private
         * 焦点移出
         */
        p.focusOutHandler = function (event) {
            this.removeEventListener(egret.KeyboardEvent.KEY_DOWN, this.keyDownHandler, this);
            this.dispatchEvent(new egret.TextEvent(egret.TextEvent.COMMIT, true));
            this.isFocus = false;
            this.invalidateState();
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.5.7
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getCurrentState = function () {
            var skin = this.skin;
            if (this.prompt && !this.isFocus && !this.text) {
                if (this.enabled && skin.hasState("normalWithPrompt")) {
                    return "normalWithPrompt";
                }
                else if (!this.enabled && skin.hasState("disabledWithPrompt")) {
                    return "disabledWithPrompt";
                }
            }
            else {
                if (this.enabled) {
                    return "normal";
                }
                else {
                    return "disabled";
                }
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.5.7
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            var values = this.$TextInput;
            if (instance == this.textDisplay) {
                this.textDisplayAdded();
                if (this.textDisplay instanceof eui.EditableText) {
                    this.textDisplay.addEventListener(FocusEvent.FOCUS_IN, this.focusInHandler, this);
                    this.textDisplay.addEventListener(FocusEvent.FOCUS_OUT, this.focusOutHandler, this);
                }
            }
            else if (instance == this.promptDisplay) {
                if (values[0 /* prompt */]) {
                    this.promptDisplay.text = values[0 /* prompt */];
                }
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.5.7
         * @version eui 1.0
         * @platform Web,Native
         */
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.textDisplay) {
                this.textDisplayRemoved();
                if (this.textDisplay instanceof eui.EditableText) {
                    this.textDisplay.removeEventListener(FocusEvent.FOCUS_IN, this.focusInHandler, this);
                    this.textDisplay.removeEventListener(FocusEvent.FOCUS_OUT, this.focusOutHandler, this);
                }
            }
            else if (instance == this.promptDisplay) {
                this.$TextInput[0 /* prompt */] = this.promptDisplay.text;
            }
        };
        /**
         * @private
         */
        p.textDisplayAdded = function () {
            var values = this.$TextInput;
            if (values[1 /* displayAsPassword */]) {
                this.textDisplay.displayAsPassword = values[1 /* displayAsPassword */];
            }
            if (values[2 /* textColor */]) {
                this.textDisplay.textColor = values[2 /* textColor */];
            }
            if (values[3 /* maxChars */]) {
                this.textDisplay.maxChars = values[3 /* maxChars */];
            }
            if (values[4 /* maxWidth */]) {
                this.textDisplay.maxWidth = values[4 /* maxWidth */];
            }
            if (values[5 /* maxHeight */]) {
                this.textDisplay.maxHeight = values[5 /* maxHeight */];
            }
            if (values[6 /* text */]) {
                this.textDisplay.text = values[6 /* text */];
            }
            if (values[7 /* restrict */]) {
                this.textDisplay.restrict = values[7 /* restrict */];
            }
        };
        /**
         * @private
         */
        p.textDisplayRemoved = function () {
            var values = this.$TextInput;
            values[1 /* displayAsPassword */] = this.textDisplay.displayAsPassword;
            values[2 /* textColor */] = this.textDisplay.textColor;
            values[3 /* maxChars */] = this.textDisplay.maxChars;
            values[4 /* maxWidth */] = this.textDisplay.maxWidth;
            values[5 /* maxHeight */] = this.textDisplay.maxHeight;
            values[6 /* text */] = this.textDisplay.text;
            values[7 /* restrict */] = this.textDisplay.restrict;
        };
        p.setFocus = function () {
            _super.prototype.setFocus.call(this);
            if (this.textDisplay) {
                this.textDisplay.setFocus();
            }
        };
        return TextInput;
    })(eui.Component);
    eui.TextInput = TextInput;
    egret.registerClass(TextInput,'eui.TextInput');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var TextInputPro = (function (_super) {
        __extends(TextInputPro, _super);
        function TextInputPro() {
            _super.call(this);
            this.addEventListener(egret.FocusEvent.FOCUS_IN, this.focusIn_handler, this);
            this.addEventListener(egret.FocusEvent.FOCUS_OUT, this.focusOut_handler, this);
        }
        var c=TextInputPro,p=c.prototype;
        /**
         * 焦点移入
         */
        p.focusIn_handler = function (event) {
            if (event.target == this) {
            }
            if (this.bgUnselect)
                this.bgUnselect.visible = false;
            if (this.bgSelect)
                this.bgSelect.visible = true;
            //            egret.callLater(this.textDisplay.selectAll,this.textDisplay);
            this.invalidateState();
        };
        /**
         * 焦点移
         */
        p.focusOut_handler = function (event) {
            if (this.bgUnselect)
                this.bgUnselect.visible = true;
            if (this.bgSelect)
                this.bgSelect.visible = false;
            this.invalidateState();
        };
        return TextInputPro;
    })(eui.TextInput);
    eui.TextInputPro = TextInputPro;
    egret.registerClass(TextInputPro,'eui.TextInputPro');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ToggleSwitch control defines an on-off control.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ToggleSwitchExample.ts
     */
    /**
     * @language zh_CN
     * ToggleSwitch 表示一个开关组件。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ToggleSwitchExample.ts
     */
    var ToggleSwitch = (function (_super) {
        __extends(ToggleSwitch, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ToggleSwitch() {
            _super.call(this);
        }
        var c=ToggleSwitch,p=c.prototype;
        return ToggleSwitch;
    })(eui.ToggleButton);
    eui.ToggleSwitch = ToggleSwitch;
    egret.registerClass(ToggleSwitch,'eui.ToggleSwitch');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 树状列表组件
     * @author featherJ
     */
    var Tree = (function (_super) {
        __extends(Tree, _super);
        /**
         * 构造函数
         */
        function Tree() {
            _super.call(this);
        }
        var c=Tree,p=c.prototype;
        /**
         * @inheritDoc
         */
        p.createChildren = function () {
            if (!this.itemRenderer)
                this.itemRenderer = eui.TreeItemRenderer;
            _super.prototype.createChildren.call(this);
        };
        p.updateRenderer = function (renderer, itemIndex, data) {
            if (egret.is(renderer, "eui.ITreeItemRenderer") && egret.is(this.dataProvider, "eui.ITreeCollection")) {
                var treeCollection = this.dataProvider;
                var treeRenderer = renderer;
                treeRenderer.hasChildren = treeCollection.hasChildren(data);
                treeRenderer.opened = treeCollection.isItemOpen(data);
                treeRenderer.depth = treeCollection.getDepth(data);
            }
            return _super.prototype.updateRenderer.call(this, renderer, itemIndex, data);
        };
        p.rendererAdded = function (renderer, index, item) {
            _super.prototype.rendererAdded.call(this, renderer, index, item);
            if (egret.is(renderer, "eui.ITreeItemRenderer"))
                renderer.addEventListener(eui.TreeEvent.ITEM_OPENING, this.onItemOpening, this);
        };
        p.rendererRemoved = function (renderer, index, item) {
            _super.prototype.rendererRemoved.call(this, renderer, index, item);
            if (egret.is(renderer, "eui.ITreeItemRenderer"))
                renderer.removeEventListener(eui.TreeEvent.ITEM_OPENING, this.onItemOpening, this);
        };
        /**
         * 节点即将打开
         */
        p.onItemOpening = function (event) {
            var renderer = event.itemRenderer;
            var item = event.item;
            var dp = this.dataProvider;
            if (!renderer || !dp || !(egret.is(dp, "eui.ITreeCollection")))
                return;
            if (this.dispatchEvent(event)) {
                var opend = !renderer.opened;
                dp.expandItem(item, opend);
                var type = opend ? eui.TreeEvent.ITEM_OPEN : eui.TreeEvent.ITEM_CLOSE;
                eui.TreeEvent.dispatchTreeEvent(this, type, renderer.itemIndex, item, renderer);
            }
        };
        /**
         * 打开或关闭一个节点,注意，此操作不会抛出open或close事件。
         * @param item {any} 要打开或关闭的节点
         * @param open {boolean} true表示打开节点，反之关闭。
         */
        p.expandItem = function (item, open) {
            if (open === void 0) { open = true; }
            var dp = this.dataProvider;
            if (!dp || !(egret.is(dp, "eui.ITreeCollection")))
                return;
            (dp).expandItem(item, open);
        };
        /**
         * 指定的节点是否打开
         * @param item {any}
         * @returns {boolean}
         */
        p.isItemOpen = function (item) {
            var dp = this.dataProvider;
            if (!dp || !(egret.is(dp, "eui.ITreeCollection")))
                return false;
            return (dp).isItemOpen(item);
        };
        p.onCollectionChange = function (event) {
            _super.prototype.onCollectionChange.call(this, event);
            if (event.kind == eui.CollectionEventKind.OPEN || event.kind == eui.CollectionEventKind.CLOSE) {
                var renderer = (this.getElementAt(event.location));
                if (renderer) {
                    this.updateRenderer(renderer, event.location, event.items[0]);
                    if (event.kind == eui.CollectionEventKind.CLOSE && this.layout && this.layout.useVirtualLayout) {
                        this.layout.clearVirtualLayoutCache();
                        this.invalidateSize();
                    }
                }
            }
        };
        return Tree;
    })(eui.List);
    eui.Tree = Tree;
    egret.registerClass(Tree,'eui.Tree');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 增加了拖拽的支持
     * @author featherJ
     */
    var TreePro = (function (_super) {
        __extends(TreePro, _super);
        function TreePro() {
            _super.call(this);
            /**按下的按键列表*/
            this.keyCodeArray = [];
            this.lastKeyTime = 0;
            //            this.doubleClickEnabled = true;
            this.doubleClickExpand = true;
            //            this.addEventListener(egret.KeyboardEvent.KEY_DOWN,this.onKeyDown,this);
            this._treeDragBehavior = new eui.TreeDragBehavior();
            this._treeDragBehavior.init(this);
            this._treeDragBehavior.setOnDragInComplete(this.onDragInComplete, this);
            this._treeDragBehavior.setOnDragMoveComplete(this.onDragMoveComplete, this);
            this._treeDragBehavior.setOnDragStart(this.onDragStart, this);
        }
        var c=TreePro,p=c.prototype;
        d(p, "treeDragBehavior"
            ,function () {
                return this._treeDragBehavior;
            }
        );
        p.onDragInComplete = function (drop, dragItems) {
            var scrollV = this.scrollV;
            var scrollH = this.scrollH;
            var evt = new eui.TreeDragEvent(eui.TreeDragEvent.ITEMS_DRAG_IN_COMPLETE);
            evt.dragItems = dragItems;
            evt.dropItem = drop;
            if (this.dispatchEvent(evt)) {
                this.treeDragBehavior.doDrag(drop, dragItems);
            }
            if (dragItems && dragItems.length > 0) {
                var dragSource = new eui.DragSource();
                var dragData = { items: dragItems, onDrag: this.onDragMoveComplete };
                dragSource.addData(dragData, "DataGriddata");
                var dragDisplayArr = [];
                for (var i = 0; i < dragItems.length; i++) {
                    dragDisplayArr.push(dragItems[i]["label"]);
                }
                var dragDisplay = new eui.DragDisplay(dragDisplayArr);
                //            dragDisplay.mouseChildren = false;
                //            dragDisplay.mouseEnabled = false;
                eui.DragManager.doDrag(this, dragSource, dragDisplay, 0, 0, 0.7);
            }
            egret.callLater(function () {
                this.scrollH = scrollH;
                this.scrollV = scrollV;
            }, this);
        };
        p.onDragMoveComplete = function (drop, dragItems, isTop) {
            var scrollV = this.scrollV;
            var scrollH = this.scrollH;
            var evt = new eui.TreeDragEvent(eui.TreeDragEvent.ITEMS_DRAG_MOVE_COMPLETE);
            evt.dragItems = dragItems;
            evt.dropItem = drop;
            evt.moveToTop = isTop;
            if (this.dispatchEvent(evt)) {
                this.treeDragBehavior.doMove(drop, dragItems, isTop);
            }
            egret.callLater(function () {
                this.scrollH = scrollH;
                this.scrollV = scrollV;
            }, this);
        };
        p.dragFinalStartHandler = function (event) {
            //            removeEventListener(MouseEvent.MOUSE_MOVE,dragFinalStartHandler);
        };
        p.onDragStart = function (dragItems) {
            var evt = new eui.TreeDragEvent(eui.TreeDragEvent.ITEMS_DRAG_START);
            evt.dragItems = dragItems;
            this.dispatchEvent(evt);
        };
        p.rendererAdded = function (renderer, index, item) {
            _super.prototype.rendererAdded.call(this, renderer, index, item);
            this.treeDragBehavior.rendererAdded(renderer);
        };
        p.rendererRemoved = function (renderer, index, item) {
            _super.prototype.rendererRemoved.call(this, renderer, index, item);
            this.treeDragBehavior.rendererRemoved(renderer);
        };
        d(p, "orderable"
            ,function () {
                return this.treeDragBehavior.orderable;
            }
            ,function (value) {
                this.treeDragBehavior.orderable = value;
            }
        );
        d(p, "dragable"
            ,function () {
                return this.treeDragBehavior.dragable;
            }
            ,function (value) {
                this.treeDragBehavior.dragable = value;
            }
        );
        /**
         * 是否可以释放拖拽移动。<code>(dropTarget:Object,dragItems:Array):Boolean </code><br/>
         * 或 <code>(dropTarget:Object,dragItems:Array,pos:String):Boolean</code> ,pos的值为top,in,bottom
         */
        p.setCanDropMoveFunction = function (callback, thisObject) {
            this.treeDragBehavior.setCanDropMoveFunc(callback, thisObject);
        };
        /**
         * 是否可以释放拖拽进入。(dropTarget:Object,dragItems:Array):Boolean
         */
        p.setCanDropInFunction = function (callback, thisObject) {
            this.treeDragBehavior.setCanDropInFunc(callback, thisObject);
        };
        /**
         * 得到接收拖拽的目标项，如果为空则默认为当前鼠标所指向的项。  accpetFunctionHandler(obj:Object):Object
         */
        p.setAcceptFunction = function (callback, thisObject) {
            this.treeDragBehavior.setAcceptFunc(callback, thisObject);
        };
        /**
         * 目标项是否可以拖拽，形式如canDragFunction(dragItems:Array):Boolean
         */
        p.setCanDragFunction = function (callback, thisObject) {
            this.treeDragBehavior.setCanDragFunc(callback, thisObject);
        };
        d(p, "doubleClickExpand"
            /**
             * 是否在双击时自动展开或者关闭节点，此属性只有在doubleClickEnabled为true才有效
             */
            ,function () {
                return this._doubleClickExpand;
            }
            ,function (value) {
                this._doubleClickExpand = value;
                if (value)
                    this.addEventListener(egret.MouseEvent.DOUBLE_CLICK, this.doubleClickHandler, this);
                else
                    this.removeEventListener(egret.MouseEvent.DOUBLE_CLICK, this.doubleClickHandler, this);
            }
        );
        p.doubleClickHandler = function (event) {
            var target = event.target;
            var renderer;
            while (target && target != this) {
                if (egret.is(target, "eui.ITreeItemRenderer")) {
                    renderer = target;
                    break;
                }
                target = target.parent;
            }
            if (renderer && renderer.hasChildren) {
                if (egret.is(renderer, "eui.TreeItemRenderer")) {
                    target = event.target;
                    while (target && target != renderer) {
                        if (renderer.disclosureButton == target)
                            return;
                        target = target.parent;
                    }
                }
                var evt = new eui.TreeEvent(eui.TreeEvent.ITEM_OPENING, false, true, renderer.itemIndex, renderer.data, renderer);
                evt.opening = !renderer.opened;
                renderer.dispatchEvent(evt);
            }
        };
        return TreePro;
    })(eui.Tree);
    eui.TreePro = TreePro;
    egret.registerClass(TreePro,'eui.TreePro');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The VScrollBar (vertical scrollbar) control lets you control
     * the portion of data that is displayed when there is too much data
     * to fit vertically in a display area.
     *
     * <p>Although you can use the VScrollBar control as a stand-alone control,
     * you usually combine it as part of another group of components to
     * provide scrolling functionality.</p>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/VScrollBarExample.ts
     */
    /**
     * @language zh_CN
     * VScrollBar（垂直 ScrollBar）控件可以在因数据太多而不能在显示区域中以垂直方向完全显示时控制显示的数据部分。
     * <p>虽然 VScrollBar 控件可以单独使用，但通常将它与其他组件一起使用来提供滚动功能。</p>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/VScrollBarExample.ts
     */
    var VScrollBar = (function (_super) {
        __extends(VScrollBar, _super);
        function VScrollBar() {
            _super.apply(this, arguments);
            this.trackLayoutBounds = new egret.Rectangle();
        }
        var c=VScrollBar,p=c.prototype;
        /**
             * @inheritDoc
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
        p.pointToValue = function (x, y) {
            if (!this.thumb || !this.track)
                return 0;
            var values = this.$Range;
            var range = values[0 /* maximum */] - values[2 /* minimum */];
            var thumbRange = this.getThumbRange();
            return values[0 /* maximum */] - ((thumbRange != 0) ? ((thumbRange - y) / thumbRange) * range : 0);
        };
        /**
         * @private
         *
         * @returns
         */
        p.getThumbRange = function () {
            var bounds = egret.$TempRectangle;
            this.track.getLayoutBounds(bounds);
            var thumbRange = bounds.height;
            this.thumb.getLayoutBounds(bounds);
            return thumbRange - bounds.height;
        };
        p.setPendingValue = function (value) {
            if (this.$viewport) {
                this.$viewport.scrollV = value;
            }
            _super.prototype.setPendingValue.call(this, value);
        };
        p.setValue = function (value) {
            if (this.$viewport) {
                this.$viewport.scrollV = value;
            }
            _super.prototype.setValue.call(this, value);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateSkinDisplayList = function () {
            // var thumb = this.thumb;
            // var track = this.track;
            // var viewport = this.$viewport;
            // if (!thumb ||!viewport) {
            //     return;
            // }
            // var bounds = egret.$TempRectangle;
            // this.getLayoutBounds(bounds);
            // var unscaledHeight = bounds.height; 
            // thumb.getPreferredBounds(bounds);
            // var thumbHeight = bounds.height;
            // var thumbX = bounds.x;
            // var vsp = viewport.scrollV;
            // var contentHeight = viewport.contentHeight;
            // var height = viewport.height;
            // if (vsp <= 0) {
            //     var scaleHeight = thumbHeight * (1-(-vsp) / (height * 0.5));
            //     scaleHeight = Math.max(5,Math.round(scaleHeight));
            //     thumb.setLayoutBoundsSize(NaN, scaleHeight);
            //     thumb.setLayoutBoundsPosition(thumbX, 0);
            // }
            // else if (vsp >= contentHeight - height) {
            //     scaleHeight = thumbHeight * (1-(vsp - contentHeight + height) / (height * 0.5));
            //     scaleHeight = Math.max(5,Math.round(scaleHeight));
            //     thumb.setLayoutBoundsSize(NaN, scaleHeight);
            //     thumb.setLayoutBoundsPosition(thumbX, unscaledHeight - scaleHeight);
            // }
            // else {
            //     var thumbY = (unscaledHeight - thumbHeight) * vsp / (contentHeight - height);
            //     thumb.setLayoutBoundsSize(NaN, NaN);
            //     thumb.setLayoutBoundsPosition(thumbX, thumbY);
            // }
            var thumb = this.thumb;
            var track = this.track;
            var viewport = this.$viewport;
            if (!thumb || !viewport) {
                return;
            }
            var trackHeight = track.height;
            var trackY = track.y;
            var thumbX = thumb.x;
            var vsp = viewport.scrollV;
            var contentHeight = viewport.contentHeight;
            var viewHeight = viewport.height;
            //计算thumb的应有高度
            var calculateHeight = viewHeight / contentHeight * trackHeight;
            thumb.setLayoutBoundsSize(NaN, calculateHeight);
            //计算thumb的Y坐标
            var calculateY = trackHeight / contentHeight * vsp + trackY;
            if (calculateY + calculateHeight > trackY + trackHeight)
                calculateY = trackY + trackHeight - calculateHeight;
            thumb.setLayoutBoundsPosition(thumbX, calculateY);
            track.getLayoutBounds(this.trackLayoutBounds);
            thumb.visible = calculateHeight < this.trackLayoutBounds.height;
            track.visible = calculateHeight < this.trackLayoutBounds.height;
            if (calculateHeight < this.trackLayoutBounds.height) {
                var newValue = contentHeight * ((calculateY - trackY) / trackHeight);
                this.setValue(newValue);
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.onPropertyChanged = function (event) {
            switch (event.property) {
                case "scrollV":
                case "contentHeight":
                    var self = this, vp = self.$viewport;
                    self.minimum = 0;
                    self.maximum = Math.max(vp.contentHeight - vp.height, 0);
                    self.setValue(vp.scrollV);
                    this.invalidateDisplayList();
                    break;
            }
        };
        return VScrollBar;
    })(eui.ScrollBarBase);
    eui.VScrollBar = VScrollBar;
    egret.registerClass(VScrollBar,'eui.VScrollBar');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * An ViewStack navigator container consists of a collection of child
     * containers stacked on top of each other, where only one child
     * at a time is visible.
     * When a different child container is selected, it seems to replace
     * the old one because it appears in the same location.
     * However, the old child container still exists; it is just invisible.
     *
     * @event eui.CollectionEvent.COLLECTION_CHANGE Dispatched when the ICollection has been updated in some way.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ViewStackExample.ts
     */
    /**
     * @language zh_CN
     * ViewStack 导航器容器由一组彼此上下堆叠的子容器组成，其中一次只可以显示一个子容器。
     * 选择另一个子容器后，它将显示在原来子容器的位置处，所以看起来好像此子容器替换了原来的子容器。
     * 但是，原来的子容器仍然存在，只不过它现在处于不可见状态。
     *
     * @event eui.CollectionEvent.COLLECTION_CHANGE 以某种方式更新 ICollection 后分派。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/components/ViewStackExample.ts
     */
    var ViewStack = (function (_super) {
        __extends(ViewStack, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function ViewStack() {
            _super.call(this);
            /**
             * @private
             */
            this._selectedChild = null;
            /**
             * @private
             * 在属性提交前缓存选中项索引
             */
            this.proposedSelectedIndex = eui.ListBase.NO_PROPOSED_SELECTION;
            /**
             * @private
             */
            this._selectedIndex = -1;
        }
        var c=ViewStack,p=c.prototype;
        d(p, "layout"
            /**
             * @language en_US
             * The layout object for this container.
             * This object is responsible for the measurement and layout of
             * the visual elements in the container.
             *
             * @default eui.BasicLayout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此容器的 layout 对象。此对象负责容器中可视元素的测量和布局。
             *
             * @default eui.BasicLayout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$layout;
            }
        );
        d(p, "selectedChild"
            /**
             * @language en_US
             * A reference to the currently visible child container.
             * The default is a reference to the first child.
             * If there are no children, this property is <code>null</code>.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 对当前可见子容器的引用。默认设置为对第一个子容器的引用。如果没有子项，则此属性为 <code>null</code>。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                var index = this.selectedIndex;
                if (index >= 0 && index < this.numChildren)
                    return this.getChildAt(index);
                return null;
            }
            ,function (value) {
                var index = this.getChildIndex(value);
                if (index >= 0 && index < this.numChildren)
                    this.setSelectedIndex(index);
            }
        );
        d(p, "selectedIndex"
            /**
             * @language en_US
             * The zero-based index of the currently visible child container.
             * Child indexes are in the range 0, 1, 2, ..., n - 1,
             * where <code>n</code> is the number of children.
             * The default value is 0, corresponding to the first child.
             * If there are no children, the value of this property is <code>-1</code>.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 当前可见子容器的从零开始的索引。子索引的范围是 0、1、2、...、n - 1，其中 <code>n</code> 是子项的数目。
             * 默认值是 0，对应于第一个子项。如果不存在子容器，则此属性的值为 -1。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.proposedSelectedIndex != eui.ListBase.NO_PROPOSED_SELECTION ? this.proposedSelectedIndex : this._selectedIndex;
            }
            ,function (value) {
                value = +value | 0;
                this.setSelectedIndex(value);
            }
        );
        /**
         * @private
         * 设置选中项索引
         */
        p.setSelectedIndex = function (value) {
            if (value == this.selectedIndex) {
                return;
            }
            this.proposedSelectedIndex = value;
            this.invalidateProperties();
            eui.PropertyEvent.dispatchPropertyEvent(this, eui.PropertyEvent.PROPERTY_CHANGE, "selectedIndex");
        };
        /**
         * @private
         * 一个子项被添加到容器内，此方法不仅在操作addChild()时会被回调，在操作setChildIndex()或swapChildren时也会回调。
         * 当子项索引发生改变时，会先触发$childRemoved()方法，然后触发$childAdded()方法。
         */
        p.$childAdded = function (child, index) {
            _super.prototype.$childAdded.call(this, child, index);
            this.showOrHide(child, false);
            var selectedIndex = this.selectedIndex;
            if (selectedIndex == -1) {
                this.setSelectedIndex(index);
            }
            else if (index <= this.selectedIndex && this.$stage) {
                this.setSelectedIndex(selectedIndex + 1);
            }
            eui.CollectionEvent.dispatchCollectionEvent(this, eui.CollectionEvent.COLLECTION_CHANGE, eui.CollectionEventKind.ADD, index, -1, [child.name]);
        };
        /**
         * @private
         * 一个子项从容器内移除，此方法不仅在操作removeChild()时会被回调，在操作setChildIndex()或swapChildren时也会回调。
         * 当子项索引发生改变时，会先触发$childRemoved()方法，然后触发$childAdded()方法。
         */
        p.$childRemoved = function (child, index) {
            _super.prototype.$childRemoved.call(this, child, index);
            this.showOrHide(child, true);
            var selectedIndex = this.selectedIndex;
            if (index == selectedIndex) {
                if (this.numChildren > 0) {
                    if (index == 0) {
                        this.proposedSelectedIndex = 0;
                        this.invalidateProperties();
                    }
                    else
                        this.setSelectedIndex(0);
                }
                else
                    this.setSelectedIndex(-1);
            }
            else if (index < selectedIndex) {
                this.setSelectedIndex(selectedIndex - 1);
            }
            eui.CollectionEvent.dispatchCollectionEvent(this, eui.CollectionEvent.COLLECTION_CHANGE, eui.CollectionEventKind.REMOVE, index, -1, [child.name]);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.proposedSelectedIndex != eui.ListBase.NO_PROPOSED_SELECTION) {
                this.commitSelection(this.proposedSelectedIndex);
                this.proposedSelectedIndex = eui.ListBase.NO_PROPOSED_SELECTION;
            }
        };
        /**
         * @private
         *
         * @param newIndex
         */
        p.commitSelection = function (newIndex) {
            if (newIndex >= 0 && newIndex < this.numChildren) {
                this._selectedIndex = newIndex;
                if (this._selectedChild) {
                    this.showOrHide(this._selectedChild, false);
                }
                this._selectedChild = this.getElementAt(this._selectedIndex);
                this.showOrHide(this._selectedChild, true);
            }
            else {
                this._selectedChild = null;
                this._selectedIndex = -1;
            }
            this.invalidateSize();
            this.invalidateDisplayList();
        };
        /**
         * @private
         *
         * @param child
         * @param visible
         */
        p.showOrHide = function (child, visible) {
            if (egret.is(child, "eui.UIComponent")) {
                child.includeInLayout = visible;
            }
            child.visible = visible;
        };
        d(p, "length"
            /**
             * @language en_US
             * number of children
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 子项数量
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$children.length;
            }
        );
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getItemAt = function (index) {
            var element = this.$children[index];
            return element ? element.name : "";
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getItemIndex = function (item) {
            var list = this.$children;
            var length = list.length;
            for (var i = 0; i < length; i++) {
                if (list[i].name == item) {
                    return i;
                }
            }
            return -1;
        };
        return ViewStack;
    })(eui.Group);
    eui.ViewStack = ViewStack;
    egret.registerClass(ViewStack,'eui.ViewStack',["eui.ICollection","egret.IEventDispatcher"]);
    eui.registerBindable(ViewStack.prototype, "selectedIndex");
    if (DEBUG) {
        egret.$markReadOnly(ViewStack, "length");
        egret.$markReadOnly(ViewStack, "layout");
    }
})(eui || (eui = {}));
var eui;
(function (eui) {
    var BoxElement = (function (_super) {
        __extends(BoxElement, _super);
        function BoxElement(vertical) {
            if (vertical === void 0) { vertical = false; }
            _super.call(this);
            this._elementId = -1;
            this._isFirstElement = true;
            this._isVertical = false;
            this._percentSize = 0.5;
            this._x = 0;
            this._y = 0;
            this._explicitWidth = NaN;
            this._width = 0;
            this._explicitHeight = NaN;
            this._height = 0;
            this._defaultWidth = 265;
            this._defaultHeight = 250;
            this._isVertical = vertical;
            this._separator = new eui.Separator();
            this._separator.cursor = this.isVertical ? egret.MouseCursor.NS_RESIZE : egret.MouseCursor.EW_RESIZE;
            this._separator.target = this;
        }
        var c=BoxElement,p=c.prototype;
        d(p, "separator"
            ,function () {
                return this._separator;
            }
        );
        d(p, "elementId"
            ,function () {
                return this._elementId;
            }
            ,function (value) {
                this._elementId = value;
            }
        );
        d(p, "ownerBox"
            ,function () {
                return this._ownerBox;
            }
            ,function (value) {
                this._ownerBox = value;
            }
        );
        d(p, "isFirstElement"
            ,function () {
                return this._isFirstElement;
            }
            ,function (value) {
                this._isFirstElement = value;
            }
        );
        d(p, "isVertical"
            ,function () {
                return this._isVertical;
            }
            ,function (value) {
                this._isVertical = value;
                this._separator.cursor = this.isVertical ? egret.MouseCursor.NS_RESIZE : egret.MouseCursor.EW_RESIZE;
            }
        );
        d(p, "percentSize"
            ,function () {
                return this._percentSize;
            }
            ,function (value) {
                if (value > 1)
                    value = 1;
                if (value < 0)
                    value = 0;
                this._percentSize = value;
            }
        );
        d(p, "firstElement"
            ,function () {
                return this._firstElement;
            }
            ,function (value) {
                if (this._firstElement == value)
                    return;
                if (this._firstElement)
                    this._firstElement.parentBoxChanged(null, false);
                this._firstElement = value;
                if (this._firstElement) {
                    this._firstElement.parentBoxChanged(this);
                    this._firstElement.isFirstElement = true;
                }
            }
        );
        d(p, "secondElement"
            ,function () {
                return this._secondElement;
            }
            ,function (value) {
                if (this._secondElement == value)
                    return;
                if (this._secondElement)
                    this._secondElement.parentBoxChanged(null, false);
                this._secondElement = value;
                if (this._secondElement) {
                    this._secondElement.parentBoxChanged(this);
                    this._secondElement.isFirstElement = false;
                }
            }
        );
        d(p, "parentBox"
            ,function () {
                return this._parentBox;
            }
        );
        p.parentBoxChanged = function (box, checkOldParent) {
            if (checkOldParent === void 0) { checkOldParent = true; }
            if (checkOldParent && this._parentBox) {
                if (this.isFirstElement)
                    this._parentBox.firstElement = null;
                else
                    this._parentBox.secondElement = null;
            }
            this._parentBox = box;
        };
        d(p, "x"
            ,function () {
                return this._x;
            }
            ,function (value) {
                this._x = value;
            }
        );
        d(p, "y"
            ,function () {
                return this._y;
            }
            ,function (value) {
                this._y = value;
            }
        );
        d(p, "explicitWidth"
            ,function () {
                return this._explicitWidth;
            }
        );
        d(p, "width"
            ,function () {
                return this._width;
            }
            ,function (value) {
                if (this._width == value)
                    return;
                this._width = value;
                this._explicitWidth = value;
            }
        );
        d(p, "explicitHeight"
            ,function () {
                return this._explicitHeight;
            }
        );
        d(p, "height"
            ,function () {
                return this._height;
            }
            ,function (value) {
                if (this._height == value)
                    return;
                this._height = value;
                this._explicitHeight = value;
            }
        );
        d(p, "defaultWidth"
            ,function () {
                return this._defaultWidth;
            }
            ,function (value) {
                this._defaultWidth = value;
            }
        );
        d(p, "defaultHeight"
            ,function () {
                return this._defaultHeight;
            }
            ,function (value) {
                this._defaultHeight = value;
            }
        );
        p.setLayoutSize = function (width, height) {
            this._width = width;
            this._height = height;
        };
        d(p, "minimized"
            ,function () {
                return this.firstElement && this.firstElement.minimized && this.secondElement && this.secondElement.minimized;
            }
            ,function (value) {
            }
        );
        d(p, "visible"
            ,function () {
                return (this.firstElement && this.firstElement.visible) || (this.secondElement && this.secondElement.visible);
            }
        );
        return BoxElement;
    })(egret.EventDispatcher);
    eui.BoxElement = BoxElement;
    egret.registerClass(BoxElement,'eui.BoxElement',["eui.IBoxElementContainer","eui.IBoxElement","egret.IEventDispatcher"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var FocusTabBarButton = (function (_super) {
        __extends(FocusTabBarButton, _super);
        function FocusTabBarButton() {
            _super.call(this);
            this._isFocus = true;
        }
        var c=FocusTabBarButton,p=c.prototype;
        d(p, "isFocus"
            ,function () {
                return this._isFocus;
            }
            ,function (value) {
                if (this._isFocus == value)
                    return;
                this._isFocus = value;
                this.invalidateState();
            }
        );
        p.getCurrentState = function () {
            if (this.isFocus && this.selected)
                return "focus";
            return _super.prototype.getCurrentState.call(this);
        };
        return FocusTabBarButton;
    })(eui.IconTabBarButton);
    eui.FocusTabBarButton = FocusTabBarButton;
    egret.registerClass(FocusTabBarButton,'eui.FocusTabBarButton');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 选项卡关闭按钮
     * @author featherJ
     */
    var CloseTabButton = (function (_super) {
        __extends(CloseTabButton, _super);
        function CloseTabButton() {
            _super.call(this);
            this.touchChildren = true;
            this.touchEnabled = true;
            this.addEventListener(egret.MouseEvent.RIGHT_CLICK, this.rightClickHandler, this);
            this.addEventListener(egret.MouseEvent.MIDDLE_CLICK, this.middleClickHandler, this);
        }
        var c=CloseTabButton,p=c.prototype;
        p.middleClickHandler = function (event) {
            this.dispatchEvent(new eui.CloseTabEvent(eui.CloseTabEvent.CLOSE, true));
        };
        p.rightClickHandler = function (event) {
            this.dispatchEvent(new egret.MouseEvent(egret.TouchEvent.TOUCH_TAP));
            if (!this.tabMenu) {
                this.tabMenu = this.createMenu([
                    egret.utils.tr("关闭"),
                    egret.utils.tr("关闭其他"),
                    egret.utils.tr("关闭全部")]);
            }
            this.tabMenu.display(this.stage, event.stageX, event.stageY);
        };
        p.createMenu = function (labelList) {
            var menu = new egret.NativeMenu();
            var item;
            for (var index in labelList) {
                var label = labelList[index];
                item = new egret.NativeMenuItem(label, !label);
                if (label)
                    item.addEventListener(egret.Event.SELECT, this.onMenuSelect, this);
                menu.addItem(item);
            }
            return menu;
        };
        /**
         * 菜单被点击
         */
        p.onMenuSelect = function (event) {
            switch (event.target["label"]) {
                case egret.utils.tr("关闭"):
                    this.dispatchEvent(new eui.CloseTabEvent(eui.CloseTabEvent.CLOSE, true));
                    break;
                case egret.utils.tr("关闭其他"):
                    this.dispatchEvent(new eui.CloseTabEvent(eui.CloseTabEvent.CLOSE_OTHER, true));
                    break;
                case egret.utils.tr("关闭全部"):
                    this.dispatchEvent(new eui.CloseTabEvent(eui.CloseTabEvent.CLOSE_ALL, true));
                    break;
            }
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.closeButton) {
                this.closeButton.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onCloseButtonDown, this, false, 2048);
                this.closeButton.addEventListener(egret.MouseEvent.CLICK, this.onCloseButtonClick, this);
            }
        };
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.closeButton) {
                this.closeButton.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.onCloseButtonDown, this, false);
                this.closeButton.removeEventListener(egret.MouseEvent.CLICK, this.onCloseButtonClick, this);
            }
        };
        p.onCloseButtonDown = function (event) {
            event.stopImmediatePropagation();
        };
        /**
         * 点击了关闭按钮
         */
        p.onCloseButtonClick = function (event) {
            event.stopImmediatePropagation();
            this.dispatchEvent(new eui.CloseTabEvent(eui.CloseTabEvent.CLOSE, true));
        };
        return CloseTabButton;
    })(eui.FocusTabBarButton);
    eui.CloseTabButton = CloseTabButton;
    egret.registerClass(CloseTabButton,'eui.CloseTabButton');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var Separator = (function (_super) {
        __extends(Separator, _super);
        function Separator() {
            _super.call(this);
            this.$graphics = new egret.Graphics();
            this.$graphics.$renderContext.$targetDisplay = this;
            this.touchChildren = false;
        }
        var c=Separator,p=c.prototype;
        /**
         * @private
         */
        p.$measureContentBounds = function (bounds) {
            if (this.$graphics) {
                bounds.setTo(0, 0, this.width, this.height);
            }
        };
        /**
         * @private
         */
        p.$render = function (context) {
            this.$graphics.$render(context);
        };
        p.updateDisplayList = function (w, h) {
            _super.prototype.updateDisplayList.call(this, w, h);
            if (isNaN(w))
                w = 0;
            if (isNaN(h))
                h = 0;
            var g = this.$graphics;
            g.clear();
            g.lineStyle(0, 0x1b2025, 0, true, "normal", "square");
            if (w > h) {
                g.moveTo(0, 1);
                g.lineTo(w, 1);
            }
            else {
                g.moveTo(1, 0);
                g.lineTo(1, h - 1);
            }
            g.endFill();
            g.lineStyle();
            g.beginFill(0x009aff, 0);
            g.drawRect(0, 0, w, h);
            g.endFill();
        };
        return Separator;
    })(eui.Group);
    eui.Separator = Separator;
    egret.registerClass(Separator,'eui.Separator');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var NavigationUnit = (function (_super) {
        __extends(NavigationUnit, _super);
        function NavigationUnit() {
            _super.apply(this, arguments);
        }
        var c=NavigationUnit,p=c.prototype;
        NavigationUnit.isNavigationUnit = function (keyCode) {
            switch (keyCode) {
                case egret.Keyboard.LEFT:
                    return true;
                case egret.Keyboard.RIGHT:
                    return true;
                case egret.Keyboard.UP:
                    return true;
                case egret.Keyboard.DOWN:
                    return true;
                case egret.Keyboard.PAGE_UP:
                    return true;
                case egret.Keyboard.PAGE_DOWN:
                    return true;
                case egret.Keyboard.HOME:
                    return true;
                case egret.Keyboard.END:
                    return true;
                default:
                    return false;
            }
        };
        NavigationUnit.HOME = 36;
        NavigationUnit.END = 35;
        NavigationUnit.UP = 38;
        NavigationUnit.DOWN = 40;
        NavigationUnit.LEFT = 37;
        NavigationUnit.RIGHT = 39;
        NavigationUnit.PAGE_UP = 33;
        NavigationUnit.PAGE_DOWN = 34;
        return NavigationUnit;
    })(egret.HashObject);
    eui.NavigationUnit = NavigationUnit;
    egret.registerClass(NavigationUnit,'eui.NavigationUnit');
})(eui || (eui = {}));
eui.NavigationUnit.HOME = egret.Keyboard.HOME;
eui.NavigationUnit.END = egret.Keyboard.END;
eui.NavigationUnit.UP = egret.Keyboard.UP;
eui.NavigationUnit.DOWN = egret.Keyboard.DOWN;
eui.NavigationUnit.ENTER = egret.Keyboard.ENTER;
eui.NavigationUnit.LEFT = egret.Keyboard.LEFT;
eui.NavigationUnit.RIGHT = egret.Keyboard.RIGHT;
eui.NavigationUnit.PAGE_UP = egret.Keyboard.PAGE_UP;
eui.NavigationUnit.PAGE_DOWN = egret.Keyboard.PAGE_DOWN;
eui.NavigationUnit.PAGE_LEFT = 0x2397;
eui.NavigationUnit.PAGE_RIGHT = 0x2398;
var eui;
(function (eui) {
    var PopUpPosition = (function (_super) {
        __extends(PopUpPosition, _super);
        function PopUpPosition() {
            _super.apply(this, arguments);
        }
        var c=PopUpPosition,p=c.prototype;
        return PopUpPosition;
    })(egret.HashObject);
    eui.PopUpPosition = PopUpPosition;
    egret.registerClass(PopUpPosition,'eui.PopUpPosition');
})(eui || (eui = {}));
eui.PopUpPosition.ABOVE = "above";
eui.PopUpPosition.BELOW = "below";
eui.PopUpPosition.CENTER = "center";
eui.PopUpPosition.TOP_LEFT = "topLeft";
eui.PopUpPosition.LEFT = "left";
eui.PopUpPosition.RIGHT = "right";
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var Dialog = (function (_super) {
        __extends(Dialog, _super);
        function Dialog() {
            _super.call(this);
            /**
             * 按钮名称以及对应的实例
             */
            this.buttons = new egret.HashObject();
            this._returnCode = DialogConstants.OK;
        }
        var c=Dialog,p=c.prototype;
        /**
         * 获取指定id的按钮
         */
        p.getButton = function (id) {
            if (this.buttons[id])
                return this.buttons[id];
            else
                return null;
        };
        /**
         * 窗口的返回代码
         */
        p.returnCode = function () {
            return this._returnCode;
        };
        /**
         * 对应名称按钮按下
         */
        p.buttonPressed = function (name) {
            if (DialogConstants.OK_ID == name) {
                this.okPressed();
            }
            else if (DialogConstants.CANCEL_ID == name) {
                this.cancelPressed();
            }
        };
        /**
         * 确定按钮按下
         */
        p.okPressed = function () {
            this._returnCode = DialogConstants.OK;
            this.close();
        };
        /**
         * 取消按钮按下
         */
        p.cancelPressed = function () {
            this._returnCode = DialogConstants.CANCEL;
            this.close();
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.buttonBar) {
                this.createButtonsForButtonBar();
            }
        };
        p.createButtonsForButtonBar = function () {
            this.createButton(DialogConstants.OK_ID, "确定", true);
            this.createButton(DialogConstants.CANCEL_ID, "取消");
        };
        p.createButton = function (id, label, isDefault) {
            if (label === void 0) { label = null; }
            if (isDefault === void 0) { isDefault = false; }
            var button = new eui.Button();
            button.name = id;
            button.label = label;
            button.minWidth = 80;
            button.minHeight = 25;
            button.addEventListener(egret.MouseEvent.CLICK, this.onButtonClick, this);
            if (isDefault)
                this.defaultButton = button;
            this.buttonBar.addChild(button);
            this.buttons[id] = button;
            return button;
        };
        p.onButtonClick = function (event) {
            this.buttonPressed(event.currentTarget["name"]);
        };
        /**
         * 设置默认按钮
         */
        p.setDefaultButton = function (button) {
            this.defaultButton = button;
        };
        p.onCloseButtonMouseEventClick = function (event) {
            if (event === void 0) { event = null; }
            this._returnCode = DialogConstants.CANCEL;
            if (eui.UIEvent.dispatchUIEvent(this, eui.UIEvent.CLOSING, true, true)) {
                this.close();
            }
        };
        p.onKeyDown = function (event) {
            if (event.keyCode == egret.Keyboard.ESCAPE) {
                this._returnCode = DialogConstants.CANCEL;
                close();
            }
            if (!this.defaultButton || !this.defaultButton.enabled || !this.defaultButton.touchEnabled)
                return;
            if (event.keyCode == egret.Keyboard.ENTER)
                this.buttonPressed(this.defaultButton.name);
        };
        return Dialog;
    })(eui.Panel);
    eui.Dialog = Dialog;
    egret.registerClass(Dialog,'eui.Dialog');
    var DialogConstants = (function () {
        function DialogConstants() {
        }
        var c=DialogConstants,p=c.prototype;
        /**
         * returnCode的值， 表示确定
         */
        DialogConstants.OK = 0;
        /**
         * returnCode的值， 表示取消
         */
        DialogConstants.CANCEL = 1;
        /**
         * 确定按钮id
         */
        DialogConstants.OK_ID = "ok";
        /**
         * 取消按钮id
         */
        DialogConstants.CANCEL_ID = "cancel";
        /**
         * 是按钮id
         */
        DialogConstants.YES_ID = "yes";
        /**
         * 否按钮id
         */
        DialogConstants.NO_ID = "no";
        /**
         * 恢复默认
         */
        DialogConstants.DEFAULFS_ID = "defaults";
        /**
         * 应用
         */
        DialogConstants.APPLY_ID = "apply";
        /**
         * 上一步
         */
        DialogConstants.BACK_ID = "back";
        /**
         * 下一步
         */
        DialogConstants.NEXT_ID = "next";
        /**
         * 完成
         */
        DialogConstants.FINISH_ID = "finish";
        /**
         * 无消息
         */
        DialogConstants.NONE = 0;
        /**
         * 提示消息
         */
        DialogConstants.INFORMATION = 1;
        /**
         * 警告消息
         */
        DialogConstants.WARNING = 2;
        /**
         * 错误消息
         */
        DialogConstants.ERROR = 3;
        return DialogConstants;
    })();
    eui.DialogConstants = DialogConstants;
    egret.registerClass(DialogConstants,'eui.DialogConstants');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var DialogPage = (function (_super) {
        __extends(DialogPage, _super);
        function DialogPage() {
            _super.call(this);
            this._messageType = eui.DialogConstants.NONE;
        }
        var c=DialogPage,p=c.prototype;
        p.getDescription = function () {
            return this._description;
        };
        p.setDescription = function (value) {
            this._description = value;
        };
        p.getTitle = function () {
            return this._title;
        };
        p.setTitle = function (value) {
            this._title = value;
        };
        p.getMessage = function () {
            return this._message;
        };
        p.getMessageType = function () {
            return this._messageType;
        };
        /**
         * 设置消息以及类型
         */
        p.setMessage = function (value, type) {
            if (type === void 0) { type = 0; }
            this._message = value;
            this._messageType = type;
        };
        p.getErrorMessage = function () {
            return this._errorMessage;
        };
        p.setErrorMessage = function (value) {
            this._errorMessage = value;
        };
        return DialogPage;
    })(eui.Group);
    eui.DialogPage = DialogPage;
    egret.registerClass(DialogPage,'eui.DialogPage');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var InputDialog = (function (_super) {
        __extends(InputDialog, _super);
        function InputDialog() {
            _super.call(this);
            this._value = "";
            this.width = 350;
            this.height = 180;
        }
        var c=InputDialog,p=c.prototype;
        /**
         * 验证输入
         */
        p.validateInput = function () {
            if (this.validator != null)
                this.errorMessage = this.validator(this.textInput.text);
            else
                this.errorMessage = null;
        };
        p.buttonPressed = function (name) {
            if (name == eui.DialogConstants.OK_ID) {
                this.value = this.textInput.text;
            }
            else {
                this.value = null;
            }
            _super.prototype.buttonPressed.call(this, name);
        };
        p.childrenCreated = function () {
            _super.prototype.childrenCreated.call(this);
            this.textInput.setFocus();
        };
        p.createButtonsForButtonBar = function () {
            _super.prototype.createButtonsForButtonBar.call(this);
            var button = this.getButton(eui.DialogConstants.OK_ID);
            if (button)
                button.enabled = this.errorMessage == null;
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (partName == "dialogArea") {
                this.createDialogArea();
            }
        };
        p.createDialogArea = function () {
            var _this = this;
            var group = this.dialogArea;
            group.percentWidth = 100;
            var vLayout = new eui.VerticalLayout();
            vLayout.horizontalAlign = egret.HorizontalAlign.CONTENT_JUSTIFY;
            vLayout.paddingLeft = vLayout.paddingRight = vLayout.paddingTop = vLayout.paddingBottom = 10;
            vLayout.gap = 5;
            group.layout = vLayout;
            this.tipsLabel = new eui.Label();
            this.tipsLabel.size = 12;
            this.tipsLabel.text = this.tips;
            group.addChild(this.tipsLabel);
            this.textInput = new eui.TextInput();
            this.textInput.skinName = "skins.TextInputSkin";
            this.textInput.text = this.value;
            this.textInput.addEventListener(egret.Event.CHANGE, function (e) {
                _this.validateInput();
            }, this);
            group.addChild(this.textInput);
            this.validateInput();
            this.errorMessageLabel = new eui.Label();
            this.errorMessageLabel.size = 12;
            this.errorMessageLabel.text = "test";
            group.addChild(this.errorMessageLabel);
            this.errorMessageLabel.validateNow();
            var bound = new egret.Rectangle();
            this.errorMessageLabel.getLayoutBounds(bound);
            this.errorMessageLabel.minHeight = bound.height;
            this.errorMessageLabel.text = this.errorMessage;
        };
        d(p, "validator"
            /**
             * 验证字符串的函数，如果字符串无效，返回无效的错误字符串。如果字符串验证通过，返回null。
             * 注意：空字符串和null不一样。
             * 函数形如： function(value:String):String
             */
            ,function () {
                return this._validator;
            }
            ,function (value) {
                this._validator = value;
            }
        );
        d(p, "errorMessage"
            /**
             * 错误的字符串
             */
            ,function () {
                return this._errorMessage;
            }
            ,function (value) {
                this._errorMessage = value;
                if (this.errorMessageLabel)
                    this.errorMessageLabel.text = value;
                var button = this.getButton(eui.DialogConstants.OK_ID);
                if (button)
                    button.enabled = this.errorMessage == null;
            }
        );
        d(p, "tips"
            /**
             * 提示的文本
             */
            ,function () {
                return this._tips;
            }
            ,function (value) {
                this._tips = value;
                if (this.tipsLabel)
                    this.tipsLabel.text = value;
            }
        );
        d(p, "value"
            /**
             * 输入的文本字符串
             */
            ,function () {
                return this._value;
            }
            ,function (value) {
                this._value = value;
                if (this.textInput)
                    this.textInput.text = value;
            }
        );
        return InputDialog;
    })(eui.Dialog);
    eui.InputDialog = InputDialog;
    egret.registerClass(InputDialog,'eui.InputDialog');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var MessageDialog = (function (_super) {
        __extends(MessageDialog, _super);
        function MessageDialog(dialogTitle, dialogMessage, buttonLabels, defaultIndex) {
            if (dialogTitle === void 0) { dialogTitle = null; }
            if (dialogMessage === void 0) { dialogMessage = null; }
            if (buttonLabels === void 0) { buttonLabels = null; }
            if (defaultIndex === void 0) { defaultIndex = -1; }
            _super.call(this);
            this.buttonLabels = [];
            this.buttonArrs = [];
            this.minWidth = 450;
            this.minHeight = 170;
            this.title = dialogTitle;
            this.message = dialogMessage;
            this.buttonLabels = buttonLabels;
            this.defaultButtonIndex = defaultIndex;
        }
        var c=MessageDialog,p=c.prototype;
        /**
     * 打开对话框
     */
        MessageDialog.openDialog = function (kind, title, message) {
            var dialog = new MessageDialog();
            dialog.buttonLabels = MessageDialog.getButtonLabels(kind);
            dialog.title = title;
            dialog.message = message;
            dialog.defaultButtonIndex = 0;
            return dialog;
        };
        MessageDialog.getButtonLabels = function (kind) {
            var dialogButtonLabels;
            switch (kind) {
                case MessageDialogConstants.ERROR:
                case MessageDialogConstants.INFORMATION:
                case MessageDialogConstants.WARNING: {
                    dialogButtonLabels = ["确定"];
                    break;
                }
                case MessageDialogConstants.CONFIRM: {
                    dialogButtonLabels = ["确定", "取消"];
                    break;
                }
                case MessageDialogConstants.QUESTION: {
                    dialogButtonLabels = ["是", "否"];
                    break;
                }
                default: {
                    throw new Error("Illegal value for kind in MessageDialog.open()");
                }
            }
            return dialogButtonLabels;
        };
        d(p, "message"
            /**
             * 文本
             */
            ,function () {
                return this._message;
            }
            ,function (value) {
                this._message = value;
                if (this.messageLabel)
                    this.messageLabel.text = value;
            }
        );
        d(p, "messageType"
            /**
             * 显示的消息常量
             */
            ,function () {
                return this._messageType;
            }
            ,function (value) {
                this._messageType = value;
            }
        );
        /**
         * 获取指定位置的Button
         */
        p.getButtonAt = function (index) {
            if (this.buttonArrs == null || index < 0 || index >= this.buttonArrs.length)
                return null;
            return this.buttonArrs[index];
        };
        p.buttonPressed = function (name) {
            this.close();
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.dialogArea) {
                this.messageLabel = new eui.Label();
                this.messageLabel.left = 40;
                this.messageLabel.top = 20;
                this.messageLabel.text = this.message;
                this.dialogArea.addChild(this.messageLabel);
            }
        };
        p.createButtonsForButtonBar = function () {
            this.buttonArrs.length = 0;
            if (!this.buttonLabels)
                return;
            for (var i = 0; i < this.buttonLabels.length; i++) {
                var label = this.buttonLabels[i];
                var button = this.createButton("", label, this.defaultButtonIndex == i);
                this.buttonArrs[i] = button;
            }
        };
        return MessageDialog;
    })(eui.Dialog);
    eui.MessageDialog = MessageDialog;
    egret.registerClass(MessageDialog,'eui.MessageDialog');
    var MessageDialogConstants = (function () {
        function MessageDialogConstants() {
        }
        var c=MessageDialogConstants,p=c.prototype;
        /**
         * 错误对话框，带有一个确定按钮
         */
        MessageDialogConstants.ERROR = 1;
        /**
         * 提示对话框，带有一个确定按钮
         */
        MessageDialogConstants.INFORMATION = 2;
        /**
         * 问题对话框，带有是和否的按钮
         */
        MessageDialogConstants.QUESTION = 3;
        /**
         * 警告对话框，带有确定按钮
         */
        MessageDialogConstants.WARNING = 4;
        /**
         * 确定对话框，带有确定和取消的按钮
         */
        MessageDialogConstants.CONFIRM = 5;
        return MessageDialogConstants;
    })();
    eui.MessageDialogConstants = MessageDialogConstants;
    egret.registerClass(MessageDialogConstants,'eui.MessageDialogConstants');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var PageChangeEvent = (function (_super) {
        __extends(PageChangeEvent, _super);
        function PageChangeEvent(type, oldPage, newPage) {
            if (oldPage === void 0) { oldPage = null; }
            if (newPage === void 0) { newPage = null; }
            _super.call(this, type, this.bubbles, true);
            this.oldPage = oldPage;
            this.newPage = newPage;
        }
        var c=PageChangeEvent,p=c.prototype;
        /**
        * 页面发生改变的事件
        */
        PageChangeEvent.CHANGED = "page_changed";
        /**
         * 页面即将改变的事件
         */
        PageChangeEvent.CHANGING = "page_changing";
        return PageChangeEvent;
    })(egret.Event);
    eui.PageChangeEvent = PageChangeEvent;
    egret.registerClass(PageChangeEvent,'eui.PageChangeEvent');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var TitleAreaDialog = (function (_super) {
        __extends(TitleAreaDialog, _super);
        function TitleAreaDialog() {
            _super.call(this);
            this.showingError = false;
        }
        var c=TitleAreaDialog,p=c.prototype;
        d(p, "titleAreaTitle"
            /**
             * 标题区的标题
             */
            ,function () {
                return this._titleAreaTitle;
            }
            ,function (value) {
                this._titleAreaTitle = value;
                if (this.titleLabel)
                    this.titleLabel.text = value;
            }
        );
        d(p, "message"
            /**
             * 显示的消息
             */
            ,function () {
                if (this._message === null)
                    return this.lastMessageText;
                return this._message;
            }
        );
        d(p, "messageType"
            /**
             * 显示的消息类型
             */
            ,function () {
                if (this.showingError)
                    return eui.DialogConstants.ERROR;
                else {
                    return this.lastMessageType;
                }
            }
        );
        /**
         * 设置消息以及类型
         */
        p.setMessage = function (newMessage, newType) {
            if (newType == eui.DialogConstants.ERROR) {
                if (newMessage === null) {
                    this.showingError = false;
                    if (this.lastMessageType != eui.DialogConstants.ERROR)
                        return;
                }
                else
                    this.showingError = true;
            }
            else {
                this.lastMessageType = newType;
                this.lastMessageText = newMessage;
            }
            this._message = newMessage;
            this.messageChanged = true;
            this.invalidateProperties();
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.messageChanged) {
                this.messageChanged = false;
                this.updateMessage(this.message);
            }
        };
        /**
         * 更新消息文本
         */
        p.updateMessage = function (newMessage) {
            if (this.messageType == eui.DialogConstants.ERROR)
                this.messageLabel.textColor = 0xff7373;
            else if (this.messageType == eui.DialogConstants.WARNING)
                this.messageLabel.textColor = 0xffd37a;
            else if (this.messageType == eui.DialogConstants.NONE)
                this.messageLabel.textColor = 0x000000;
            this.messageLabel.text = newMessage;
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.titleLabel) {
                this.titleLabel.text = this._titleAreaTitle;
            }
        };
        return TitleAreaDialog;
    })(eui.Dialog);
    eui.TitleAreaDialog = TitleAreaDialog;
    egret.registerClass(TitleAreaDialog,'eui.TitleAreaDialog');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var CellPosition = (function (_super) {
        __extends(CellPosition, _super);
        function CellPosition(rowIndex, columnIndex) {
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            _super.call(this);
            this._columnIndex = 0;
            this._rowIndex = 0;
            this._rowIndex = rowIndex;
            this._columnIndex = columnIndex;
        }
        var c=CellPosition,p=c.prototype;
        d(p, "columnIndex"
            ,function () {
                return this._columnIndex;
            }
            ,function (value) {
                this._columnIndex = value;
            }
        );
        d(p, "rowIndex"
            ,function () {
                return this._rowIndex;
            }
            ,function (value) {
                this._rowIndex = value;
            }
        );
        return CellPosition;
    })(egret.HashObject);
    eui.CellPosition = CellPosition;
    egret.registerClass(CellPosition,'eui.CellPosition');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var CellRegion = (function (_super) {
        __extends(CellRegion, _super);
        function CellRegion(rowIndex, columnIndex, rowCount, columnCount) {
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            if (rowCount === void 0) { rowCount = 0; }
            if (columnCount === void 0) { columnCount = 0; }
            _super.call(this);
            this._columnCount = 0;
            this._columnIndex = 0;
            this._rowCount = 0;
            this._rowIndex = 0;
            this._rowIndex = rowIndex;
            this._columnIndex = columnIndex;
            this._rowCount = rowCount;
            this._columnCount = columnCount;
        }
        var c=CellRegion,p=c.prototype;
        d(p, "columnCount"
            ,function () {
                return this._columnCount;
            }
            ,function (value) {
                this._columnCount = value;
            }
        );
        d(p, "columnIndex"
            ,function () {
                return this._columnIndex;
            }
            ,function (value) {
                this._columnIndex = value;
            }
        );
        d(p, "rowCount"
            ,function () {
                return this._rowCount;
            }
            ,function (value) {
                this._rowCount = value;
            }
        );
        d(p, "rowIndex"
            ,function () {
                return this._rowIndex;
            }
            ,function (value) {
                this._rowIndex = value;
            }
        );
        return CellRegion;
    })(egret.HashObject);
    eui.CellRegion = CellRegion;
    egret.registerClass(CellRegion,'eui.CellRegion');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var ColumnSeparator = (function (_super) {
        __extends(ColumnSeparator, _super);
        function ColumnSeparator() {
            _super.call(this);
            this.skinName = "skins.ColumnSeparatorSkin";
        }
        var c=ColumnSeparator,p=c.prototype;
        return ColumnSeparator;
    })(eui.Component);
    eui.ColumnSeparator = ColumnSeparator;
    egret.registerClass(ColumnSeparator,'eui.ColumnSeparator');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DataGridEditor = (function (_super) {
        __extends(DataGridEditor, _super);
        function DataGridEditor(dataGrid) {
            _super.call(this);
            this.gotDoubleClickEvent = false;
            this.gotFlexEnterEvent = false;
            this.inEndEdit = false;
            this._dataGrid = dataGrid;
        }
        var c=DataGridEditor,p=c.prototype;
        d(p, "dataGrid"
            ,function () {
                return this._dataGrid;
            }
            ,function (value) {
                egret.superSetter(eui.DataGridEditor, this, "dataGrid", value);
            }
        );
        d(p, "grid"
            ,function () {
                return this._dataGrid.grid;
            }
            ,function (value) {
                egret.superSetter(eui.DataGridEditor, this, "grid", value);
            }
        );
        d(p, "editedItemPosition"
            ,function () {
                if (this._editedItemPosition)
                    return { rowIndex: this._editedItemPosition["rowIndex"], columnIndex: this._editedItemPosition["columnIndex"] };
                else
                    return this._editedItemPosition;
            }
            ,function (value) {
                if (!value) {
                    this.setEditedItemPosition(null);
                    return;
                }
                var newValue = { rowIndex: value["rowIndex"], columnIndex: value["columnIndex"] };
                this.setEditedItemPosition(newValue);
            }
        );
        p.setEditedItemPosition = function (coord) {
            //            !this.grid["enabled"] || 默认是true；
            if (!this.dataGrid.editable)
                return;
            if (!this.grid.dataProvider || this.grid.dataProvider.length == 0)
                return;
            if (this.itemEditorInstance && coord && egret.is(this.itemEditorInstance, "egret.core.IUIComponent") && this._editedItemPosition["rowIndex"] == coord["rowIndex"] && this._editedItemPosition["columnIndex"] == coord["columnIndex"]) {
                //this.itemEditorInstance.setFocus();
                return;
            }
            if (this.itemEditorInstance) {
                if (!this.dataGrid.endItemEditorSession())
                    return;
            }
            this._editedItemPosition = coord;
            if (!coord)
                return;
            var rowIndex = coord["rowIndex"];
            var columnIndex = coord["columnIndex"];
            this.dataGrid.ensureCellIsVisible(rowIndex, columnIndex);
            this.createItemEditor(rowIndex, columnIndex);
            if (egret.is(this.itemEditorInstance, "egret.core.IInvalidating"))
                this.itemEditorInstance.validateNow();
            var column = this.dataGrid.columns.getItemAt(columnIndex);
            this.lastEditedItemPosition = this._editedItemPosition;
            var dataGridEvent = null;
            if (column.rendererIsEditable == false)
                dataGridEvent = new eui.GridItemEditorEvent(eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START);
            if (dataGridEvent) {
                dataGridEvent.columnIndex = this.editedItemPosition["columnIndex"];
                dataGridEvent.column = column;
                dataGridEvent.rowIndex = this.editedItemPosition["rowIndex"];
                this.dataGrid.dispatchEvent(dataGridEvent);
            }
        };
        d(p, "editedItemRenderer"
            ,function () {
                return this._editedItemRenderer;
            }
            ,function (value) {
                egret.superSetter(eui.DataGridEditor, this, "editedItemRenderer", value);
            }
        );
        d(p, "editorColumnIndex"
            ,function () {
                if (this.editedItemPosition)
                    return this.editedItemPosition["columnIndex"];
                return -1;
            }
            ,function (value) {
                egret.superSetter(eui.DataGridEditor, this, "editorColumnIndex", value);
            }
        );
        d(p, "editorRowIndex"
            ,function () {
                if (this.editedItemPosition)
                    return this.editedItemPosition["rowIndex"];
                return -1;
            }
            ,function (value) {
                egret.superSetter(eui.DataGridEditor, this, "editorRowIndex", value);
            }
        );
        p.initialize = function () {
            var grid = this.dataGrid.grid;
            //                    this.dataGrid.addEventListener(eui.KeyboardEvent.KEY_DOWN,this.dataGrid_keyboardDownHandler,this);
            grid.addEventListener(eui.GridEvent.GRID_MOUSE_DOWN, this.grid_gridMouseDownHandler, this, false, 1000);
            grid.addEventListener(eui.GridEvent.GRID_MOUSE_UP, this.grid_gridMouseUpHandler, this, false, 1000);
            grid.addEventListener(eui.GridEvent.GRID_DOUBLE_CLICK, this.grid_gridDoubleClickHandler, this);
        };
        p.uninitialize = function () {
            //            this.grid.removeEventListener(eui.KeyboardEvent.KEY_DOWN,this.dataGrid_keyboardDownHandler,this);
            this.grid.removeEventListener(eui.GridEvent.GRID_MOUSE_DOWN, this.grid_gridMouseDownHandler, this);
            this.grid.removeEventListener(eui.GridEvent.GRID_MOUSE_UP, this.grid_gridMouseUpHandler, this);
            this.grid.removeEventListener(eui.GridEvent.GRID_DOUBLE_CLICK, this.grid_gridDoubleClickHandler, this);
        };
        p.destroyItemEditor = function () {
            //if(this.grid.root)
            //	this.grid.systemManager["addEventListener"](egret.Event.DEACTIVATE,this.deactivateHandler,this,false,0);
            var stage = this.grid.stage;
            stage.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.sandBoxRoot_mouseDownHandler, this, true);
            stage.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.sandBoxRoot_mouseDownHandler, this);
            stage.removeEventListener(egret.Event.RESIZE, this.editorAncestorResizeHandler, this);
            this.dataGrid.removeEventListener(egret.Event.RESIZE, this.editorAncestorResizeHandler, this);
            if (this.itemEditorInstance || this.editedItemRenderer) {
                if (this.itemEditorInstance)
                    this.itemEditorInstance.discard();
                var o;
                if (this.itemEditorInstance)
                    o = this.itemEditorInstance;
                else
                    o = this.editedItemRenderer;
                //                o["removeEventListener"](eui.KeyboardEvent.KEY_DOWN,this.editor_keyDownHandler,this);
                //                o["removeEventListener"](eui.FocusEvent.FOCUS_OUT,this.editor_focusOutHandler,this);
                this.addRemoveUIEventEnterListener(o, false);
                this.dataGrid.setFocus();
                if (this.itemEditorInstance)
                    this.grid.removeChild(this.itemEditorInstance);
                else
                    this.grid.invalidateDisplayList();
                this.itemEditorInstance = null;
                this._editedItemRenderer = null;
                this._editedItemPosition = null;
            }
        };
        p.createItemEditor = function (rowIndex, columnIndex) {
            if (columnIndex >= this.grid.columns.length)
                return;
            var col = this.grid.columns.getItemAt(columnIndex);
            var item = this.grid.getItemRendererAt(rowIndex, columnIndex);
            var cellBounds = this.grid.getCellBounds(rowIndex, columnIndex);
            var localCellOrigin = cellBounds.topLeft;
            this._editedItemRenderer = item;
            if (!col.rendererIsEditable) {
                var itemEditor = col.itemEditor;
                if (!itemEditor)
                    itemEditor = this.dataGrid.itemEditor;
                if (!itemEditor)
                    itemEditor = eui.GridColumn.defaultItemEditor;
                if (itemEditor == eui.GridColumn.defaultItemEditor) {
                    if (this.defaultDataGridItemEditor) {
                        itemEditor = col.itemEditor = this.defaultDataGridItemEditor;
                    }
                }
                this.itemEditorInstance = new itemEditor();
                this.itemEditorInstance.ownerChanged(this.dataGrid);
                this.itemEditorInstance.rowIndex = rowIndex;
                this.itemEditorInstance.column = col;
                this.grid.addChild(this.itemEditorInstance);
                this.itemEditorInstance["data"] = item["data"];
                this.itemEditorInstance.width = cellBounds.width + 1;
                this.itemEditorInstance.height = cellBounds.height + 1;
                this.itemEditorInstance.setLayoutBoundsPosition(localCellOrigin.x, localCellOrigin.y);
                if (egret.is(this.itemEditorInstance, "eui.IInvalidating"))
                    this.itemEditorInstance.validateNow();
                this.itemEditorInstance.prepare();
                this.itemEditorInstance.visible = true;
            }
            else {
                if (egret.is(item, "eui.UIComponent"))
                    item.setFocus();
            }
            if (this.itemEditorInstance != null || this.editedItemRenderer != null) {
                var editor;
                if (this.itemEditorInstance) {
                    editor = this.itemEditorInstance;
                }
                else {
                    editor = this.editedItemRenderer;
                }
                editor["addEventListener"](egret.FocusEvent.FOCUS_OUT, this.editor_focusOutHandler, this);
                //                        editor["addEventListener"](eui.KeyboardEvent.KEY_DOWN,this.editor_keyDownHandler,this);
                this.addRemoveUIEventEnterListener((editor), true);
            }
            this.grid.invalidateDisplayList();
            //if(this.grid.root)
            //	this.grid.systemManager["addEventListener"](egret.Event.DEACTIVATE,this.deactivateHandler,this,false,0);
            var stage = this.grid.stage;
            stage.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.sandBoxRoot_mouseDownHandler, this);
            stage.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.sandBoxRoot_mouseDownHandler, this);
            //            this.grid.addEventListener(egret.Event.RESIZE,this.editorAncestorResizeHandler,this);
            this.grid.addEventListener(egret.Event.RESIZE, this.editorAncestorResizeHandler, this);
        };
        p.wasLastEventMovingBackward = function () {
            //                    if(this.lastEvent) {
            //                        if(this.lastEvent.type == egret.FocusEvent.KEY_FOCUS_CHANGE && (<egret.FocusEvent>(this.lastEvent)).shiftKey) {
            //                            return true;
            //                        }
            //                        if(this.lastEvent.type == eui.KeyboardEvent.KEY_DOWN && (<egret.KeyboardEvent>(this.lastEvent)).keyCode == egret.ui.Keyboard.TAB && (<eui.KeyboardEvent>(this.lastEvent)).shiftKey) {
            //                            return true;
            //                        }
            //                    }
            return false;
        };
        p.startItemEditorSession = function (rowIndex, columnIndex) {
            if (!this.isValidCellPosition(rowIndex, columnIndex))
                return false;
            this.dataGrid.addEventListener(eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING, this.dataGrid_gridItemEditorSessionStartingHandler, this, false, -50);
            var column = this.grid.columns.getItemAt(columnIndex);
            if (!column || !column.visible)
                return false;
            var dataGridEvent = new eui.GridItemEditorEvent(eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING, false, true);
            dataGridEvent.rowIndex = Math.min(rowIndex, this.grid.dataProvider.length - 1);
            dataGridEvent.columnIndex = Math.min(columnIndex, this.grid.columns.length - 1);
            dataGridEvent.column = column;
            var editorStarted = false;
            if (column.rendererIsEditable == true) {
                this.dataGrid_gridItemEditorSessionStartingHandler(dataGridEvent);
                editorStarted = true;
            }
            else {
                editorStarted = this.dataGrid.dispatchEvent(dataGridEvent);
            }
            if (editorStarted) {
                this.lastEditedItemPosition = { columnIndex: columnIndex, rowIndex: rowIndex };
                this.dataGrid.grid.caretRowIndex = rowIndex;
                this.dataGrid.grid.caretColumnIndex = columnIndex;
            }
            this.dataGrid.removeEventListener(eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING, this.dataGrid_gridItemEditorSessionStartingHandler, this);
            return editorStarted;
        };
        p.endItemEditorSession = function (cancel) {
            if (cancel === void 0) { cancel = false; }
            if (cancel) {
                this.cancelEdit();
                return false;
            }
            else {
                return this.endEdit();
            }
        };
        p.cancelEdit = function () {
            if (this.itemEditorInstance) {
                this.dispatchCancelEvent();
                this.destroyItemEditor();
            }
            else if (this.editedItemRenderer) {
                this.destroyItemEditor();
            }
        };
        p.dispatchCancelEvent = function () {
            var dataGridEvent = new eui.GridItemEditorEvent(eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL);
            dataGridEvent.columnIndex = this.editedItemPosition["columnIndex"];
            dataGridEvent.column = this.itemEditorInstance.column;
            dataGridEvent.rowIndex = this.editedItemPosition["rowIndex"];
            this.dataGrid.dispatchEvent(dataGridEvent);
        };
        p.endEdit = function () {
            if (!this.itemEditorInstance && this.editedItemRenderer) {
                this.inEndEdit = true;
                this.destroyItemEditor();
                this.inEndEdit = false;
                return true;
            }
            if (!this.itemEditorInstance)
                return false;
            this.inEndEdit = true;
            var itemPosition = this.editedItemPosition;
            if (!this.saveItemEditorSession()) {
                this.dispatchCancelEvent();
                this.inEndEdit = false;
                return false;
            }
            var dataGridEvent = new eui.GridItemEditorEvent(eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE, false, true);
            dataGridEvent.columnIndex = itemPosition["columnIndex"];
            dataGridEvent.column = this.dataGrid.columns.getItemAt(itemPosition["columnIndex"]);
            dataGridEvent.rowIndex = itemPosition["rowIndex"];
            this.dataGrid.dispatchEvent(dataGridEvent);
            this.inEndEdit = false;
            return true;
        };
        p.saveItemEditorSession = function () {
            var dataSaved = false;
            if (this.itemEditorInstance) {
                dataSaved = this.itemEditorInstance.save();
                if (dataSaved)
                    this.destroyItemEditor();
            }
            return dataSaved;
        };
        p.openEditorInNextEditableCell = function (rowIndex, columnIndex, backward) {
            var nextCell = new egret.Point(rowIndex, columnIndex);
            var openedEditor = false;
            do {
                nextCell = this.getNextEditableCell(nextCell.x, nextCell.y, backward);
                if (nextCell)
                    openedEditor = this.dataGrid.startItemEditorSession(nextCell.x, nextCell.y);
            } while (nextCell && !openedEditor);
            return openedEditor;
        };
        p.getNextEditableCell = function (rowIndex, columnIndex, backward) {
            var increment = backward ? -1 : 1;
            do {
                var nextColumn = columnIndex + increment;
                if (nextColumn >= 0 && nextColumn < this.dataGrid.columns.length) {
                    columnIndex += increment;
                }
                else {
                    columnIndex = backward ? this.dataGrid.grid.columns.length - 1 : 0;
                    var nextRow = rowIndex + increment;
                    if (nextRow >= 0 && nextRow < this.dataGrid.dataProvider.length)
                        rowIndex += increment;
                    else
                        return null;
                }
            } while (!this.canEditColumn(columnIndex));
            return new egret.Point(rowIndex, columnIndex);
        };
        p.canEditColumn = function (columnIndex) {
            var column = this.grid.columns.getItemAt(columnIndex);
            return (this.dataGrid.editable && column.editable && column.visible);
        };
        p.wasCellPreviouslySelected = function (rowIndex, columnIndex) {
            if (this.dataGrid.isRowSelectionMode())
                return this.dataGrid.selectionContainsIndex(rowIndex);
            else if (this.dataGrid.isCellSelectionMode())
                return this.dataGrid.selectionContainsCell(rowIndex, columnIndex);
            return false;
        };
        p.isValidCellPosition = function (rowIndex, cellIndex) {
            if (rowIndex >= 0 && rowIndex < this.dataGrid.dataProvider.length && cellIndex >= 0 && cellIndex < this.dataGrid.columns.length) {
                return true;
            }
            return false;
        };
        p.addRemoveUIEventEnterListener = function (element, addListener) {
            if (addListener)
                element.addEventListener(eui.UIEventEx.ENTER, this.editor_enterHandler, this);
            else
                element.removeEventListener(eui.UIEventEx.ENTER, this.editor_enterHandler, this);
            if (egret.is(element, "egret.DisplayObjectContainer")) {
                var container = (element);
                var n = container.numChildren;
                for (var i = 0; i < n; i++) {
                    var child = container.getChildAt(i);
                    if (egret.is(child, "egret.DisplayObjectContainer")) {
                        this.addRemoveUIEventEnterListener(child, addListener);
                    }
                    else {
                        if (addListener)
                            child.addEventListener(eui.UIEventEx.ENTER, this.editor_enterHandler, this);
                        else
                            child.removeEventListener(eui.UIEventEx.ENTER, this.editor_enterHandler, this);
                    }
                }
            }
        };
        p.editorOwnsClick = function (event) {
            if (egret.is(event, "egret.MouseEvent")) {
                var target = this.getIUIComponent(event.target);
                if (target)
                    return this.editorOwns(target);
            }
            return false;
        };
        p.editorOwns = function (child) {
            var isOwner = function (parent, child) {
                if (parent["contains"](child))
                    return true;
                while (child && child != parent) {
                    if (egret.is(child, "egret.core.ISkin"))
                        child = (child).hostComponent;
                    else if (egret.is(child, "eui.UIComponent"))
                        child = (child)["owner"];
                    else
                        child = child["parent"];
                }
                return child == parent;
            };
            return (this.itemEditorInstance && isOwner(this.itemEditorInstance, child) || (this.editedItemRenderer && isOwner(this.editedItemRenderer, child)));
        };
        p.getIUIComponent = function (displayObject) {
            if (egret.is(displayObject, "eui.UIComponent"))
                return (displayObject);
            var current = displayObject.parent;
            while (current) {
                //                if(egret.is(current,"eui.UIComponent"))
                //                	return <any>current;
                current = current.parent;
            }
            return null;
        };
        p.dataGrid_gridItemEditorSessionStartingHandler = function (event) {
            if (!event.isDefaultPrevented()) {
                this.setEditedItemPosition({ columnIndex: event.column.columnIndex, rowIndex: event.rowIndex });
            }
            else if (!this.itemEditorInstance) {
                this._editedItemPosition = null;
                this.dataGrid.setFocus();
            }
        };
        p.dataGrid_keyboardDownHandler = function (event) {
            if (!this.dataGrid.editable || this.dataGrid.selectionMode == eui.GridSelectionMode.NONE)
                return;
            if (event.isDefaultPrevented())
                return;
            this.lastEvent = event;
            //            if(event.keyCode == this.dataGrid.editKey) {
            //                if(this.itemEditorInstance)
            //                    return;
            //                var nextCell: egret.Point = null;
            //                if(this.dataGrid.isRowSelectionMode()) {
            //                    var lastColumn: number = this.lastEditedItemPosition ? this.lastEditedItemPosition.columnIndex : 0;
            //                    this.openEditorInNextEditableCell(this.dataGrid.grid.caretRowIndex,lastColumn - 1,false);
            //                    return;
            //                }
            //                else if(this.canEditColumn(this.grid.caretColumnIndex)) {
            //                    this.dataGrid.startItemEditorSession(this.grid.caretRowIndex,this.grid.caretColumnIndex);
            //                }
            //            }
        };
        p.grid_gridMouseDownHandler = function (event) {
            this.gotDoubleClickEvent = false;
            if (!this.dataGrid.editable || this.editorOwnsClick(event))
                return;
            if (!this.isValidCellPosition(event.rowIndex, event.columnIndex))
                return;
            this.lastEvent = event;
            var rowIndex = event.rowIndex;
            var columnIndex = event.columnIndex;
            var r = event.itemRenderer;
            this.lastItemDown = null;
            if (event["shiftKey"] || event["ctrlKey"])
                return;
            if (this.itemEditorInstance) {
                if (!this.dataGrid.endItemEditorSession()) {
                    this.dataGrid.endItemEditorSession(true);
                }
                return;
            }
            var column = this.dataGrid.columns.getItemAt(columnIndex);
            if (r && (column.rendererIsEditable || this.dataGrid.editOnMouseUp || this.wasCellPreviouslySelected(rowIndex, columnIndex))) {
                this.lastItemDown = r;
            }
        };
        p.grid_gridMouseUpHandler = function (event) {
            if (!this.dataGrid.editable)
                return;
            if (!this.isValidCellPosition(event.rowIndex, event.columnIndex))
                return;
            this.lastEvent = event;
            var eventRowIndex = event.rowIndex;
            var eventColumnIndex = event.columnIndex;
            if (this.dataGrid.selectionLength != 1)
                return;
            var rowIndex = eventRowIndex;
            var columnIndex = eventColumnIndex;
            var r = event.itemRenderer;
            if (r && r != this.editedItemRenderer && this.lastItemDown && this.lastItemDown == r) {
                if (columnIndex >= 0) {
                    if (this.grid.columns.getItemAt(columnIndex)["editable"]) {
                        if (this.doubleClickTimer) {
                            if (rowIndex == this.lastItemClickedPosition["rowIndex"] && columnIndex == this.lastItemClickedPosition["columnIndex"]) {
                                this.lastItemDown == null;
                                return;
                            }
                            else {
                                this.doubleClickTimer.stop();
                                this.doubleClickTimer = null;
                            }
                        }
                        this.lastItemClickedPosition = { columnIndex: columnIndex, rowIndex: rowIndex };
                        if (this.dataGrid.editOnDoubleClick || this.lastItemDown.doubleClickEnabled == false) {
                            this.dataGrid.startItemEditorSession(rowIndex, columnIndex);
                        }
                        else {
                            this.doubleClickTimer = new egret.Timer(this.dataGrid.doubleClickTime, 1);
                            this.doubleClickTimer.addEventListener(egret.TimerEvent.TIMER, this.doubleClickTimerHandler, this);
                            this.doubleClickTimer.start();
                        }
                    }
                }
            }
            this.lastItemDown = null;
        };
        p.grid_gridDoubleClickHandler = function (event) {
            if (!this.dataGrid.editable)
                return;
            if (!this.isValidCellPosition(event.rowIndex, event.columnIndex))
                return;
            this.lastEvent = event;
            this.gotDoubleClickEvent = true;
        };
        p.doubleClickTimerHandler = function (event) {
            this.doubleClickTimer.removeEventListener(egret.TimerEvent.TIMER, this.doubleClickTimerHandler, this);
            this.doubleClickTimer = null;
            if (!this.gotDoubleClickEvent) {
                this.dataGrid.startItemEditorSession(this.lastItemClickedPosition["rowIndex"], this.lastItemClickedPosition["columnIndex"]);
            }
            this.gotDoubleClickEvent = false;
        };
        p.deactivateHandler = function (event) {
            if (this.itemEditorInstance || this.editedItemRenderer) {
                if (!this.dataGrid.endItemEditorSession()) {
                    this.dataGrid.endItemEditorSession(true);
                }
                this.dataGrid.setFocus();
            }
        };
        p.editor_focusOutHandler = function (event) {
            if (event.relatedObject) {
                var component = this.getIUIComponent(event.relatedObject);
                if (component && this.editorOwns(component))
                    return;
            }
            if (!event.relatedObject)
                return;
            if (this.itemEditorInstance || this.editedItemRenderer) {
                if (!this.dataGrid.endItemEditorSession()) {
                    this.dataGrid.endItemEditorSession(true);
                }
            }
        };
        p.editor_enterHandler = function (event) {
            if (egret.is(event, "eui.UIEvent"))
                this.gotFlexEnterEvent = true;
        };
        p.editor_keyDownHandler = function (event) {
            //            if(event.isDefaultPrevented()) {
            //                if(!(event.charCode == egret.ui.Keyboard.ENTER && this.gotFlexEnterEvent)) {
            //                    this.gotFlexEnterEvent = false;
            //                    return;
            //                }
            //            }
            //            this.gotFlexEnterEvent = false;
            //            if(event.keyCode == egret.ui.Keyboard.ESCAPE) {
            //                this.cancelEdit();
            //            }
            //            else if(event.ctrlKey && event.charCode == 46) {
            //                this.cancelEdit();
            //            }
            event.stopPropagation();
        };
        p.editorAncestorResizeHandler = function (event) {
            if (!this.dataGrid.endItemEditorSession()) {
                this.dataGrid.endItemEditorSession(true);
            }
        };
        p.sandBoxRoot_mouseDownHandler = function (event) {
            if (this.editorOwnsClick(event)) {
                return;
            }
            if (this.dataGrid.scroller && this.dataGrid.scroller.contains((event.target)) && !this.grid.contains((event.target))) {
                return;
            }
            if (!this.dataGrid.endItemEditorSession()) {
                this.dataGrid.endItemEditorSession(true);
            }
            this.dataGrid.setFocus();
        };
        return DataGridEditor;
    })(egret.HashObject);
    eui.DataGridEditor = DataGridEditor;
    egret.registerClass(DataGridEditor,'eui.DataGridEditor');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridItemEditor = (function (_super) {
        __extends(GridItemEditor, _super);
        function GridItemEditor() {
            _super.call(this);
            this._data = null;
            this._rowIndex = 0;
        }
        var c=GridItemEditor,p=c.prototype;
        d(p, "owner"
            ,function () {
                return this._owner;
            }
            ,function (value) {
                this._owner = value;
            }
        );
        p.ownerChanged = function (value) {
            this.owner = value;
        };
        d(p, "column"
            ,function () {
                return this._column;
            }
            ,function (value) {
                this._column = value;
            }
        );
        d(p, "columnIndex"
            ,function () {
                return this.column.columnIndex;
            }
            ,function (value) {
                egret.superSetter(eui.GridItemEditor, this, "columnIndex", value);
            }
        );
        d(p, "data"
            ,function () {
                return this._data;
            }
            ,function (value) {
                this._data = value;
                this.dataChanged();
            }
        );
        /**
         * @language zh_CN
         * 当数据改变时，更新视图。
         */
        p.dataChanged = function () {
            if (this._data && this.column.dataField) {
                this.value = this._data[this.column.dataField];
            }
        };
        d(p, "dataGrid"
            ,function () {
                return (this.owner);
            }
            ,function (value) {
                egret.superSetter(eui.GridItemEditor, this, "dataGrid", value);
            }
        );
        d(p, "enableIME"
            ,function () {
                return true;
            }
            ,function (value) {
                egret.superSetter(eui.GridItemEditor, this, "enableIME", value);
            }
        );
        d(p, "itemRenderer"
            ,function () {
                return this._itemRenderer;
            }
            ,function (value) {
                this._itemRenderer = value;
            }
        );
        d(p, "rowIndex"
            ,function () {
                return this._rowIndex;
            }
            ,function (value) {
                this._rowIndex = value;
            }
        );
        d(p, "value"
            ,function () {
                return this._value;
            }
            ,function (newValue) {
                if (newValue == this._value)
                    return;
                this._value = newValue;
            }
        );
        p.discard = function () {
            var _self__ = this;
            _self__.removeEventListener(egret.MouseEvent.MOUSE_UP, this.mouseUpDownMoveHandler, this);
            _self__.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.mouseUpDownMoveHandler, this);
            _self__.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.mouseMoveHandler, this);
        };
        p.prepare = function () {
            var _self__ = this;
            _self__.addEventListener(egret.MouseEvent.MOUSE_UP, this.mouseUpDownMoveHandler, this);
            _self__.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.mouseUpDownMoveHandler, this);
            _self__.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.mouseMoveHandler, this);
        };
        p.save = function () {
            if (!this.validate())
                return false;
            var newData = this.value;
            var property = this.column.dataField;
            var data = this._data;
            var typeInfo = "string";
            //            var dxml: flash.XML = flash.describeType(data);
            //            for(var variable_key_a in dxml.dot("variable")) {
            //                var variable: flash.XML = dxml.dot("variable")[variable_key_a];
            //                if(property == variable.dotAlt("name").toString()) {
            //                    typeInfo = variable.dotAlt("type").toString();
            //                    break;
            //                }
            //            }
            if (typeInfo == "string") {
                if (!(egret.is(newData, "string")))
                    newData = newData.toString();
            }
            if (property && data[property] !== newData) {
                data[property] = newData;
                if (this.dataGrid.dataProvider["itemUpdated"])
                    this.dataGrid.dataProvider["itemUpdated"](data);
            }
            return true;
        };
        p.validate = function () {
            return true;
        };
        p.mouseUpDownMoveHandler = function (event) {
            if (event.cancelable)
                event.preventDefault();
        };
        p.mouseMoveHandler = function (event) {
            // comment because it will not work
            // var pt: egret.Point = this.dataGrid.parent.globalToLocal(event["stageX"],event["stageY"]);
            // event["localX"] = pt.x;
            // event["localY"] = pt.y;
            this.dataGrid.parent.dispatchEvent(event);
            event.stopPropagation();
        };
        return GridItemEditor;
    })(eui.Component);
    eui.GridItemEditor = GridItemEditor;
    egret.registerClass(GridItemEditor,'eui.GridItemEditor');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DefaultGridItemEditor = (function (_super) {
        __extends(DefaultGridItemEditor, _super);
        function DefaultGridItemEditor() {
            _super.call(this);
            this.skinName = "skins.TextInputSkin";
        }
        var c=DefaultGridItemEditor,p=c.prototype;
        d(p, "value"
            ,function () {
                return this.textDisplay.text;
            }
            ,function (newValue) {
                this.textDisplay.type = egret.TextFieldType.INPUT;
                this.textDisplay.touchEnabled = true;
                this.textDisplay.text = newValue != null ? newValue.toString() : "";
                this.textDisplay.setFocus();
                //            this.textDisplay["selectAll"]();
            }
        );
        return DefaultGridItemEditor;
    })(eui.GridItemEditor);
    eui.DefaultGridItemEditor = DefaultGridItemEditor;
    egret.registerClass(DefaultGridItemEditor,'eui.DefaultGridItemEditor');
})(eui || (eui = {}));
/**
 *
 * @author
 *
 */
var eui;
(function (eui) {
    var EditorIndicator = (function (_super) {
        __extends(EditorIndicator, _super);
        function EditorIndicator() {
            _super.call(this);
            this.skinName = "skins.EditorIndicatorSkin";
            this.touchChildren = false;
            this.touchEnabled = false;
        }
        var c=EditorIndicator,p=c.prototype;
        return EditorIndicator;
    })(eui.Component);
    eui.EditorIndicator = EditorIndicator;
    egret.registerClass(EditorIndicator,'eui.EditorIndicator');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridColumn = (function (_super) {
        __extends(GridColumn, _super);
        function GridColumn(columnName) {
            if (columnName === void 0) { columnName = null; }
            _super.call(this);
            this._grid = null;
            this._columnIndex = -1;
            this._dataField = null;
            this.dataFieldPath = [];
            this._dataTipField = null;
            this._dataTipFunction = null;
            this._editable = true;
            this._headerRenderer = null;
            this._imeMode = null;
            this._itemEditor = null;
            this._itemRenderer = null;
            this._itemRendererFunction = null;
            this._labelFunction = null;
            this._width = NaN;
            this._minWidth = 20;
            this._maxWidth = NaN;
            this._rendererIsEditable = false;
            this._resizable = true;
            this._showDataTips = undefined;
            this._sortable = true;
            this._sortDescending = false;
            this._visible = true;
            if (columnName)
                this.dataField = this.headerText = columnName;
        }
        var c=GridColumn,p=c.prototype;
        d(GridColumn, "defaultItemEditor"
            ,function () {
                if (!eui.GridColumn._defaultItemEditor)
                    eui.GridColumn._defaultItemEditor = eui.DefaultGridItemEditor;
                return eui.GridColumn._defaultItemEditor;
            }
        );
        d(p, "defaultItemEditor",undefined
            ,function (value) {
                egret.superSetter(eui.GridColumn, this, "defaultItemEditor", value);
            }
        );
        GridColumn.dataFieldPathSortCompare = function (obj1, obj2, column) {
            if (!obj1 && !obj2)
                return 0;
            if (!obj1)
                return 1;
            if (!obj2)
                return -1;
            var dataFieldPath = column.dataFieldPath;
            var obj1String = column.itemToString(obj1, dataFieldPath, null);
            var obj2String = column.itemToString(obj2, dataFieldPath, null);
            if (obj1String < obj2String)
                return -1;
            if (obj1String > obj2String)
                return 1;
            return 0;
        };
        p.setGrid = function (value) {
            if (this._grid == value)
                return;
            this._grid = value;
            this.dispatchChangeEvent("gridChanged");
        };
        d(p, "grid"
            ,function () {
                return this._grid;
            }
            ,function (value) {
                egret.superSetter(eui.GridColumn, this, "grid", value);
            }
        );
        p.setColumnIndex = function (value) {
            if (this._columnIndex == value)
                return;
            this._columnIndex = value;
            this.dispatchChangeEvent("columnIndexChanged");
        };
        d(p, "columnIndex"
            ,function () {
                return this._columnIndex;
            }
            ,function (value) {
                egret.superSetter(eui.GridColumn, this, "columnIndex", value);
            }
        );
        d(p, "dataField"
            ,function () {
                return this._dataField;
            }
            ,function (value) {
                if (this._dataField == value)
                    return;
                this._dataField = value;
                if (value == null) {
                    this.dataFieldPath = [];
                }
                else if (value.indexOf(".") != -1) {
                    this.dataFieldPath = value.split(".");
                }
                else {
                    this.dataFieldPath = [value];
                }
                this.invalidateGrid();
                if (this.grid)
                    this.grid["clearGridLayoutCache"](true);
                this.dispatchChangeEvent("dataFieldChanged");
            }
        );
        d(p, "dataTipField"
            ,function () {
                return this._dataTipField;
            }
            ,function (value) {
                if (this._dataTipField == value)
                    return;
                this._dataTipField = value;
                if (this.grid)
                    this.grid.invalidateDisplayList();
                this.dispatchChangeEvent("dataTipFieldChanged");
            }
        );
        d(p, "dataTipFunction"
            ,function () {
                return this._dataTipFunction;
            }
            ,function (value) {
                if (this._dataTipFunction == value)
                    return;
                this._dataTipFunction = value;
                if (this.grid)
                    this.grid.invalidateDisplayList();
                this.dispatchChangeEvent("dataTipFunctionChanged");
            }
        );
        d(p, "editable"
            ,function () {
                return this._editable;
            }
            ,function (value) {
                if (this._editable == value)
                    return;
                this._editable = value;
                this.dispatchChangeEvent("editableChanged");
            }
        );
        d(p, "headerRenderer"
            ,function () {
                return this._headerRenderer;
            }
            ,function (value) {
                if (this._headerRenderer == value)
                    return;
                this._headerRenderer = value;
                if (this.grid)
                    this.grid.invalidateDisplayList();
                this.dispatchChangeEvent("headerRendererChanged");
            }
        );
        d(p, "headerText"
            ,function () {
                return (this._headerText != null) ? this._headerText : ((this.dataField) ? this.dataField : "");
            }
            ,function (value) {
                this._headerText = value;
                if (this.grid)
                    this.grid.invalidateDisplayList();
                this.dispatchChangeEvent("headerTextChanged");
            }
        );
        d(p, "imeMode"
            ,function () {
                return this._imeMode;
            }
            ,function (value) {
                this._imeMode = value;
            }
        );
        d(p, "itemEditor"
            ,function () {
                return this._itemEditor;
            }
            ,function (value) {
                if (this._itemEditor == value)
                    return;
                this._itemEditor = value;
                this.dispatchChangeEvent("itemEditorChanged");
            }
        );
        d(p, "itemRenderer"
            ,function () {
                return (this._itemRenderer) ? this._itemRenderer : this.grid.itemRenderer;
            }
            ,function (value) {
                if (this._itemRenderer == value)
                    return;
                this._itemRenderer = value;
                this.invalidateGrid();
                if (this.grid)
                    this.grid["clearGridLayoutCache"](true);
                this.dispatchChangeEvent("itemRendererChanged");
            }
        );
        d(p, "itemRendererFunction"
            ,function () {
                return this._itemRendererFunction;
            }
            ,function (value) {
                if (this._itemRendererFunction == value)
                    return;
                this._itemRendererFunction = value;
                this.invalidateGrid();
                if (this.grid)
                    this.grid["clearGridLayoutCache"](true);
                this.dispatchChangeEvent("itemRendererFunctionChanged");
            }
        );
        d(p, "labelFunction"
            ,function () {
                return this._labelFunction;
            }
            ,function (value) {
                if (this._labelFunction == value)
                    return;
                this._labelFunction = value;
                this.invalidateGrid();
                if (this.grid)
                    this.grid["clearGridLayoutCache"](true);
                this.dispatchChangeEvent("labelFunctionChanged");
            }
        );
        d(p, "width"
            ,function () {
                return this._width;
            }
            ,function (value) {
                if (this._width == value)
                    return;
                this._width = value;
                this.invalidateGrid();
                this.dispatchChangeEvent("widthChanged");
            }
        );
        d(p, "minWidth"
            ,function () {
                return this._minWidth;
            }
            ,function (value) {
                if (this._minWidth == value)
                    return;
                this._minWidth = value;
                this.invalidateGrid();
                if (this.grid)
                    this.grid.setContentSize(0, 0);
                this.dispatchChangeEvent("minWidthChanged");
            }
        );
        d(p, "maxWidth"
            ,function () {
                return this._maxWidth;
            }
            ,function (value) {
                if (this._maxWidth == value)
                    return;
                this._maxWidth = value;
                this.invalidateGrid();
                if (this.grid)
                    this.grid.setContentSize(0, 0);
                this.dispatchChangeEvent("maxWidthChanged");
            }
        );
        d(p, "rendererIsEditable"
            ,function () {
                return this._rendererIsEditable;
            }
            ,function (value) {
                if (this._rendererIsEditable == value)
                    return;
                this._rendererIsEditable = value;
                this.dispatchChangeEvent("rendererIsEditableChanged");
            }
        );
        d(p, "resizable"
            ,function () {
                return this._resizable;
            }
            ,function (value) {
                if (this._resizable == value)
                    return;
                this._resizable = value;
                this.dispatchChangeEvent("resizableChanged");
            }
        );
        d(p, "showDataTips"
            ,function () {
                return this._showDataTips;
            }
            ,function (value) {
                if (this._showDataTips === value)
                    return;
                this._showDataTips = value;
                if (this.grid)
                    this.grid.invalidateDisplayList();
                this.dispatchChangeEvent("showDataTipsChanged");
            }
        );
        p.getShowDataTips = function () {
            return (this.showDataTips === undefined) ? this.grid && this.grid.showDataTips : this.showDataTips;
        };
        d(p, "sortable"
            ,function () {
                return this._sortable;
            }
            ,function (value) {
                if (this._sortable == value)
                    return;
                this._sortable = value;
                this.dispatchChangeEvent("sortableChanged");
            }
        );
        d(p, "sortCompareFunction"
            ,function () {
                return this._sortCompareFunction;
            }
            ,function (value) {
                if (this._sortCompareFunction == value)
                    return;
                this._sortCompareFunction = value;
                this.dispatchChangeEvent("sortCompareFunctionChanged");
            }
        );
        d(p, "sortDescending"
            ,function () {
                return this._sortDescending;
            }
            ,function (value) {
                if (this._sortDescending == value)
                    return;
                this._sortDescending = value;
                this.dispatchChangeEvent("sortDescendingChanged");
            }
        );
        d(p, "visible"
            ,function () {
                return this._visible;
            }
            ,function (value) {
                if (this._visible == value)
                    return;
                this._visible = value;
                if (this.grid && this.grid.columns) {
                    var propertyChangeEvent = eui.PropertyChangeEvent.createUpdateEvent(this, "visible", !this._visible, this._visible);
                    var collectionEvent = new eui.CollectionEvent(eui.CollectionEvent.COLLECTION_CHANGE);
                    collectionEvent.kind = eui.CollectionEventKind.UPDATE;
                    collectionEvent.items.push(propertyChangeEvent);
                    this.grid.columns.dispatchEvent(collectionEvent);
                }
                this.dispatchChangeEvent("visibleChanged");
            }
        );
        p.itemToString = function (item, labelPath, labelFunction) {
            if (!item)
                return eui.GridColumn.ERROR_TEXT;
            if (labelFunction != null)
                return labelFunction(item, this);
            var itemString = null;
            try {
                var itemData = item;
                for (var pathElement_key_a in labelPath) {
                    var pathElement = labelPath[pathElement_key_a];
                    itemData = itemData[pathElement];
                }
                if ((itemData != null) && (labelPath.length > 0))
                    itemString = itemData.toString();
            }
            catch (ignored) { }
            return (itemString != null) ? itemString : eui.GridColumn.ERROR_TEXT;
        };
        p.itemToLabel = function (item) {
            return this.itemToString(item, this.dataFieldPath, this.labelFunction);
        };
        p.itemToDataTip = function (item) {
            var tipFunction = (this.dataTipFunction != null) ? this.dataTipFunction : this.grid.dataTipFunction;
            var tipField = (this.dataTipField) ? this.dataTipField : this.grid.dataTipField;
            var tipPath = (tipField) ? [tipField] : this.dataFieldPath;
            return this.itemToString(item, tipPath, tipFunction);
        };
        p.itemToRenderer = function (item) {
            var itemRendererFunction = this.itemRendererFunction;
            return (itemRendererFunction != null) ? itemRendererFunction(item, this) : this.itemRenderer;
        };
        p.dispatchChangeEvent = function (type) {
            var _self__ = this;
            if (_self__.hasEventListener(type))
                _self__.dispatchEvent(new egret.Event(type));
        };
        p.invalidateGrid = function () {
            if (this.grid) {
                this.grid.invalidateSize();
                this.grid.invalidateDisplayList();
            }
        };
        return GridColumn;
    })(egret.EventDispatcher);
    eui.GridColumn = GridColumn;
    egret.registerClass(GridColumn,'eui.GridColumn');
})(eui || (eui = {}));
eui.GridColumn.ERROR_TEXT = " ";
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The LayoutBase class defines the base class for all Spark layouts.
     * To create a custom layout that works with the Spark containers,
     * you must extend <code>LayoutBase</code> or one of its subclasses.
     *
     * <p>Subclasses must implement the <code>updateDisplayList()</code>
     * method, which positions and sizes the <code>target</code> GroupBase's elements, and
     * the <code>measure()</code> method, which calculates the default
     * size of the <code>target</code>.</p>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 容器布局基类。若要创建使用 Group 容器的自定义布局，必须扩展 <code>LayoutBase</code> 或其子类之一。
     *
     * <p>子类必须实现 <code>updateDisplayList()</code> 方法
     * （定位 <code>target</code> Group 的子项并调整这些子项的大小）和 <code>measure()</code> 方法
     * （计算 <code>target</code> 的默认大小）。</p>
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var LayoutBase = (function (_super) {
        __extends(LayoutBase, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function LayoutBase() {
            _super.call(this);
            /**
             * @private
             */
            this.$target = null;
            /**
             * @private
             */
            this.$useVirtualLayout = false;
            /**
             * @private
             */
            this.$typicalWidth = 71;
            /**
             * @private
             */
            this.$typicalHeight = 22;
            /**
             * 是否up 、down 按键循环
             */
            this.keyboardUpAndDownLoop = false;
        }
        var c=LayoutBase,p=c.prototype;
        d(p, "target"
            /**
             * @language en_US
             * The Group container whose elements are measured, sized and positioned
             * by this layout.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 此布局将测量其元素、调整其元素的大小并定位其元素的 Group 容器。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$target;
            }
            ,function (value) {
                if (this.$target === value)
                    return;
                this.$target = value;
                this.clearVirtualLayoutCache();
            }
        );
        d(p, "useVirtualLayout"
            /**
             * @language en_US
             * To configure a container to use virtual layout, set the <code>useVirtualLayout</code> property
             * to <code>true</code> for the layout associated with the container.
             * Only DataGroup with layout set to VerticalLayout,
             * HorizontalLayout, or TileLayout supports virtual layout.
             * Layout subclasses that do not support virtualization must prevent changing
             * this property.
             *
             * @default false
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 若要配置容器使用虚拟布局，请为与容器关联的布局的 <code>useVirtualLayout</code> 属性设置为 <code>true</code>。
             * 只有布局设置为 VerticalLayout、HorizontalLayout 或 TileLayout 的 DataGroup 才支持虚拟布局。
             * 不支持虚拟化的布局子类必须禁止更改此属性。
             *
             * @default false
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$useVirtualLayout;
            }
            ,function (value) {
                value = !!value;
                if (this.$useVirtualLayout == value)
                    return;
                this.$useVirtualLayout = value;
                this.dispatchEventWith("useVirtualLayoutChanged");
                if (this.$useVirtualLayout && !value)
                    this.clearVirtualLayoutCache();
                if (this.target)
                    this.target.invalidateDisplayList();
            }
        );
        /**
         * @language en_US
         * Set this size of a typical element
         *
         * @param width the height of element
         * @param height the width of element
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 设置一个典型元素的大小
         *
         * @param width 元素的宽
         * @param height 元素的高
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.setTypicalSize = function (width, height) {
            width = +width || 71;
            height = +height || 22;
            if (width !== this.$typicalWidth || height !== this.$typicalHeight) {
                this.$typicalWidth = width;
                this.$typicalHeight = height;
                if (this.$target) {
                    this.$target.invalidateSize();
                }
            }
        };
        /**
         * @language en_US
         * Called when the <code>verticalScrollPosition</code> or
         * <code>horizontalScrollPosition</code> properties change.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * <code>verticalScrollPosition</code> 或 <code>horizontalScrollPosition</code>
         * 属性更改时调用。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.scrollPositionChanged = function () {
        };
        /**
         * @language en_US
         * When <code>useVirtualLayout</code> is <code>true</code>,
         * this method can be used by the layout target
         * to clear cached layout information when the target changes.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 如果 <code>useVirtualLayout</code> 为 <code>true</code>，
         * 则当布局目标改变时，布局目标可以使用此方法来清除已缓存布局信息。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.clearVirtualLayoutCache = function () {
        };
        /**
         * @language en_US
         * Called by the target after a layout element
         * has been added and before the target's size and display list are
         * validated.
         * Layouts that cache per element state, like virtual layouts, can
         * override this method to update their cache.
         *
         * @param index The index of the element that was added.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 在已添加布局元素之后且在验证目标的大小和显示列表之前，由目标调用。
         * 按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。
         *
         * @param index 发生改变的子项索引
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.elementAdded = function (index) {
        };
        /**
         * @language en_US
         * This method must is called by the target after a layout element
         * has been removed and before the target's size and display list are
         * validated.
         * Layouts that cache per element state, like virtual layouts, can
         * override this method to update their cache.
         *
         * @param index The index of the element that was added.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         *
         * 必须在已删除布局元素之后且在验证目标的大小和显示列表之前，由目标调用此方法。
         * 按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。
         *
         * @param index 发生改变的子项索引
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.elementRemoved = function (index) {
        };
        /**
         * @language en_US
         * Return the indices of the element visible within this Group.
         *
         * @return The indices of the visible element.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 返回此 Group 中可见的元素的索引。
         *
         * @return 可见的元素的索引。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementIndicesInView = function () {
            return null;
        };
        /**
         * @language en_US
         * Measures the target's default size based on its content.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 基于目标的内容测量其默认大小
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
        };
        /**
         * @language en_US
         * Sizes and positions the target's elements.
         *
         * @param unscaledWidth Specifies the width of the target, in pixels,
         * in the targets's coordinates.
         *
         * @param unscaledHeight Specifies the height of the component, in pixels,
         * in the target's coordinates.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 调整目标的元素的大小并定位这些元素。
         *
         * @param unscaledWidth 指定目标在目标坐标中的宽度（以像素为单位）。
         * @param unscaledHeight 指定组件在目标坐标中的高度（以像素为单位）。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (width, height) {
        };
        /**
         * 确定根据 NavigationUnit、基于当前处于焦点的项目和用户输入要导航到哪个项目的委派方法
         * @param loop 是否0到最大到0 循环 启用上下键
         */
        p.getNavigationDestinationIndex = function (currentIndex, navigationUnit) {
            if (!this.target || this.target.numElements < 1)
                return -1;
            switch (navigationUnit) {
                case eui.NavigationUnit.HOME:
                    return 0;
                case eui.NavigationUnit.END:
                    return this.target.numElements - 1;
                default:
                    return -1;
            }
        };
        /**
         * 计算所需的 verticalScrollPosition 和 horizontalScrollPosition delta，以将处于指定索引处的元素滚动到视图中
         */
        p.getScrollPositionDeltaToElement = function (index) {
            var elementR = this.getElementBounds(index);
            if (!elementR)
                return null;
            var scrollR = this.getScrollRect();
            if (!scrollR || !this.target.scrollEnabled)
                return null;
            if (scrollR.containsRect(elementR) || elementR.containsRect(scrollR))
                return null;
            var dx = 0;
            var dy = 0;
            var dxl = elementR.left - scrollR.left;
            var dxr = elementR.right - scrollR.right;
            var dyt = elementR.top - scrollR.top;
            var dyb = elementR.bottom - scrollR.bottom;
            dx = (Math.abs(dxl) < Math.abs(dxr)) ? dxl : dxr;
            dy = (Math.abs(dyt) < Math.abs(dyb)) ? dyt : dyb;
            if ((elementR.left >= scrollR.left) && (elementR.right <= scrollR.right))
                dx = 0;
            else if ((elementR.bottom <= scrollR.bottom) && (elementR.top >= scrollR.top))
                dy = 0;
            if ((elementR.left <= scrollR.left) && (elementR.right >= scrollR.right))
                dx = 0;
            else if ((elementR.bottom >= scrollR.bottom) && (elementR.top <= scrollR.top))
                dy = 0;
            return new egret.Point(dx, dy);
        };
        /**
         * 返回指定索引元素的矩形。
         * 如果索引无效、相应的元素为 null、includeInLayout=false，或者如果此布局的 target 属性为 null，
         * 则将指定元素的布局界限返回为 Rectangle 或 null。
         */
        p.getElementBounds = function (index) {
            var g = this.target;
            if (!g)
                return null;
            var n = g.numElements;
            if ((index < 0) || (index >= n))
                return null;
            var elt = (g.getElementAt(index));
            if (!elt || !elt.includeInLayout)
                return null;
            var eltX = elt.layoutBoundsX;
            var eltY = elt.layoutBoundsY;
            var eltW = elt.layoutBoundsWidth;
            var eltH = elt.layoutBoundsHeight;
            return new egret.Rectangle(eltX, eltY, eltW, eltH);
        };
        /**
         * 返回布局坐标中目标的滚动矩形的界限。
         */
        p.getScrollRect = function () {
            var g = this.target;
            if (!g || !g.scrollEnabled)
                return null;
            var vsp = g.scrollV; //verticalScrollPosition;
            var hsp = g.scrollH; //horizontalScrollPosition;
            return new egret.Rectangle(hsp, vsp, g.width, g.height);
        };
        /**
 * 返回对垂直滚动位置的更改以处理不同的滚动选项。
 * 下列选项是由 NavigationUnit 类定义的：DOWN、END、HOME、PAGE_DOWN、PAGE_UP 和 UP。
 * @param navigationUnit 采用以下值： DOWN
 *  <ul>
 *  <li>
 *  <code>DOWN</code>
 *  返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的底边或在其底边之下的第一个元素底对齐。
 *  </li>
 *  <li>
 *  <code>END</code>
 *  返回滚动 delta，它将使 scrollRect 与内容区域底对齐。
 *  </li>
 *  <li>
 *  <code>HOME</code>
 *  返回滚动 delta，它将使 scrollRect 与内容区域顶对齐。
 *  </li>
 *  <li>
 *  <code>PAGE_DOWN</code>
 *  返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的底边或在其底边之下的第一个元素顶对齐。
 *  </li>
 *  <code>PAGE_UP</code>
 *  <li>
 *  返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的顶边或在其顶边之上的第一个元素底对齐。
 *  </li>
 *  <li>
 *  <code>UP</code>
 *  返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的顶边或在其顶边之上的第一个元素顶对齐。
 *  </li>
 *  </ul>
 */
        p.getVerticalScrollPositionDelta = function (navigationUnit) {
            var g = this.target;
            if (!g)
                return 0;
            var scrollRect = this.getScrollRect();
            if (!scrollRect)
                return 0;
            if ((scrollRect.y == 0) && (scrollRect.height >= g.contentHeight))
                return 0;
            var maxDelta = g.contentHeight - scrollRect.bottom;
            var minDelta = -scrollRect.top;
            var getElementBounds;
            switch (navigationUnit) {
                case eui.NavigationUnit.UP:
                case eui.NavigationUnit.PAGE_UP:
                    getElementBounds = this.getElementBoundsAboveScrollRect(scrollRect);
                    break;
                case eui.NavigationUnit.DOWN:
                case eui.NavigationUnit.PAGE_DOWN:
                    getElementBounds = this.getElementBoundsBelowScrollRect(scrollRect);
                    break;
                case eui.NavigationUnit.HOME:
                    return minDelta;
                case eui.NavigationUnit.END:
                    return maxDelta;
                default:
                    return 0;
            }
            if (!getElementBounds)
                return 0;
            var delta = 0;
            switch (navigationUnit) {
                case eui.NavigationUnit.UP:
                    delta = Math.max(getElementBounds.top - scrollRect.top, -scrollRect.height);
                    break;
                case eui.NavigationUnit.DOWN:
                    delta = Math.min(getElementBounds.bottom - scrollRect.bottom, scrollRect.height);
                    break;
                case eui.NavigationUnit.PAGE_UP:
                    {
                        delta = getElementBounds.bottom - scrollRect.bottom;
                        if (delta >= 0)
                            delta = Math.max(getElementBounds.top - scrollRect.top, -scrollRect.height);
                    }
                    break;
                case eui.NavigationUnit.PAGE_DOWN:
                    {
                        delta = getElementBounds.top - scrollRect.top;
                        if (delta <= 0)
                            delta = Math.min(getElementBounds.bottom - scrollRect.bottom, scrollRect.height);
                    }
                    break;
            }
            return Math.min(maxDelta, Math.max(minDelta, delta));
        };
        /**
         * 返回跨越 scrollRect 的顶边或在其顶边之上的第一个布局元素的界限。
         */
        p.getElementBoundsAboveScrollRect = function (scrollRect) {
            var bounds = new egret.Rectangle();
            bounds.top = scrollRect.top - 1;
            bounds.bottom = scrollRect.top;
            return bounds;
        };
        /**
         * 返回跨越 scrollRect 的底边或在其底边之下的第一个布局元素的界限。
         */
        p.getElementBoundsBelowScrollRect = function (scrollRect) {
            var bounds = new egret.Rectangle();
            bounds.top = scrollRect.bottom;
            bounds.bottom = scrollRect.bottom + 1;
            return bounds;
        };
        return LayoutBase;
    })(egret.EventDispatcher);
    eui.LayoutBase = LayoutBase;
    egret.registerClass(LayoutBase,'eui.LayoutBase');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridColumnHeaderGroupLayout = (function (_super) {
        __extends(GridColumnHeaderGroupLayout, _super);
        function GridColumnHeaderGroupLayout() {
            _super.call(this);
            this.rendererHeights = new Array();
            this.maxRendererHeight = 0;
            this.visibleRenderersBounds = new egret.Rectangle();
            this.visibleHeaderRenderers = new Array();
            this.visibleHeaderSeparators = new Array();
            this.freeElementMap = new egret.Dictionary();
            this.elementToFactoryMap = new egret.Dictionary();
            this.createdVisualElement = false;
        }
        var c=GridColumnHeaderGroupLayout,p=c.prototype;
        d(p, "target"
            ,function () {
                return egret.superGetter(eui.GridColumnHeaderGroupLayout, this, "target");
            }
            ,function (value) {
                egret.superSetter(eui.GridColumnHeaderGroupLayout, this, "target", value);
                var chg = value;
                if (chg) {
                    this.rendererLayer = new eui.Group();
                    this.rendererLayer.layout = new eui.LayoutBase();
                    chg.addChild(this.rendererLayer);
                    this.overlayLayer = new eui.Group();
                    this.overlayLayer.layout = new eui.LayoutBase();
                    chg.addChild(this.overlayLayer);
                }
            }
        );
        d(p, "useVirtualLayout"
            ,function () {
                return true;
            }
            ,function (value) {
            }
        );
        p.clearVirtualLayoutCache = function () {
            this.rendererHeights.length = 0;
            this.visibleHeaderRenderers.length = 0;
            this.visibleHeaderSeparators.length = 0;
            this.visibleRenderersBounds.setEmpty();
            this.elementToFactoryMap = new egret.Dictionary();
            this.freeElementMap = new egret.Dictionary();
            if (this.rendererLayer)
                this.rendererLayer.removeChildren();
            if (this.overlayLayer)
                this.overlayLayer.removeChildren();
        };
        p.scrollPositionChanged = function () {
            var columnHeaderGroup = this.columnHeaderGroup;
            if (!columnHeaderGroup)
                return;
            _super.prototype.scrollPositionChanged.call(this);
            var scrollR = columnHeaderGroup.scrollRect;
            if (scrollR && !this.visibleRenderersBounds.containsRect(scrollR))
                columnHeaderGroup.invalidateDisplayList();
        };
        p.measure = function () {
            var columnHeaderGroup = this.columnHeaderGroup;
            var grid = this.grid;
            if (!columnHeaderGroup || !grid)
                return;
            this.updateRendererHeights();
            var paddingLeft = columnHeaderGroup.paddingLeft;
            var paddingRight = columnHeaderGroup.paddingRight;
            var paddingTop = columnHeaderGroup.paddingTop;
            var paddingBottom = columnHeaderGroup.paddingBottom;
            var measuredWidth = Math.ceil(paddingLeft + paddingRight);
            var measuredHeight = Math.ceil(this.maxRendererHeight + paddingTop + paddingBottom);
            columnHeaderGroup.measuredWidth = Math.max(measuredWidth, columnHeaderGroup.minWidth);
            columnHeaderGroup.measuredHeight = Math.max(measuredHeight, columnHeaderGroup.minHeight);
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            var columnHeaderGroup = this.columnHeaderGroup;
            var grid = this.grid;
            if (!columnHeaderGroup || !grid)
                return;
            var visibleColumnIndices = grid.getVisibleColumnIndices();
            if (visibleColumnIndices == null)
                visibleColumnIndices = new Array();
            var oldRenderers = [];
            var rendererLayer = this.rendererLayer;
            var overlayLayer = this.overlayLayer;
            var columnSeparatorFactory = columnHeaderGroup.columnSeparator;
            var renderer;
            var separator;
            var column;
            var columnIndex = -1;
            var renderer_key_a;
            for (renderer_key_a in this.visibleHeaderRenderers) {
                renderer = this.visibleHeaderRenderers[renderer_key_a];
                column = renderer.column;
                columnIndex = (column) ? column.columnIndex : -1;
                if ((columnIndex != -1) && (visibleColumnIndices.indexOf(columnIndex) != -1) && (oldRenderers[columnIndex] == null)) {
                    oldRenderers[columnIndex] = renderer;
                }
                else {
                    this.freeVisualElement(renderer);
                    renderer.discard(true);
                }
            }
            this.visibleHeaderRenderers.length = 0;
            var separator_key_a;
            for (separator_key_a in this.visibleHeaderSeparators) {
                separator = this.visibleHeaderSeparators[separator_key_a];
                this.freeVisualElement(separator);
            }
            this.visibleHeaderSeparators.length = 0;
            var paddingLeft = columnHeaderGroup.paddingLeft;
            var paddingRight = columnHeaderGroup.paddingRight;
            var paddingTop = columnHeaderGroup.paddingTop;
            var paddingBottom = columnHeaderGroup.paddingBottom;
            var columns = this.columns;
            var columnsLength = (columns) ? columns.length : 0;
            var lastVisibleColumnIndex = grid.getPreviousVisibleColumnIndex(columnsLength);
            var rendererY = paddingTop;
            var rendererHeight = unscaledHeight - paddingTop - paddingBottom;
            var maxRendererX = this.columnHeaderGroup.layout.target.scrollH + unscaledWidth;
            var visibleLeft = 0;
            var visibleRight = 0;
            for (var index = 0;; index++) {
                if (index < visibleColumnIndices.length)
                    columnIndex = visibleColumnIndices[index];
                else
                    columnIndex = grid.getNextVisibleColumnIndex(columnIndex);
                if (columnIndex < 0 || columnIndex >= columnsLength)
                    break;
                column = columns.getItemAt(columnIndex);
                renderer = oldRenderers[columnIndex];
                oldRenderers[columnIndex] = null;
                if (!renderer) {
                    var factory = column.headerRenderer;
                    if (!factory)
                        factory = columnHeaderGroup.itemRenderer;
                    renderer = this.allocateVisualElement(factory);
                }
                this.visibleHeaderRenderers.push(renderer);
                this.initializeItemRenderer(renderer, columnIndex, column, true);
                if (renderer.parent != rendererLayer)
                    rendererLayer.addChild(renderer);
                var isLastColumn = columnIndex == lastVisibleColumnIndex;
                var rendererX = grid.getCellX(0, columnIndex) + paddingLeft;
                var rendererWidth = grid.getColumnWidth(columnIndex);
                if (isLastColumn)
                    rendererWidth = this.target.scrollH + unscaledWidth - rendererX - paddingRight;
                renderer.setLayoutBoundsSize(rendererWidth, rendererHeight);
                renderer.setLayoutBoundsPosition(rendererX, rendererY);
                if (index == 0)
                    visibleLeft = rendererX;
                visibleRight = rendererX + rendererWidth;
                renderer.prepare(!this.createdVisualElement);
                if ((rendererX + rendererWidth) > maxRendererX)
                    break;
                if (columnSeparatorFactory && !isLastColumn) {
                    separator = this.allocateVisualElement(columnSeparatorFactory);
                    this.visibleHeaderSeparators.push(separator);
                    separator.visible = true;
                    if (separator.parent != overlayLayer)
                        overlayLayer.addChild(separator);
                    var separatorWidth = separator.preferredWidth;
                    var separatorX = rendererX + rendererWidth;
                    separator.setLayoutBoundsSize(separatorWidth, rendererHeight);
                    separator.setLayoutBoundsPosition(separatorX, rendererY);
                }
            }
            //            columnHeaderGroup.validateDisplayList();
            columnHeaderGroup.setContentSize(grid.contentWidth, rendererHeight);
            this.visibleRenderersBounds.left = visibleLeft - paddingLeft;
            this.visibleRenderersBounds.right = visibleRight = paddingRight;
            this.visibleRenderersBounds.top = rendererY - paddingTop;
            this.visibleRenderersBounds.height = rendererHeight + paddingTop + paddingBottom;
            columnHeaderGroup.validateNow();
            this.updateRendererHeights(true);
        };
        p.getHeaderIndexAt = function (x, y) {
            var columnHeaderGroup = this.columnHeaderGroup;
            var grid = this.grid;
            var columns = this.columns;
            if (!columnHeaderGroup || !grid || !columns)
                return -1;
            var paddingLeft = columnHeaderGroup.paddingLeft;
            var paddingRight = columnHeaderGroup.paddingRight;
            var paddedX = x + paddingLeft;
            var columnIndex = grid.getColumnIndexAt(paddedX, 0);
            if (columnIndex < 0) {
                var contentWidth = columnHeaderGroup.contentWidth;
                var totalWidth = this.target.scrollH + columnHeaderGroup.width - paddingRight;
                if (paddedX >= contentWidth && paddedX < totalWidth)
                    columnIndex = grid.getPreviousVisibleColumnIndex(columns.length);
            }
            return columnIndex;
        };
        p.getSeparatorIndexAt = function (x, y) {
            var columnHeaderGroup = this.columnHeaderGroup;
            var grid = this.grid;
            var columns = this.columns;
            if (!columnHeaderGroup || !grid || !columns)
                return -1;
            var paddingLeft = columnHeaderGroup.paddingLeft;
            var columnIndex = grid.getColumnIndexAt(x + paddingLeft, 0);
            if (columnIndex == -1)
                return -1;
            var isFirstColumn = columnIndex == grid.getNextVisibleColumnIndex(-1);
            var isLastColumn = columnIndex == grid.getPreviousVisibleColumnIndex(columns.length);
            var columnLeft = grid.getCellX(0, columnIndex);
            var columnRight = columnLeft + grid.getColumnWidth(columnIndex);
            var smw = columnHeaderGroup.separatorAffordance;
            if (!isFirstColumn && (x > (columnLeft - smw)) && (x < (columnLeft + smw)))
                return grid.getPreviousVisibleColumnIndex(columnIndex);
            if (!isLastColumn && (x > (columnRight - smw)) && (x < columnRight + smw))
                return columnIndex;
            return -1;
        };
        p.getHeaderBounds = function (columnIndex) {
            var columnHeaderGroup = this.columnHeaderGroup;
            var grid = this.grid;
            if (!columnHeaderGroup || !grid)
                return null;
            var columns = this.columns;
            var columnsLength = (columns) ? columns.length : 0;
            if (columnIndex >= columnsLength)
                return null;
            var column = columns.getItemAt(columnIndex);
            if (!column.visible)
                return null;
            var paddingLeft = columnHeaderGroup.paddingLeft;
            var paddingRight = columnHeaderGroup.paddingRight;
            var paddingTop = columnHeaderGroup.paddingTop;
            var paddingBottom = columnHeaderGroup.paddingBottom;
            var isLastColumn = columnIndex == grid.getPreviousVisibleColumnIndex(columnsLength);
            var rendererX = grid.getCellX(0, columnIndex) + paddingLeft;
            var rendererY = paddingTop;
            var rendererWidth = grid.getColumnWidth(columnIndex);
            var rendererHeight = columnHeaderGroup.height - paddingTop - paddingBottom;
            if (isLastColumn)
                rendererWidth = this.target.scrollH + columnHeaderGroup.width - rendererX - paddingRight;
            return new egret.Rectangle(rendererX, rendererY, rendererWidth, rendererHeight);
        };
        p.getHeaderRendererAt = function (columnIndex) {
            var columnHeaderGroup = this.columnHeaderGroup;
            var grid = this.grid;
            if (!columnHeaderGroup || !grid || (columnIndex < 0))
                return null;
            var rendererLayer = this.rendererLayer;
            var visibleColumnIndices = grid.getVisibleColumnIndices();
            if (visibleColumnIndices == null)
                visibleColumnIndices = new Array();
            var eltIndex = visibleColumnIndices.indexOf(columnIndex);
            if (eltIndex != -1) {
                var rendererLayerNumElements = rendererLayer.numElements;
                for (var index = 0; index < rendererLayerNumElements; index++) {
                    var elt = rendererLayer.getElementAt(index);
                    if (elt && elt.visible && elt.column && (elt.column.columnIndex == columnIndex))
                        return elt;
                }
                return null;
            }
            var columns = this.columns;
            if (!columns || (columns.length <= columnIndex))
                return null;
            var column = columns.getItemAt(columnIndex);
            if (!column.visible)
                return null;
            var factory = column.headerRenderer;
            if (!factory)
                factory = columnHeaderGroup.itemRenderer;
            if (!factory)
                factory = column.itemRenderer;
            var renderer = this.allocateVisualElement(factory);
            rendererLayer.addChild(renderer);
            this.initializeItemRenderer(renderer, columnIndex, column, renderer.visible);
            var paddingLeft = columnHeaderGroup.paddingLeft;
            var paddingRight = columnHeaderGroup.paddingRight;
            var paddingTop = columnHeaderGroup.paddingTop;
            var paddingBottom = columnHeaderGroup.paddingBottom;
            var isLastColumn = columnIndex == grid.getPreviousVisibleColumnIndex(columns.length);
            var rendererX = grid.getCellX(0, columnIndex) + paddingLeft;
            var rendererY = paddingTop;
            var rendererHeight = columnHeaderGroup.height - paddingTop - paddingBottom;
            var rendererWidth = grid.getColumnWidth(columnIndex);
            if (isLastColumn)
                rendererWidth = this.target.scrollH + columnHeaderGroup.width - rendererX - paddingRight;
            renderer.setLayoutBoundsSize(rendererWidth, rendererHeight);
            renderer.setLayoutBoundsPosition(rendererX, rendererY);
            rendererLayer.removeChild(renderer);
            renderer.visible = false;
            return renderer;
        };
        p.initializeItemRenderer = function (renderer, columnIndex, column, visible) {
            if (visible === void 0) { visible = true; }
            renderer.visible = visible;
            renderer.column = column;
            renderer.label = column.headerText;
            var columnHeaderGroup = this.columnHeaderGroup;
            var dataGrid = columnHeaderGroup.dataGrid;
            if (dataGrid)
                renderer.ownerChanged(dataGrid);
            renderer.hovered = columnIndex == columnHeaderGroup.hoverColumnIndex;
            renderer.down = columnIndex == columnHeaderGroup.downColumnIndex;
        };
        p.createVisualElement = function (factory) {
            this.createdVisualElement = true;
            var newElement = new factory();
            this.elementToFactoryMap.setItem(newElement, factory);
            return newElement;
        };
        p.allocateVisualElement = function (factory) {
            this.createdVisualElement = false;
            var freeElements = this.freeElementMap.getItem(factory);
            if (freeElements) {
                var freeElement = freeElements.pop();
                if (freeElements.length == 0)
                    this.freeElementMap.delItem(factory);
                if (freeElement)
                    return freeElement;
            }
            return this.createVisualElement(factory);
        };
        p.freeVisualElement = function (element) {
            var factory = this.elementToFactoryMap.getItem(element);
            var freeElements = this.freeElementMap.getItem(factory);
            if (!freeElements) {
                freeElements = new Array();
                this.freeElementMap.setItem(factory, freeElements);
            }
            freeElements.push(element);
            element.visible = true;
        };
        p.updateRendererHeights = function (inUpdateDisplayList) {
            if (inUpdateDisplayList === void 0) { inUpdateDisplayList = false; }
            var columns = this.columns;
            this.rendererHeights.length = (columns) ? columns.length : 0;
            var newHeight = 0;
            for (var renderer_key_a in this.visibleHeaderRenderers) {
                var renderer = this.visibleHeaderRenderers[renderer_key_a];
                var preferredHeight = renderer.preferredHeight;
                this.rendererHeights[renderer.column.columnIndex] = preferredHeight;
                if (preferredHeight > newHeight)
                    newHeight = preferredHeight;
            }
            if (newHeight == this.maxRendererHeight)
                return;
            if (newHeight < this.maxRendererHeight) {
                for (var i = 0; i < this.rendererHeights.length; i++) {
                    var rendererHeight = this.rendererHeights[i];
                    if (!isNaN(rendererHeight) && rendererHeight > newHeight)
                        newHeight = rendererHeight;
                }
            }
            this.maxRendererHeight = newHeight;
            if (inUpdateDisplayList)
                this.columnHeaderGroup.invalidateSize();
        };
        d(p, "columnHeaderGroup"
            ,function () {
                return this.target;
            }
            ,function (value) {
                egret.superSetter(eui.GridColumnHeaderGroupLayout, this, "columnHeaderGroup", value);
            }
        );
        d(p, "grid"
            ,function () {
                var chg = this.columnHeaderGroup;
                if (chg.dataGrid)
                    return chg.dataGrid.grid;
                return null;
            }
            ,function (value) {
                egret.superSetter(eui.GridColumnHeaderGroupLayout, this, "grid", value);
            }
        );
        d(p, "columns"
            ,function () {
                var grid = this.grid;
                var newColumns = (grid) ? grid.columns : null;
                if (newColumns != this._columns) {
                    if (this._columns)
                        this._columns["removeEventListener"](eui.CollectionEvent.COLLECTION_CHANGE, this.columns_collectionChangeHandler, this);
                    this._columns = newColumns;
                    if (this._columns)
                        this._columns["addEventListener"](eui.CollectionEvent.COLLECTION_CHANGE, this.columns_collectionChangeHandler, this);
                }
                return this._columns;
            }
            ,function (value) {
                egret.superSetter(eui.GridColumnHeaderGroupLayout, this, "columns", value);
            }
        );
        p.columns_collectionChangeHandler = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        this.columns_collectionChangeAdd(event);
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        this.columns_collectionChangeRemove(event);
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        this.columns_collectionChangeMove(event);
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                case eui.CollectionEventKind.UPDATE:
                    {
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                case eui.CollectionEventKind.RESET:
                    {
                        this.columnHeaderGroup.visibleSortIndicatorIndices = null;
                        break;
                    }
            }
        };
        p.columns_collectionChangeAdd = function (event) {
            var itemsLength = event.items.length;
            if (itemsLength <= 0)
                return;
            var chg = this.columnHeaderGroup;
            var indices = chg.visibleSortIndicatorIndices;
            var indicesLength = indices.length;
            var startIndex = event.location;
            for (var i = 0; i < indicesLength; i++) {
                if (indices[i] >= startIndex)
                    indices[i] += itemsLength;
            }
            chg.visibleSortIndicatorIndices = indices;
        };
        p.columns_collectionChangeRemove = function (event) {
            var itemsLength = event.items.length;
            if (itemsLength <= 0)
                return;
            var chg = this.columnHeaderGroup;
            var indices = chg.visibleSortIndicatorIndices;
            var indicesLength = indices.length;
            var startIndex = event.location;
            var lastIndex = startIndex + itemsLength;
            var newIndices = new Array();
            var index = 0;
            var index_key_a;
            for (index_key_a in indices) {
                index = indices[index_key_a];
                if (index < startIndex)
                    newIndices.push(index);
                else if (index >= lastIndex)
                    newIndices.push(index - lastIndex);
            }
            chg.visibleSortIndicatorIndices = newIndices;
        };
        p.columns_collectionChangeMove = function (event) {
            var itemsLength = event.items.length;
            if (itemsLength <= 0)
                return;
            var chg = this.columnHeaderGroup;
            var indices = chg.visibleSortIndicatorIndices;
            var indicesLength = indices.length;
            var oldStart = event.oldLocation;
            var oldEnd = event.oldLocation + itemsLength;
            var newStart = event.location;
            var newEnd = event.location + itemsLength;
            var index = 0;
            for (var i = 0; i < indicesLength; i++) {
                index = indices[i];
                if (index >= oldStart && index < oldEnd) {
                    indices[i] = newStart + (index - oldStart);
                    continue;
                }
                if (newStart > oldStart) {
                    if (index >= oldEnd && index < newEnd)
                        indices[i] -= itemsLength;
                }
                else if (newStart < oldStart) {
                    if (index >= newStart && index < oldStart)
                        indices[i] += itemsLength;
                }
            }
            chg.visibleSortIndicatorIndices = indices;
        };
        return GridColumnHeaderGroupLayout;
    })(eui.LayoutBase);
    eui.GridColumnHeaderGroupLayout = GridColumnHeaderGroupLayout;
    egret.registerClass(GridColumnHeaderGroupLayout,'eui.GridColumnHeaderGroupLayout');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridData = (function (_super) {
        __extends(GridData, _super);
        function GridData(horizontalAlignment, verticalAlignment, grabExcessHorizontalSpace, grabExcessVerticalSpace, horizontalSpan, verticalSpan) {
            if (horizontalAlignment === void 0) { horizontalAlignment = eui.GridData.BEGINNING; }
            if (verticalAlignment === void 0) { verticalAlignment = eui.GridData.CENTER; }
            if (grabExcessHorizontalSpace === void 0) { grabExcessHorizontalSpace = false; }
            if (grabExcessVerticalSpace === void 0) { grabExcessVerticalSpace = false; }
            if (horizontalSpan === void 0) { horizontalSpan = 1; }
            if (verticalSpan === void 0) { verticalSpan = 1; }
            _super.call(this);
            this.verticalAlignment = eui.GridData.CENTER;
            this.horizontalAlignment = eui.GridData.BEGINNING;
            this.widthHint = eui.GridData.DEFAULT_SIZE;
            this.heightHint = eui.GridData.DEFAULT_SIZE;
            this.horizontalIndent = 0;
            this.verticalIndent = 0;
            this.horizontalSpan = 1;
            this.verticalSpan = 1;
            this.grabExcessHorizontalSpace = false;
            this.grabExcessVerticalSpace = false;
            this.minimumWidth = 0;
            this.minimumHeight = 0;
            this.cacheWidth = -1;
            this.cacheHeight = -1;
            this.defaultWhint = -1;
            this.defaultHhint = -1;
            this.defaultWidth = -1;
            this.defaultHeight = -1;
            this.currentWhint = -1;
            this.currentHhint = -1;
            this.currentWidth = -1;
            this.currentHeight = -1;
            _super.call(this);
            this.horizontalAlignment = horizontalAlignment;
            this.verticalAlignment = verticalAlignment;
            this.grabExcessHorizontalSpace = grabExcessHorizontalSpace;
            this.grabExcessVerticalSpace = grabExcessVerticalSpace;
            this.horizontalSpan = horizontalSpan;
            this.verticalSpan = verticalSpan;
        }
        var c=GridData,p=c.prototype;
        p.computeSize = function (view, wHint, hHint) {
            if (this.cacheWidth != -1 && this.cacheHeight != -1)
                return;
            if (wHint == this.widthHint && hHint == this.heightHint) {
                if (this.defaultWidth == -1 || this.defaultHeight == -1 || wHint != this.defaultWhint || hHint != this.defaultHhint) {
                    this.defaultWhint = wHint;
                    this.defaultHhint = hHint;
                    this.defaultWidth = wHint >= 0 ? wHint : view.preferredWidth;
                    this.defaultHeight = hHint >= 0 ? hHint : view.preferredHeight;
                }
                this.cacheWidth = this.defaultWidth;
                this.cacheHeight = this.defaultHeight;
                return;
            }
            if (this.currentWidth == -1 || this.currentHeight == -1 || wHint != this.currentWhint || hHint != this.currentHhint) {
                this.currentWhint = wHint;
                this.currentHhint = hHint;
                this.currentWidth = wHint >= 0 ? wHint : view.preferredWidth;
                this.currentHeight = hHint >= 0 ? hHint : view.preferredHeight;
            }
            this.cacheWidth = this.currentWidth;
            this.cacheHeight = this.currentHeight;
        };
        p.flushCache = function () {
            this.cacheWidth = this.cacheHeight = -1;
            this.defaultWidth = this.defaultHeight = -1;
            this.currentWidth = this.currentHeight = -1;
        };
        return GridData;
    })(egret.HashObject);
    eui.GridData = GridData;
    egret.registerClass(GridData,'eui.GridData');
})(eui || (eui = {}));
eui.GridData.DEFAULT_SIZE = -1;
eui.GridData.BEGINNING = 1;
eui.GridData.CENTER = 2;
eui.GridData.END = 3;
eui.GridData.FILL = 4;
var eui;
(function (eui) {
    var GridDimensions = (function (_super) {
        __extends(GridDimensions, _super);
        function GridDimensions() {
            _super.call(this);
            this.rowList = new eui.GridRowList();
            this._columnWidths = new Array();
            this.startY = 0;
            this.recentNode = null;
            this.startY2 = 0;
            this.recentNode2 = null;
            this.typicalCellWidths = new Array();
            this.typicalCellHeights = new Array();
            this.maxTypicalCellHeight = NaN;
            this.useMaxTypicalCellHeight = true;
            this._rowCount = 0;
            this._columnCount = 0;
            this._rowGap = 0;
            this._columnGap = 0;
            this._defaultRowHeight = NaN;
            this.defaultColumnWidth = 150;
            this.variableRowHeight = false;
            this._minRowHeight = 0;
            this._maxRowHeight = 10000;
            _super.call(this);
        }
        var c=GridDimensions,p=c.prototype;
        GridDimensions.insertElementsToVector = function (vec, startIndex, elements) {
            var oldLength = vec.length;
            var count = elements.length;
            vec.length += count;
            var vecLength = vec.length;
            var i = 0;
            for (i = oldLength - 1; i >= startIndex; i--)
                vec[i + count] = vec[i];
            var endIndex = startIndex + elements.length;
            var j = 0;
            for (i = startIndex; i < endIndex; i++)
                vec[i] = elements[j++];
        };
        GridDimensions.insertValueToVector = function (vec, startIndex, count, value) {
            var oldLength = vec.length;
            vec.length += count;
            var vecLength = vec.length;
            for (var i = oldLength - 1; i >= startIndex; i--)
                vec[i + count] = vec[i];
            eui.GridDimensions.clearVector(vec, value, startIndex, count);
        };
        GridDimensions.clearVector = function (vec, value, startIndex, count) {
            if (startIndex === void 0) { startIndex = 0; }
            if (count === void 0) { count = -1; }
            var endIndex = (count == -1) ? vec.length : startIndex + count;
            for (var i = startIndex; i < endIndex; i++)
                vec[i] = value;
        };
        GridDimensions.bound = function (a, min, max) {
            if (a < min)
                a = min;
            else if (a > max)
                a = max;
            return a;
        };
        d(p, "rowCount"
            ,function () {
                return this._rowCount;
            }
            ,function (value) {
                if (value == this._rowCount)
                    return;
                if (value < this._rowCount)
                    this.removeRowsAt(value, value - this._rowCount);
                this._rowCount = value;
            }
        );
        d(p, "columnCount"
            ,function () {
                return this._columnCount;
            }
            ,function (value) {
                this.clearHeights();
                this._columnCount = value;
                this._columnWidths.length = value;
                this.typicalCellHeights.length = value;
                this.typicalCellWidths.length = value;
                this.rowList.numColumns = value;
                this.clearTypicalCellWidthsAndHeights();
                eui.GridDimensions.clearVector(this._columnWidths, NaN, 0, this._columnCount);
            }
        );
        d(p, "rowGap"
            ,function () {
                return this._rowGap;
            }
            ,function (value) {
                if (value == this._rowGap)
                    return;
                this._rowGap = value;
                this.recentNode = null;
                this.recentNode2 = null;
            }
        );
        d(p, "columnGap"
            ,function () {
                return this._columnGap;
            }
            ,function (value) {
                if (value == this._columnGap)
                    return;
                this._columnGap = value;
                this.recentNode = null;
                this.recentNode2 = null;
            }
        );
        d(p, "defaultRowHeight"
            ,function () {
                return this.useMaxTypicalCellHeight ? this.maxTypicalCellHeight : this._defaultRowHeight;
            }
            ,function (value) {
                if (value == this._defaultRowHeight)
                    return;
                this._defaultRowHeight = eui.GridDimensions.bound(value, this._minRowHeight, this._maxRowHeight);
                this.useMaxTypicalCellHeight = isNaN(this._defaultRowHeight);
                this.recentNode = null;
                this.recentNode2 = null;
            }
        );
        d(p, "minRowHeight"
            ,function () {
                return this._minRowHeight;
            }
            ,function (value) {
                if (value == this._minRowHeight)
                    return;
                this._minRowHeight = value;
                this._defaultRowHeight = Math.max(this._defaultRowHeight, this._minRowHeight);
            }
        );
        d(p, "maxRowHeight"
            ,function () {
                return this._maxRowHeight;
            }
            ,function (value) {
                if (value == this._maxRowHeight)
                    return;
                this._maxRowHeight = value;
                this._defaultRowHeight = Math.min(this._defaultRowHeight, this._maxRowHeight);
            }
        );
        p.getRowHeight = function (row) {
            var height = this.defaultRowHeight;
            if (this.variableRowHeight) {
                var node = this.rowList.find(row);
                if (node) {
                    if (node.fixedHeight >= 0)
                        height = node.fixedHeight;
                    else if (node.maxCellHeight >= 0)
                        height = node.maxCellHeight;
                }
            }
            return (!isNaN(height)) ? eui.GridDimensions.bound(height, this.minRowHeight, this.maxRowHeight) : height;
        };
        p.setRowHeight = function (row, height) {
            if (!this.variableRowHeight)
                return;
            var node = this.rowList.find(row);
            if (node) {
                node.fixedHeight = eui.GridDimensions.bound(height, this.minRowHeight, this.maxRowHeight);
            }
            else {
                node = this.rowList.insert(row);
                if (node)
                    node.fixedHeight = eui.GridDimensions.bound(height, this.minRowHeight, this.maxRowHeight);
            }
        };
        p.getColumnWidth = function (col) {
            var w = NaN;
            w = this._columnWidths[col];
            if (isNaN(w))
                w = this.typicalCellWidths[col];
            if (isNaN(w))
                w = this.defaultColumnWidth;
            return w;
        };
        p.setColumnWidth = function (col, width) {
            this._columnWidths[col] = width;
        };
        p.getCellHeight = function (row, col) {
            var node = this.rowList.find(row);
            if (node)
                return node.getCellHeight(col);
            return NaN;
        };
        p.setCellHeight = function (row, col, height) {
            if (!this.variableRowHeight)
                return;
            var node = this.rowList.find(row);
            var oldHeight = this.defaultRowHeight;
            if (node == null)
                node = this.rowList.insert(row);
            else
                oldHeight = node.maxCellHeight;
            if (node && node.setCellHeight(col, height)) {
                if (this.recentNode && node.rowIndex < this.recentNode.rowIndex)
                    this.startY += node.maxCellHeight - oldHeight;
                if (this.recentNode2 && node.rowIndex < this.recentNode2.rowIndex)
                    this.startY2 += node.maxCellHeight - oldHeight;
            }
        };
        p.getCellBounds = function (row, col) {
            if (row < 0 || row >= this.rowCount || col < 0 || col >= this.columnCount)
                return null;
            var x = this.getCellX(row, col);
            var y = this.getCellY(row, col);
            var width = this.getColumnWidth(col);
            var height = this.getRowHeight(row);
            return new egret.Rectangle(x, y, width, height);
        };
        p.getCellX = function (row, col) {
            var x = 0;
            for (var i = 0; i < col; i++) {
                x += this.getColumnWidth(i) + this.columnGap;
            }
            return x;
        };
        p.getCellY = function (row, col) {
            if (!this.variableRowHeight || this.rowList.length == 0)
                return row * (this.defaultRowHeight + this.rowGap);
            if (row == 0)
                return 0;
            if (!this.recentNode2) {
                this.recentNode2 = this.rowList.first;
                this.startY2 = this.recentNode2.rowIndex * (this.defaultRowHeight + this.rowGap);
            }
            var y = 0;
            var recentIndex = this.recentNode2.rowIndex;
            if (row == recentIndex)
                y = this.startY2;
            else if (row < recentIndex)
                y = this.getPrevYAt(row, this.recentNode2, this.startY2);
            else
                y = this.getNextYAt(row, this.recentNode2, this.startY2);
            return y;
        };
        p.getPrevYAt = function (row, startNode, startY) {
            var node = startNode;
            var nodeY = startY;
            var prevNode;
            var currentY = startY;
            var indDiff = 0;
            while (node) {
                if (node.rowIndex == row)
                    break;
                prevNode = node.prev;
                if (!prevNode || (row < node.rowIndex && row > prevNode.rowIndex)) {
                    indDiff = node.rowIndex - row;
                    currentY -= indDiff * (this.defaultRowHeight + this.rowGap);
                    break;
                }
                indDiff = node.rowIndex - prevNode.rowIndex - 1;
                currentY = currentY - indDiff * (this.defaultRowHeight + this.rowGap) - (prevNode.maxCellHeight + this.rowGap);
                nodeY = currentY;
                node = prevNode;
            }
            this.recentNode2 = node;
            this.startY2 = nodeY;
            return currentY;
        };
        p.getNextYAt = function (row, startNode, startY) {
            var node = startNode;
            var nodeY = startY;
            var nextNode;
            var currentY = startY;
            var indDiff = 0;
            while (node) {
                if (node.rowIndex == row)
                    break;
                currentY += node.maxCellHeight;
                if (node.rowIndex < this._rowCount - 1)
                    currentY += this.rowGap;
                nextNode = node.next;
                if (!nextNode || (row > node.rowIndex && row < nextNode.rowIndex)) {
                    indDiff = row - node.rowIndex - 1;
                    currentY += indDiff * (this.defaultRowHeight + this.rowGap);
                    break;
                }
                indDiff = nextNode.rowIndex - node.rowIndex - 1;
                currentY = currentY + indDiff * (this.defaultRowHeight + this.rowGap);
                nodeY = currentY;
                node = nextNode;
            }
            this.recentNode2 = node;
            this.startY2 = nodeY;
            return currentY;
        };
        p.getRowBounds = function (row) {
            if ((row < 0) || (row >= this._rowCount))
                return null;
            if (this._columnCount == 0 || this._rowCount == 0)
                return new egret.Rectangle(0, 0, 0, 0);
            var x = this.getCellX(row, 0);
            var y = this.getCellY(row, 0);
            var rowWidth = this.getCellX(row, this._columnCount - 1) + this.getColumnWidth(this._columnCount - 1) - x;
            var rowHeight = this.getRowHeight(row);
            return new egret.Rectangle(x, y, rowWidth, rowHeight);
        };
        p.getPadRowBounds = function (row) {
            if (row < 0)
                return null;
            if (row < this.rowCount)
                return this.getRowBounds(row);
            var lastRow = this.rowCount - 1;
            var lastCol = this.columnCount - 1;
            var x = (lastRow >= 0) ? this.getCellX(lastRow, 0) : 0;
            var lastRowBottom = (lastRow >= 0) ? this.getCellY(lastRow, 0) + this.getRowHeight(lastRow) : 0;
            var padRowCount = row - this.rowCount;
            var padRowTotalGap = (padRowCount > 0) ? (padRowCount - 1) * this.rowGap : 0;
            var y = lastRowBottom + (padRowCount * this.defaultRowHeight) + padRowTotalGap;
            var rowWidth = 0;
            if ((lastCol >= 0) && (lastRow >= 0))
                rowWidth = this.getCellX(lastRow, lastCol) + this.getColumnWidth(lastCol) - x;
            else if (lastCol >= 0)
                rowWidth = this.getCellX(0, lastCol) + this.getColumnWidth(lastCol) - x;
            else if (lastRow >= 0)
                rowWidth = this.getCellX(lastRow, 0) + this.getColumnWidth(0) - x;
            return new egret.Rectangle(x, y, rowWidth, this.defaultRowHeight);
        };
        p.getColumnBounds = function (col) {
            if ((col < 0) || (col >= this._columnCount))
                return null;
            if (this._columnCount == 0 || this._rowCount == 0)
                return new egret.Rectangle(0, 0, 0, 0);
            var x = this.getCellX(0, col);
            var y = this.getCellY(0, col);
            var colWidth = this.getColumnWidth(col);
            var colHeight = this.getCellY(this._rowCount - 1, col) + this.getRowHeight(this._rowCount - 1) - y;
            return new egret.Rectangle(x, y, colWidth, colHeight);
        };
        p.getRowIndexAt = function (x, y) {
            if (y < 0)
                return -1;
            var index = 0;
            if (!this.variableRowHeight || this.rowList.length == 0) {
                index = Math.floor(y / (this.defaultRowHeight + this.rowGap));
                return index < this._rowCount ? index : -1;
            }
            if (y == 0)
                return this._rowCount > 0 ? 0 : -1;
            if (!this.recentNode) {
                this.recentNode = this.rowList.first;
                this.startY = this.recentNode.rowIndex * (this.defaultRowHeight + this.rowGap);
            }
            if (this.isYInRow(y, this.startY, this.recentNode))
                index = this.recentNode.rowIndex;
            else if (y < this.startY)
                index = this.getPrevRowIndexAt(y, this.recentNode, this.startY);
            else
                index = this.getNextRowIndexAt(y, this.recentNode, this.startY);
            return index < this._rowCount ? index : -1;
        };
        p.isYInRow = function (y, startY, node) {
            var end = startY + node.maxCellHeight;
            if (node.rowIndex != this.rowCount - 1)
                end += this.rowGap;
            if (y >= startY && y < end)
                return true;
            return false;
        };
        p.getPrevRowIndexAt = function (y, startNode, startY) {
            var node = startNode;
            var prevNode = null;
            var index = node.rowIndex;
            var currentY = startY;
            var prevY = 0;
            var targetY = y;
            while (node) {
                if (this.isYInRow(targetY, currentY, node))
                    break;
                prevNode = node.prev;
                if (!prevNode) {
                    prevY = 0;
                }
                else {
                    prevY = currentY;
                    var indDiff = node.rowIndex - prevNode.rowIndex;
                    if (indDiff > 1)
                        prevY -= (indDiff - 1) * (this.defaultRowHeight + this.rowGap);
                }
                if (targetY < currentY && targetY >= prevY) {
                    index = index - Math.ceil((currentY - targetY) / (this.defaultRowHeight + this.rowGap));
                    break;
                }
                currentY = prevY - prevNode.maxCellHeight - this.rowGap;
                node = node.prev;
                index = node.rowIndex;
            }
            this.recentNode = node;
            this.startY = currentY;
            return index;
        };
        p.getNextRowIndexAt = function (y, startNode, startY) {
            var node = startNode;
            var nextNode = null;
            var index = node.rowIndex;
            var nodeY = startY;
            var currentY = startY;
            var nextY = 0;
            var targetY = y;
            while (node) {
                if (this.isYInRow(targetY, nodeY, node))
                    break;
                currentY += node.maxCellHeight;
                if (node.rowIndex != this.rowCount - 1)
                    currentY += this.rowGap;
                nextNode = node.next;
                nextY = currentY;
                var indDiff = 0;
                if (!nextNode) {
                    indDiff = this.rowCount - 1 - node.rowIndex;
                    nextY += indDiff * (this.defaultRowHeight + this.rowGap) - this.rowGap + 1;
                }
                else {
                    indDiff = nextNode.rowIndex - node.rowIndex;
                    nextY += (indDiff - 1) * (this.defaultRowHeight + this.rowGap);
                }
                if (targetY >= currentY && targetY < nextY) {
                    index = index + Math.ceil(targetY - currentY) / (this.defaultRowHeight + this.rowGap);
                    break;
                }
                if (!nextNode) {
                    index = -1;
                    break;
                }
                nodeY = currentY = nextY;
                node = node.next;
                index = node.rowIndex;
            }
            this.recentNode = node;
            this.startY = nodeY;
            return index;
        };
        p.getColumnIndexAt = function (x, y) {
            var cur = x;
            var i = 0;
            for (i = 0; i < this._columnCount; i++) {
                var temp = this._columnWidths[i];
                if (isNaN(temp)) {
                    temp = this.typicalCellWidths[i];
                    if (temp == 0)
                        continue;
                }
                if (isNaN(temp))
                    temp = this.defaultColumnWidth;
                cur -= temp + this.columnGap;
                if (cur <= 0)
                    return i;
            }
            return -1;
        };
        p.getContentWidth = function (columnCountOverride) {
            if (columnCountOverride === void 0) { columnCountOverride = -1; }
            var nCols = (columnCountOverride == -1) ? this._columnCount : columnCountOverride;
            var contentWidth = 0;
            var width = 0;
            var measuredColCount = 0;
            for (var i = 0; (i < this._columnCount) && (measuredColCount < nCols); i++) {
                if (i >= this._columnWidths.length) {
                    contentWidth += this.defaultColumnWidth;
                    measuredColCount++;
                    continue;
                }
                width = this._columnWidths[i];
                if (isNaN(width)) {
                    width = this.typicalCellWidths[i];
                    if (width == 0)
                        continue;
                }
                if (isNaN(width))
                    width = this.defaultColumnWidth;
                contentWidth += width;
                measuredColCount++;
            }
            if (nCols > 1)
                contentWidth += (nCols - 1) * this.columnGap;
            return contentWidth;
        };
        p.getContentHeight = function (rowCountOverride) {
            if (rowCountOverride === void 0) { rowCountOverride = -1; }
            var nRows = (rowCountOverride == -1) ? this.rowCount : rowCountOverride;
            var contentHeight = 0;
            if (nRows > 1)
                contentHeight += (nRows - 1) * this.rowGap;
            if (!this.variableRowHeight || this.rowList.length == 0)
                return contentHeight + nRows * this.defaultRowHeight;
            var node = this.rowList.first;
            var numRows = 0;
            while (node && node.rowIndex < nRows) {
                contentHeight += node.maxCellHeight;
                numRows++;
                node = node.next;
            }
            contentHeight += (nRows - numRows) * this.defaultRowHeight;
            return contentHeight;
        };
        p.getTypicalContentWidth = function (columnCountOverride) {
            if (columnCountOverride === void 0) { columnCountOverride = -1; }
            var nCols = (columnCountOverride == -1) ? this._columnCount : columnCountOverride;
            var contentWidth = 0;
            var measuredColCount = 0;
            for (var columnIndex = 0; (columnIndex < this._columnCount) && (measuredColCount < nCols); columnIndex++) {
                var width = columnIndex < this._columnCount ? this.typicalCellWidths[columnIndex] : NaN;
                if (width == 0)
                    continue;
                if (isNaN(width))
                    width = this.defaultColumnWidth;
                contentWidth += width;
                measuredColCount++;
            }
            if (nCols > 1)
                contentWidth += (measuredColCount - 1) * this.columnGap;
            return contentWidth;
        };
        p.getTypicalContentHeight = function (rowCountOverride) {
            if (rowCountOverride === void 0) { rowCountOverride = -1; }
            var nRows = (rowCountOverride == -1) ? this.rowCount : rowCountOverride;
            var contentHeight = 0;
            if (nRows > 1)
                contentHeight += (nRows - 1) * this.rowGap;
            if (!isNaN(this.defaultRowHeight))
                return contentHeight + nRows * this.defaultRowHeight;
            return 0;
        };
        p.getTypicalCellWidth = function (columnIndex) {
            return this.typicalCellWidths[columnIndex];
        };
        p.setTypicalCellWidth = function (columnIndex, value) {
            this.typicalCellWidths[columnIndex] = value;
        };
        p.getTypicalCellHeight = function (columnIndex) {
            return this.typicalCellHeights[columnIndex];
        };
        p.setTypicalCellHeight = function (columnIndex, value) {
            this.typicalCellHeights[columnIndex] = value;
            var max = 0;
            var typicalCellHeightsLength = this.typicalCellHeights.length;
            for (var i = 0; i < typicalCellHeightsLength; i++) {
                if (!isNaN(this.typicalCellHeights[i]))
                    max = Math.max(max, this.typicalCellHeights[i]);
            }
            this.maxTypicalCellHeight = max;
        };
        p.clearTypicalCellWidthsAndHeights = function () {
            eui.GridDimensions.clearVector(this.typicalCellWidths, NaN);
            eui.GridDimensions.clearVector(this.typicalCellHeights, NaN);
            this.maxTypicalCellHeight = NaN;
        };
        p.insertRows = function (startRow, count) {
            this.insertRowsAt(startRow, count);
        };
        p.insertColumns = function (startColumn, count) {
            var oldColumnCount = this._columnCount;
            var newColumnCount = this._columnCount + count;
            if (startColumn < 0 || startColumn > oldColumnCount)
                return;
            this.rowList.insertColumns(startColumn, count);
            this._columnCount = newColumnCount;
            eui.GridDimensions.insertValueToVector(this._columnWidths, startColumn, count, NaN);
            eui.GridDimensions.insertValueToVector(this.typicalCellWidths, startColumn, count, NaN);
            eui.GridDimensions.insertValueToVector(this.typicalCellHeights, startColumn, count, NaN);
        };
        p.removeRows = function (startRow, count) {
            this.removeRowsAt(startRow, count);
        };
        p.removeColumns = function (startColumn, count) {
            var oldColumnCount = this._columnCount;
            var newColumnCount = this._columnCount - count;
            if (startColumn < 0 || startColumn >= oldColumnCount)
                return;
            if (newColumnCount <= 0) {
                this.columnCount = 0;
                return;
            }
            this.rowList.removeColumns(startColumn, count);
            this._columnCount = newColumnCount;
            this._columnWidths.splice(startColumn, count);
            this.typicalCellWidths.splice(startColumn, count);
            this.typicalCellHeights.splice(startColumn, count);
            this.recentNode = null;
            this.recentNode2 = null;
        };
        p.clearRows = function (startRow, count) {
            if (startRow < 0 || count <= 0)
                return;
            var node = this.rowList.findNearestLTE(startRow);
            var endRow = startRow + count;
            var oldNode;
            if (node && node.rowIndex < startRow)
                node = node.next;
            while (node && node.rowIndex < endRow) {
                oldNode = node;
                node = node.next;
                this.rowList.removeNode(oldNode);
            }
            this.recentNode = null;
            this.recentNode2 = null;
        };
        p.clearColumns = function (startColumn, count) {
            if (startColumn < 0 || startColumn >= this._columnCount)
                return;
            this.rowList.clearColumns(startColumn, count);
            eui.GridDimensions.clearVector(this.typicalCellWidths, NaN, startColumn, count);
            eui.GridDimensions.clearVector(this.typicalCellHeights, NaN, startColumn, count);
            eui.GridDimensions.clearVector(this._columnWidths, NaN, startColumn, count);
            this.recentNode = null;
            this.recentNode2 = null;
        };
        p.moveRows = function (fromRow, toRow, count) {
            var rows = this.removeRowsAt(fromRow, count);
            var diff = toRow - fromRow;
            for (var node_key_a in rows) {
                var node = rows[node_key_a];
                node.rowIndex = node.rowIndex + diff;
            }
            this.insertRowsAt(toRow, count, rows);
        };
        p.moveColumns = function (fromCol, toCol, count) {
            if (fromCol < 0 || fromCol >= this._columnCount || toCol < 0 || toCol > this._columnCount)
                return;
            this.rowList.moveColumns(fromCol, toCol, count);
            eui.GridDimensions.insertElementsToVector(this._columnWidths, toCol, this._columnWidths.splice(fromCol, count));
            eui.GridDimensions.insertElementsToVector(this.typicalCellWidths, toCol, this.typicalCellWidths.splice(fromCol, count));
            eui.GridDimensions.insertElementsToVector(this.typicalCellHeights, toCol, this.typicalCellHeights.splice(fromCol, count));
        };
        p.clearHeights = function () {
            this.rowList.removeAll();
            this.recentNode = null;
            this.recentNode2 = null;
            this.startY = 0;
            this.startY2 = 0;
        };
        p.insertRowsAt = function (startRow, count, nodes) {
            if (nodes === void 0) { nodes = null; }
            if (startRow < 0 || count <= 0)
                return;
            var startNode = this.rowList.findNearestLTE(startRow);
            var node;
            if (startNode && startNode.rowIndex < startRow)
                startNode = startNode.next;
            if (nodes) {
                if (startNode) {
                    var node_key_a;
                    for (node_key_a in nodes) {
                        node = nodes[node_key_a];
                        this.rowList.insertBefore(startNode, node);
                    }
                }
                else {
                    var node_key_a;
                    for (node_key_a in nodes) {
                        node = nodes[node_key_a];
                        this.rowList.push(node);
                    }
                }
            }
            node = startNode;
            while (node) {
                node.rowIndex += count;
                node = node.next;
            }
            this.rowCount += count;
            this.recentNode = null;
            this.recentNode2 = null;
        };
        p.removeRowsAt = function (startRow, count) {
            var vec = new Array();
            if (startRow < 0 || count <= 0)
                return vec;
            var node = this.rowList.findNearestLTE(startRow);
            var endRow = startRow + count;
            var oldNode;
            if (node && node.rowIndex < startRow)
                node = node.next;
            while (node && node.rowIndex < endRow) {
                oldNode = node;
                vec.push(oldNode);
                node = node.next;
                this.rowList.removeNode(oldNode);
            }
            while (node) {
                node.rowIndex -= count;
                node = node.next;
            }
            this._rowCount -= count;
            this.recentNode = null;
            this.recentNode2 = null;
            return vec;
        };
        p.dataProviderCollectionChanged = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        this.insertRows(event.location, event.items.length);
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        this.removeRows(event.location, event.items.length);
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        this.moveRows(event.oldLocation, event.location, event.items.length);
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                    {
                        this.clearHeights();
                        break;
                    }
                case eui.CollectionEventKind.RESET:
                    {
                        this.clearHeights();
                        this.clearTypicalCellWidthsAndHeights();
                        break;
                    }
                case eui.CollectionEventKind.UPDATE:
                    {
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                    {
                        this.clearRows(event.location, event.items.length);
                        break;
                    }
            }
        };
        p.columnsCollectionChanged = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        this.insertColumns(event.location, event.items.length);
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        this.removeColumns(event.location, event.items.length);
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        this.moveColumns(event.oldLocation, event.location, event.items.length);
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                case eui.CollectionEventKind.RESET:
                    {
                        this.columnCount = (event.target).length;
                        break;
                    }
                case eui.CollectionEventKind.UPDATE:
                    {
                        var pcEvent;
                        var itemsLength = event.items ? event.items.length : 0;
                        for (var i = 0; i < itemsLength; i++) {
                            pcEvent = event.items[i];
                            if (pcEvent && pcEvent.property == "visible")
                                this.columns_visibleChangedHandler(pcEvent);
                        }
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                    {
                        this.clearColumns(event.location, event.items.length);
                        break;
                    }
            }
        };
        p.columns_visibleChangedHandler = function (pcEvent) {
            var column = pcEvent.source;
            var columnIndex = column.columnIndex;
            if (!column || columnIndex < 0 || columnIndex >= this._columnCount)
                return;
            this.clearColumns(columnIndex, 1);
            if (column.visible) {
                this.setTypicalCellWidth(columnIndex, NaN);
                this.setTypicalCellHeight(columnIndex, NaN);
                if (!isNaN(column.width))
                    this.setColumnWidth(columnIndex, column.width);
            }
            else {
                this.setTypicalCellWidth(columnIndex, 0);
                this.setTypicalCellHeight(columnIndex, 0);
                this.setColumnWidth(columnIndex, NaN);
            }
        };
        p.toString = function () {
            return this.rowList.toString();
        };
        return GridDimensions;
    })(egret.HashObject);
    eui.GridDimensions = GridDimensions;
    egret.registerClass(GridDimensions,'eui.GridDimensions');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridItemRenderer = (function (_super) {
        __extends(GridItemRenderer, _super);
        function GridItemRenderer() {
            _super.call(this);
            this._label = "";
            this._column = null;
            this._data = null;
            this._down = false;
            this._hovered = false;
            this._rowIndex = -1;
            this._showsCaret = false;
            this._selected = false;
            this._dragging = false;
            var _self__ = this;
            this.skinName = "skins.GridItemRendererSkin";
            _self__.addEventListener(eui.ToolTipEvent.TOOL_TIP_SHOW, eui.GridItemRenderer.toolTipShowHandler, null);
        }
        var c=GridItemRenderer,p=c.prototype;
        GridItemRenderer.initializeRendererToolTip = function (renderer) {
            //                    var toolTipClient: egret.managers.IToolTipManagerClient = <egret.managers.IToolTipManagerClient>flash.As3As(renderer,null,"egret.managers.IToolTipManagerClient");
            //                    if(!toolTipClient)
            //                        return;
            //                    var showDataTips: boolean = (renderer.rowIndex != -1) && renderer.column && renderer.column.getShowDataTips();
            //                    var dataTip: any = toolTipClient.toolTip;
            //                    if(!dataTip && showDataTips)
            //                        toolTipClient.toolTip = "<dataTip>";
            //                    else if(dataTip && !showDataTips)
            //                        toolTipClient.toolTip = null;
        };
        d(p, "owner"
            ,function () {
                return this._owner;
            }
            ,function (value) {
                this._owner = value;
            }
        );
        p.ownerChanged = function (value) {
            this._owner = value;
        };
        GridItemRenderer.toolTipShowHandler = function (event) {
            var toolTip = event.toolTip;
            var renderer = event.currentTarget;
            if (!renderer)
                return;
            //                    var toolTipClient: egret.managers.IToolTipManagerClient = <egret.managers.IToolTipManagerClient>flash.As3As(event.currentTarget,null,"egret.managers.IToolTipManagerClient");
            //                    if(!toolTipClient)
            //                        return;
            //                    toolTip.toolTipData = renderer.column.itemToDataTip(renderer["data"]);
            //                    egret.managers.ToolTipManager.positionTip(toolTip,toolTipClient);
        };
        d(p, "label"
            ,function () {
                if (this.labelDisplay) {
                    return this.labelDisplay.text;
                }
                else {
                    return this._label;
                }
            }
            ,function (value) {
                this._label = value;
                if (this.labelDisplay) {
                    this.labelDisplay.text = value;
                }
            }
        );
        d(p, "column"
            ,function () {
                return this._column;
            }
            ,function (value) {
                if (this._column == value)
                    return;
                this._column = value;
            }
        );
        d(p, "columnIndex"
            ,function () {
                return (this.column) ? this.column.columnIndex : -1;
            }
            ,function (value) {
                egret.superSetter(eui.GridItemRenderer, this, "columnIndex", value);
            }
        );
        d(p, "data"
            ,function () {
                return this._data;
            }
            ,function (value) {
                if (this._data == value)
                    return;
                this._data = value;
            }
        );
        d(p, "down"
            ,function () {
                return this._down;
            }
            ,function (value) {
                if (value == this._down)
                    return;
                this._down = value;
                this.invalidateState();
            }
        );
        d(p, "grid"
            ,function () {
                return (this.column) ? this.column.grid : null;
            }
            ,function (value) {
                egret.superSetter(eui.GridItemRenderer, this, "grid", value);
            }
        );
        d(p, "hovered"
            ,function () {
                return this._hovered;
            }
            ,function (value) {
                if (value == this._hovered)
                    return;
                this._hovered = value;
                this.invalidateState();
            }
        );
        d(p, "rowIndex"
            ,function () {
                return this._rowIndex;
            }
            ,function (value) {
                if (this._rowIndex == value)
                    return;
                this._rowIndex = value;
            }
        );
        d(p, "showsCaret"
            ,function () {
                return this._showsCaret;
            }
            ,function (value) {
                if (this._showsCaret == value)
                    return;
                this._showsCaret = value;
                this.invalidateState();
            }
        );
        d(p, "selected"
            ,function () {
                return this._selected;
            }
            ,function (value) {
                if (this._selected == value)
                    return;
                this._selected = value;
                this.invalidateState();
            }
        );
        d(p, "dragging"
            ,function () {
                return this._dragging;
            }
            ,function (value) {
                if (this._dragging == value)
                    return;
                this._dragging = value;
                this.invalidateState();
            }
        );
        p.getCurrentSkinState = function () {
            if (this._selected)
                return "down";
            if (!this.enabled)
                //                return super.getCurrentSkinState();
                return _super.prototype.getCurrentState.call(this);
            if (this._down)
                return "down";
            if (this._hovered)
                return "over";
            return "up";
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.labelDisplay) {
                this.labelDisplay.text = this._label;
            }
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, this.width, this.height);
            //            eui.GridItemRenderer.initializeRendererToolTip(this);
        };
        p.prepare = function (hasBeenRecycled) {
        };
        p.discard = function (willBeRecycled) {
        };
        return GridItemRenderer;
    })(eui.Component);
    eui.GridItemRenderer = GridItemRenderer;
    egret.registerClass(GridItemRenderer,'eui.GridItemRenderer');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridLayer = (function (_super) {
        __extends(GridLayer, _super);
        function GridLayer() {
            _super.call(this);
            this.layout = new eui.LayoutBase();
        }
        var c=GridLayer,p=c.prototype;
        p.invalidateDisplayList = function () {
            var grid = this.parent;
            if (grid && grid.inUpdateDisplayList)
                return;
            if (grid)
                grid.invalidateDisplayList();
        };
        p.invalidateSize = function () {
            var grid = this.parent;
            if (grid && grid.inUpdateDisplayList)
                return;
            if (grid)
                grid.invalidateSize();
        };
        return GridLayer;
    })(eui.Group);
    eui.GridLayer = GridLayer;
    egret.registerClass(GridLayer,'eui.GridLayer');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridRowList = (function (_super) {
        __extends(GridRowList, _super);
        function GridRowList() {
            _super.call(this);
            this._length = 0;
            this._numColumns = 0;
            _super.call(this);
        }
        var c=GridRowList,p=c.prototype;
        d(p, "first"
            ,function () {
                return this._head;
            }
            ,function (value) {
                egret.superSetter(eui.GridRowList, this, "first", value);
            }
        );
        d(p, "last"
            ,function () {
                return this._tail;
            }
            ,function (value) {
                egret.superSetter(eui.GridRowList, this, "last", value);
            }
        );
        d(p, "tail"
            ,function () {
                return this._tail;
            }
            ,function (value) {
                egret.superSetter(eui.GridRowList, this, "tail", value);
            }
        );
        d(p, "head"
            ,function () {
                return this._head;
            }
            ,function (value) {
                egret.superSetter(eui.GridRowList, this, "head", value);
            }
        );
        d(p, "length"
            ,function () {
                return this._length;
            }
            ,function (value) {
                egret.superSetter(eui.GridRowList, this, "length", value);
            }
        );
        d(p, "numColumns"
            ,function () {
                return this._numColumns;
            }
            ,function (value) {
                if (this._numColumns == value)
                    return;
                this._numColumns = value;
                var cur = this._head;
                while (cur) {
                    cur.numColumns = value;
                    cur = cur.next;
                }
            }
        );
        p.insert = function (index) {
            if (this._head == null) {
                this._head = new eui.GridRowNode(this.numColumns, index);
                this._tail = this._head;
                this._length++;
                return this._head;
            }
            var cur = this.findNearestLTE(index);
            if (cur && cur.rowIndex == index)
                return cur;
            var newNode = new eui.GridRowNode(this.numColumns, index);
            if (!cur)
                this.insertBefore(this._head, newNode);
            else
                this.insertAfter(cur, newNode);
            this.recentNode = newNode;
            return newNode;
        };
        p.insertAfter = function (node, newNode) {
            newNode.prev = node;
            newNode.next = node.next;
            if (node.next == null)
                this._tail = newNode;
            else
                node.next.prev = newNode;
            node.next = newNode;
            this._length++;
        };
        p.insertBefore = function (node, newNode) {
            newNode.prev = node.prev;
            newNode.next = node;
            if (node.prev == null)
                this._head = newNode;
            else
                node.prev.next = newNode;
            node.prev = newNode;
            this._length++;
        };
        p.find = function (index) {
            if (!this._head)
                return null;
            var indexToRecent = 0;
            var temp = 0;
            var lastToIndex = this._tail.rowIndex - index;
            var result = null;
            if (this.recentNode) {
                if (this.recentNode.rowIndex == index)
                    return this.recentNode;
                indexToRecent = this.recentNode.rowIndex - index;
                temp = Math.abs(indexToRecent);
            }
            if (lastToIndex < 0) {
                return null;
            }
            else if (this.recentNode && temp < lastToIndex && temp < index) {
                if (indexToRecent > 0)
                    result = this.findBefore(index, this.recentNode);
                else
                    result = this.findAfter(index, this.recentNode);
            }
            else if (lastToIndex < index) {
                result = this.findBefore(index, this._tail);
            }
            else {
                result = this.findAfter(index, this._head);
            }
            if (result)
                this.recentNode = result;
            return result;
        };
        p.findAfter = function (index, node) {
            var cur = node;
            var result = null;
            while (cur && cur.rowIndex <= index) {
                if (cur.rowIndex == index) {
                    result = cur;
                    break;
                }
                cur = cur.next;
            }
            return result;
        };
        p.findBefore = function (index, node) {
            var cur = node;
            var result = null;
            while (cur && cur.rowIndex >= index) {
                if (cur.rowIndex == index) {
                    result = cur;
                    break;
                }
                cur = cur.prev;
            }
            return result;
        };
        p.findNearestLTE = function (index) {
            if (!this._head || index < 0)
                return null;
            var indexToRecent = 0;
            var temp = 0;
            var lastToIndex = 0;
            var result = null;
            if (this.recentNode) {
                if (this.recentNode.rowIndex == index)
                    return this.recentNode;
                indexToRecent = this.recentNode.rowIndex - index;
                temp = Math.abs(indexToRecent);
            }
            lastToIndex = this._tail.rowIndex - index;
            if (index < this._head.rowIndex) {
                result = null;
            }
            else if (lastToIndex < 0) {
                result = this._tail;
            }
            else if (this.recentNode && temp < lastToIndex && temp < index) {
                if (indexToRecent > 0)
                    result = this.findNearestLTEBefore(index, this.recentNode);
                else
                    result = this.findNearestLTEAfter(index, this.recentNode);
            }
            else if (lastToIndex < index) {
                result = this.findNearestLTEBefore(index, this._tail);
            }
            else {
                result = this.findNearestLTEAfter(index, this._head);
            }
            this.recentNode = result;
            return result;
        };
        p.findNearestLTEAfter = function (index, node) {
            var cur = node;
            while (cur && cur.rowIndex < index) {
                if (cur.next == null)
                    break;
                else if (cur.next.rowIndex > index)
                    break;
                cur = cur.next;
            }
            return cur;
        };
        p.findNearestLTEBefore = function (index, node) {
            var cur = node;
            while (cur && cur.rowIndex > index) {
                cur = cur.prev;
            }
            return cur;
        };
        p.push = function (node) {
            if (this._tail) {
                node.prev = this._tail;
                node.next = null;
                this._tail.next = node;
                this._tail = node;
                this._length++;
            }
            else {
                node.prev = null;
                node.next = null;
                this._head = node;
                this._tail = node;
                this._length = 1;
            }
        };
        p.remove = function (index) {
            var node = this.find(index);
            if (node)
                this.removeNode(node);
            return node;
        };
        p.removeNode = function (node) {
            if (node.prev == null)
                this._head = node.next;
            else
                node.prev.next = node.next;
            if (node.next == null)
                this._tail = node.prev;
            else
                node.next.prev = node.prev;
            node.next = null;
            node.prev = null;
            if (node == this.recentNode)
                this.recentNode = null;
            this._length--;
        };
        p.removeAll = function () {
            this._head = null;
            this._tail = null;
            this._length = 0;
            this.recentNode = null;
        };
        p.insertColumns = function (startColumn, count) {
            this._numColumns += count;
            var node = this.first;
            while (node) {
                node.insertColumns(startColumn, count);
                node = node.next;
            }
        };
        p.removeColumns = function (startColumn, count) {
            this._numColumns -= count;
            var node = this.first;
            while (node) {
                node.removeColumns(startColumn, count);
                node = node.next;
            }
        };
        p.moveColumns = function (fromCol, toCol, count) {
            var node = this.first;
            while (node) {
                node.moveColumns(fromCol, toCol, count);
                node = node.next;
            }
        };
        p.clearColumns = function (startColumn, count) {
            var node = this.first;
            while (node) {
                node.clearColumns(startColumn, count);
                node = node.next;
            }
        };
        p.toString = function () {
            var s = "[ ";
            var node = this.first;
            while (node) {
                s += "(" + node.rowIndex + "," + node.maxCellHeight + ") -> ";
                node = node.next;
            }
            s += "]";
            return s;
        };
        p.toArray = function () {
            var arr = new eui.ArrayCollection();
            var node = this.first;
            var index = 0;
            while (node) {
                arr.addItem(node);
                node = node.next;
            }
            return arr;
        };
        return GridRowList;
    })(egret.HashObject);
    eui.GridRowList = GridRowList;
    egret.registerClass(GridRowList,'eui.GridRowList');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridRowNode = (function (_super) {
        __extends(GridRowNode, _super);
        function GridRowNode(numColumns, rowIndex) {
            _super.call(this);
            this.rowIndex = 0;
            this.maxCellHeight = -1;
            this.fixedHeight = -1;
            this._numColumns = 0;
            this.rowIndex = rowIndex;
            this._numColumns = numColumns;
            this.cellHeights = new Array(numColumns);
            eui.GridDimensions.clearVector(this.cellHeights, -1);
        }
        var c=GridRowNode,p=c.prototype;
        d(p, "numColumns"
            ,function () {
                return this._numColumns;
            }
            ,function (value) {
                if (value == this._numColumns)
                    return;
                this.cellHeights.length = value;
                if (value > this._numColumns) {
                    for (var i = value - this._numColumns; i < value; i++)
                        this.cellHeights[i] = -1;
                }
                else {
                    this.updateMaxHeight();
                }
                this._numColumns = value;
            }
        );
        p.updateMaxHeight = function () {
            var max = -1;
            for (var cellHeight_key_a in this.cellHeights) {
                var cellHeight = this.cellHeights[cellHeight_key_a];
                if (cellHeight > max)
                    max = cellHeight;
            }
            var changed = this.maxCellHeight != max;
            if (changed)
                this.maxCellHeight = max;
            return changed;
        };
        p.getCellHeight = function (index) {
            if (index < 0 || index >= this.cellHeights.length)
                return NaN;
            return this.cellHeights[index];
        };
        p.setCellHeight = function (index, value) {
            if (this.cellHeights[index] == value)
                return false;
            this.cellHeights[index] = value;
            if (value == this.maxCellHeight)
                return false;
            if (value > this.maxCellHeight) {
                this.maxCellHeight = value;
                return true;
            }
            return this.updateMaxHeight();
        };
        p.insertColumns = function (startColumn, count) {
            eui.GridDimensions.insertValueToVector(this.cellHeights, startColumn, count, -1);
        };
        p.moveColumns = function (fromCol, toCol, count) {
            eui.GridDimensions.insertElementsToVector(this.cellHeights, toCol, this.cellHeights.splice(fromCol, count));
        };
        p.clearColumns = function (startColumn, count) {
            eui.GridDimensions.clearVector(this.cellHeights, -1, startColumn, count);
            this.updateMaxHeight();
        };
        p.removeColumns = function (startColumn, count) {
            this.cellHeights.splice(startColumn, count);
            this.updateMaxHeight();
        };
        p.toString = function () {
            var s = "";
            s += "(" + this.rowIndex + ", " + this.maxCellHeight + ") ";
            s += this.cellHeights + "\n";
            if (this.prev)
                s += this.prev.rowIndex;
            else
                s += "null";
            s += " <- -> ";
            if (this.next)
                s += this.next.rowIndex;
            else
                s += "null";
            return s;
        };
        return GridRowNode;
    })(egret.HashObject);
    eui.GridRowNode = GridRowNode;
    egret.registerClass(GridRowNode,'eui.GridRowNode');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridSelection = (function (_super) {
        __extends(GridSelection, _super);
        function GridSelection() {
            _super.call(this);
            this.cellRegions = new Array();
            this.inCollectionHandler = false;
            this._preserveSelection = true;
            this._requireSelection = false;
            this._selectionLength = 0;
            this._selectionMode = eui.GridSelectionMode.SINGLE_ROW;
        }
        var c=GridSelection,p=c.prototype;
        d(p, "grid"
            ,function () {
                return this._grid;
            }
            ,function (value) {
                this._grid = value;
            }
        );
        d(p, "preserveSelection"
            ,function () {
                return this._preserveSelection;
            }
            ,function (value) {
                if (this._preserveSelection == value)
                    return;
                this._preserveSelection = value;
                this.selectedItem = null;
                if (this._preserveSelection && (this.selectionMode == eui.GridSelectionMode.SINGLE_ROW || this.selectionMode == eui.GridSelectionMode.SINGLE_CELL) && this.selectionLength > 0) {
                    if (this.selectionMode == eui.GridSelectionMode.SINGLE_ROW)
                        this.selectedItem = this.grid.dataProvider.getItemAt(this.allRows()[0]);
                    else
                        this.selectedItem = this.grid.dataProvider.getItemAt(this.allCells()[0]["rowIndex"]);
                }
            }
        );
        d(p, "requireSelection"
            ,function () {
                return this._requireSelection;
            }
            ,function (value) {
                if (this._requireSelection == value)
                    return;
                this._requireSelection = value;
                if (this._requireSelection)
                    this.ensureRequiredSelection();
            }
        );
        d(p, "selectionLength"
            ,function () {
                var isRows = this.isRowSelectionMode();
                if (this._selectionLength < 0) {
                    this._selectionLength = 0;
                    var cellRegionsLength = this.cellRegions.length;
                    for (var i = 0; i < cellRegionsLength; i++) {
                        var cr = this.cellRegions[i];
                        var numSelected = isRows ? cr.height : cr.height * cr.width;
                        if (cr.isAdd)
                            this._selectionLength += numSelected;
                        else
                            this._selectionLength -= numSelected;
                    }
                }
                return this._selectionLength;
            }
            ,function (value) {
                egret.superSetter(eui.GridSelection, this, "selectionLength", value);
            }
        );
        d(p, "selectionMode"
            ,function () {
                return this._selectionMode;
            }
            ,function (value) {
                if (value == this._selectionMode)
                    return;
                switch (value) {
                    case eui.GridSelectionMode.SINGLE_ROW:
                    case eui.GridSelectionMode.MULTIPLE_ROWS:
                    case eui.GridSelectionMode.SINGLE_CELL:
                    case eui.GridSelectionMode.MULTIPLE_CELLS:
                    case eui.GridSelectionMode.NONE:
                        this._selectionMode = value;
                        this.removeAll();
                        break;
                }
            }
        );
        p.allCells = function () {
            var cells = new Array();
            if (!this.isCellSelectionMode())
                return cells;
            var bounds = this.getCellRegionsBounds();
            var left = bounds.left;
            var right = bounds.right;
            var bottom = bounds.bottom;
            for (var rowIndex = bounds.top; rowIndex < bottom; rowIndex++) {
                for (var columnIndex = left; columnIndex < right; columnIndex++) {
                    if (this.regionsContainCell(rowIndex, columnIndex))
                        cells.push(new eui.CellPosition(rowIndex, columnIndex));
                }
            }
            return cells;
        };
        p.allRows = function () {
            if (!this.isRowSelectionMode())
                return new Array();
            var rows = new Array();
            var bounds = this.getCellRegionsBounds();
            var bottom = bounds.bottom;
            for (var rowIndex = bounds.top; rowIndex < bottom; rowIndex++) {
                if (this.regionsContainCell(rowIndex, 0))
                    rows.push(rowIndex);
            }
            return rows;
        };
        p.selectAll = function () {
            var maxRows = this.getGridDataProviderLength();
            if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS) {
                return this.setRows(0, maxRows);
            }
            else if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS) {
                var maxColumns = this.getGridColumnsLength();
                return this.setCellRegion(0, 0, maxRows, maxColumns);
            }
            return false;
        };
        p.removeAll = function () {
            var selectionChanged = this.selectionLength > 0;
            this.removeSelection();
            selectionChanged = this.ensureRequiredSelection() || selectionChanged;
            return selectionChanged;
        };
        p.containsRow = function (rowIndex) {
            if (!this.validateIndex(rowIndex))
                return false;
            return this.regionsContainCell(rowIndex, 0);
        };
        p.containsRows = function (rowsIndices) {
            if (!this.validateIndices(rowsIndices))
                return false;
            for (var rowIndex_key_a in rowsIndices) {
                var rowIndex = rowsIndices[rowIndex_key_a];
                if (!this.regionsContainCell(rowIndex, 0))
                    return false;
            }
            return true;
        };
        p.setRow = function (rowIndex) {
            if (!this.validateIndex(rowIndex))
                return false;
            this.internalSetCellRegion(rowIndex);
            return true;
        };
        p.addRow = function (rowIndex) {
            if (!this.validateIndex(rowIndex))
                return false;
            if (this.selectionMode != eui.GridSelectionMode.MULTIPLE_ROWS)
                return false;
            this.internalAddCell(rowIndex);
            return true;
        };
        p.removeRow = function (rowIndex) {
            if (!this.validateIndex(rowIndex))
                return false;
            if (this.requireSelection && this.containsRow(rowIndex) && this.selectionLength == 1)
                return false;
            this.internalRemoveCell(rowIndex);
            return true;
        };
        p.setRows = function (rowIndex, rowCount) {
            if (!this.validateRowRegion(rowIndex, rowCount))
                return false;
            this.internalSetCellRegion(rowIndex, 0, rowCount, 1);
            return true;
        };
        p.containsCell = function (rowIndex, columnIndex) {
            if (!this.validateCell(rowIndex, columnIndex))
                return false;
            return this.regionsContainCell(rowIndex, columnIndex);
        };
        p.containsCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (!this.validateCellRegion(rowIndex, columnIndex, rowCount, columnCount))
                return false;
            if (rowCount * columnCount > this.selectionLength)
                return false;
            var cellRegionsLength = this.cellRegions.length;
            if (cellRegionsLength == 0)
                return false;
            if (cellRegionsLength == 1) {
                var cr = this.cellRegions[0];
                return (rowIndex >= cr.top && columnIndex >= cr.left && rowIndex + rowCount <= cr.bottom && columnIndex + columnCount <= cr.right);
            }
            var bottom = rowIndex + rowCount;
            var right = columnIndex + columnCount;
            for (var r = rowIndex; r < bottom; r++) {
                for (var c = columnIndex; c < right; c++) {
                    if (!this.containsCell(r, c))
                        return false;
                }
            }
            return true;
        };
        p.setCell = function (rowIndex, columnIndex) {
            if (!this.validateCell(rowIndex, columnIndex))
                return false;
            var columnVisible = this.isColumnVisible(columnIndex);
            if (columnVisible)
                this.internalSetCellRegion(rowIndex, columnIndex, 1, 1);
            return columnVisible;
        };
        p.addCell = function (rowIndex, columnIndex) {
            if (!this.validateCellRegion(rowIndex, columnIndex, 1, 1))
                return false;
            var columnVisible = this.isColumnVisible(columnIndex);
            if (columnVisible)
                this.internalAddCell(rowIndex, columnIndex);
            return columnVisible;
        };
        p.removeCell = function (rowIndex, columnIndex) {
            if (!this.validateCell(rowIndex, columnIndex))
                return false;
            if (this.requireSelection && this.containsCell(rowIndex, columnIndex) && this.selectionLength == 1)
                return false;
            this.internalRemoveCell(rowIndex, columnIndex);
            return true;
        };
        p.setCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (!this.validateCellRegion(rowIndex, columnIndex, rowCount, columnCount))
                return false;
            this.removeSelection();
            var startColumnIndex = columnIndex;
            var curColumnCount = 0;
            var endColumnIndex = columnIndex + columnCount - 1;
            for (var i = columnIndex; i <= endColumnIndex; i++) {
                var columnVisible = this.isColumnVisible(i);
                if (columnVisible) {
                    curColumnCount++;
                    continue;
                }
                this.internalAddCellRegion(rowIndex, startColumnIndex, rowCount, curColumnCount);
                curColumnCount = 0;
                startColumnIndex = i + 1;
            }
            if (curColumnCount > 0)
                this.internalAddCellRegion(rowIndex, startColumnIndex, rowCount, curColumnCount);
            return true;
        };
        p.isRowSelectionMode = function () {
            var mode = this.selectionMode;
            return mode == eui.GridSelectionMode.SINGLE_ROW || mode == eui.GridSelectionMode.MULTIPLE_ROWS;
        };
        p.isCellSelectionMode = function () {
            var mode = this.selectionMode;
            return mode == eui.GridSelectionMode.SINGLE_CELL || mode == eui.GridSelectionMode.MULTIPLE_CELLS;
        };
        p.isColumnVisible = function (columnIndex) {
            return (this.grid.columns.getItemAt(columnIndex)).visible;
        };
        p.getGridColumnsLength = function () {
            if (this.grid == null)
                return 0;
            var columns = this.grid.columns;
            return (columns) ? columns.length : 0;
        };
        p.getGridDataProviderLength = function () {
            if (this.grid == null)
                return 0;
            var dataProvider = this.grid.dataProvider;
            return (dataProvider) ? dataProvider.length : 0;
        };
        p.regionsContainCell = function (rowIndex, columnIndex) {
            var cellRegionsLength = this.cellRegions.length;
            var index = -1;
            for (var i = 0; i < cellRegionsLength; i++) {
                var cr = this.cellRegions[i];
                if (cr.isAdd && cr.containsCell(rowIndex, columnIndex))
                    index = i;
            }
            if (index == -1)
                return false;
            for (i = index + 1; i < cellRegionsLength; i++) {
                cr = this.cellRegions[i];
                if (!cr.isAdd && cr.containsCell(rowIndex, columnIndex))
                    return false;
            }
            return true;
        };
        p.ensureRequiredSelection = function () {
            var selectionChanged;
            if (!this.requireSelection)
                return false;
            if (this.getGridDataProviderLength() == 0 || this.getGridColumnsLength() == 0)
                return false;
            if (this.isRowSelectionMode()) {
                if (this.selectionLength == 0)
                    selectionChanged = this.grid.setSelectedIndex(0);
            }
            else if (this.isCellSelectionMode()) {
                if (this.selectionLength == 0)
                    selectionChanged = this.grid.setSelectedCell(0, 0);
            }
            return selectionChanged;
        };
        p.removeSelection = function () {
            this.cellRegions = new Array();
            this._selectionLength = 0;
            this.selectedItem = null;
        };
        p.validateIndex = function (index) {
            if (this.inCollectionHandler)
                return true;
            return this.isRowSelectionMode() && index >= 0 && index < this.getGridDataProviderLength();
        };
        p.validateIndices = function (indices) {
            if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS) {
                if (this.inCollectionHandler)
                    return true;
                for (var index_key_a in indices) {
                    var index = indices[index_key_a];
                    if (index < 0 || index >= this.getGridDataProviderLength())
                        return false;
                }
                return true;
            }
            return false;
        };
        p.validateCell = function (rowIndex, columnIndex) {
            if (this.inCollectionHandler)
                return true;
            return this.isCellSelectionMode() && rowIndex >= 0 && rowIndex < this.getGridDataProviderLength() && columnIndex >= 0 && columnIndex < this.getGridColumnsLength();
        };
        p.validateCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_CELLS) {
                if (this.inCollectionHandler)
                    return true;
                var maxRows = this.getGridDataProviderLength();
                var maxColumns = this.getGridColumnsLength();
                return (rowIndex >= 0 && rowCount >= 0 && rowIndex + rowCount <= maxRows && columnIndex >= 0 && columnCount >= 0 && columnIndex + columnCount <= maxColumns);
            }
            return false;
        };
        p.validateRowRegion = function (rowIndex, rowCount) {
            if (this.selectionMode == eui.GridSelectionMode.MULTIPLE_ROWS) {
                if (this.inCollectionHandler)
                    return true;
                var maxRows = this.getGridDataProviderLength();
                return (rowIndex >= 0 && rowCount >= 0 && rowIndex + rowCount <= maxRows);
            }
            return false;
        };
        p.internalSetCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (columnIndex === void 0) { columnIndex = 0; }
            if (rowCount === void 0) { rowCount = 1; }
            if (columnCount === void 0) { columnCount = 1; }
            var cr = new CellRect(rowIndex, columnIndex, rowCount, columnCount, true);
            this.removeSelection();
            this.cellRegions.push(cr);
            this._selectionLength = rowCount * columnCount;
            if (this.preserveSelection && (this.selectionMode == eui.GridSelectionMode.SINGLE_ROW || this.selectionMode == eui.GridSelectionMode.SINGLE_CELL)) {
                this.selectedItem = this.grid.dataProvider.getItemAt(rowIndex);
            }
        };
        p.internalAddCellRegion = function (rowIndex, columnIndex, rowCount, columnCount) {
            if (columnIndex === void 0) { columnIndex = 0; }
            if (rowCount === void 0) { rowCount = 1; }
            if (columnCount === void 0) { columnCount = 1; }
            var cr = new CellRect(rowIndex, columnIndex, rowCount, columnCount, true);
            this.cellRegions.push(cr);
            this._selectionLength += rowCount * columnCount;
        };
        p.internalAddCell = function (rowIndex, columnIndex) {
            if (columnIndex === void 0) { columnIndex = 0; }
            if (!this.regionsContainCell(rowIndex, columnIndex)) {
                var cr = new CellRect(rowIndex, columnIndex, 1, 1, true);
                this.cellRegions.push(cr);
                if (this._selectionLength >= 0)
                    this._selectionLength++;
            }
        };
        p.internalRemoveCell = function (rowIndex, columnIndex) {
            if (columnIndex === void 0) { columnIndex = 0; }
            if (this.regionsContainCell(rowIndex, columnIndex)) {
                var cr = new CellRect(rowIndex, columnIndex, 1, 1, false);
                this.cellRegions.push(cr);
                if (this._selectionLength >= 0)
                    this._selectionLength--;
                this.selectedItem = null;
            }
        };
        p.getCellRegionsBounds = function () {
            var bounds = new egret.Rectangle();
            var cellRegionsLength = this.cellRegions.length;
            for (var i = 0; i < cellRegionsLength; i++) {
                var cr = this.cellRegions[i];
                if (!cr.isAdd)
                    continue;
                bounds = bounds.union(cr);
            }
            return bounds;
        };
        p.dataProviderCollectionChanged = function (event) {
            this.inCollectionHandler = true;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        this.dataProviderCollectionAdd(event);
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        this.dataProviderCollectionMove(event);
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                    {
                        this.dataProviderCollectionRefresh(event);
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        this.dataProviderCollectionRemove(event);
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                    {
                        this.dataProviderCollectionReplace(event);
                        break;
                    }
                case eui.CollectionEventKind.RESET:
                    {
                        this.dataProviderCollectionReset(event);
                        break;
                    }
                case eui.CollectionEventKind.UPDATE:
                    {
                        this.dataProviderCollectionUpdate(event);
                        break;
                    }
            }
            this.inCollectionHandler = false;
        };
        p.dataProviderCollectionAdd = function (event) {
            this.handleRowAdd(event.location, event.items.length);
            this.ensureRequiredSelection();
        };
        p.handleRowAdd = function (insertIndex, insertCount) {
            if (insertCount === void 0) { insertCount = 1; }
            for (var cnt = 0; cnt < insertCount; cnt++) {
                for (var crIndex = 0; crIndex < this.cellRegions.length; crIndex++) {
                    var cr = this.cellRegions[crIndex];
                    if (insertIndex <= cr.y) {
                        cr.y++;
                    }
                    else if (insertIndex < cr.bottom) {
                        var newCR = new CellRect(insertIndex + 1, cr.x, cr.bottom - insertIndex, cr.width, cr.isAdd);
                        cr.height = insertIndex - cr.y;
                        this.cellRegions.splice(++crIndex, 0, newCR);
                        this._selectionLength = -1;
                    }
                }
            }
        };
        p.dataProviderCollectionMove = function (event) {
            var oldRowIndex = event.oldLocation;
            var newRowIndex = event.location;
            this.handleRowRemove(oldRowIndex);
            if (newRowIndex > oldRowIndex)
                newRowIndex--;
            this.handleRowAdd(newRowIndex);
        };
        p.dataProviderCollectionRefresh = function (event) {
            this.handleRefreshAndReset(event);
        };
        p.handleRefreshAndReset = function (event) {
            if (this.selectedItem) {
                var view = event.currentTarget;
                if (view && view.getItemIndex(this.selectedItem) != -1) {
                    var newRowIndex = this.grid.dataProvider.getItemIndex(this.selectedItem);
                    if (this.selectionMode == eui.GridSelectionMode.SINGLE_ROW) {
                        this.internalSetCellRegion(newRowIndex);
                    }
                    else {
                        var oldSelectedCell = this.allCells()[0];
                        this.internalSetCellRegion(newRowIndex, oldSelectedCell.columnIndex);
                    }
                    return;
                }
            }
            this.removeSelection();
            this.ensureRequiredSelection();
            return;
        };
        p.dataProviderCollectionRemove = function (event) {
            if (this.getGridDataProviderLength() == 0) {
                this.removeSelection();
                return;
            }
            this.handleRowRemove(event.location, event.items.length);
            this.ensureRequiredSelection();
        };
        p.handleRowRemove = function (removeIndex, removeCount) {
            if (removeCount === void 0) { removeCount = 1; }
            for (var cnt = 0; cnt < removeCount; cnt++) {
                var crIndex = 0;
                while (crIndex < this.cellRegions.length) {
                    var cr = this.cellRegions[crIndex];
                    if (removeIndex < cr.y) {
                        cr.y--;
                    }
                    else if (removeIndex >= cr.y && removeIndex < cr.bottom) {
                        this._selectionLength = -1;
                        cr.height--;
                        if (cr.height == 0) {
                            this.cellRegions.splice(crIndex, 1);
                            continue;
                        }
                    }
                    crIndex++;
                }
            }
        };
        p.dataProviderCollectionReplace = function (event) {
        };
        p.dataProviderCollectionReset = function (event) {
            this.handleRefreshAndReset(event);
        };
        p.dataProviderCollectionUpdate = function (event) {
        };
        p.columnsCollectionChanged = function (event) {
            this.inCollectionHandler = true;
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        this.columnsCollectionAdd(event);
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        this.columnsCollectionMove(event);
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        this.columnsCollectionRemove(event);
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                case eui.CollectionEventKind.UPDATE:
                    {
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                    {
                        this.columnsCollectionRefresh(event);
                        break;
                    }
                case eui.CollectionEventKind.RESET:
                    {
                        this.columnsCollectionReset(event);
                        break;
                    }
            }
            this.inCollectionHandler = false;
        };
        p.columnsCollectionAdd = function (event) {
            if (!this.isCellSelectionMode())
                return;
            this.handleColumnAdd(event.location, event.items.length);
            this.ensureRequiredSelection();
        };
        p.handleColumnAdd = function (insertIndex, insertCount) {
            if (insertCount === void 0) { insertCount = 1; }
            for (var cnt = 0; cnt < insertCount; cnt++) {
                for (var crIndex = 0; crIndex < this.cellRegions.length; crIndex++) {
                    var cr = this.cellRegions[crIndex];
                    if (insertIndex <= cr.x) {
                        cr.x++;
                    }
                    else if (insertIndex < cr.x) {
                        var newCR = new CellRect(cr.y, insertIndex + 1, cr.height, cr.right - insertIndex, cr.isAdd);
                        cr.width = insertIndex - cr.x;
                        this.cellRegions.splice(++crIndex, 0, newCR);
                        this._selectionLength = -1;
                    }
                }
            }
        };
        p.columnsCollectionMove = function (event) {
            if (!this.isCellSelectionMode())
                return;
            var oldColumnIndex = event.oldLocation;
            var newColumnIndex = event.location;
            this.handleColumnRemove(oldColumnIndex);
            if (newColumnIndex > oldColumnIndex)
                newColumnIndex--;
            this.handleColumnAdd(newColumnIndex);
        };
        p.columnsCollectionRemove = function (event) {
            if (!this.isCellSelectionMode())
                return;
            if (this.getGridColumnsLength() == 0) {
                this.removeSelection();
                return;
            }
            this.handleColumnRemove(event.location, event.items.length);
            this.ensureRequiredSelection();
        };
        p.handleColumnRemove = function (removeIndex, removeCount) {
            if (removeCount === void 0) { removeCount = 1; }
            for (var cnt = 0; cnt < removeCount; cnt++) {
                var crIndex = 0;
                while (crIndex < this.cellRegions.length) {
                    var cr = this.cellRegions[crIndex];
                    if (removeIndex < cr.x) {
                        cr.x--;
                    }
                    else if (removeIndex >= cr.x && removeIndex < cr.right) {
                        this._selectionLength = -1;
                        cr.width--;
                        if (cr.width == 0) {
                            this.cellRegions.splice(crIndex, 1);
                            continue;
                        }
                    }
                    crIndex++;
                }
            }
        };
        p.columnsCollectionRefresh = function (event) {
            this.columnsCollectionReset(event);
        };
        p.columnsCollectionReset = function (event) {
            if (!this.isCellSelectionMode())
                return;
            this.removeSelection();
            this.ensureRequiredSelection();
        };
        return GridSelection;
    })(egret.HashObject);
    eui.GridSelection = GridSelection;
    egret.registerClass(GridSelection,'eui.GridSelection');
    var CellRect = (function (_super) {
        __extends(CellRect, _super);
        function CellRect(rowIndex, columnIndex, rowCount, columnCount, isAdd) {
            _super.call(this, columnIndex, rowIndex, columnCount, rowCount);
            this.isAdd = false;
            this.isAdd = isAdd;
        }
        var c=CellRect,p=c.prototype;
        p.containsCell = function (cellRowIndex, cellColumnIndex) {
            var _self__ = this;
            ///这里休要修改
            var bool = _self__.contains(cellColumnIndex, cellRowIndex);
            return bool;
        };
        //重写了Rectangle 的 contains方法 不包含最大点（0，0，1，1）不包含 (0,1),(1,0),(1,1)
        p.contains = function (x, y) {
            return this.x <= x &&
                this.x + this.width > x &&
                this.y <= y &&
                this.y + this.height > y;
        };
        return CellRect;
    })(egret.Rectangle);
    egret.registerClass(CellRect,'CellRect');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridSelectionMode = (function (_super) {
        __extends(GridSelectionMode, _super);
        function GridSelectionMode() {
            _super.call(this);
        }
        var c=GridSelectionMode,p=c.prototype;
        return GridSelectionMode;
    })(egret.HashObject);
    eui.GridSelectionMode = GridSelectionMode;
    egret.registerClass(GridSelectionMode,'eui.GridSelectionMode');
})(eui || (eui = {}));
eui.GridSelectionMode.NONE = "none";
eui.GridSelectionMode.SINGLE_ROW = "singleRow";
eui.GridSelectionMode.MULTIPLE_ROWS = "multipleRows";
eui.GridSelectionMode.SINGLE_CELL = "singleCell";
eui.GridSelectionMode.MULTIPLE_CELLS = "multipleCells";
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var HeaderColumnSeparator = (function (_super) {
        __extends(HeaderColumnSeparator, _super);
        function HeaderColumnSeparator() {
            _super.call(this);
            this.skinName = "skins.HeaderColumnSeparatorSkin";
            this.touchChildren = false;
            this.touchEnabled = false;
        }
        var c=HeaderColumnSeparator,p=c.prototype;
        return HeaderColumnSeparator;
    })(eui.Component);
    eui.HeaderColumnSeparator = HeaderColumnSeparator;
    egret.registerClass(HeaderColumnSeparator,'eui.HeaderColumnSeparator');
})(eui || (eui = {}));
/**
 *
 * @author
 *
 */
var eui;
(function (eui) {
    var HoverIndicator = (function (_super) {
        __extends(HoverIndicator, _super);
        function HoverIndicator() {
            _super.call(this);
            this.skinName = "skins.HoverIndicatorSkin";
            this.touchChildren = false;
            this.touchEnabled = false;
        }
        var c=HoverIndicator,p=c.prototype;
        return HoverIndicator;
    })(eui.Component);
    eui.HoverIndicator = HoverIndicator;
    egret.registerClass(HoverIndicator,'eui.HoverIndicator');
})(eui || (eui = {}));
/**
 *
 * @author
 *
 */
var eui;
(function (eui) {
    var RowSeparator = (function (_super) {
        __extends(RowSeparator, _super);
        function RowSeparator() {
            _super.call(this);
            this.skinName = "skins.RowSeparatorSkin";
            this.touchChildren = false;
            this.touchEnabled = false;
        }
        var c=RowSeparator,p=c.prototype;
        return RowSeparator;
    })(eui.Component);
    eui.RowSeparator = RowSeparator;
    egret.registerClass(RowSeparator,'eui.RowSeparator');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var SelectionIndicatorRect = (function (_super) {
        __extends(SelectionIndicatorRect, _super);
        function SelectionIndicatorRect() {
            _super.call(this);
            this.skinName = "skins.SelectionIndicatorSkin";
            this.touchChildren = false;
            this.touchEnabled = false;
        }
        var c=SelectionIndicatorRect,p=c.prototype;
        return SelectionIndicatorRect;
    })(eui.Component);
    eui.SelectionIndicatorRect = SelectionIndicatorRect;
    egret.registerClass(SelectionIndicatorRect,'eui.SelectionIndicatorRect');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        /**
         * @private
         *
         * @param fraction
         * @returns
         */
        function sineInOut(fraction) {
            return -0.5 * (Math.cos(Math.PI * fraction) - 1);
        }
        /**
         * @private
         * 数值缓动工具类
         */
        var Animation = (function () {
            /**
             * @private
             */
            function Animation(updateFunction, thisObject) {
                /**
                 * @private
                 * 此动画的缓动行为。设置为null意味着不使用缓动，默认值为 sineInOut
                 */
                this.easerFunction = sineInOut;
                /**
                 * @private
                 * 是否正在播放动画，不包括延迟等待和暂停的阶段
                 */
                this.isPlaying = false;
                /**
                 * @private
                 * 动画持续时间,单位毫秒，默认值500
                 */
                this.duration = 500;
                /**
                 * @private
                 * 动画到当前时间对应的值。
                 */
                this.currentValue = 0;
                /**
                 * @private
                 * 起始值
                 */
                this.from = 0;
                /**
                 * @private
                 * 终点值。
                 */
                this.to = 0;
                /**
                 * @private
                 * 动画启动时刻
                 */
                this.startTime = 0;
                /**
                 * @private
                 * 动画播放结束时的回调函数
                 */
                this.endFunction = null;
                this.updateFunction = updateFunction;
                this.thisObject = thisObject;
            }
            var c=Animation,p=c.prototype;
            /**
             * @private
             * 开始正向播放动画,无论何时调用都重新从零时刻开始，若设置了延迟会首先进行等待。
             */
            p.play = function () {
                this.stop();
                this.start();
            };
            /**
             * @private
             * 开始播放动画
             */
            p.start = function () {
                this.isPlaying = false;
                this.currentValue = 0;
                this.startTime = egret.getTimer();
                this.doInterval(this.startTime);
                egret.startTick(this.doInterval, this);
            };
            /**
             * @private
             * 停止播放动画
             */
            p.stop = function () {
                this.isPlaying = false;
                this.startTime = 0;
                egret.stopTick(this.doInterval, this);
            };
            /**
             * @private
             * 计算当前值并返回动画是否结束
             */
            p.doInterval = function (currentTime) {
                var runningTime = currentTime - this.startTime;
                if (!this.isPlaying) {
                    this.isPlaying = true;
                }
                var duration = this.duration;
                var fraction = duration == 0 ? 1 : Math.min(runningTime, duration) / duration;
                if (this.easerFunction) {
                    fraction = this.easerFunction(fraction);
                }
                this.currentValue = this.from + (this.to - this.from) * fraction;
                if (this.updateFunction)
                    this.updateFunction.call(this.thisObject, this);
                var isEnded = runningTime >= duration;
                if (isEnded) {
                    this.stop();
                }
                if (isEnded && this.endFunction) {
                    this.endFunction.call(this.thisObject, this);
                }
                return true;
            };
            return Animation;
        })();
        sys.Animation = Animation;
        egret.registerClass(Animation,'eui.sys.Animation');
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Default instance of interface <code>IThemeAdapter</code>.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 默认的IThemeAdapter接口实现。
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var DefaultThemeAdapter = (function () {
        function DefaultThemeAdapter() {
        }
        var c=DefaultThemeAdapter,p=c.prototype;
        /**
         * 解析主题
         * @param url 待解析的主题url
         * @param compFunc 解析完成回调函数，示例：compFunc(e:egret.Event):void;
         * @param errorFunc 解析失败回调函数，示例：errorFunc():void;
         * @param thisObject 回调的this引用
         */
        p.getTheme = function (url, compFunc, errorFunc, thisObject) {
            function onGet(event) {
                var loader = (event.target);
                compFunc.call(thisObject, loader.response);
            }
            function onError(event) {
                errorFunc.call(thisObject);
            }
            var loader = new egret.HttpRequest();
            loader.addEventListener(egret.Event.COMPLETE, onGet, thisObject);
            loader.addEventListener(egret.IOErrorEvent.IO_ERROR, onError, thisObject);
            loader.responseType = egret.HttpResponseType.TEXT;
            loader.open(url);
            loader.send();
        };
        return DefaultThemeAdapter;
    })();
    eui.DefaultThemeAdapter = DefaultThemeAdapter;
    egret.registerClass(DefaultThemeAdapter,'eui.DefaultThemeAdapter',["eui.IThemeAdapter"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 用于处理因用户交互而打开和关闭下拉列表的操作的控制器
     * @author dom
     */
    var DropDownController = (function (_super) {
        __extends(DropDownController, _super);
        /**
         * 构造函数
         */
        function DropDownController() {
            _super.call(this);
            /**
             * 鼠标按下标志
             */
            this.mouseIsDown = false;
            this._isOpen = false;
            this._closeOnResize = true;
            this._rollOverOpenDelay = NaN;
        }
        var c=DropDownController,p=c.prototype;
        d(p, "openButton"
            /**
             * 下拉按钮实例
             */
            ,function () {
                return this._openButton;
            }
            ,function (value) {
                if (this._openButton === value)
                    return;
                this.removeOpenTriggers();
                this._openButton = value;
                this.addOpenTriggers();
            }
        );
        /**
         * 获取舞台引用
         */
        p.getStage = function () {
            return this._openButton ? this._openButton.stage : null;
        };
        d(p, "dropDown"
            /**
             * 下拉区域显示对象
             */
            ,function () {
                return this._dropDown;
            }
            ,function (value) {
                if (this._dropDown === value)
                    return;
                this._dropDown = value;
            }
        );
        d(p, "isOpen"
            /**
             * 下拉列表已经打开的标志
             */
            ,function () {
                return this._isOpen;
            }
        );
        d(p, "closeOnResize"
            /**
             * 如果为 true，则在调整舞台大小时会关闭下拉列表。
             */
            ,function () {
                return this._closeOnResize;
            }
            ,function (value) {
                if (this._closeOnResize == value)
                    return;
                if (this.isOpen)
                    this.removeCloseOnResizeTrigger();
                this._closeOnResize = value;
                this.addCloseOnResizeTrigger();
            }
        );
        d(p, "rollOverOpenDelay"
            /**
             * 指定滑过锚点按钮时打开下拉列表要等待的延迟（以毫秒为单位）。
             * 如果设置为 NaN，则下拉列表会在单击时打开，而不是在滑过时打开。默认值NaN
             */
            ,function () {
                return this._rollOverOpenDelay;
            }
            ,function (value) {
                if (this._rollOverOpenDelay == value)
                    return;
                this.removeOpenTriggers();
                this._rollOverOpenDelay = value;
                this.addOpenTriggers();
            }
        );
        /**
         * 添加触发下拉列表打开的事件监听
         */
        p.addOpenTriggers = function () {
            if (this.openButton) {
                if (isNaN(this.rollOverOpenDelay))
                    this.openButton.addEventListener(eui.UIEvent.BUTTON_DOWN, this.openButton_buttonDownHandler, this);
                else
                    this.openButton.addEventListener(egret.MouseEvent.ROLL_OVER, this.openButton_rollOverHandler, this);
            }
        };
        /**
         * 移除触发下拉列表打开的事件监听
         */
        p.removeOpenTriggers = function () {
            if (this.openButton) {
                if (isNaN(this.rollOverOpenDelay))
                    this.openButton.removeEventListener(eui.UIEvent.BUTTON_DOWN, this.openButton_buttonDownHandler, this);
                else
                    this.openButton.removeEventListener(egret.MouseEvent.ROLL_OVER, this.openButton_rollOverHandler, this);
            }
        };
        /**
         * 添加触发下拉列表关闭的事件监听
         */
        p.addCloseTriggers = function () {
            var stage = this.getStage();
            if (stage) {
                if (isNaN(this.rollOverOpenDelay)) {
                    stage.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.stage_mouseDownHandler, this);
                    stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.stage_mouseUpHandler_noRollOverOpenDelay, this);
                }
                else {
                    stage.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.stage_mouseMoveHandler, this);
                }
                this.addCloseOnResizeTrigger();
                stage.addEventListener(egret.MouseEvent.MOUSE_WHEEL, this.stage_mouseWheelHandler, this);
            }
        };
        /**
         * 移除触发下拉列表关闭的事件监听
         */
        p.removeCloseTriggers = function () {
            var stage = this.getStage();
            if (stage) {
                if (isNaN(this.rollOverOpenDelay)) {
                    stage.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.stage_mouseDownHandler, this);
                    stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.stage_mouseUpHandler_noRollOverOpenDelay, this);
                }
                else {
                    stage.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.stage_mouseMoveHandler, this);
                    stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.stage_mouseUpHandler, this);
                }
                this.removeCloseOnResizeTrigger();
                stage.removeEventListener(egret.MouseEvent.MOUSE_WHEEL, this.stage_mouseWheelHandler, this);
            }
        };
        /**
         * 添加舞台尺寸改变的事件监听
         */
        p.addCloseOnResizeTrigger = function () {
            var stage = this.getStage();
            if (this.closeOnResize && stage) {
                stage.addEventListener(egret.Event.RESIZE, this.stage_resizeHandler, this);
            }
        };
        /**
         * 移除舞台尺寸改变的事件监听
         */
        p.removeCloseOnResizeTrigger = function () {
            var stage = this.getStage();
            if (this.closeOnResize && stage) {
                stage.removeEventListener(egret.Event.RESIZE, this.stage_resizeHandler, this);
            }
        };
        /**
         * 检查鼠标是否在DropDown或者openButton区域内。
         */
        p.isTargetOverDropDownOrOpenButton = function (target) {
            if (target) {
                if (this.openButton && this.openButton.contains(target))
                    return true;
                if (this.hitAreaAdditions != null) {
                    for (var i = 0; i < this.hitAreaAdditions.length; i++) {
                        if (this.hitAreaAdditions[i] == target || (egret.is(this.hitAreaAdditions[i], "egret.DisplayObjectContainer") && this.hitAreaAdditions[i].contains(target)))
                            return true;
                    }
                }
                if (egret.is(this.dropDown, "egret.DisplayObjectContainer")) {
                    if ((this.dropDown).contains(target))
                        return true;
                }
                else {
                    if (target == this.dropDown)
                        return true;
                }
            }
            return false;
        };
        /**
         * 打开下拉列表
         */
        p.openDropDown = function () {
            this.openDropDownHelper();
        };
        /**
         * 执行打开下拉列表
         */
        p.openDropDownHelper = function () {
            if (!this.isOpen) {
                this.addCloseTriggers();
                this._isOpen = true;
                if (this.openButton)
                    this.openButton.keepDown(true);
                this.dispatchEvent(new eui.UIEvent(eui.UIEvent.OPEN));
            }
        };
        /**
         * 关闭下拉列表
         */
        p.closeDropDown = function (commit) {
            if (this.isOpen) {
                this._isOpen = false;
                if (this.openButton)
                    this.openButton.keepDown(false);
                var dde = new eui.UIEvent(eui.UIEvent.CLOSE, false, true);
                if (!commit)
                    dde.preventDefault();
                this.dispatchEvent(dde);
                this.removeCloseTriggers();
            }
        };
        /**
         * openButton上按下鼠标事件
         */
        p.openButton_buttonDownHandler = function (event) {
            if (this.isOpen)
                this.closeDropDown(true);
            else {
                this.mouseIsDown = true;
                this.openDropDownHelper();
            }
        };
        /**
         * openButton上鼠标经过事件
         */
        p.openButton_rollOverHandler = function (event) {
            if (this.rollOverOpenDelay == 0)
                this.openDropDownHelper();
            else {
                this.openButton.addEventListener(egret.MouseEvent.ROLL_OUT, this.openButton_rollOutHandler, this);
                this.rollOverOpenDelayTimer = new egret.Timer(this.rollOverOpenDelay, 1);
                this.rollOverOpenDelayTimer.addEventListener(egret.TimerEvent.TIMER_COMPLETE, this.rollOverDelay_timerCompleteHandler, this);
                this.rollOverOpenDelayTimer.start();
            }
        };
        /**
         * openButton上鼠标移出事件
         */
        p.openButton_rollOutHandler = function (event) {
            if (this.rollOverOpenDelayTimer && this.rollOverOpenDelayTimer.running) {
                this.rollOverOpenDelayTimer.stop();
                this.rollOverOpenDelayTimer = null;
            }
            this.openButton.removeEventListener(egret.MouseEvent.ROLL_OUT, this.openButton_rollOutHandler, this);
        };
        /**
         * 到达鼠标移入等待延迟打开的时间。
         */
        p.rollOverDelay_timerCompleteHandler = function (event) {
            this.openButton.removeEventListener(egret.MouseEvent.ROLL_OUT, this.openButton_rollOutHandler, this);
            this.rollOverOpenDelayTimer = null;
            this.openDropDownHelper();
        };
        /**
         * 舞台上鼠标按下事件
         */
        p.stage_mouseDownHandler = function (event) {
            if (this.mouseIsDown) {
                this.mouseIsDown = false;
                return;
            }
            if (!this.dropDown || (this.dropDown && (event.target == this.dropDown || (egret.is(this.dropDown, "egret.DisplayObjectContainer") && !(this.dropDown).contains((event.target)))))) {
                var target = event.target;
                if (this.openButton && target && this.openButton.contains(target))
                    return;
                if (this.hitAreaAdditions != null) {
                    for (var i = 0; i < this.hitAreaAdditions.length; i++) {
                        if (this.hitAreaAdditions[i] == event.target || ((egret.is(this.hitAreaAdditions[i], "egret.DisplayObjectContainer")) && (this.hitAreaAdditions[i]).contains(event.target)))
                            return;
                    }
                }
                this.closeDropDown(true);
            }
        };
        /**
         * 舞台上鼠标移动事件
         */
        p.stage_mouseMoveHandler = function (event) {
            var target = event.target;
            var containedTarget = this.isTargetOverDropDownOrOpenButton(target);
            if (containedTarget)
                return;
            if (egret.is(event, "egret.MouseEvent") && (event)["buttonDown"]) {
                var stage = this.getStage();
                stage.addEventListener(egret.MouseEvent.MOUSE_UP, this.stage_mouseUpHandler, this);
                //stage.addEventListener(egret.Event.MOUSE_LEAVE,this.stage_mouseUpHandler,this);
                return;
            }
            this.closeDropDown(true);
        };
        /**
         * 舞台上鼠标弹起事件
         */
        p.stage_mouseUpHandler_noRollOverOpenDelay = function (event) {
            if (this.mouseIsDown) {
                this.mouseIsDown = false;
                return;
            }
        };
        /**
         * 舞台上鼠标弹起事件
         */
        p.stage_mouseUpHandler = function (event) {
            var target = event.target;
            var containedTarget = this.isTargetOverDropDownOrOpenButton(target);
            if (containedTarget) {
                var stage = this.getStage();
                stage.removeEventListener(egret.MouseEvent.MOUSE_UP, this.stage_mouseUpHandler, this);
                //stage.removeEventListener(egret.Event.MOUSE_LEAVE,this.stage_mouseUpHandler,this);
                return;
            }
            this.closeDropDown(true);
        };
        /**
         * 舞台尺寸改变事件
         */
        p.stage_resizeHandler = function (event) {
            this.closeDropDown(true);
        };
        /**
         * 舞台上鼠标滚轮事件
         */
        p.stage_mouseWheelHandler = function (event) {
            if (this.dropDown && !(this.dropDown.contains(event.target) && event.isDefaultPrevented()))
                this.closeDropDown(false);
        };
        return DropDownController;
    })(egret.EventDispatcher);
    eui.DropDownController = DropDownController;
    egret.registerClass(DropDownController,'eui.DropDownController');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        /**
         * @private
         * 需要记录的历史速度的最大次数。
         */
        var MAX_VELOCITY_COUNT = 4;
        /**
         * @private
         * 记录的历史速度的权重列表。
         */
        var VELOCITY_WEIGHTS = [1, 1.33, 1.66, 2];
        /**
         * @private
         * 当前速度所占的权重。
         */
        var CURRENT_VELOCITY_WEIGHT = 2.33;
        /**
         * @private
         * 最小的改变速度，解决浮点数精度问题。
         */
        var MINIMUM_VELOCITY = 0.02;
        /**
         * @private
         * 当容器自动滚动时要应用的摩擦系数
         */
        var FRICTION = 0.998;
        /**
         * @private
         * 当容器自动滚动时并且滚动位置超出容器范围时要额外应用的摩擦系数
         */
        var EXTRA_FRICTION = 0.95;
        /**
         * @private
         * 摩擦系数的自然对数
         */
        var FRICTION_LOG = Math.log(FRICTION);
        /**
         * @private
         *
         * @param ratio
         * @returns
         */
        function easeOut(ratio) {
            var invRatio = ratio - 1.0;
            return invRatio * invRatio * invRatio + 1;
        }
        /**
         * @private
         * 一个工具类,用于容器的滚屏拖动操作，计算在一段时间持续滚动后释放，应该继续滚动到的值和缓动时间。
         * 使用此工具类，您需要创建一个 ScrollThrown 实例,并在滚动发生时调用start()方法，然后在触摸移动过程中调用update()更新当前舞台坐标。
         * 内部将会启动一个计时器定时根据当前位置计算出速度值，并缓存下来最后4个值。当停止滚动时，再调用finish()方法，
         * 将立即停止记录位移，并将计算出的最终结果存储到 Thrown.scrollTo 和 Thrown.duration 属性上。
         */
        var TouchScroll = (function () {
            /**
             * @private
             * 创建一个 TouchScroll 实例
             * @param updateFunction 滚动位置更新回调函数
             */
            function TouchScroll(updateFunction, endFunction, target) {
                /**
                 * @private
                 * 当前容器滚动外界可调节的系列
                 */
                this.$scrollFactor = 1.0;
                /**
                 * @private
                 */
                this.previousTime = 0;
                /**
                 * @private
                 */
                this.velocity = 0;
                /**
                 * @private
                 */
                this.previousVelocity = [];
                /**
                 * @private
                 */
                this.currentPosition = 0;
                /**
                 * @private
                 */
                this.previousPosition = 0;
                /**
                 * @private
                 */
                this.currentScrollPos = 0;
                /**
                 * @private
                 */
                this.maxScrollPos = 0;
                /**
                 * @private
                 * 触摸按下时的偏移量
                 */
                this.offsetPoint = 0;
                this.$bounces = true;
                this.started = true;
                if (DEBUG && !updateFunction) {
                    egret.$error(1003, "updateFunction");
                }
                this.updateFunction = updateFunction;
                this.endFunction = endFunction;
                this.target = target;
                this.animation = new sys.Animation(this.onScrollingUpdate, this);
                this.animation.endFunction = this.finishScrolling;
                this.animation.easerFunction = easeOut;
            }
            var c=TouchScroll,p=c.prototype;
            /**
             * @private
             * 正在播放缓动动画的标志。
             */
            p.isPlaying = function () {
                return this.animation.isPlaying;
            };
            /**
             * @private
             * 如果正在执行缓动滚屏，停止缓动。
             */
            p.stop = function () {
                this.animation.stop();
                egret.stopTick(this.onTick, this);
                this.started = false;
            };
            /**
             * @private
             * true表示已经调用过start方法。
             */
            p.isStarted = function () {
                return this.started;
            };
            /**
             * @private
             * 开始记录位移变化。注意：当使用完毕后，必须调用 finish() 方法结束记录，否则该对象将无法被回收。
             * @param touchPoint 起始触摸位置，以像素为单位，通常是stageX或stageY。
             */
            p.start = function (touchPoint, scrollValue, maxScrollValue) {
                this.started = true;
                this.velocity = 0;
                this.previousVelocity.length = 0;
                this.previousTime = egret.getTimer();
                this.previousPosition = this.currentPosition = touchPoint;
                this.offsetPoint = scrollValue + touchPoint;
                egret.startTick(this.onTick, this);
            };
            /**
             * @private
             * 更新当前移动到的位置
             * @param touchPoint 当前触摸位置，以像素为单位，通常是stageX或stageY。
             */
            p.update = function (touchPoint, maxScrollValue) {
                maxScrollValue = Math.max(maxScrollValue, 0);
                this.currentPosition = touchPoint;
                this.maxScrollPos = maxScrollValue;
                var scrollPos = this.offsetPoint - touchPoint;
                if (scrollPos < 0) {
                    if (!this.$bounces) {
                        scrollPos = 0;
                    }
                    else {
                        scrollPos *= 0.5;
                    }
                }
                if (scrollPos > maxScrollValue) {
                    if (!this.$bounces) {
                        scrollPos = maxScrollValue;
                    }
                    else {
                        scrollPos = (scrollPos + maxScrollValue) * 0.5;
                    }
                }
                this.currentScrollPos = scrollPos;
                this.updateFunction.call(this.target, scrollPos);
            };
            /**
             * @private
             * 停止记录位移变化，并计算出目标值和继续缓动的时间。
             * @param currentScrollPos 容器当前的滚动值。
             * @param maxScrollPos 容器可以滚动的最大值。当目标值不在 0~maxValue之间时，将会应用更大的摩擦力，从而影响缓动时间的长度。
             */
            p.finish = function (currentScrollPos, maxScrollPos) {
                egret.stopTick(this.onTick, this);
                this.started = false;
                var sum = this.velocity * CURRENT_VELOCITY_WEIGHT;
                var previousVelocityX = this.previousVelocity;
                var length = previousVelocityX.length;
                var totalWeight = CURRENT_VELOCITY_WEIGHT;
                for (var i = 0; i < length; i++) {
                    var weight = VELOCITY_WEIGHTS[i];
                    sum += previousVelocityX[0] * weight;
                    totalWeight += weight;
                }
                var pixelsPerMS = sum / totalWeight;
                var absPixelsPerMS = Math.abs(pixelsPerMS);
                var duration = 0;
                var posTo = 0;
                if (absPixelsPerMS > MINIMUM_VELOCITY) {
                    posTo = currentScrollPos + (pixelsPerMS - MINIMUM_VELOCITY) / FRICTION_LOG * 2 * this.$scrollFactor;
                    if (posTo < 0 || posTo > maxScrollPos) {
                        posTo = currentScrollPos;
                        while (Math.abs(pixelsPerMS) > MINIMUM_VELOCITY) {
                            posTo -= pixelsPerMS;
                            if (posTo < 0 || posTo > maxScrollPos) {
                                pixelsPerMS *= FRICTION * EXTRA_FRICTION;
                            }
                            else {
                                pixelsPerMS *= FRICTION;
                            }
                            duration++;
                        }
                    }
                    else {
                        duration = Math.log(MINIMUM_VELOCITY / absPixelsPerMS) / FRICTION_LOG;
                    }
                }
                else {
                    posTo = currentScrollPos;
                }
                if (this.target["$getThrowInfo"]) {
                    var event = this.target["$getThrowInfo"](currentScrollPos, posTo);
                    posTo = event.toPos;
                }
                if (duration > 0) {
                    //如果取消了回弹,保证动画之后不会超出边界
                    if (!this.$bounces) {
                        if (posTo < 0) {
                            posTo = 0;
                        }
                        else if (posTo > maxScrollPos) {
                            posTo = maxScrollPos;
                        }
                    }
                    this.throwTo(posTo, duration);
                }
                else {
                    this.finishScrolling();
                }
            };
            /**
             * @private
             *
             * @param timeStamp
             * @returns
             */
            p.onTick = function (timeStamp) {
                var timeOffset = timeStamp - this.previousTime;
                if (timeOffset > 10) {
                    var previousVelocity = this.previousVelocity;
                    if (previousVelocity.length >= MAX_VELOCITY_COUNT) {
                        previousVelocity.shift();
                    }
                    this.velocity = (this.currentPosition - this.previousPosition) / timeOffset;
                    previousVelocity.push(this.velocity);
                    this.previousTime = timeStamp;
                    this.previousPosition = this.currentPosition;
                }
                return true;
            };
            /**
             * @private
             *
             * @param animation
             */
            p.finishScrolling = function (animation) {
                var hsp = this.currentScrollPos;
                var maxHsp = this.maxScrollPos;
                var hspTo = hsp;
                if (hsp < 0) {
                    hspTo = 0;
                }
                if (hsp > maxHsp) {
                    hspTo = maxHsp;
                }
                this.throwTo(hspTo, 300);
            };
            /**
             * @private
             * 缓动到水平滚动位置
             */
            p.throwTo = function (hspTo, duration) {
                if (duration === void 0) { duration = 500; }
                var hsp = this.currentScrollPos;
                if (hsp == hspTo) {
                    this.endFunction.call(this.target);
                    return;
                }
                var animation = this.animation;
                animation.duration = duration;
                animation.from = hsp;
                animation.to = hspTo;
                animation.play();
            };
            /**
             * @private
             * 更新水平滚动位置
             */
            p.onScrollingUpdate = function (animation) {
                this.currentScrollPos = animation.currentValue;
                this.updateFunction.call(this.target, animation.currentValue);
            };
            return TouchScroll;
        })();
        sys.TouchScroll = TouchScroll;
        egret.registerClass(TouchScroll,'eui.sys.TouchScroll');
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * Tree组件的项呈示器基类
     * @author
     */
    var TreeItemRenderer = (function (_super) {
        __extends(TreeItemRenderer, _super);
        function TreeItemRenderer() {
            _super.call(this);
            this._indentation = 17;
            this._depth = 0;
            this._hasChildren = false;
            this._isOpen = false;
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onItemTouch, this, false, 100);
            this.addEventListener(egret.TouchEvent.TOUCH_END, this.onItemTouch, this, false, 100);
            this.addEventListener(egret.TouchEvent.TOUCH_CANCEL, this.onItemTouch, this, false, 100);
        }
        var c=TreeItemRenderer,p=c.prototype;
        p.onItemTouch = function (event) {
            if (event.target == this.disclosureButton) {
                event.stopImmediatePropagation();
            }
        };
        d(p, "indentation"
            /**
             * 子节点相对父节点的缩进值，以像素为单位。默认17。
             */
            ,function () {
                return this._indentation;
            }
            ,function (value) {
                this._indentation = value;
            }
        );
        d(p, "depth"
            /**
             * @inheritDoc
             */
            ,function () {
                return this._depth;
            }
            ,function (value) {
                if (this._depth == value)
                    return;
                this._depth = value;
                if (this.contentGroup) {
                    this.contentGroup.x = this._depth * this._indentation;
                }
            }
        );
        d(p, "hasChildren"
            /**
             * @inheritDoc
             */
            ,function () {
                return this._hasChildren;
            }
            ,function (value) {
                if (this._hasChildren == value)
                    return;
                this._hasChildren = value;
                if (this.disclosureButton) {
                    this.disclosureButton.visible = this._hasChildren;
                }
            }
        );
        d(p, "opened"
            ,function () {
                return this._isOpen;
            }
            ,function (value) {
                if (this._isOpen == value)
                    return;
                this._isOpen = value;
                if (this.disclosureButton) {
                    this.disclosureButton.selected = this._isOpen;
                }
            }
        );
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.disclosureButton) {
                this.disclosureButton.visible = this._hasChildren;
                this.disclosureButton.selected = this._isOpen;
                this.disclosureButton.$autoSelected = false;
                this.disclosureButton.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.disclosureButton_mouseDownHandler, this);
            }
            else if (instance == this.contentGroup) {
                this.contentGroup.x = this._depth * this._indentation;
            }
        };
        p.partRemoved = function (partName, instance) {
            _super.prototype.partRemoved.call(this, partName, instance);
            if (instance == this.disclosureButton) {
                this.disclosureButton.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.disclosureButton_mouseDownHandler, this);
                this.disclosureButton.$autoSelected = true;
                this.disclosureButton.visible = true;
            }
        };
        /**
         * 鼠标在disclosureButton上按下
         */
        p.disclosureButton_mouseDownHandler = function (event) {
            var evt = new eui.TreeEvent(eui.TreeEvent.ITEM_OPENING, false, true, this.itemIndex, this.data, this);
            evt.opening = !this._isOpen;
            this.dispatchEvent(evt);
        };
        return TreeItemRenderer;
    })(eui.ItemRenderer);
    eui.TreeItemRenderer = TreeItemRenderer;
    egret.registerClass(TreeItemRenderer,'eui.TreeItemRenderer',["eui.ITreeItemRenderer","eui.IItemRenderer","eui.UIComponent"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var Wizard = (function () {
        function Wizard() {
            /**
                 * 向导包含的页
                 */
            this.pages = [];
            this._forcePreviousAndNextButtons = false;
            this._needsProgressMonitor = false;
        }
        var c=Wizard,p=c.prototype;
        d(p, "forcePreviousAndNextButtons",undefined
            /**
             * 即使只有一页向导是否需要上一页和下一页的按钮
             */
            ,function (value) {
                this._forcePreviousAndNextButtons = value;
            }
        );
        /**
         * 添加一个向导页
         */
        p.addPage = function (page) {
            this.pages.push(page);
            page.wizard = this;
        };
        p.addPages = function () {
        };
        p.canFinish = function () {
            for (var i = 0; i < this.pages.length; i++) {
                if (!(this.pages[i]).getIsPageComplete()) {
                    return false;
                }
            }
            return true;
        };
        p.createPageContainer = function (pageContainer) {
            //初始化时不用添加到显示列表
            //			for (var i:int = 0; i < pages.length; i++) 
            //			{
            //				var page:IWizardPage = pages[i] as IWizardPage;
            //				if(!page.owner)
            //					pageContainer.addElement(page);
            //			}
        };
        d(p, "container"
            ,function () {
                return this._container;
            }
            ,function (wizardContainer) {
                this._container = wizardContainer;
            }
        );
        p.getWindowTitle = function () {
            return this._windowTitle;
        };
        p.setWindowTitle = function (value) {
            this._windowTitle = value;
            if (this.container)
                this.container.updateWindowTitle();
        };
        p.getNeedsProgressMonitor = function () {
            return this._needsProgressMonitor;
        };
        p.setNeedsProgressMonitor = function (value) {
            this._needsProgressMonitor = value;
        };
        p.getNextPage = function (page) {
            var index = this.pages.indexOf(page);
            if (index < 0 || index == this.pages.length - 1) {
                return null;
            }
            return this.pages[index + 1];
        };
        p.getPreviousPage = function (page) {
            var index = this.pages.indexOf(page);
            if (index <= 0) {
                return null;
            }
            return this.pages[index - 1];
        };
        p.getStartingPage = function () {
            if (this.pages.length == 0)
                return null;
            return this.pages[0];
        };
        p.getPage = function (pageName) {
            for (var i = 0; i < this.pages.length; i++) {
                var page = this.pages[i];
                if (page.getPageName() == pageName)
                    return page;
            }
            return null;
        };
        p.getPageCount = function () {
            return this.pages.length;
        };
        p.getPages = function () {
            return this.pages.concat();
        };
        p.needsPreviousAndNextButtons = function () {
            return this._forcePreviousAndNextButtons || this.pages.length > 1;
        };
        p.performCancel = function () {
            return true;
        };
        p.performFinish = function () {
            return true;
        };
        return Wizard;
    })();
    eui.Wizard = Wizard;
    egret.registerClass(Wizard,'eui.Wizard',["eui.IWizard"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var WizardDialog = (function (_super) {
        __extends(WizardDialog, _super);
        function WizardDialog(newWidzard) {
            _super.call(this);
            /**
             * 对话框对应的向导集合
             */
            this.createdWizards = [];
            /**
             * 嵌套的向导
             */
            this.nestedWizards = [];
            this.pageMessageType = eui.DialogConstants.NONE;
            this.isMovingToPreviousPage = false;
            /**
             * 正在运行的操作数量
             */
            this.activeRunningOperations = 0;
            this.minWidth = 480;
            this.minHeight = 360;
            this.setWizard(newWidzard);
        }
        var c=WizardDialog,p=c.prototype;
        d(p, "wizard"
            /**
             * 当前的向导
             */
            ,function () {
                return this._wizard;
            }
        );
        /**
         * 设置向导
         */
        p.setWizard = function (value) {
            this._wizard = value;
            this._wizard.container = this;
            if (this.createdWizards.indexOf(this.wizard) < 0) {
                this.createdWizards.push(this.wizard);
                this.nestedWizards.push(this.wizard);
                if (this.pageContainer) {
                    this.createPageControls();
                }
            }
            else {
                var length = this.nestedWizards.length;
                if (length >= 2 && this.nestedWizards[length - 2] == this.wizard)
                    this.nestedWizards.splice(length - 1);
                else
                    this.nestedWizards.push(this.wizard);
            }
        };
        /**
         * 当前显示页
         */
        p.getCurrentPage = function () {
            return this._currentPage;
        };
        p.setCurrentPage = function (value) {
            this._currentPage = value;
        };
        d(p, "progressMonitor"
            /**
             * 进度监控器
             */
            ,function () {
                return this.progressMonitorPart;
            }
        );
        /**
         * 上一步按钮点击
         */
        p.backPressed = function () {
            var page = this.getCurrentPage().previousPage;
            if (!page)
                return;
            this.isMovingToPreviousPage = true;
            this.showPage(page);
        };
        /**
         * 下一步按钮被点击
         */
        p.nextPressed = function () {
            var page = this.getCurrentPage().getNextPage();
            if (!page)
                return;
            this.showPage(page);
        };
        /**
         * 派发页面即将改变的事件
         */
        p.doPageChanging = function (targetPage) {
            var event = new eui.PageChangeEvent(eui.PageChangeEvent.CHANGING);
            event.oldPage = this.getCurrentPage();
            event.newPage = targetPage;
            return this.dispatchEvent(event);
        };
        p.finishPressed = function () {
            if (this.wizard.performFinish()) {
                this.doFinish();
            }
        };
        /**
         * 执行嵌套的向导的确认操作，并关闭窗口
         */
        p.doFinish = function () {
            for (var i = 0; i < this.nestedWizards.length - 1; i++) {
                this.nestedWizards[i].performFinish();
            }
            this.hardClose();
        };
        p.close = function () {
            if (this.okToClose())
                this.hardClose();
        };
        p.okToClose = function () {
            if (this.activeRunningOperations > 0) {
                var windowClosingDialog = this.createWizardClosingDialog();
                this.stage.addChild(windowClosingDialog);
                return false;
            }
            return this.wizard.performCancel();
        };
        p.createWizardClosingDialog = function () {
            //创建正在执行任务无法关闭的提示框
            var result = new eui.MessageDialog("向导正在关闭", "由于活动的操作导致向导不能关闭,必须先取消该操作才能关闭向导。", ["确定"], 0);
            return result;
        };
        /**
         * @inheritDoc
         */
        p.buttonPressed = function (name) {
            switch (name) {
                case eui.DialogConstants.BACK_ID:
                    this.backPressed();
                    break;
                case eui.DialogConstants.NEXT_ID:
                    this.nextPressed();
                    break;
                case eui.DialogConstants.FINISH_ID:
                    this.finishPressed();
                    break;
                case eui.DialogConstants.CANCEL_ID:
                    this.cancelPressed();
                    break;
            }
        };
        p.cancelPressed = function () {
            if (this.activeRunningOperations <= 0) {
                this._returnCode = eui.DialogConstants.CANCEL;
                this.close();
            }
            else {
                this.cancelButton.enabled = false;
            }
        };
        p.createButtonsForButtonBar = function () {
            if (this.wizard.needsPreviousAndNextButtons())
                this.createPreviousAndNextButtons();
            this.finishButton = this.createButton(eui.DialogConstants.FINISH_ID, "完成", true);
            this.cancelButton = this.createButton(eui.DialogConstants.CANCEL_ID, "取消");
        };
        p.createChildren = function () {
            this.wizard.addPages();
            _super.prototype.createChildren.call(this);
            this.createPageControls();
            this.showStartingPage();
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.dialogArea) {
                var group = instance;
                var vLayout = new eui.VerticalLayout();
                vLayout.gap = 5;
                vLayout.paddingLeft = 15;
                vLayout.paddingRight = 15;
                vLayout.paddingTop = 15;
                vLayout.paddingBottom = 15;
                vLayout.horizontalAlign = egret.HorizontalAlign.JUSTIFY;
                group.layout = vLayout;
                this.pageContainer = new eui.Group();
                this.pageContainer.scrollEnabled = true;
                this.pageContainer.percentHeight = this.pageContainer.percentWidth = 100;
                group.addChild(this.pageContainer);
                this.progressMonitorPart = this.createProgressMonitor();
                this.progressMonitorPart.visible = this.progressMonitorPart.includeInLayout = false;
                group.addChild(this.progressMonitorPart);
            }
        };
        /**
         * 创建页面并添加到显示列表
         */
        p.createPageControls = function () {
            this.wizard.createPageContainer(this.pageContainer);
            var pages = this.wizard.getPages();
            for (var i = 0; i < pages.length; i++) {
                var page = pages[i];
                if (page)
                    page.visible = false;
            }
        };
        /**
         * 创建上一步和下一步按钮
         */
        p.createPreviousAndNextButtons = function () {
            this.backButton = this.createButton(eui.DialogConstants.BACK_ID, "上一页");
            this.nextButton = this.createButton(eui.DialogConstants.NEXT_ID, "下一页");
        };
        /**
         * 关闭窗口
         */
        p.hardClose = function () {
            for (var i = 0; i < this.createdWizards.length; i++) {
                var createdWizard = this.createdWizards[i];
                createdWizard.container = null;
            }
            _super.prototype.close.call(this);
        };
        p.showPage = function (page) {
            if (!page || page == this.getCurrentPage())
                return;
            if (!this.doPageChanging(page))
                return;
            if (!this.isMovingToPreviousPage)
                page.previousPage = this.getCurrentPage();
            else
                this.isMovingToPreviousPage = false;
            this.updateForPage(page);
        };
        /**
         * 更新页面
         */
        p.updateForPage = function (page) {
            if (this.wizard != page.wizard)
                this.setWizard(page.wizard);
            var oldPage = this.getCurrentPage();
            this.setCurrentPage(page);
            this.getCurrentPage().visible = true;
            if (!page.parent) {
                this.pageContainer.addChild(page);
            }
            if (oldPage) {
                oldPage.visible = false;
            }
            this.update();
            this.dispatchEvent(new eui.PageChangeEvent(eui.PageChangeEvent.CHANGED, oldPage, this.getCurrentPage()));
        };
        /**
         * 显示向导开始的页面
         */
        p.showStartingPage = function () {
            this.showPage(this.wizard.getStartingPage());
        };
        p.update = function () {
            this.updateWindowTitle();
            this.updateTitleBar();
            this.updateButtons();
        };
        p.updateButtons = function () {
            var canFilpToNextPage = false;
            var canFinish = this.wizard.canFinish();
            if (this.backButton) {
                this.backButton.enabled = (this.getCurrentPage().previousPage != null);
            }
            if (this.nextButton) {
                canFilpToNextPage = this.getCurrentPage().canFlipToNextPage();
                this.nextButton.enabled = canFilpToNextPage;
            }
            this.finishButton.enabled = canFinish;
            if (canFilpToNextPage && !canFinish) {
                this.setDefaultButton(this.nextButton);
            }
            else {
                this.setDefaultButton(this.finishButton);
            }
        };
        p.updateDescriptionMessage = function () {
            this.pageDescription = this.getCurrentPage().getDescription();
            this.setMessage(this.pageDescription, eui.DialogConstants.NONE);
        };
        p.updateMessages = function () {
            if (!this.getCurrentPage())
                return;
            this.pageMessage = this.getCurrentPage().getMessage();
            if (this.pageMessage)
                this.pageMessageType = this.getCurrentPage().getMessageType();
            else
                this.pageMessageType = eui.DialogConstants.NONE;
            if (!this.pageMessage)
                this.setMessage(this.pageDescription, eui.DialogConstants.NONE);
            else
                this.setMessage(this.pageMessage, this.pageMessageType);
            this.setMessage(this.getCurrentPage().getErrorMessage(), eui.DialogConstants.ERROR);
        };
        p.updateTitleBar = function () {
            var s;
            if (this.getCurrentPage())
                s = this.getCurrentPage().getTitle();
            if (!s)
                s = "";
            this.titleAreaTitle = s;
            if (this.getCurrentPage()) {
                this.updateDescriptionMessage();
            }
            this.updateMessages();
        };
        p.updateWindowTitle = function () {
            this.title = this.wizard.getWindowTitle();
        };
        /**
         * 创建进度条部件
         */
        p.createProgressMonitor = function () {
            return new eui.ProgressMonitorPart();
        };
        p.run = function (operation, cancelable) {
            if (cancelable === void 0) { cancelable = true; }
            if (!this.progressMonitor)
                this.validateNow();
            if (this.activeRunningOperations++ == 0) {
                this.aboutToStart(cancelable);
            }
            this.progressMonitor.addEventListener(egret.Event.COMPLETE, this.progressComplete, this);
            operation(this.progressMonitor);
        };
        p.progressComplete = function (event) {
            this.activeRunningOperations--;
            if (this.activeRunningOperations <= 0) {
                if (this.activeRunningOperations == 0) {
                    this.stopped();
                    if (this.progressMonitor.canceled) {
                        this.close();
                    }
                    if (!event.cancelable) {
                        this.doFinish();
                    }
                }
                else {
                    this.activeRunningOperations = 0;
                }
            }
        };
        /**
         * 开始长时间的运行任务，显示进度条禁用按钮
         * @param enableCancelButton 是否可以取消
         */
        p.aboutToStart = function (enableCancelButton) {
            var needsProgressMonitor = this.wizard.getNeedsProgressMonitor();
            if (needsProgressMonitor) {
                if (enableCancelButton) {
                    this.progressMonitorPart.cancelComponent = this.cancelButton;
                }
                this.progressMonitorPart.visible = this.progressMonitorPart.includeInLayout = true;
            }
            this.saveUIState(enableCancelButton);
        };
        p.saveUIState = function (keepCancelEnabled) {
            this.savedState = {};
            this.saveEnableStateAndSet(this.backButton, "back", false);
            this.saveEnableStateAndSet(this.nextButton, "next", false);
            this.saveEnableStateAndSet(this.finishButton, "finish", false);
            this.saveEnableStateAndSet(this.cancelButton, "cancel", keepCancelEnabled);
            this.saveEnableStateAndSet(this.closeButton, "close", false);
            if (this.getCurrentPage()) {
                this.saveEnableStateAndSet(this.pageContainer, "page", false);
            }
        };
        p.restoreUIState = function () {
            if (!this.savedState)
                return;
            this.restoreEnableState(this.backButton, "back");
            this.restoreEnableState(this.nextButton, "next");
            this.restoreEnableState(this.finishButton, "finish");
            this.restoreEnableState(this.cancelButton, "cancel");
            this.restoreEnableState(this.closeButton, "close");
            this.restoreEnableState(this.pageContainer, "page");
            this.savedState = null;
        };
        p.restoreEnableState = function (display, key) {
            if (!display)
                return;
            if (this.savedState.hasOwnProperty(key)) {
                if (egret.is(display, "eui.Component") == true) {
                    var com = display;
                    com.enabled = this.savedState[key];
                }
                else {
                    display.touchEnabled = this.savedState[key];
                    if (egret.is(display, "egret.DisplayObjectContainer") == true) {
                        display.touchChildren = this.savedState[key];
                    }
                }
            }
        };
        p.saveEnableStateAndSet = function (display, key, value) {
            if (!display)
                return;
            if (egret.is(display, "eui.Component") == true) {
                var com = display;
                com.enabled = value;
            }
            else {
                display.touchEnabled = value;
                if (egret.is(display, "egret.DisplayObjectContainer") == true) {
                    display.touchChildren = value;
                }
            }
            this.savedState[key] = value;
        };
        /**
         * 停止任务
         */
        p.stopped = function () {
            if (this.wizard.getNeedsProgressMonitor()) {
                this.progressMonitorPart.visible = this.progressMonitorPart.includeInLayout = false;
                this.progressMonitorPart.cancelComponent = null;
            }
            this.restoreUIState();
        };
        return WizardDialog;
    })(eui.TitleAreaDialog);
    eui.WizardDialog = WizardDialog;
    egret.registerClass(WizardDialog,'eui.WizardDialog',["eui.IWizardContainer","eui.IRunnableContext","egret.IEventDispatcher"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 向导页
     * @author ys
     *
     */
    var WizardPage = (function (_super) {
        __extends(WizardPage, _super);
        function WizardPage() {
            _super.call(this);
            this._isPageComplete = true;
            this.percentWidth = 100;
            this.percentHeight = 100;
        }
        var c=WizardPage,p=c.prototype;
        p.canFlipToNextPage = function () {
            return this.getIsPageComplete() && this.getNextPage() != null;
        };
        p.getPageName = function () {
            return this._pageName;
        };
        p.setPageName = function (value) {
            this._pageName = value;
        };
        p.getNextPage = function () {
            if (!this.wizard)
                return null;
            return this.wizard.getNextPage(this);
        };
        d(p, "previousPage"
            ,function () {
                if (this._previousPage)
                    return this._previousPage;
                if (!this.wizard)
                    return null;
                return this.wizard.getPreviousPage(this);
            }
            ,function (page) {
                this._previousPage = page;
            }
        );
        /**
         * 返回是否是当前页
         */
        p.getIsCurrentPage = function () {
            return this.container && this == this.container.getCurrentPage();
        };
        p.getIsPageComplete = function () {
            return this._isPageComplete;
        };
        p.setIsPageComplete = function (value) {
            this._isPageComplete = value;
            if (this.getIsCurrentPage()) {
                this.container.updateButtons();
            }
        };
        p.setDescription = function (value) {
            _super.prototype.setDescription.call(this, value);
            if (this.getIsCurrentPage()) {
                this.container.updateTitleBar();
            }
        };
        p.setErrorMessage = function (value) {
            _super.prototype.setErrorMessage.call(this, value);
            if (this.getIsCurrentPage()) {
                this.container.updateMessages();
            }
        };
        p.setMessage = function (value, type) {
            if (type === void 0) { type = 0; }
            _super.prototype.setMessage.call(this, value, type);
            if (this.getIsCurrentPage()) {
                this.container.updateMessages();
            }
        };
        p.setTitle = function (value) {
            _super.prototype.setTitle.call(this, value);
            if (this.getIsCurrentPage()) {
                this.container.updateTitleBar();
            }
        };
        d(p, "wizard"
            ,function () {
                return this._wizard;
            }
            ,function (value) {
                this._wizard = value;
            }
        );
        d(p, "container"
            /**
             * 返回向导页对应的容器
             */
            ,function () {
                if (!this.wizard)
                    return null;
                return this.wizard.container;
            }
        );
        return WizardPage;
    })(eui.DialogPage);
    eui.WizardPage = WizardPage;
    egret.registerClass(WizardPage,'eui.WizardPage',["eui.IWizardPage","eui.IDialogPage","eui.UIComponent"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 复合向导页的抽象基类
     * @author ys
     *
     */
    var WizardSelectionPage = (function (_super) {
        __extends(WizardSelectionPage, _super);
        function WizardSelectionPage() {
            _super.call(this);
            /**可选的向导节点*/
            this.selectedWizardNodes = [];
        }
        var c=WizardSelectionPage,p=c.prototype;
        d(p, "selectedNode"
            /**
             * 选中的向导节点
             */
            ,function () {
                return this._selectedNode;
            }
            ,function (value) {
                this.addSelectedNode(value);
                this._selectedNode = value;
                if (this.getIsCurrentPage()) {
                    this.container.updateButtons();
                }
            }
        );
        /**
         * 添加可选节点到列表
         */
        p.addSelectedNode = function (node) {
            if (!node)
                return;
            if (this.selectedWizardNodes.indexOf(node) >= 0)
                return;
            this.selectedWizardNodes.push(node);
        };
        p.canFlipToNextPage = function () {
            return this._selectedNode != null;
        };
        p.getNextPage = function () {
            if (!this._selectedNode)
                return null;
            var isCreated = this._selectedNode.getIsContentCreated();
            var wizard = this._selectedNode.getWizard();
            if (wizard == null) {
                this.selectedNode = null;
                return null;
            }
            if (!isCreated) {
                wizard.addPages();
            }
            return wizard.getStartingPage();
        };
        return WizardSelectionPage;
    })(eui.WizardPage);
    eui.WizardSelectionPage = WizardSelectionPage;
    egret.registerClass(WizardSelectionPage,'eui.WizardSelectionPage');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var ProgressIndicator = (function (_super) {
        __extends(ProgressIndicator, _super);
        function ProgressIndicator() {
            _super.call(this);
            this._direction = eui.ProgressBarDirection.LEFT_TO_RIGHT;
            this.animated = true;
        }
        var c=ProgressIndicator,p=c.prototype;
        d(p, "direction"
            /**
             * 进度条增长方向。请使用ProgressBarDirection定义的常量。默认值：ProgressBarDirection.LEFT_TO_RIGHT。
             */
            ,function () {
                return this._direction;
            }
            ,function (value) {
                this._direction = value;
                if (this.progressLoopBar)
                    this.progressLoopBar.direction = value;
                if (this.progressBar)
                    this.progressBar.direction = value;
            }
        );
        /**
         * 开始播放动画
         */
        p.beginAnimatedTask = function () {
            this.done();
            this.setProgressBar(this.progressLoopBar, true);
            this.animated = true;
        };
        /**
         * 开始 max表示最大数
         */
        p.beginTask = function (max) {
            this.done();
            this.totalWork = max;
            this.sumWorked = 0;
            if (this.progressBar)
                this.progressBar.value = 0;
            this.setProgressBar(this.progressBar, true);
            this.animated = false;
        };
        /**
         * 完成
         */
        p.done = function () {
            this.setProgressBar(this.progressBar, false);
            this.setProgressBar(this.progressLoopBar, false);
        };
        /**
         * 移动进度指示器到末尾
         */
        p.sendRemainingWork = function () {
            this.worked(this.totalWork - this.sumWorked);
        };
        /**
         * 增加指定的进度
         */
        p.worked = function (work) {
            this.sumWorked += work;
            if (this.sumWorked > this.totalWork) {
                this.sumWorked = this.totalWork;
            }
            if (this.sumWorked < 0) {
                this.sumWorked = 0;
            }
            if (!this.progressBar || this.animated)
                return;
            var value = this.sumWorked / this.totalWork * this.progressBar.maximum;
            if (this.progressBar.value < value) {
                this.progressBar.value = value;
            }
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.progressLoopBar) {
                this.progressLoopBar.direction = this.direction;
                this.setProgressBar(this.progressLoopBar, false);
            }
            else if (instance == this.progressBar) {
                this.progressBar.direction = this.direction;
                this.setProgressBar(this.progressBar, false);
                this.worked(0);
            }
        };
        p.setProgressBar = function (bar, visible) {
            if (!bar)
                return;
            bar.visible = visible;
            bar.includeInLayout = visible;
        };
        return ProgressIndicator;
    })(eui.Component);
    eui.ProgressIndicator = ProgressIndicator;
    egret.registerClass(ProgressIndicator,'eui.ProgressIndicator');
    /**
     * 定义进度条控件增长方向的常量
     * @author dom
     */
    var ProgressBarDirection = (function () {
        function ProgressBarDirection() {
        }
        var c=ProgressBarDirection,p=c.prototype;
        /**
         * 水平从左到右增长
         */
        ProgressBarDirection.LEFT_TO_RIGHT = "leftToRight";
        /**
         * 水平从右到左增长
         */
        ProgressBarDirection.RIGHT_TO_LEFT = "rightToLeft";
        /**
         * 竖直从上到下增长
         */
        ProgressBarDirection.TOP_TO_BOTTOM = "topToBottom";
        /**
         * 竖直从下到上增长
         */
        ProgressBarDirection.BOTTOM_TO_TOP = "bottomToTop";
        return ProgressBarDirection;
    })();
    eui.ProgressBarDirection = ProgressBarDirection;
    egret.registerClass(ProgressBarDirection,'eui.ProgressBarDirection');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var ProgressLoopBar = (function (_super) {
        __extends(ProgressLoopBar, _super);
        function ProgressLoopBar() {
            _super.call(this);
            this._direction = eui.ProgressBarDirection.LEFT_TO_RIGHT;
            this._cycleTime = 2000;
            this.state = "";
            this.thumbPercent = 30;
            this.startTime = 0;
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.startAnimate, this);
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.stopAnimate, this);
        }
        var c=ProgressLoopBar,p=c.prototype;
        d(p, "visible",undefined
            ,function (value) {
                if (this.visible == value)
                    return;
                this.$setVisible(value);
                if (this.visible)
                    this.startAnimate();
                else
                    this.stopAnimate();
            }
        );
        d(p, "direction"
            ,function () {
                return this._direction;
            }
            ,function (value) {
                if (this._direction == value)
                    return;
                this._direction = value;
                this.invalidateDisplayList();
            }
        );
        d(p, "cycleTime"
            ,function () {
                return this._cycleTime;
            }
            ,function (value) {
                this._cycleTime = value;
            }
        );
        p.complete = function () {
            this.state = "complete";
            this.invalidateDisplayList();
        };
        p.wait = function () {
            this.state = "wait";
            this.invalidateDisplayList();
        };
        p.restart = function () {
            this.state = "";
            this.startTime = egret.getTimer();
            this.invalidateDisplayList();
        };
        p.startAnimate = function (event) {
            if (event === void 0) { event = null; }
            if (!this.visible)
                return;
            this.startTime = egret.getTimer();
            this.addEventListener(egret.Event.ENTER_FRAME, this.doAnimate, this);
        };
        p.stopAnimate = function (event) {
            if (event === void 0) { event = null; }
            this.startTime = 0;
            this.removeEventListener(egret.Event.ENTER_FRAME, this.doAnimate, this);
        };
        p.doAnimate = function (event) {
            if (!this.visible || this.alpha == 0)
                return;
            this.invalidateDisplayList();
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            this.updateSkinDisplayList();
        };
        p.updateSkinDisplayList = function () {
            var currentValue = this.startTime > 0 ? ((egret.getTimer() - this.startTime) % this.cycleTime / this.cycleTime) : 0;
            if (this.state == "wait")
                currentValue = 0;
            if (this.thumb && this.track) {
                var trackWidth = isNaN(this.track.width) ? 0 : this.track.width;
                trackWidth *= this.track.scaleX;
                var trackHeight = isNaN(this.track.height) ? 0 : this.track.height;
                trackHeight *= this.track.scaleY;
                var thumbX = Math.round(currentValue * trackWidth + (currentValue - 1) * trackWidth * this.thumbPercent / 100);
                var thumbY = Math.round(currentValue * trackHeight + (currentValue - 1) * trackHeight * this.thumbPercent / 100);
                this.track.localToGlobal(ProgressLoopBar.point.x, ProgressLoopBar.point.y, ProgressLoopBar.point);
                var thumbPos = this.globalToLocal(ProgressLoopBar.point.x, ProgressLoopBar.point.y);
                if (this.state == "complete") {
                    this.thumb.width = trackWidth;
                    this.thumb.height = trackHeight;
                    this.thumb.x = thumbPos.x;
                    this.thumb.y = thumbPos.y;
                    return;
                }
                switch (this._direction) {
                    case eui.ProgressBarDirection.LEFT_TO_RIGHT:
                        this.thumb.width = trackWidth * this.thumbPercent / 100;
                        this.thumb.height = trackHeight;
                        this.thumb.x = thumbPos.x + thumbX;
                        break;
                    case eui.ProgressBarDirection.RIGHT_TO_LEFT:
                        this.thumb.width = trackWidth * this.thumbPercent / 100;
                        this.thumb.height = trackHeight;
                        this.thumb.x = thumbPos.x + trackWidth - thumbX - this.thumb.width;
                        break;
                    case eui.ProgressBarDirection.TOP_TO_BOTTOM:
                        this.thumb.width = trackWidth;
                        this.thumb.height = thumbY * this.thumbPercent / 100;
                        this.thumb.y = thumbPos.y + thumbY;
                        break;
                    case eui.ProgressBarDirection.BOTTOM_TO_TOP:
                        this.thumb.width = trackWidth;
                        this.thumb.height = thumbY * this.thumbPercent / 100;
                        this.thumb.y = thumbPos.y + trackHeight - thumbY - this.thumb.height;
                        break;
                }
            }
        };
        ProgressLoopBar.point = new egret.Point();
        return ProgressLoopBar;
    })(eui.Component);
    eui.ProgressLoopBar = ProgressLoopBar;
    egret.registerClass(ProgressLoopBar,'eui.ProgressLoopBar');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var ProgressMonitorPart = (function (_super) {
        __extends(ProgressMonitorPart, _super);
        function ProgressMonitorPart() {
            _super.call(this);
            this.blockedReason = null;
            this._totalWork = 0;
        }
        var c=ProgressMonitorPart,p=c.prototype;
        d(p, "createStopButton"
            /**
             * 是否创建停止按钮
             */
            ,function () {
                return this._createStopButton;
            }
            ,function (value) {
                this._createStopButton = value;
                this.setCancelEnabled(value);
            }
        );
        d(p, "cancelComponent"
            /**
             * 执行取消的组件，如果不设置并且createStopButton为true则使用stopButton取消
             */
            ,function () {
                return this._cancelComponent;
            }
            ,function (value) {
                if (value == this._cancelComponent)
                    return;
                if (this._cancelComponent)
                    this._cancelComponent.removeEventListener(egret.MouseEvent.CLICK, this.cancelClick, this);
                if (!this.createStopButton) {
                    this._cancelComponent = value;
                    if (this._cancelComponent)
                        this._cancelComponent.addEventListener(egret.MouseEvent.CLICK, this.cancelClick, this);
                }
                else {
                    this.setCancelEnabled(true);
                }
            }
        );
        p.cancelClick = function (event) {
            this.canceled = true;
            if (this.cancelComponent)
                this.cancelComponent.enabled = false;
        };
        p.partAdded = function (partName, instance) {
            _super.prototype.partAdded.call(this, partName, instance);
            if (instance == this.stopButton) {
                this.stopButton.addEventListener(egret.MouseEvent.CLICK, this.cancelClick, this);
            }
        };
        p.setBlocked = function (reason) {
            this.blockedReason = reason;
            this.labelChanged = true;
            this.invalidateProperties();
        };
        p.clearBlocked = function () {
            this.blockedReason = null;
            this.labelChanged = true;
            this.invalidateProperties();
        };
        p.beginTask = function (name, totalWork) {
            if (totalWork === void 0) { totalWork = 0; }
            this.subTaskName = "";
            this.setTaskName(name);
            this._totalWork = totalWork;
            this.totalChanged = true;
            this.invalidateProperties();
        };
        p.done = function (preventDefault) {
            if (preventDefault === void 0) { preventDefault = false; }
            this.subTaskName = "";
            this.setTaskName("");
            if (this.progressIndicator) {
                this.totalChanged = false;
                this.progressIndicator.sendRemainingWork();
                this.progressIndicator.done();
            }
            this.dispatchEvent(new egret.Event(egret.Event.COMPLETE, false, preventDefault));
        };
        p.internalWorked = function (work) {
            this.progressIndicator.worked(work);
        };
        d(p, "canceled"
            ,function () {
                return this._canceled;
            }
            ,function (value) {
                this._canceled = value;
            }
        );
        p.setTaskName = function (name) {
            this.taskName = name;
            this.labelChanged = true;
            this.invalidateProperties();
        };
        p.subTask = function (name) {
            this.subTaskName = name;
            this.labelChanged = true;
            this.invalidateProperties();
        };
        p.commitProperties = function () {
            _super.prototype.commitProperties.call(this);
            if (this.labelChanged) {
                this.labelChanged = false;
                if (this.blockedReason === null)
                    this.labelDisplay.text = this.taskLabel();
                else
                    this.labelDisplay.text = this.blockedReason;
            }
            if (this.totalChanged) {
                this.totalChanged = false;
                if (this._totalWork <= 0)
                    this.progressIndicator.beginAnimatedTask();
                else
                    this.progressIndicator.beginTask(this._totalWork);
            }
        };
        p.taskLabel = function () {
            var hasTask = Boolean(this.taskName);
            var hasSubtask = Boolean(this.subTaskName);
            if (hasTask) {
                if (hasSubtask)
                    return this.taskName + "(" + this.subTaskName + ")";
                return this.taskName;
            }
            else if (hasSubtask) {
                return this.subTaskName;
            }
            else {
                return "";
            }
        };
        p.worked = function (work) {
            this.internalWorked(work);
        };
        p.setCancelEnabled = function (enabled) {
            if (this.stopButton) {
                this.stopButton.visible = true;
                this.stopButton.enabled = enabled;
            }
        };
        return ProgressMonitorPart;
    })(eui.Component);
    eui.ProgressMonitorPart = ProgressMonitorPart;
    egret.registerClass(ProgressMonitorPart,'eui.ProgressMonitorPart',["eui.IProgressMonitorWithBlocking","eui.IProgressMonitor","egret.IEventDispatcher"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var AddPosition = (function (_super) {
        __extends(AddPosition, _super);
        function AddPosition() {
            _super.apply(this, arguments);
        }
        var c=AddPosition,p=c.prototype;
        return AddPosition;
    })(egret.HashObject);
    eui.AddPosition = AddPosition;
    egret.registerClass(AddPosition,'eui.AddPosition');
})(eui || (eui = {}));
eui.AddPosition.TOP = "top";
eui.AddPosition.LEFT = "left";
eui.AddPosition.RIGHT = "right";
eui.AddPosition.BOTTOM = "bottom";
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Defines values for setting the <code>direction</code> property
     * of the <code>ProgressBar</code> class.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/core/DirectionExample.ts
     */
    /**
     * @language zh_CN
     * 定义进度条等控件增长方向的常量
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/core/DirectionExample.ts
     */
    var Direction = (function () {
        function Direction() {
        }
        var c=Direction,p=c.prototype;
        /**
         * @language en_US
         * Specifies left-to-right direction.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 水平从左到右增长
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Direction.LTR = "ltr";
        /**
         * @language en_US
         * Specifies right-to-left direction.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 水平从右到左增长
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Direction.RTL = "rtl";
        /**
         * @language en_US
         * Specifies top-to-bottom direction.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 竖直从上到下增长
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Direction.TTB = "ttb";
        /**
         * @language en_US
         * Specifies bottom-to-top direction.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 竖直从下到上增长
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        Direction.BTT = "btt";
        return Direction;
    })();
    eui.Direction = Direction;
    egret.registerClass(Direction,'eui.Direction');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Values for the <code>horizontalCanScroll</code> and
     * <code>verticalCanScroll</code> properties of the Scroller classes.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/core/ScrollPolicyExample.ts
     */
    /**
     * @language zh_CN
     * 滚动条显示策略常量。
     * Scroller 类的 <code>horizontalCanScroll</code> 和 <code>verticalCanScroll</code> 属性的值。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/core/ScrollPolicyExample.ts
     */
    var ScrollPolicy = (function () {
        function ScrollPolicy() {
        }
        var c=ScrollPolicy,p=c.prototype;
        /**
         * @language en_US
         * Show the scrollbar if the children exceed the owner's dimension.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 如果子项超出父级的尺寸，则允许滚动，反之不允许滚动。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ScrollPolicy.AUTO = "auto";
        /**
         * @language en_US
         * Never show the scrollbar.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 从不允许滚动。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ScrollPolicy.OFF = "off";
        /**
         * @language en_US
         * Always show the scrollbar.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 总是允许滚动。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ScrollPolicy.ON = "on";
        return ScrollPolicy;
    })();
    eui.ScrollPolicy = ScrollPolicy;
    egret.registerClass(ScrollPolicy,'eui.ScrollPolicy');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Note: The skin name values in the skin theme are used as default values,which can not be changed while running.
     * You can change the skin of a component with the skinName property.
     * @event egret.Event.COMPLETE Dispatch when EXML used in this theme is loaded and parsed.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/core/ThemeExample.ts
     */
    /**
     * @language zh_CN
     * 皮肤主题。注意：皮肤主题是一次性设置的默认值,并不能运行时切换所有组件默认皮肤。切换单个皮肤您可以自行对Component.skinName赋值来修改。
     * @event egret.Event.COMPLETE 当主题关联的EXML加载解析完成时派发
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/core/ThemeExample.ts
     */
    var Theme = (function (_super) {
        __extends(Theme, _super);
        /**
         * @language en_US
         * Create an instance of Theme
         * @param configURL the external theme path. if null, you need to register the default skin name with
         * mapSkin() manually.
         * @param stage current stage. The theme will register to the stage with this parameter.
         * If null, you need to register with stage.registerImplementation("eui.Theme",theme)
         * manually.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个主题实例
         * @param configURL 要加载并解析的外部主题配置文件路径。若传入 null，将不进行配置文件加载，
         * 之后需要在外部以代码方式手动调用 mapSkin() 方法完成每条默认皮肤名的注册。
         * @param stage 当前舞台引用。传入此参数，主题会自动注册自身到舞台上。
         * 若传入null，需要在外部手动调用 stage.registerImplementation("eui.Theme",theme) 来完成主题的注册。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function Theme(configURL, stage) {
            _super.call(this);
            /**
             * @private
             */
            this.delayList = [];
            /**
             * @private
             */
            this.skinMap = {};
            this.initialized = !configURL;
            if (stage) {
                this.$stage = stage;
                stage.registerImplementation("eui.Theme", this);
            }
            this.$configURL = configURL;
            this.load(configURL);
        }
        var c=Theme,p=c.prototype;
        /**
         * @private
         *
         * @param url
         */
        p.load = function (url) {
            var adapter = this.$stage ? this.$stage.getImplementation("eui.IThemeAdapter") : null;
            if (!adapter) {
                adapter = new eui.DefaultThemeAdapter();
            }
            adapter.getTheme(url, this.onConfigLoaded, this.onConfigLoaded, this);
        };
        /**
         * @private
         *
         * @param str
         */
        p.onConfigLoaded = function (str) {
            if (str) {
                try {
                    var data = JSON.parse(str);
                }
                catch (e) {
                    if (DEBUG) {
                        egret.$error(3000);
                    }
                }
            }
            else if (DEBUG) {
                egret.$error(3000, this.$configURL);
            }
            if (data && data.skins) {
                var skinMap = this.skinMap;
                var skins = data.skins;
                var keys = Object.keys(skins);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var key = keys[i];
                    if (!skinMap[key]) {
                        this.mapSkin(key, skins[key]);
                    }
                }
            }
            if (!data.exmls || data.exmls.length == 0) {
                this.onLoaded();
            }
            else if (data.exmls[0]['content']) {
                data.exmls.forEach(function (exml) { return EXML.$parseURLContent(exml.path, exml.content); });
                this.onLoaded();
            }
            else {
                EXML.$loadAll(data.exmls, this.onLoaded, this, true);
            }
        };
        p.onLoaded = function (classes, urls) {
            this.initialized = true;
            this.handleDelayList();
            this.dispatchEventWith(egret.Event.COMPLETE);
        };
        /**
         * @private
         *
         */
        p.handleDelayList = function () {
            var list = this.delayList;
            var length = list.length;
            for (var i = 0; i < length; i++) {
                var client = list[i];
                if (!client.$Component[5 /* skinNameExplicitlySet */]) {
                    var skinName = this.getSkinName(client);
                    if (skinName) {
                        client.$Component[1 /* skinName */] = skinName;
                        client.$parseSkinName();
                    }
                }
            }
            list.length = 0;
        };
        /**
         * @language en_US
         * According to the host component to get the default skin name.
         * Search rules are as follows:
         * <li>1. Use the <code>hostComponentKey</code> of client to search.</li>
         * <li>2. Use the class name of client to search.</li>
         * <li>3. Use the parent class name of client to search.</li>
         * <li>4. Repeat step 3 until find the skin name or the parent is <code>eui.Component</code>.</li>
         * @param client the component need to get the default skin.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 根据主机组件，获取对应的默认皮肤名。查询规则如下：
         * <li>1.使用client的hostComponentKey作为键查询默认皮肤名。</li>
         * <li>2.使用client的类名作为键查询默认皮肤名。</li>
         * <li>3.使用client的父类名作为键查询默认皮肤名。</li>
         * <li>4.不断重复3直到查询到皮肤名或父类为eui.Component时停止。</li>
         * @param client 要获取默认皮肤的组件。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getSkinName = function (client) {
            if (!this.initialized) {
                if (this.delayList.indexOf(client) == -1) {
                    this.delayList.push(client);
                }
                return "";
            }
            var skinMap = this.skinMap;
            var skinName = skinMap[client.hostComponentKey];
            if (!skinName) {
                skinName = this.findSkinName(client);
            }
            return skinName;
        };
        /**
         * @private
         */
        p.findSkinName = function (prototype) {
            if (!prototype) {
                return "";
            }
            var key = prototype["__class__"];
            if (key === void 0) {
                return "";
            }
            var skinName = this.skinMap[key];
            if (skinName || key == "eui.Component") {
                return skinName;
            }
            return this.findSkinName(Object.getPrototypeOf(prototype));
        };
        /**
         * @language en_US
         * Map a default skin for the specified host component.
         * @param hostComponentKey the name of host component, such as "eui.Button".
         * @param skinName the name of skin, such as "app.MyButtonSkin".
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 为指定的主机组件映射一个默认皮肤。
         * @param hostComponentKey 主机组件名称，例如：“eui.Button”。
         * @param skinName 皮肤名称 例如："app.MyButtonSkin"。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.mapSkin = function (hostComponentKey, skinName) {
            if (DEBUG) {
                if (!hostComponentKey) {
                    egret.$error(1003, "hostComponentKey");
                }
                if (!skinName) {
                    egret.$error(1003, "skinName");
                }
            }
            this.skinMap[hostComponentKey] = skinName;
        };
        return Theme;
    })(egret.EventDispatcher);
    eui.Theme = Theme;
    egret.registerClass(Theme,'eui.Theme');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var BoxContainerEvent = (function (_super) {
        __extends(BoxContainerEvent, _super);
        function BoxContainerEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = true; }
            if (cancelable === void 0) { cancelable = false; }
            _super.call(this, type, bubbles, cancelable);
            this.fromPanel = null;
            this.fromPanelIndex = -1;
            this.toPanel = null;
            this.toPanelIndex = -1;
            this.fromGroup = null;
            this.toGroup = null;
            this.toGroupPosititon = "";
        }
        var c=BoxContainerEvent,p=c.prototype;
        return BoxContainerEvent;
    })(egret.Event);
    eui.BoxContainerEvent = BoxContainerEvent;
    egret.registerClass(BoxContainerEvent,'eui.BoxContainerEvent');
})(eui || (eui = {}));
eui.BoxContainerEvent.BOX_DRAG_COMPLETE = "boxDragComplete";
eui.BoxContainerEvent.DRAG_PANEL_OUT = "dragPanelOut";
eui.BoxContainerEvent.DRAG_GROUP_MOVED = "dragGroupMoved";
eui.BoxContainerEvent.DRAG_PANEL_MOVED = "dragPanelMoved";
eui.BoxContainerEvent.DRAG_GROUP_IN = "dragGroupIn";
eui.BoxContainerEvent.BOX_ADDED = "boxAdded";
var eui;
(function (eui) {
    /**
     * 关闭选项卡事件
     * @author featherJ
     */
    var CloseTabEvent = (function (_super) {
        __extends(CloseTabEvent, _super);
        function CloseTabEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            _super.call(this, type, bubbles, cancelable);
        }
        var c=CloseTabEvent,p=c.prototype;
        /**
         * 关闭当前
         */
        CloseTabEvent.CLOSE = "CloseCurrent";
        /**
         * 关闭其他
         */
        CloseTabEvent.CLOSE_OTHER = "CloseOther";
        /**
         * 关闭全部
         */
        CloseTabEvent.CLOSE_ALL = "CloseAll";
        return CloseTabEvent;
    })(egret.Event);
    eui.CloseTabEvent = CloseTabEvent;
    egret.registerClass(CloseTabEvent,'eui.CloseTabEvent');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The eui.CollectionEvent class represents an event that is
     * dispatched when the associated collection changes.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/CollectionEventExample.ts
     */
    /**
     * @language zh_CN
     * 集合类型数据改变事件
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/CollectionEventExample.ts
     */
    var CollectionEvent = (function (_super) {
        __extends(CollectionEvent, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @param type The event type; indicates the action that triggered the event.
         * @param bubbles Specifies whether the event can bubble
         * up the display list hierarchy.
         * @param cancelable Specifies whether the behavior
         * associated with the event can be prevented.
         * @param kind Indicates the kind of event that occured.
         * The parameter value can be one of the values in the CollectionEventKind
         * class, or <code>null</code>, which indicates that the kind is unknown.
         * @param location When the <code>kind</code> is
         * <code>CollectionEventKind.ADD</code>,
         * <code>CollectionEventKind.REMOVE</code>,
         * <code>CollectionEventKind.REPLACE</code>,or
         * <code>CollectionEventKind.UPDATE</code>
         * this value indicates at what location the item(s) specified
         * in the <code>items property</code> can be found
         * within the target collection.
         * @param oldLocation this value indicates
         * the old location within the target collection
         * of the item(s) specified in the <code>items</code> property.
         * @param items Array of objects with information about the items
         * affected by the event.
         * @param oldItems When the <code>kine</code> is <code>CollectionEventKind.REPLACE</code> the value represents
         * a list of items before replaced.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个 CollectionEvent 实例
         *
         * @param type 事件类型；指示触发事件的动作。
         * @param bubbles 指定该事件是否可以在显示列表层次结构得到冒泡处理。
         * @param cancelable 指定是否可以防止与事件相关联的行为。
         * @param kind 指示发生的事件类型。此属性值可以是 CollectionEventKind 类中的一个值，也可以是 null，用于指示类型未知。
         * @param location 如果 kind 值为 <code>CollectionEventKind.ADD</code>,
         * <code>CollectionEventKind.REMOVE</code>,
         * <code>CollectionEventKind.REPLACE</code>,或
         * <code>CollectionEventKind.UPDATE</code>
         * 则此属性为 items 属性中指定的项目集合中零号元素的的索引。
         * @param oldLocation 此值指示 <code>items</code> 属性中指定的项目在目标集合中的原位置。
         * @param items 受事件影响的项目的列表。
         * @param oldItems 仅当kind的值为CollectionEventKind.REPLACE时，表示替换前的项目列表。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function CollectionEvent(type, bubbles, cancelable, kind, location, oldLocation, items, oldItems) {
            _super.call(this, type, bubbles, cancelable);
            this.$initTo(kind, location, oldLocation, items, oldItems);
        }
        var c=CollectionEvent,p=c.prototype;
        /**
         * @private
         *
         * @param kind
         * @param location
         * @param oldLocation
         * @param items
         * @param oldItems
         */
        p.$initTo = function (kind, location, oldLocation, items, oldItems) {
            this.kind = kind;
            this.location = +location | 0;
            this.oldLocation = +oldLocation | 0;
            this.items = items || [];
            this.oldItems = oldItems || [];
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.clean = function () {
            _super.prototype.clean.call(this);
            this.items = this.oldItems = null;
        };
        /**
         * @language en_US
         * Dispatch an event with specified EventDispatcher. The dispatched event will be cached in the object pool,
         * for the next cycle of reuse.
         *
         * @param target the target of event dispatcher.
         * @param eventType The event type; indicates the action that triggered the event.
         * @param kind Indicates the kind of event that occured.
         * The parameter value can be one of the values in the CollectionEventKind
         * class, or <code>null</code>, which indicates that the kind is unknown.
         * @param location When the <code>kind</code> is
         * <code>CollectionEventKind.ADD</code>,
         * <code>CollectionEventKind.REMOVE</code>,
         * <code>CollectionEventKind.REPLACE</code>,or
         * <code>CollectionEventKind.UPDATE</code>
         * this value indicates at what location the item(s) specified
         * in the <code>items property</code> can be found
         * within the target collection.
         * @param oldLocation this value indicates
         * the old location within the target collection
         * of the item(s) specified in the <code>items</code> property.
         * @param items Array of objects with information about the items
         * affected by the event.
         * @param oldItems When the <code>kine</code> is <code>CollectionEventKind.REPLACE</code> the value represents
         * a list of items before replaced.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         *
         * @param target 事件派发目标。
         * @param eventType 事件类型；指示触发事件的动作。
         * @param kind 指示发生的事件类型。此属性值可以是 CollectionEventKind 类中的一个值，也可以是 null，用于指示类型未知。
         * @param location 如果 kind 值为 <code>CollectionEventKind.ADD</code>,
         * <code>CollectionEventKind.REMOVE</code>,
         * <code>CollectionEventKind.REPLACE</code>,或
         * <code>CollectionEventKind.UPDATE</code>
         * 则此属性为 items 属性中指定的项目集合中零号元素的的索引。
         * @param oldLocation 此值指示 <code>items</code> 属性中指定的项目在目标集合中的原位置。
         * @param items 受事件影响的项目的列表。
         * @param oldItems 仅当kind的值为CollectionEventKind.REPLACE时，表示替换前的项目列表。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEvent.dispatchCollectionEvent = function (target, eventType, kind, location, oldLocation, items, oldItems) {
            if (!target.hasEventListener(eventType)) {
                return true;
            }
            var event = egret.Event.create(CollectionEvent, eventType);
            event.$initTo(kind, location, oldLocation, items, oldItems);
            var result = target.dispatchEvent(event);
            egret.Event.release(event);
            return result;
        };
        /**
         * @language en_US
         * Dispatched when a collection has changed.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 集合类数据发生改变
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEvent.COLLECTION_CHANGE = "collectionChange";
        return CollectionEvent;
    })(egret.Event);
    eui.CollectionEvent = CollectionEvent;
    egret.registerClass(CollectionEvent,'eui.CollectionEvent');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The CollectionEventKind class contains constants for the valid values
     * of the <code>CollectionEvent</code> class <code>kind</code> property.
     * These constants indicate the kind of change that was made to the collection.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 定义 <code>CollectionEvent</code> 类 <code>kind</code> 属性的有效值的常量。
     * 这些常量指示对集合进行的更改类型。

     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var CollectionEventKind = (function () {
        function CollectionEventKind() {
        }
        var c=CollectionEventKind,p=c.prototype;
        /**
         * @language en_US
         * Indicates that the collection added an item or items.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 指示集合添加了一个或多个项目。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEventKind.ADD = "add";
        /**
         * @language en_US
         * Indicates that the collection applied a sort, a filter, or both.
         * This change can potentially be easier to handle than a RESET.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 指示集合应用了排序或/和筛选。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEventKind.REFRESH = "refresh";
        /**
         * @language en_US
         * Indicates that the collection removed an item or items.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 指示集合删除了一个或多个项目。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEventKind.REMOVE = "remove";
        /**
         * @language en_US
         * Indicates that the item at the position identified by the
         * CollectionEvent <code>location</code> property has been replaced.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 指示已替换由 CollectionEvent.location 属性确定的位置处的项目。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEventKind.REPLACE = "replace";
        /**
         * @language en_US
         * Indicates that the collection has changed so drastically that
         * a reset is required.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 指示集合已彻底更改，需要进行重置。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEventKind.RESET = "reset";
        /**
         * @language en_US
         * Indicates that one or more items were updated within the collection.
         * The affected item(s)
         * are stored in the <code>CollectionEvent.items</code> property.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 指示集合中一个或多个项目进行了更新。受影响的项目将存储在  CollectionEvent.items 属性中。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        CollectionEventKind.UPDATE = "update";
        /**
         * 指示项目已从 CollectionEvent.oldLocation确定的位置移动到 location确定的位置。
         * @constant egret.gui.CollectionEventKind.MOVE
         */
        CollectionEventKind.MOVE = "move";
        /**
         * 指示集合中某个节点的子项列表已打开，通常应用于Tree的数据源XMLCollection。
         * @constant egret.gui.CollectionEventKind.OPEN
         */
        CollectionEventKind.OPEN = "open";
        /**
         * 指示集合中某个节点的子项列表已关闭，通常应用于Tree的数据源XMLCollection。
         * @constant egret.gui.CollectionEventKind.CLOSE
         */
        CollectionEventKind.CLOSE = "close";
        return CollectionEventKind;
    })();
    eui.CollectionEventKind = CollectionEventKind;
    egret.registerClass(CollectionEventKind,'eui.CollectionEventKind');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var CollectionEventKindEX = (function (_super) {
        __extends(CollectionEventKindEX, _super);
        function CollectionEventKindEX() {
            _super.apply(this, arguments);
        }
        var c=CollectionEventKindEX,p=c.prototype;
        return CollectionEventKindEX;
    })(egret.HashObject);
    eui.CollectionEventKindEX = CollectionEventKindEX;
    egret.registerClass(CollectionEventKindEX,'eui.CollectionEventKindEX');
})(eui || (eui = {}));
eui.CollectionEventKindEX.ADD = "add";
eui.CollectionEventKindEX.REFRESH = "refresh";
eui.CollectionEventKindEX.REMOVE = "remove";
eui.CollectionEventKindEX.REPLACE = "replace";
eui.CollectionEventKindEX.RESET = "reset";
eui.CollectionEventKindEX.UPDATE = "update";
var eui;
(function (eui) {
    var DocumentEvent = (function (_super) {
        __extends(DocumentEvent, _super);
        function DocumentEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            _super.call(this, type, bubbles, cancelable);
        }
        var c=DocumentEvent,p=c.prototype;
        p.clone = function () {
            var evt = new eui.DocumentEvent(this.type, this.bubbles, this.cancelable);
            evt.newData = this.newData;
            evt.oldData = this.oldData;
            return evt;
        };
        return DocumentEvent;
    })(egret.Event);
    eui.DocumentEvent = DocumentEvent;
    egret.registerClass(DocumentEvent,'eui.DocumentEvent');
})(eui || (eui = {}));
eui.DocumentEvent.SELECTED_DOC_CHANGE = "selectedDocChange";
eui.DocumentEvent.DOC_FOCUS_IN = "docFocusIn";
var eui;
(function (eui) {
    var DragEvent = (function (_super) {
        __extends(DragEvent, _super);
        function DragEvent(type, bubbles, cancelable, dragInitiator, dragSource, ctrlKey, altKey, shiftKey) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = true; }
            if (dragInitiator === void 0) { dragInitiator = null; }
            if (dragSource === void 0) { dragSource = null; }
            if (ctrlKey === void 0) { ctrlKey = false; }
            if (altKey === void 0) { altKey = false; }
            if (shiftKey === void 0) { shiftKey = false; }
            _super.call(this, type, bubbles, cancelable);
            this.dragInitiator = dragInitiator;
            this.dragSource = dragSource;
            this.ctrlKey = ctrlKey;
            this.altKey = altKey;
            this.shiftKey = shiftKey;
        }
        var c=DragEvent,p=c.prototype;
        p.clone = function () {
            var cloneEvent = new DragEvent(this.type, this.bubbles, this.cancelable, this.dragInitiator, this.dragSource, this.ctrlKey, this.altKey, this.shiftKey);
            cloneEvent.relatedObject = this.relatedObject;
            cloneEvent.$stageX = this.stageX;
            cloneEvent.$stageY = this.stageY;
            return cloneEvent;
        };
        return DragEvent;
    })(egret.MouseEvent);
    eui.DragEvent = DragEvent;
    egret.registerClass(DragEvent,'eui.DragEvent');
    DragEvent.DRAG_START = "dragStart";
    DragEvent.DRAG_COMPLETE = "dragComplete";
    DragEvent.DRAG_DROP = "dragDrop";
    DragEvent.DRAG_ENTER = "dragEnter";
    DragEvent.DRAG_EXIT = "dragExit";
    DragEvent.DRAG_OVER = "dragOver";
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridCaretEvent = (function (_super) {
        __extends(GridCaretEvent, _super);
        function GridCaretEvent(type, bubbles, cancelable, oldRowIndex, oldColumnIndex, newRowIndex, newColumnIndex) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (oldRowIndex === void 0) { oldRowIndex = -1; }
            if (oldColumnIndex === void 0) { oldColumnIndex = -1; }
            if (newRowIndex === void 0) { newRowIndex = -1; }
            if (newColumnIndex === void 0) { newColumnIndex = -1; }
            _super.call(this, type, bubbles, cancelable);
            this.oldRowIndex = 0;
            this.oldColumnIndex = 0;
            this.newRowIndex = 0;
            this.newColumnIndex = 0;
            this.oldRowIndex = oldRowIndex;
            this.oldColumnIndex = oldColumnIndex;
            this.newRowIndex = newRowIndex;
            this.newColumnIndex = newColumnIndex;
        }
        var c=GridCaretEvent,p=c.prototype;
        p.clone = function () {
            return new eui.GridCaretEvent(this.type, this.bubbles, this.cancelable, this.oldRowIndex, this.oldColumnIndex, this.newRowIndex, this.newColumnIndex);
        };
        return GridCaretEvent;
    })(egret.Event);
    eui.GridCaretEvent = GridCaretEvent;
    egret.registerClass(GridCaretEvent,'eui.GridCaretEvent');
})(eui || (eui = {}));
eui.GridCaretEvent.CARET_CHANGE = "caretChange";
var eui;
(function (eui) {
    /**
     * GridEvent 类扩展 MouseEvent 类以包括基于相对于网格单元格的事件位置的其它网格特定信息。该信息包含以下内容：
     * <ul>
     * <li>单元格的行和列索引。</li>
     * <li>单元格的 GridColumn 对象。 </li>
     * <li>对应于单元格行的数据提供程序项。 </li>
     * <li>项呈示器。 </li>
     * </ul>
     * <p>网格事件与鼠标事件一对一对应。分派 GridEvent 是为了响应从某个 Grid 后代到 Grid 本身而“冒泡”的鼠标事件。
     * 一个显著区别是保证网格事件的事件侦听器能识别整个从下向上拖动鼠标动作，即使此动作的向上拖动部分不发生在网格
     * 上。gridMouseDrag 事件对应于按住按钮的鼠标移动事件。</p>
     * @author dom
     *
     */
    var GridEvent = (function (_super) {
        __extends(GridEvent, _super);
        /**
          * 为了响应鼠标事件而由 Grid 类分派的 GridEvent 是使用传入的鼠标事件的属性构造的。
          * 网格事件的 x、y 位置（表示其 localX 和 localY 属性的值）是相对于整个网格定义的，
          * 而不是只相对于已滚动到视图中的部分网格定义的。同样，事件的行和列索引可能对应于
          * 未滚动到视图中的单元格。
          * @param type 区分导致此事件分派的鼠标动作。
          * @param bubbles 指定该事件是否可以在显示列表层次结构得到冒泡处理。
          * @param cancelable 指定是否可以防止与事件相关联的行为。
          * @param localX 事件相对于网格的 x 坐标。
          * @param localY 事件相对于网格的 y 坐标。
          * @param relatedObject 触发此 GridEvent 的 MouseEvent 的 relatedObject 属性。
          * @param ctrlKey 是否按下 Control 键。
          * @param altKey 是否按下 Alt 键。
          * @param shiftKey 是否按下 Shift 键。
          * @param buttonDown 是否按下 Control 键。
          * @param delta 未使用。
          * @param rowIndex 发生事件的行索引，或 -1。
          * @param columnIndex 发生事件的列索引，或 -1。
          * @param column 发生该事件的列或 null。
          * @param item rowIndex 中的数据提供程序项。
          * @param itemRenderer 发生事件的可视项呈示器或 null。
          *
          */
        //        constructor(type: string,bubbles: boolean = true,cancelable: boolean = false,
        //            stageX: number = NaN,stageY: number = NaN,
        //            relatedObject: DisplayObject = null,
        //            ctrlKey: boolean = false,altKey: boolean = false,shiftKey: boolean = false,
        //            buttonDown: boolean = false,delta: number = 0,commandKey: boolean = false,
        //            controlKey: boolean = false,clickCount: number = 0)
        function GridEvent(type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, rowIndex, columnIndex, column, item, itemRenderer, commandKey, controlKey) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (localX === void 0) { localX = NaN; }
            if (localY === void 0) { localY = NaN; }
            if (relatedObject === void 0) { relatedObject = null; }
            if (ctrlKey === void 0) { ctrlKey = false; }
            if (altKey === void 0) { altKey = false; }
            if (shiftKey === void 0) { shiftKey = false; }
            if (buttonDown === void 0) { buttonDown = false; }
            if (delta === void 0) { delta = 0; }
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            if (column === void 0) { column = null; }
            if (item === void 0) { item = null; }
            if (itemRenderer === void 0) { itemRenderer = null; }
            if (commandKey === void 0) { commandKey = false; }
            if (controlKey === void 0) { controlKey = false; }
            _super.call(this, type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, commandKey, controlKey);
            /**
             * 发生事件的行索引；如果在网格行中没有发生事件，则为 -1。
             */
            this.rowIndex = 0;
            /**
             * 发生事件的列索引；如果在网格列中没有发生事件，则为 -1。
             */
            this.columnIndex = 0;
            this.rowIndex = rowIndex;
            this.columnIndex = columnIndex;
            this.column = column;
            this.item = item;
            this.itemRenderer = itemRenderer;
        }
        var c=GridEvent,p=c.prototype;
        d(p, "grid"
            /**
             * 与此事件关联的网格。
             * @return
             *
             */
            ,function () {
                if (this.column)
                    return this.column.grid;
                if (egret.is(this.target, "eui.Grid"))
                    return (this.target);
                var elt = this.target;
                if (elt && elt.dataGrid)
                    return elt.dataGrid.grid;
                return null;
            }
            ,function (value) {
                egret.superSetter(eui.GridEvent, this, "grid", value);
            }
        );
        p.clone = function () {
            var cloneEvent = new GridEvent(this.type, this.bubbles, this.cancelable, this.localX, this.localY, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey, this.buttonDown, this.delta, this.rowIndex, this.columnIndex, this.column, this.item, this.itemRenderer);
            cloneEvent.relatedObject = this.relatedObject;
            return cloneEvent;
        };
        return GridEvent;
    })(egret.MouseEvent);
    eui.GridEvent = GridEvent;
    egret.registerClass(GridEvent,'eui.GridEvent');
})(eui || (eui = {}));
eui.GridEvent.GRID_MOUSE_DOWN = "gridMouseDown";
eui.GridEvent.GRID_MOUSE_DRAG = "gridMouseDrag";
eui.GridEvent.GRID_MOUSE_UP = "gridMouseUp";
eui.GridEvent.GRID_CLICK = "gridClick";
eui.GridEvent.GRID_DOUBLE_CLICK = "gridDoubleClick";
eui.GridEvent.GRID_ROLL_OVER = "gridRollOver";
eui.GridEvent.GRID_ROLL_OUT = "gridRollOut";
eui.GridEvent.SEPARATOR_MOUSE_DRAG = "separatorMouseDrag";
eui.GridEvent.SEPARATOR_CLICK = "separatorClick";
eui.GridEvent.SEPARATOR_DOUBLE_CLICK = "separatorDoubleClick";
eui.GridEvent.SEPARATOR_MOUSE_DOWN = "separatorMouseDown";
eui.GridEvent.SEPARATOR_MOUSE_UP = "separatorMouseUp";
eui.GridEvent.SEPARATOR_ROLL_OUT = "separatorRollOut";
eui.GridEvent.SEPARATOR_ROLL_OVER = "separatorRollOver";
var eui;
(function (eui) {
    var GridItemEditorEvent = (function (_super) {
        __extends(GridItemEditorEvent, _super);
        function GridItemEditorEvent(type, bubbles, cancelable, rowIndex, columnIndex, column) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            if (column === void 0) { column = null; }
            _super.call(this, type, bubbles, cancelable);
            this.columnIndex = 0;
            this.rowIndex = 0;
            this.rowIndex = rowIndex;
            this.columnIndex = columnIndex;
            this.column = column;
        }
        var c=GridItemEditorEvent,p=c.prototype;
        p.clone = function () {
            var cloneEvent = new eui.GridItemEditorEvent(this.type, this.bubbles, this.cancelable, this.rowIndex, this.columnIndex, this.column);
            return cloneEvent;
        };
        return GridItemEditorEvent;
    })(egret.Event);
    eui.GridItemEditorEvent = GridItemEditorEvent;
    egret.registerClass(GridItemEditorEvent,'eui.GridItemEditorEvent');
})(eui || (eui = {}));
eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING = "gridItemEditorSessionStarting";
eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START = "gridItemEditorSessionStart";
eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE = "gridItemEditorSessionSave";
eui.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL = "gridItemEditorSessionCancel";
var eui;
(function (eui) {
    var GridSelectionEvent = (function (_super) {
        __extends(GridSelectionEvent, _super);
        function GridSelectionEvent(type, bubbles, cancelable, kind, selectionChange) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (kind === void 0) { kind = null; }
            if (selectionChange === void 0) { selectionChange = null; }
            _super.call(this, type, bubbles, cancelable);
            this.kind = kind;
            this.selectionChange = selectionChange;
        }
        var c=GridSelectionEvent,p=c.prototype;
        p.toString = function () {
            var _self__ = this;
            return _self__.formatToString("GridSelectionEvent", "type", "bubbles", "cancelable", "eventPhase", "kind", "selectionChange");
        };
        p.clone = function () {
            return new eui.GridSelectionEvent(this.type, this.bubbles, this.cancelable, this.kind, this.selectionChange);
        };
        return GridSelectionEvent;
    })(egret.Event);
    eui.GridSelectionEvent = GridSelectionEvent;
    egret.registerClass(GridSelectionEvent,'eui.GridSelectionEvent');
})(eui || (eui = {}));
eui.GridSelectionEvent.SELECTION_CHANGE = "selectionChange";
eui.GridSelectionEvent.SELECTION_CHANGING = "selectionChanging";
var eui;
(function (eui) {
    var GridSelectionEventKind = (function (_super) {
        __extends(GridSelectionEventKind, _super);
        function GridSelectionEventKind() {
            _super.apply(this, arguments);
        }
        var c=GridSelectionEventKind,p=c.prototype;
        return GridSelectionEventKind;
    })(egret.HashObject);
    eui.GridSelectionEventKind = GridSelectionEventKind;
    egret.registerClass(GridSelectionEventKind,'eui.GridSelectionEventKind');
})(eui || (eui = {}));
eui.GridSelectionEventKind.SELECT_ALL = "selectAll";
eui.GridSelectionEventKind.CLEAR_SELECTION = "clearSelection";
eui.GridSelectionEventKind.SET_ROW = "setRow";
eui.GridSelectionEventKind.ADD_ROW = "addRow";
eui.GridSelectionEventKind.REMOVE_ROW = "removeRow";
eui.GridSelectionEventKind.SET_ROWS = "setRows";
eui.GridSelectionEventKind.SET_CELL = "setCell";
eui.GridSelectionEventKind.ADD_CELL = "addCell";
eui.GridSelectionEventKind.REMOVE_CELL = "removeCell";
eui.GridSelectionEventKind.SET_CELL_REGION = "setCellRegion";
var eui;
(function (eui) {
    var GridSortEvent = (function (_super) {
        __extends(GridSortEvent, _super);
        function GridSortEvent(type, bubbles, cancelable, column) {
            _super.call(this, type, bubbles, cancelable);
            this.column = column;
        }
        var c=GridSortEvent,p=c.prototype;
        p.clone = function () {
            return new eui.GridSortEvent(this.type, this.bubbles, this.cancelable, this.column);
        };
        return GridSortEvent;
    })(egret.Event);
    eui.GridSortEvent = GridSortEvent;
    egret.registerClass(GridSortEvent,'eui.GridSortEvent');
})(eui || (eui = {}));
eui.GridSortEvent.SORT_CHANGE = "sortChange";
eui.GridSortEvent.SORT_CHANGING = "sortChanging";
var eui;
(function (eui) {
    var IndexChangeEvent = (function (_super) {
        __extends(IndexChangeEvent, _super);
        function IndexChangeEvent(type, bubbles, cancelable, oldIndex, newIndex) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (oldIndex === void 0) { oldIndex = -1; }
            if (newIndex === void 0) { newIndex = -1; }
            _super.call(this, type, bubbles, cancelable);
            this.newIndex = 0;
            this.oldIndex = 0;
            this.oldIndex = oldIndex;
            this.newIndex = newIndex;
        }
        var c=IndexChangeEvent,p=c.prototype;
        p.clone = function () {
            return new eui.IndexChangeEvent(this.type, this.bubbles, this.cancelable, this.oldIndex, this.newIndex);
        };
        return IndexChangeEvent;
    })(egret.Event);
    eui.IndexChangeEvent = IndexChangeEvent;
    egret.registerClass(IndexChangeEvent,'eui.IndexChangeEvent');
})(eui || (eui = {}));
eui.IndexChangeEvent.CHANGE = "change";
eui.IndexChangeEvent.CHANGING = "changing";
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Represents events that are dispatched when a item has been touched.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/ItemTapEventExample.ts
     */
    /**
     * @language zh_CN
     * 列表项触碰事件
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/ItemTapEventExample.ts
     */
    var ItemTapEvent = (function (_super) {
        __extends(ItemTapEvent, _super);
        function ItemTapEvent() {
            _super.apply(this, arguments);
            /**
             * @language en_US
             * The item in the data provider of the associated item.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 触发触摸事件的项呈示器数据源项。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.item = null;
            /**
             * @language en_US
             * The item renderer in the list of the associated item.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 触发触摸事件的项呈示器。
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.itemRenderer = null;
            /**
             * @language en_US
             * The index of the associated navigation item.
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 触发触摸事件的项索引
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.itemIndex = -1;
        }
        var c=ItemTapEvent,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.clean = function () {
            _super.prototype.clean.call(this);
            this.item = this.itemRenderer = null;
        };
        /**
         * @language en_US
         * Dispatch an event with specified EventDispatcher. The dispatched event will be cached in the object pool,
         * for the next cycle of reuse.
         *
         * @param target the target of event dispatcher.
         * @param eventType The event type; indicates the action that triggered the event.
         * @param itemRenderer The item renderer in the list of the associated item.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 使用指定的 EventDispatcher 对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         *
         * @param target 事件派发目标
         * @param eventType 事件类型；指示触发事件的动作。
         * @param itemRenderer 触发触摸事件的项呈示器。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ItemTapEvent.dispatchItemTapEvent = function (target, eventType, itemRenderer) {
            if (!target.hasEventListener(eventType)) {
                return true;
            }
            var event = egret.Event.create(ItemTapEvent, eventType);
            event.item = itemRenderer.data;
            event.itemIndex = itemRenderer.itemIndex;
            event.itemRenderer = itemRenderer;
            var result = target.dispatchEvent(event);
            egret.Event.release(event);
            return result;
        };
        /**
         * @language en_US
         * The type of the event object for an <code>itemTap</code> event.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * <code>itemTap</code> 事件的对象类型。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ItemTapEvent.ITEM_TAP = "itemTap";
        return ItemTapEvent;
    })(egret.Event);
    eui.ItemTapEvent = ItemTapEvent;
    egret.registerClass(ItemTapEvent,'eui.ItemTapEvent');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var PropertyChangeEvent = (function (_super) {
        __extends(PropertyChangeEvent, _super);
        function PropertyChangeEvent(type, bubbles, cancelable, kind, property, oldValue, newValue, source) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (kind === void 0) { kind = null; }
            if (property === void 0) { property = null; }
            if (oldValue === void 0) { oldValue = null; }
            if (newValue === void 0) { newValue = null; }
            if (source === void 0) { source = null; }
            _super.call(this, type, bubbles, cancelable);
            this.kind = kind;
            this.property = property;
            this.oldValue = oldValue;
            this.newValue = newValue;
            this.source = source;
        }
        var c=PropertyChangeEvent,p=c.prototype;
        PropertyChangeEvent.createUpdateEvent = function (source, property, oldValue, newValue) {
            var event = new eui.PropertyChangeEvent(eui.PropertyChangeEvent.PROPERTY_CHANGE);
            event.kind = eui.PropertyChangeEventKind.UPDATE;
            event.oldValue = oldValue;
            event.newValue = newValue;
            event.source = source;
            event.property = property;
            return event;
        };
        p.clone = function () {
            return new eui.PropertyChangeEvent(this.type, this.bubbles, this.cancelable, this.kind, this.property, this.oldValue, this.newValue, this.source);
        };
        return PropertyChangeEvent;
    })(egret.Event);
    eui.PropertyChangeEvent = PropertyChangeEvent;
    egret.registerClass(PropertyChangeEvent,'eui.PropertyChangeEvent');
})(eui || (eui = {}));
eui.PropertyChangeEvent.PROPERTY_CHANGE = "propertyChange";
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var PropertyChangeEventKind = (function () {
        function PropertyChangeEventKind() {
        }
        var c=PropertyChangeEventKind,p=c.prototype;
        return PropertyChangeEventKind;
    })();
    eui.PropertyChangeEventKind = PropertyChangeEventKind;
    egret.registerClass(PropertyChangeEventKind,'eui.PropertyChangeEventKind');
})(eui || (eui = {}));
eui.PropertyChangeEventKind.UPDATE = "update";
eui.PropertyChangeEventKind.DELETE = "delete";
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The PropertyChangeEvent class represents the event object
     * passed to the event listener when one of the properties of
     * an object has changed, and provides information about the change.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/PropertyEventExample.ts
     */
    /**
     * @language zh_CN
     * 对象的一个属性发生更改时传递到事件侦听器的事件。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/PropertyEventExample.ts
     */
    var PropertyEvent = (function (_super) {
        __extends(PropertyEvent, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @param type The event type; indicates the action that triggered the event.
         * @param bubbles Specifies whether the event can bubble
         * up the display list hierarchy.
         * @param cancelable Specifies whether the behavior
         * associated with the event can be prevented.
         * @param property Name of the property that changed.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个属性改变事件。
         *
         * @param type 事件类型；指示触发事件的动作。
         * @param bubbles 指定该事件是否可以在显示列表层次结构得到冒泡处理。
         * @param cancelable 指定是否可以防止与事件相关联的行为。
         * @param property 发生改变的属性名称。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function PropertyEvent(type, bubbles, cancelable, property) {
            _super.call(this, type, bubbles, cancelable);
            this.property = property;
        }
        var c=PropertyEvent,p=c.prototype;
        /**
         * @language en_US
         * Dispatch an event with specified EventDispatcher. The dispatched event will be cached in the object pool,
         * for the next cycle of reuse.
         *
         * @param target the target of event dispatcher.
         * @param eventType The event type; indicates the action that triggered the event.
         * @param property Name of the property that changed.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 使用指定的 EventDispatcher 对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         *
         * @param target 事件派发目标
         * @param eventType 事件类型；指示触发事件的动作。
         * @param property 发生改变的属性名称。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        PropertyEvent.dispatchPropertyEvent = function (target, eventType, property) {
            if (!target.hasEventListener(eventType)) {
                return true;
            }
            var event = egret.Event.create(PropertyEvent, eventType);
            event.property = property;
            var result = target.dispatchEvent(event);
            egret.Event.release(event);
            return result;
        };
        /**
         * @language en_US
         * Dispatch when a property changed.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 属性改变。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        PropertyEvent.PROPERTY_CHANGE = "propertyChange";
        return PropertyEvent;
    })(egret.Event);
    eui.PropertyEvent = PropertyEvent;
    egret.registerClass(PropertyEvent,'eui.PropertyEvent');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * @private
     */
    var ScrollerThrowEvent = (function (_super) {
        __extends(ScrollerThrowEvent, _super);
        /**
         * 动画信息，可调节或修改
         */
        //public tween;
        function ScrollerThrowEvent(type, bubbles, cancelable, currentPos, toPos) {
            _super.call(this, type, bubbles, cancelable);
            currentPos = +currentPos;
            toPos = +toPos;
            this.currentPos = currentPos;
            this.toPos = toPos;
        }
        var c=ScrollerThrowEvent,p=c.prototype;
        ScrollerThrowEvent.THROW = "throw";
        return ScrollerThrowEvent;
    })(egret.Event);
    eui.ScrollerThrowEvent = ScrollerThrowEvent;
    egret.registerClass(ScrollerThrowEvent,'eui.ScrollerThrowEvent');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var TabGroupEvent = (function (_super) {
        __extends(TabGroupEvent, _super);
        function TabGroupEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            _super.call(this, type, bubbles, cancelable);
        }
        var c=TabGroupEvent,p=c.prototype;
        p.clone = function () {
            var event = new eui.TabGroupEvent(this.type, this.bubbles, this.cancelable);
            event.relateObject = this.relateObject;
            event.relatePanel = this.relatePanel;
            return event;
        };
        return TabGroupEvent;
    })(egret.Event);
    eui.TabGroupEvent = TabGroupEvent;
    egret.registerClass(TabGroupEvent,'eui.TabGroupEvent');
})(eui || (eui = {}));
eui.TabGroupEvent.MAXIMIZED = "maximizedTabGroup";
eui.TabGroupEvent.MINIMIZED = "minimizedTabGroup";
eui.TabGroupEvent.CLOSE_static_egret_ui_events_TabGroupEvent = "closeTabGroup";
eui.TabGroupEvent.CLOSING_PANEL = "closingPanel";
eui.TabGroupEvent.PANEL_OPENED = "panelOpened";
eui.TabGroupEvent.PANEL_CREATED = "panelCreated";
eui.TabGroupEvent.CLOSE_PANEL = "closePanel";
var eui;
(function (eui) {
    var ToolTipEvent = (function (_super) {
        __extends(ToolTipEvent, _super);
        function ToolTipEvent(type, bubbles, cancelable, toolTip) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            if (toolTip === void 0) { toolTip = null; }
            _super.call(this, type, bubbles, cancelable);
            this.toolTip = toolTip;
        }
        var c=ToolTipEvent,p=c.prototype;
        p.clone = function () {
            return new eui.ToolTipEvent(this.type, this.bubbles, this.cancelable, this.toolTip);
        };
        return ToolTipEvent;
    })(egret.Event);
    eui.ToolTipEvent = ToolTipEvent;
    egret.registerClass(ToolTipEvent,'eui.ToolTipEvent');
})(eui || (eui = {}));
eui.ToolTipEvent.TOOL_TIP_HIDE = "toolTipHide";
eui.ToolTipEvent.TOOL_TIP_SHOW = "toolTipShow";
var eui;
(function (eui) {
    var TrackBaseEvent = (function (_super) {
        __extends(TrackBaseEvent, _super);
        function TrackBaseEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            _super.call(this, type, bubbles, cancelable);
        }
        var c=TrackBaseEvent,p=c.prototype;
        p.clone = function () {
            return new eui.TrackBaseEvent(this.type, this.bubbles, this.cancelable);
        };
        return TrackBaseEvent;
    })(egret.Event);
    eui.TrackBaseEvent = TrackBaseEvent;
    egret.registerClass(TrackBaseEvent,'eui.TrackBaseEvent');
})(eui || (eui = {}));
eui.TrackBaseEvent.THUMB_DRAG = "thumbDrag";
eui.TrackBaseEvent.THUMB_PRESS = "thumbPress";
eui.TrackBaseEvent.THUMB_RELEASE = "thumbRelease";
var eui;
(function (eui) {
    /**
     * 树的拖拽事件
     * @author featherJ
     */
    var TreeDragEvent = (function (_super) {
        __extends(TreeDragEvent, _super);
        function TreeDragEvent(type, bubbles, cancelable) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = true; }
            _super.call(this, type, bubbles, cancelable);
        }
        var c=TreeDragEvent,p=c.prototype;
        p.clone = function () {
            var evt = new TreeDragEvent(this.type, this.bubbles, this.cancelable);
            evt.dragItems = this.dragItems;
            evt.dropItem = this.dropItem;
            evt.moveToTop = this.moveToTop;
            return evt;
        };
        /**
         * 拖拽进入完成了
         */
        TreeDragEvent.ITEMS_DRAG_IN_COMPLETE = "itemsDargInComplete";
        /**
         * 拖拽开始
         */
        TreeDragEvent.ITEMS_DRAG_START = "itemsDragStart";
        /**
         * 拖拽移动结束了
         */
        TreeDragEvent.ITEMS_DRAG_MOVE_COMPLETE = "itemsDargMoveComplete";
        return TreeDragEvent;
    })(egret.Event);
    eui.TreeDragEvent = TreeDragEvent;
    egret.registerClass(TreeDragEvent,'eui.TreeDragEvent');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * Tree事件
     * @author featherJ
     */
    var TreeEvent = (function (_super) {
        __extends(TreeEvent, _super);
        function TreeEvent(type, bubbles, cancelable, itemIndex, item, itemRenderer) {
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = true; }
            if (itemIndex === void 0) { itemIndex = -1; }
            if (item === void 0) { item = null; }
            if (itemRenderer === void 0) { itemRenderer = null; }
            _super.call(this, type, bubbles, cancelable);
            this.item = item;
            this.itemRenderer = itemRenderer;
            this.itemIndex = itemIndex;
        }
        var c=TreeEvent,p=c.prototype;
        /**
         * @inheritDoc
         */
        p.clone = function () {
            var evt = new TreeEvent(this.type, this.bubbles, this.cancelable, this.itemIndex, this.item, this.itemRenderer);
            evt.opening = this.opening;
            return evt;
        };
        /**
         * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         * @method egret.gui.TreeEvent.dispatchTreeEvent
         */
        TreeEvent.dispatchTreeEvent = function (target, type, itemIndex, item, itemRenderer, opening, bubbles, cancelable) {
            if (itemIndex === void 0) { itemIndex = -1; }
            if (item === void 0) { item = null; }
            if (itemRenderer === void 0) { itemRenderer = null; }
            if (opening === void 0) { opening = false; }
            if (bubbles === void 0) { bubbles = false; }
            if (cancelable === void 0) { cancelable = false; }
            var event = egret.Event.create(TreeEvent, type);
            event.itemIndex = itemIndex;
            event.item = item;
            event.itemRenderer = itemRenderer;
            event.opening = opening;
            var result = target.dispatchEvent(event);
            egret.Event.release(event);
            return result;
        };
        p.clean = function () {
            _super.prototype.clean.call(this);
            this.item = null;
            this.itemRenderer = null;
        };
        /**
         * 节点关闭,注意：只有通过交互操作引起的节点关闭才会抛出此事件。
         */
        TreeEvent.ITEM_CLOSE = "itemClose";
        /**
         * 节点打开,注意：只有通过交互操作引起的节点打开才会抛出此事件。
         */
        TreeEvent.ITEM_OPEN = "itemOpen";
        /**
         * 子节点打开或关闭前一刻分派。可以调用preventDefault()方法阻止节点的状态改变。
         */
        TreeEvent.ITEM_OPENING = "itemOpening";
        return TreeEvent;
    })(egret.Event);
    eui.TreeEvent = TreeEvent;
    egret.registerClass(TreeEvent,'eui.TreeEvent');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The UIEvent class represents the event object passed to
     * the event listener for many UI events.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/UIEventExample.ts
     */
    /**
     * @language zh_CN
     * UI事件
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/events/UIEventExample.ts
     */
    var UIEvent = (function (_super) {
        __extends(UIEvent, _super);
        /**
         * @language en_US
         * Constructor.
         *
         * @param type The event type; indicates the action that triggered the event.
         * @param bubbles Specifies whether the event can bubble
         * up the display list hierarchy.
         * @param cancelable Specifies whether the behavior
         * associated with the event can be prevented.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个 UIEvent 实例
         *
         * @param type 事件类型；指示触发事件的动作。
         * @param bubbles 指定该事件是否可以在显示列表层次结构得到冒泡处理。
         * @param cancelable 指定是否可以防止与事件相关联的行为。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function UIEvent(type, bubbles, cancelable) {
            _super.call(this, type, bubbles, cancelable);
        }
        var c=UIEvent,p=c.prototype;
        /**
         * @language en_US
         * Dispatch an event with specified EventDispatcher. The dispatched event will be cached in the object pool,
         * for the next cycle of reuse.
         *
         * @param target the target of event dispatcher.
         * @param eventType The event type; indicates the action that triggered the event.
         * @param bubbles  Determines whether the Event object participates in the bubbling stage of the event flow. The default value is false.
         * @param cancelable Determines whether the Event object can be canceled. The default values is false.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 使用指定的EventDispatcher对象来抛出事件对象。抛出的对象将会缓存在对象池上，供下次循环复用。
         *
         * @param target 事件派发目标。
         * @param eventType 事件类型；指示触发事件的动作。
         * @param bubbles  确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。
         * @param cancelable 确定是否可以取消 Event 对象。默认值为 false。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        UIEvent.dispatchUIEvent = function (target, eventType, bubbles, cancelable) {
            if (!target.hasEventListener(eventType)) {
                return true;
            }
            var event = egret.Event.create(UIEvent, eventType, bubbles, cancelable);
            var result = target.dispatchEvent(event);
            egret.Event.release(event);
            return result;
        };
        /**
         * @language en_US
         * creation complete of component.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 组件创建完成
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        UIEvent.CREATION_COMPLETE = "creationComplete";
        /**
         * @language en_US
         * the ending of change.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 改变结束
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        UIEvent.CHANGE_END = "changeEnd";
        /**
         * @language en_US
         * The beginning of change.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 改变开始
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        UIEvent.CHANGE_START = "changeStart";
        /**
         * @language en_US
         * Before close the panel.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 即将关闭面板事件
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        UIEvent.CLOSING = "closing";
        /**
         * @language en_US
         * The coordinates of the UI components changed in it's parent.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * UI组件在父级容器中的坐标发生改变事件
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        UIEvent.MOVE = "move";
        /**
         * 当用户按下ButtonBase控件时分派。如果 autoRepeat属性为 true，则只要按钮处于按下状态，就将重复分派此事件。
         */
        UIEvent.BUTTON_DOWN = "buttonDown";
        /**
         * 值发生改变
         */
        UIEvent.VALUE_COMMIT = "valueCommit";
        /**
         * 下拉框弹出事件
         */
        UIEvent.OPEN = "open";
        /**
         * 下拉框关闭事件
         */
        UIEvent.CLOSE = "close";
        return UIEvent;
    })(egret.Event);
    eui.UIEvent = UIEvent;
    egret.registerClass(UIEvent,'eui.UIEvent');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var UIEventEx = (function () {
        function UIEventEx() {
        }
        var c=UIEventEx,p=c.prototype;
        UIEventEx.VALUE_COMMIT = "valueCommit";
        UIEventEx.ENTER = "enter";
        UIEventEx.UPDATE_COMPLETE = "updateComplete";
        UIEventEx.CONFIRM = "confirm";
        return UIEventEx;
    })();
    eui.UIEventEx = UIEventEx;
    egret.registerClass(UIEventEx,'eui.UIEventEx');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        var STATE = "eui.State";
        var ADD_ITEMS = "eui.AddItems";
        var SET_PROPERTY = "eui.SetProperty";
        var SET_STATEPROPERTY = "eui.SetStateProperty";
        var BINDING_PROPERTY = "eui.Binding.bindProperty";
        /**
         * @private
         * 代码生成工具基类
         */
        var CodeBase = (function () {
            function CodeBase() {
                /**
                 * @private
                 */
                this.indent = 0;
            }
            var c=CodeBase,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                return "";
            };
            /**
             * @private
             * 获取缩进字符串
             */
            p.getIndent = function (indent) {
                if (indent === void 0)
                    indent = this.indent;
                var str = "";
                for (var i = 0; i < indent; i++) {
                    str += "	";
                }
                return str;
            };
            return CodeBase;
        })();
        sys.CodeBase = CodeBase;
        egret.registerClass(CodeBase,'eui.sys.CodeBase');
        /**
         * @private
         */
        var EXClass = (function (_super) {
            __extends(EXClass, _super);
            function EXClass() {
                _super.apply(this, arguments);
                /**
                 * @private
                 * 类名,不包括模块名
                 */
                this.className = "";
                /**
                 * @private
                 * 父类类名,包括完整模块名
                 */
                this.superClass = "";
                /**
                 * @private
                 * 内部类区块
                 */
                this.innerClassBlock = [];
                /**
                 * @private
                 * 变量定义区块
                 */
                this.variableBlock = [];
                /**
                 * @private
                 * 函数定义区块
                 */
                this.functionBlock = [];
            }
            var c=EXClass,p=c.prototype;
            /**
             * @private
             * 添加一个内部类
             */
            p.addInnerClass = function (clazz) {
                if (this.innerClassBlock.indexOf(clazz) == -1) {
                    this.innerClassBlock.push(clazz);
                }
            };
            /**
             * @private
             * 添加变量
             */
            p.addVariable = function (variableItem) {
                if (this.variableBlock.indexOf(variableItem) == -1) {
                    this.variableBlock.push(variableItem);
                }
            };
            /**
             * @private
             * 根据变量名获取变量定义
             */
            p.getVariableByName = function (name) {
                var list = this.variableBlock;
                var length = list.length;
                for (var i = 0; i < length; i++) {
                    var item = list[i];
                    if (item.name == name) {
                        return item;
                    }
                }
                return null;
            };
            /**
             * @private
             * 添加函数
             */
            p.addFunction = function (functionItem) {
                if (this.functionBlock.indexOf(functionItem) == -1) {
                    this.functionBlock.push(functionItem);
                }
            };
            /**
             * @private
             * 根据函数名返回函数定义块
             */
            p.getFuncByName = function (name) {
                var list = this.functionBlock;
                var length = list.length;
                for (var i = 0; i < length; i++) {
                    var item = list[i];
                    if (item.name == name) {
                        return item;
                    }
                }
                return null;
            };
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                var indent = this.indent;
                var indentStr = this.getIndent(indent);
                var indent1Str = this.getIndent(indent + 1);
                var indent2Str = this.getIndent(indent + 2);
                //打印类起始块
                var returnStr = indentStr + "(function (";
                if (this.superClass) {
                    returnStr += "_super) {\n" + indent1Str + "__extends(" + this.className + ", _super);\n";
                }
                else {
                    returnStr += ") {\n";
                }
                //打印内部类列表
                var innerClasses = this.innerClassBlock;
                var length = innerClasses.length;
                for (var i = 0; i < length; i++) {
                    var clazz = innerClasses[i];
                    clazz.indent = indent + 1;
                    returnStr += indent1Str + "var " + clazz.className + " = " + clazz.toCode() + "\n\n";
                }
                returnStr += indent1Str + "function " + this.className + "() {\n";
                if (this.superClass) {
                    returnStr += indent2Str + "_super.call(this);\n";
                }
                //打印变量列表
                var variables = this.variableBlock;
                length = variables.length;
                for (i = 0; i < length; i++) {
                    var variable = variables[i];
                    if (variable.defaultValue) {
                        returnStr += indent2Str + variable.toCode() + "\n";
                    }
                }
                //打印构造函数
                if (this.constructCode) {
                    var codes = this.constructCode.toCode().split("\n");
                    length = codes.length;
                    for (i = 0; i < length; i++) {
                        var code = codes[i];
                        returnStr += indent2Str + code + "\n";
                    }
                }
                returnStr += indent1Str + "}\n";
                returnStr += indent1Str + "var _proto = " + this.className + ".prototype;\n\n";
                //打印函数列表
                var functions = this.functionBlock;
                length = functions.length;
                for (i = 0; i < length; i++) {
                    var functionItem = functions[i];
                    functionItem.indent = indent + 1;
                    returnStr += functionItem.toCode() + "\n";
                }
                //打印类结尾
                returnStr += indent1Str + "return " + this.className + ";\n" + indentStr;
                if (this.superClass) {
                    returnStr += "})(" + this.superClass + ");";
                }
                else {
                    returnStr += "})();";
                }
                return returnStr;
            };
            return EXClass;
        })(CodeBase);
        sys.EXClass = EXClass;
        egret.registerClass(EXClass,'eui.sys.EXClass');
        /**
         * @private
         */
        var EXCodeBlock = (function (_super) {
            __extends(EXCodeBlock, _super);
            function EXCodeBlock() {
                _super.apply(this, arguments);
                /**
                 * @private
                 */
                this.lines = [];
            }
            var c=EXCodeBlock,p=c.prototype;
            /**
             * @private
             * 添加变量声明语句
             * @param name 变量名
             * @param value 变量初始值
             */
            p.addVar = function (name, value) {
                var valueStr = value ? " = " + value : "";
                this.addCodeLine("var " + name + valueStr + ";");
            };
            /**
             * @private
             * 添加赋值语句
             * @param target 要赋值的目标
             * @param value 值
             * @param prop 目标的属性(用“.”访问)，不填则是对目标赋值
             */
            p.addAssignment = function (target, value, prop) {
                var propStr = prop ? "." + prop : "";
                this.addCodeLine(target + propStr + " = " + value + ";");
            };
            /**
             * @private
             * 添加返回值语句
             */
            p.addReturn = function (data) {
                this.addCodeLine("return " + data + ";");
            };
            /**
             * @private
             * 添加一条空行
             */
            p.addEmptyLine = function () {
                this.addCodeLine("");
            };
            /**
             * @private
             * 开始添加if语句块,自动调用startBlock();
             */
            p.startIf = function (expression) {
                this.addCodeLine("if(" + expression + ")");
                this.startBlock();
            };
            /**
             * @private
             * 开始else语句块,自动调用startBlock();
             */
            p.startElse = function () {
                this.addCodeLine("else");
                this.startBlock();
            };
            /**
             * @private
             * 开始else if语句块,自动调用startBlock();
             */
            p.startElseIf = function (expression) {
                this.addCodeLine("else if(" + expression + ")");
                this.startBlock();
            };
            /**
             * @private
             * 添加一个左大括号，开始新的语句块
             */
            p.startBlock = function () {
                this.addCodeLine("{");
                this.indent++;
            };
            /**
             * @private
             * 添加一个右大括号,结束当前的语句块
             */
            p.endBlock = function () {
                this.indent--;
                this.addCodeLine("}");
            };
            /**
             * @private
             * 添加执行函数语句块
             * @param functionName 要执行的函数名称
             * @param args 函数参数列表
             */
            p.doFunction = function (functionName, args) {
                var argsStr = args.join(",");
                this.addCodeLine(functionName + "(" + argsStr + ")");
            };
            /**
             * @private
             * 添加一行代码
             */
            p.addCodeLine = function (code) {
                this.lines.push(this.getIndent() + code);
            };
            /**
             * @private
             * 添加一行代码到指定行
             */
            p.addCodeLineAt = function (code, index) {
                this.lines.splice(index, 0, this.getIndent() + code);
            };
            /**
             * @private
             * 是否存在某行代码内容
             */
            p.containsCodeLine = function (code) {
                return this.lines.indexOf(code) != -1;
            };
            /**
             * @private
             * 在结尾追加另一个代码块的内容
             */
            p.concat = function (cb) {
                this.lines = this.lines.concat(cb.lines);
            };
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                return this.lines.join("\n");
            };
            return EXCodeBlock;
        })(CodeBase);
        sys.EXCodeBlock = EXCodeBlock;
        egret.registerClass(EXCodeBlock,'eui.sys.EXCodeBlock');
        /**
         * @private
         */
        var EXFunction = (function (_super) {
            __extends(EXFunction, _super);
            function EXFunction() {
                _super.apply(this, arguments);
                /**
                 * @private
                 * 代码块
                 */
                this.codeBlock = null;
                /**
                 * @private
                 */
                this.isGet = false;
                /**
                 * @private
                 * 函数名
                 */
                this.name = "";
            }
            var c=EXFunction,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                var indentStr = this.getIndent();
                var indent1Str = this.getIndent(this.indent + 1);
                var codeIndent;
                var returnStr = indentStr;
                if (this.isGet) {
                    codeIndent = this.getIndent(this.indent + 2);
                    returnStr += 'Object.defineProperty(_proto, "skinParts", {\n';
                    returnStr += indent1Str + "get: function () {\n";
                }
                else {
                    codeIndent = indent1Str;
                    returnStr += "_proto." + this.name + " = function () {\n";
                }
                if (this.codeBlock) {
                    var lines = this.codeBlock.toCode().split("\n");
                    var length = lines.length;
                    for (var i = 0; i < length; i++) {
                        var line = lines[i];
                        returnStr += codeIndent + line + "\n";
                    }
                }
                if (this.isGet) {
                    returnStr += indent1Str + "},\n" + indent1Str + "enumerable: true,\n" +
                        indent1Str + "configurable: true\n" + indentStr + "});";
                }
                else {
                    returnStr += indentStr + "};";
                }
                return returnStr;
            };
            return EXFunction;
        })(CodeBase);
        sys.EXFunction = EXFunction;
        egret.registerClass(EXFunction,'eui.sys.EXFunction');
        /**
         * @private
         */
        var EXVariable = (function (_super) {
            __extends(EXVariable, _super);
            /**
             * @private
             */
            function EXVariable(name, defaultValue) {
                _super.call(this);
                this.indent = 2;
                this.name = name;
                this.defaultValue = defaultValue;
            }
            var c=EXVariable,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                if (!this.defaultValue) {
                    return "";
                }
                return "this." + this.name + " = " + this.defaultValue + ";";
            };
            return EXVariable;
        })(CodeBase);
        sys.EXVariable = EXVariable;
        egret.registerClass(EXVariable,'eui.sys.EXVariable');
        /**
         * @private
         */
        var EXState = (function (_super) {
            __extends(EXState, _super);
            /**
             * @private
             */
            function EXState(name, stateGroups) {
                _super.call(this);
                /**
                 * @private
                 * 视图状态名称
                 */
                this.name = "";
                /**
                 * @private
                 */
                this.stateGroups = [];
                /**
                 * @private
                 */
                this.addItems = [];
                /**
                 * @private
                 */
                this.setProperty = [];
                this.name = name;
                if (stateGroups)
                    this.stateGroups = stateGroups;
            }
            var c=EXState,p=c.prototype;
            /**
             * @private
             * 添加一个覆盖
             */
            p.addOverride = function (item) {
                if (item instanceof EXAddItems)
                    this.addItems.push(item);
                else
                    this.setProperty.push(item);
            };
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                var indentStr = this.getIndent(1);
                var returnStr = "new " + STATE + " (\"" + this.name + "\",\n" + indentStr + "[\n";
                var index = 0;
                var isFirst = true;
                var overrides = this.addItems.concat(this.setProperty);
                while (index < overrides.length) {
                    if (isFirst)
                        isFirst = false;
                    else
                        returnStr += ",\n";
                    var item = overrides[index];
                    var codes = item.toCode().split("\n");
                    var length = codes.length;
                    for (var i = 0; i < length; i++) {
                        var code = codes[i];
                        codes[i] = indentStr + indentStr + code;
                    }
                    returnStr += codes.join("\n");
                    index++;
                }
                returnStr += "\n" + indentStr + "])";
                return returnStr;
            };
            return EXState;
        })(CodeBase);
        sys.EXState = EXState;
        egret.registerClass(EXState,'eui.sys.EXState');
        /**
         * @private
         */
        var EXAddItems = (function (_super) {
            __extends(EXAddItems, _super);
            /**
             * @private
             */
            function EXAddItems(target, property, position, relativeTo) {
                _super.call(this);
                this.target = target;
                this.property = property;
                this.position = position;
                this.relativeTo = relativeTo;
            }
            var c=EXAddItems,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                var returnStr = "new " + ADD_ITEMS + "(\"" + this.target + "\",\"" + this.property + "\"," + this.position + ",\"" + this.relativeTo + "\")";
                return returnStr;
            };
            return EXAddItems;
        })(CodeBase);
        sys.EXAddItems = EXAddItems;
        egret.registerClass(EXAddItems,'eui.sys.EXAddItems');
        /**
         * @private
         */
        var EXSetProperty = (function (_super) {
            __extends(EXSetProperty, _super);
            /**
             * @private
             */
            function EXSetProperty(target, name, value) {
                _super.call(this);
                this.target = target;
                this.name = name;
                this.value = value;
            }
            var c=EXSetProperty,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                return "new " + SET_PROPERTY + "(\"" + this.target + "\",\"" + this.name + "\"," + this.value + ")";
            };
            return EXSetProperty;
        })(CodeBase);
        sys.EXSetProperty = EXSetProperty;
        egret.registerClass(EXSetProperty,'eui.sys.EXSetProperty');
        /**
         * @private
         */
        var EXSetStateProperty = (function (_super) {
            __extends(EXSetStateProperty, _super);
            /**
             * @private
             */
            function EXSetStateProperty(target, property, expression) {
                _super.call(this);
                this.target = target;
                this.property = property;
                this.expression = expression;
            }
            var c=EXSetStateProperty,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                var chain = this.expression.split(".").join("\",\"");
                return "new " + SET_STATEPROPERTY + "(this, [" + chain + "], this." + this.target + ",\"" + this.property + "\")";
            };
            return EXSetStateProperty;
        })(CodeBase);
        sys.EXSetStateProperty = EXSetStateProperty;
        egret.registerClass(EXSetStateProperty,'eui.sys.EXSetStateProperty');
        /**
         * @private
         */
        var EXBinding = (function (_super) {
            __extends(EXBinding, _super);
            /**
             * @private
             */
            function EXBinding(target, property, expression) {
                _super.call(this);
                this.target = target;
                this.property = property;
                this.expression = expression;
            }
            var c=EXBinding,p=c.prototype;
            /**
             * @private
             *
             * @returns
             */
            p.toCode = function () {
                var chain = this.expression.split(".").join("\",\"");
                return BINDING_PROPERTY + "(this, [\"" + chain + "\"], this." + this.target + ",\"" + this.property + "\")";
            };
            return EXBinding;
        })(CodeBase);
        sys.EXBinding = EXBinding;
        egret.registerClass(EXBinding,'eui.sys.EXBinding');
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        var exmlParserPool = [];
        var parsedClasses = {};
        var innerClassCount = 1;
        var HOST_COMPONENT = "hostComponent";
        var SKIN_CLASS = "eui.Skin";
        var DECLARATIONS = "Declarations";
        var RECTANGLE = "egret.Rectangle";
        var TYPE_CLASS = "Class";
        var TYPE_ARRAY = "Array";
        var TYPE_STATE = "State[]";
        var SKIN_NAME = "skinName";
        var ELEMENTS_CONTENT = "elementsContent";
        var basicTypes = [TYPE_ARRAY, "boolean", "string", "number"];
        var wingKeys = ["id", "locked", "includeIn", "excludeFrom"];
        var htmlEntities = [["<", "&lt;"], [">", "&gt;"], ["&", "&amp;"], ["\"", "&quot;"], ["'", "&apos;"]];
        /**
         * @private
         */
        var EXMLParser = (function () {
            /**
             * @private
             */
            function EXMLParser() {
                /**
                 * @private
                 * 延迟赋值字典
                 */
                this.delayAssignmentDic = {};
                if (DEBUG) {
                    this.repeatedIdMap = {};
                    this.getRepeatedIds = getRepeatedIds;
                    this.getIds = getIds;
                    this.checkDeclarations = checkDeclarations;
                }
            }
            var c=EXMLParser,p=c.prototype;
            /**
             * @private
             * 编译指定的XML对象为JavaScript代码。
             * @param xmlData 要编译的EXML文件内容
             * @param className 要编译成的完整类名，包括模块名。
             */
            p.parse = function (text) {
                if (DEBUG) {
                    if (!text) {
                        egret.$error(1003, "text");
                    }
                }
                try {
                    var xmlData = egret.XML.parse(text);
                }
                catch (e) {
                    if (DEBUG) {
                        egret.$error(2002, text + "\n" + e.message);
                    }
                }
                var className = "";
                var hasClass = false;
                if (xmlData.attributes["class"]) {
                    className = xmlData.attributes["class"];
                    delete xmlData.attributes["class"];
                    hasClass = !!className;
                }
                else {
                    className = "$exmlClass" + innerClassCount++;
                }
                var exClass = this.parseClass(xmlData, className);
                var code = exClass.toCode();
                try {
                    var clazz = eval(code);
                }
                catch (e) {
                    if (DEBUG) {
                        egret.log(code);
                    }
                    return null;
                }
                if (hasClass && clazz) {
                    egret.registerClass(clazz, className);
                    var paths = className.split(".");
                    var length = paths.length;
                    var definition = __global;
                    for (var i = 0; i < length - 1; i++) {
                        var path = paths[i];
                        definition = definition[path] || (definition[path] = {});
                    }
                    if (definition[paths[length - 1]]) {
                        if (DEBUG && !parsedClasses[className]) {
                            egret.$warn(2101, className, toXMLString(xmlData));
                        }
                    }
                    else {
                        if (DEBUG) {
                            parsedClasses[className] = true;
                        }
                        definition[paths[length - 1]] = clazz;
                    }
                }
                return clazz;
            };
            /**
             * @private
             * 编译指定的XML对象为CpClass对象。
             */
            p.parseClass = function (xmlData, className) {
                if (!sys.exmlConfig) {
                    sys.exmlConfig = new sys.EXMLConfig();
                }
                this.currentXML = xmlData;
                this.currentClassName = className;
                this.delayAssignmentDic = {};
                this.idDic = {};
                this.stateCode = [];
                this.stateNames = [];
                this.skinParts = [];
                this.bindings = [];
                this.declarations = null;
                this.currentClass = new sys.EXClass();
                this.stateIds = [];
                var index = className.lastIndexOf(".");
                if (index != -1) {
                    this.currentClass.className = className.substring(index + 1);
                }
                else {
                    this.currentClass.className = className;
                }
                this.startCompile();
                var clazz = this.currentClass;
                this.currentClass = null;
                return clazz;
            };
            /**
             * @private
             * 开始编译
             */
            p.startCompile = function () {
                if (DEBUG) {
                    var result = this.getRepeatedIds(this.currentXML);
                    if (result.length > 0) {
                        egret.$error(2004, this.currentClassName, result.join("\n"));
                    }
                }
                var superClass = this.getClassNameOfNode(this.currentXML);
                this.isSkinClass = (superClass == SKIN_CLASS);
                this.currentClass.superClass = superClass;
                this.getStateNames();
                var children = this.currentXML.children;
                if (children) {
                    var length = children.length;
                    for (var i = 0; i < length; i++) {
                        var node = children[i];
                        if (node.nodeType === 1 && node.namespace == sys.NS_W &&
                            node.localName == DECLARATIONS) {
                            this.declarations = node;
                            break;
                        }
                    }
                }
                if (DEBUG) {
                    var list = [];
                    this.checkDeclarations(this.declarations, list);
                    if (list.length > 0) {
                        egret.$error(2020, this.currentClassName, list.join("\n"));
                    }
                }
                if (!this.currentXML.namespace) {
                    if (DEBUG) {
                        egret.$error(2017, this.currentClassName, toXMLString(this.currentXML));
                    }
                    return;
                }
                this.addIds(this.currentXML.children);
                this.createConstructFunc();
            };
            /**
             * @private
             * 添加必须的id
             */
            p.addIds = function (items) {
                if (!items) {
                    return;
                }
                var length = items.length;
                for (var i = 0; i < length; i++) {
                    var node = items[i];
                    if (node.nodeType != 1) {
                        continue;
                    }
                    if (!node.namespace) {
                        if (DEBUG) {
                            egret.$error(2017, this.currentClassName, toXMLString(node));
                        }
                        continue;
                    }
                    if (this.isInnerClass(node)) {
                        continue;
                    }
                    this.addIds(node.children);
                    if (node.namespace == sys.NS_W || !node.localName) {
                    }
                    else if (this.isProperty(node)) {
                        var prop = node.localName;
                        var index = prop.indexOf(".");
                        var children = node.children;
                        if (index == -1 || !children || children.length == 0) {
                            continue;
                        }
                        var firstChild = children[0];
                        this.stateIds.push(firstChild.attributes.id);
                    }
                    else if (node.nodeType === 1) {
                        var id = node.attributes["id"];
                        if (id) {
                            if (this.skinParts.indexOf(id) == -1) {
                                this.skinParts.push(id);
                            }
                            this.createVarForNode(node);
                            if (this.isStateNode(node))
                                this.stateIds.push(id);
                        }
                        else {
                            this.createIdForNode(node);
                            if (this.isStateNode(node))
                                this.stateIds.push(node.attributes.id);
                        }
                    }
                }
            };
            /**
             * @private
             * 是否为内部类。
             */
            p.isInnerClass = function (node) {
                if (node.hasOwnProperty("isInnerClass")) {
                    return node["isInnerClass"];
                }
                var result = (node.localName == "Skin" && node.namespace == sys.NS_S);
                if (!result) {
                    if (this.isProperty(node)) {
                        result = false;
                    }
                    else {
                        var parent = node.parent;
                        if (this.isProperty(parent)) {
                            var prop = parent.localName;
                            var index = prop.indexOf(".");
                            if (index != -1) {
                                var stateName = prop.substring(index + 1);
                                prop = prop.substring(0, index);
                            }
                            parent = parent.parent;
                        }
                        else {
                            prop = sys.exmlConfig.getDefaultPropById(parent.localName, parent.namespace);
                        }
                        var className = sys.exmlConfig.getClassNameById(parent.localName, parent.namespace);
                        result = (sys.exmlConfig.getPropertyType(prop, className) == TYPE_CLASS);
                    }
                }
                node["isInnerClass"] = result;
                return result;
            };
            /**
             * @private
             * 检测指定节点的属性是否含有视图状态
             */
            p.containsState = function (node) {
                var attributes = node.attributes;
                if (attributes["includeIn"]) {
                    return true;
                }
                var keys = Object.keys(attributes);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var name = keys[i];
                    if (name.indexOf(".") != -1) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * @private
             * 为指定节点创建id属性
             */
            p.createIdForNode = function (node) {
                var idName = this.getNodeId(node);
                if (!this.idDic[idName])
                    this.idDic[idName] = 1;
                else
                    this.idDic[idName]++;
                idName += this.idDic[idName];
                node.attributes.id = idName;
            };
            /**
             * @private
             * 获取节点ID
             */
            p.getNodeId = function (node) {
                if (node.attributes["id"])
                    return node.attributes.id;
                return "_" + node.localName;
            };
            /**
             * @private
             * 为指定节点创建变量
             */
            p.createVarForNode = function (node) {
                var moduleName = this.getClassNameOfNode(node);
                if (moduleName == "")
                    return;
                if (!this.currentClass.getVariableByName(node.attributes.id))
                    this.currentClass.addVariable(new sys.EXVariable(node.attributes.id));
            };
            /**
             * @private
             * 为指定节点创建初始化函数,返回函数名引用
             */
            p.createFuncForNode = function (node) {
                var className = node.localName;
                var isBasicType = this.isBasicTypeData(className);
                if (isBasicType)
                    return this.createBasicTypeForNode(node);
                var moduleName = this.getClassNameOfNode(node);
                var func = new sys.EXFunction();
                var tailName = "_i";
                var id = node.attributes.id;
                func.name = id + tailName;
                this.currentClass.addFunction(func);
                var cb = new sys.EXCodeBlock();
                func.codeBlock = cb;
                var varName = "t";
                if (className == "Object") {
                    cb.addVar(varName, "{}");
                }
                else {
                    cb.addVar(varName, "new " + moduleName + "()");
                }
                var containsId = !!this.currentClass.getVariableByName(id);
                if (containsId) {
                    cb.addAssignment("this." + id, varName);
                }
                this.addAttributesToCodeBlock(cb, varName, node);
                this.initlizeChildNode(node, cb, varName);
                var delayAssignments = this.delayAssignmentDic[id];
                if (delayAssignments) {
                    var length = delayAssignments.length;
                    for (var i = 0; i < length; i++) {
                        var codeBlock = delayAssignments[i];
                        cb.concat(codeBlock);
                    }
                }
                cb.addReturn(varName);
                return "this." + func.name + "()";
            };
            /**
             * @private
             * 检查目标类名是否是基本数据类型
             */
            p.isBasicTypeData = function (className) {
                return basicTypes.indexOf(className) != -1;
            };
            /**
             * @private
             * 为指定基本数据类型节点实例化,返回实例化后的值。
             */
            p.createBasicTypeForNode = function (node) {
                var className = node.localName;
                var returnValue = "";
                var varItem = this.currentClass.getVariableByName(node.attributes.id);
                var children = node.children;
                var text = "";
                if (children && children.length > 0) {
                    var firstChild = children[0];
                    if (firstChild.nodeType == 3) {
                        text = firstChild.text.trim();
                    }
                }
                switch (className) {
                    case TYPE_ARRAY:
                        var values = [];
                        if (children) {
                            var length = children.length;
                            for (var i = 0; i < length; i++) {
                                var child = children[i];
                                if (child.nodeType == 1) {
                                    values.push(this.createFuncForNode(child));
                                }
                            }
                        }
                        returnValue = "[" + values.join(",") + "]";
                        break;
                    case "boolean":
                        returnValue = (text == "false" || !text) ? "false" : "true";
                        break;
                    case "number":
                        returnValue = text;
                        if (returnValue.indexOf("%") != -1)
                            returnValue = returnValue.substring(0, returnValue.length - 1);
                        break;
                    case "string":
                        returnValue = this.formatString(text);
                        break;
                }
                if (varItem)
                    varItem.defaultValue = returnValue;
                return returnValue;
            };
            /**
             * @private
             * 将节点属性赋值语句添加到代码块
             */
            p.addAttributesToCodeBlock = function (cb, varName, node) {
                var key;
                var value;
                var attributes = node.attributes;
                var keyList = Object.keys(attributes);
                keyList.sort(); //排序一下防止出现随机顺序
                var length = keyList.length;
                for (var i = 0; i < length; i++) {
                    key = keyList[i];
                    if (!this.isNormalKey(key)) {
                        continue;
                    }
                    value = attributes[key];
                    key = this.formatKey(key, value);
                    value = this.formatValue(key, value, node);
                    if (!value) {
                        continue;
                    }
                    if (this.currentClass.getVariableByName(value)) {
                        var THIS = "this.";
                        var id = attributes.id;
                        var codeLine = THIS + id + " = t;";
                        if (!this.currentClass.getVariableByName(id))
                            this.createVarForNode(node);
                        if (!cb.containsCodeLine(codeLine)) {
                            cb.addCodeLineAt(codeLine, 1);
                        }
                        var delayCb = new sys.EXCodeBlock();
                        if (varName == "this") {
                            delayCb.addAssignment(varName, THIS + value, key);
                        }
                        else {
                            delayCb.startIf(THIS + id);
                            delayCb.addAssignment(THIS + id, THIS + value, key);
                            delayCb.endBlock();
                        }
                        if (!this.delayAssignmentDic[value]) {
                            this.delayAssignmentDic[value] = [];
                        }
                        this.delayAssignmentDic[value].push(delayCb);
                        value = THIS + value;
                    }
                    cb.addAssignment(varName, value, key);
                }
            };
            /**
             * @private
             * 初始化子项
             */
            p.initlizeChildNode = function (node, cb, varName) {
                var children = node.children;
                if (!children || children.length == 0)
                    return;
                var className = sys.exmlConfig.getClassNameById(node.localName, node.namespace);
                var directChild = [];
                var length = children.length;
                var propList = [];
                for (var i = 0; i < length; i++) {
                    var child = children[i];
                    if (child.nodeType != 1 || child.namespace == sys.NS_W) {
                        continue;
                    }
                    if (this.isInnerClass(child)) {
                        if (child.localName == "Skin") {
                            var innerClassName = this.parseInnerClass(child);
                            var type = sys.exmlConfig.getPropertyType(SKIN_NAME, className);
                            if (type) {
                                cb.addAssignment(varName, innerClassName, SKIN_NAME);
                            }
                            else {
                                egret.$error(2005, this.currentClassName, SKIN_NAME, getPropertyStr(child));
                            }
                        }
                        continue;
                    }
                    var prop = child.localName;
                    if (this.isProperty(child)) {
                        if (!this.isNormalKey(prop)) {
                            continue;
                        }
                        var type = sys.exmlConfig.getPropertyType(child.localName, className);
                        if (!type) {
                            if (DEBUG) {
                                egret.$error(2005, this.currentClassName, child.localName, getPropertyStr(child));
                            }
                            continue;
                        }
                        if (!child.children || child.children.length == 0) {
                            if (DEBUG) {
                                egret.$warn(2102, this.currentClassName, getPropertyStr(child));
                            }
                            continue;
                        }
                        if (DEBUG) {
                            var errorInfo = getPropertyStr(child);
                        }
                        this.addChildrenToProp(child.children, type, prop, cb, varName, errorInfo, propList, node);
                    }
                    else {
                        directChild.push(child);
                    }
                }
                if (directChild.length == 0)
                    return;
                var defaultProp = sys.exmlConfig.getDefaultPropById(node.localName, node.namespace);
                var defaultType = sys.exmlConfig.getPropertyType(defaultProp, className);
                if (DEBUG) {
                    var errorInfo = getPropertyStr(directChild[0]);
                }
                if (!defaultProp || !defaultType) {
                    if (DEBUG) {
                        egret.$error(2012, this.currentClassName, errorInfo);
                    }
                    return;
                }
                this.addChildrenToProp(directChild, defaultType, defaultProp, cb, varName, errorInfo, propList, node);
            };
            /**
             * @private
             * 解析内部类节点，并返回类名。
             */
            p.parseInnerClass = function (node) {
                var parser = exmlParserPool.pop();
                if (!parser) {
                    parser = new EXMLParser();
                }
                var innerClassName = this.currentClass.className + "$" + node.localName + innerClassCount++;
                var innerClass = parser.parseClass(node, innerClassName);
                this.currentClass.addInnerClass(innerClass);
                exmlParserPool.push(parser);
                return innerClassName;
            };
            /**
             * @private
             * 添加多个子节点到指定的属性
             */
            p.addChildrenToProp = function (children, type, prop, cb, varName, errorInfo, propList, node) {
                var childFunc = "";
                var childLength = children.length;
                if (childLength > 1) {
                    if (type != TYPE_ARRAY) {
                        if (DEBUG) {
                            egret.$error(2011, this.currentClassName, prop, errorInfo);
                        }
                        return;
                    }
                    var values = [];
                    for (var j = 0; j < childLength; j++) {
                        var item = children[j];
                        if (item.nodeType != 1) {
                            continue;
                        }
                        childFunc = this.createFuncForNode(item);
                        var childClassName = this.getClassNameOfNode(item);
                        if (!this.isStateNode(item))
                            values.push(childFunc);
                    }
                    childFunc = "[" + values.join(",") + "]";
                }
                else {
                    var firstChild = children[0];
                    if (type == TYPE_ARRAY) {
                        if (firstChild.localName == TYPE_ARRAY) {
                            values = [];
                            if (firstChild.children) {
                                var len = firstChild.children.length;
                                for (var k = 0; k < len; k++) {
                                    item = firstChild.children[k];
                                    if (item.nodeType != 1) {
                                        continue;
                                    }
                                    childFunc = this.createFuncForNode(item);
                                    childClassName = this.getClassNameOfNode(item);
                                    if (!this.isStateNode(item))
                                        values.push(childFunc);
                                }
                            }
                            childFunc = "[" + values.join(",") + "]";
                        }
                        else {
                            childFunc = this.createFuncForNode(firstChild);
                            var childClassName = this.getClassNameOfNode(firstChild);
                            if (!this.isStateNode(firstChild))
                                childFunc = "[" + childFunc + "]";
                            else
                                childFunc = "[]";
                        }
                    }
                    else if (firstChild.nodeType == 1) {
                        if (type == TYPE_CLASS) {
                            if (childLength > 1) {
                                if (DEBUG) {
                                    egret.$error(2011, this.currentClassName, prop, errorInfo);
                                }
                                return;
                            }
                            childFunc = this.parseInnerClass(children[0]);
                        }
                        else {
                            var targetClass = this.getClassNameOfNode(firstChild);
                            childFunc = this.createFuncForNode(firstChild);
                        }
                    }
                    else {
                        childFunc = this.formatValue(prop, firstChild.text, node);
                    }
                }
                if (childFunc != "") {
                    if (childFunc.indexOf("()") == -1)
                        prop = this.formatKey(prop, childFunc);
                    if (propList.indexOf(prop) == -1) {
                        propList.push(prop);
                    }
                    else if (DEBUG) {
                        egret.$warn(2103, this.currentClassName, prop, errorInfo);
                    }
                    cb.addAssignment(varName, childFunc, prop);
                }
            };
            /**
             * @private
             * 指定节点是否是属性节点
             */
            p.isProperty = function (node) {
                if (node.hasOwnProperty("isProperty")) {
                    return node["isProperty"];
                }
                var result;
                var name = node.localName;
                if (!name || node.nodeType !== 1 || !node.parent || this.isBasicTypeData(name)) {
                    result = false;
                }
                else {
                    var parent = node.parent;
                    var index = name.indexOf(".");
                    if (index != -1) {
                        name = name.substr(0, index);
                    }
                    var className = sys.exmlConfig.getClassNameById(parent.localName, parent.namespace);
                    result = !!sys.exmlConfig.getPropertyType(name, className);
                }
                node["isProperty"] = result;
                return result;
            };
            /**
             * @private
             * 是否是普通赋值的key
             */
            p.isNormalKey = function (key) {
                if (!key || key.indexOf(".") != -1 || wingKeys.indexOf(key) != -1)
                    return false;
                return true;
            };
            /**
             * @private
             * 格式化key
             */
            p.formatKey = function (key, value) {
                if (value.indexOf("%") != -1) {
                    if (key == "height")
                        key = "percentHeight";
                    else if (key == "width")
                        key = "percentWidth";
                }
                return key;
            };
            /**
             * @private
             * 格式化值
             */
            p.formatValue = function (key, value, node, haveState, stateCallBack) {
                if (haveState === void 0) { haveState = false; }
                if (stateCallBack === void 0) { stateCallBack = null; }
                if (!value) {
                    value = "";
                }
                var stringValue = value; //除了字符串，其他类型都去除两端多余空格。
                value = value.trim();
                var className = this.getClassNameOfNode(node);
                var type = sys.exmlConfig.getPropertyType(key, className);
                if (DEBUG && !type) {
                    egret.$error(2005, this.currentClassName, key, toXMLString(node));
                }
                if (value.charAt(0) == "{" && value.charAt(value.length - 1) == "}") {
                    value = value.substr(1, value.length - 2).trim();
                    if (value.indexOf("this.") == 0) {
                        value = value.substring(5);
                    }
                    this.checkIdForState(node);
                    var firstKey = value.split(".")[0];
                    if (firstKey != HOST_COMPONENT && this.skinParts.indexOf(firstKey) == -1) {
                        value = HOST_COMPONENT + "." + value;
                    }
                    if (!haveState) {
                        this.bindings.push(new sys.EXBinding(node.attributes["id"], key, value));
                        value = "";
                    }
                    else {
                        if (stateCallBack) {
                            stateCallBack(true);
                        }
                    }
                }
                else if (type == RECTANGLE) {
                    if (DEBUG) {
                        var rect = value.split(",");
                        if (rect.length != 4 || isNaN(parseInt(rect[0])) || isNaN(parseInt(rect[1])) ||
                            isNaN(parseInt(rect[2])) || isNaN(parseInt(rect[3]))) {
                            egret.$error(2016, this.currentClassName, toXMLString(node));
                        }
                    }
                    value = "new " + RECTANGLE + "(" + value + ")";
                }
                else {
                    var orgValue = value;
                    switch (type) {
                        case TYPE_CLASS:
                            if (key == SKIN_NAME) {
                                value = this.formatString(stringValue);
                            }
                            break;
                        case "number":
                            if (value.indexOf("#") == 0)
                                value = "0x" + value.substring(1);
                            else if (value.indexOf("%") != -1)
                                value = (parseFloat(value.substr(0, value.length - 1))).toString();
                            break;
                        case "boolean":
                            value = (value == "false" || !value) ? "false" : "true";
                            break;
                        case "string":
                        case "any":
                            value = this.formatString(stringValue);
                            break;
                        default:
                            if (DEBUG) {
                                egret.$error(2008, this.currentClassName, "string", key + ":" + type, toXMLString(node));
                            }
                            break;
                    }
                }
                return value;
            };
            /**
             * @private
             * 格式化字符串
             */
            p.formatString = function (value) {
                value = this.unescapeHTMLEntity(value);
                value = value.split("\n").join("\\n");
                value = value.split("\r").join("\\n");
                value = value.split("\"").join("\\\"");
                value = "\"" + value + "\"";
                return value;
            };
            /**
             * @private
             /**
             * 转换HTML实体字符为普通字符
             */
            p.unescapeHTMLEntity = function (str) {
                if (!str)
                    return "";
                var length = htmlEntities.length;
                for (var i = 0; i < length; i++) {
                    var arr = htmlEntities[i];
                    var key = arr[0];
                    var value = arr[1];
                    str = str.split(value).join(key);
                }
                return str;
            };
            /**
             * @private
             * 创建构造函数
             */
            p.createConstructFunc = function () {
                var cb = new sys.EXCodeBlock;
                cb.addEmptyLine();
                var varName = "this";
                this.addAttributesToCodeBlock(cb, varName, this.currentXML);
                if (this.declarations) {
                    var children = this.declarations.children;
                    if (children && children.length > 0) {
                        var length = children.length;
                        for (var i = 0; i < length; i++) {
                            var decl = children[i];
                            if (decl.nodeType != 1) {
                                continue;
                            }
                            var funcName = this.createFuncForNode(decl);
                            if (funcName) {
                                cb.addCodeLine(funcName + ";");
                            }
                        }
                    }
                }
                this.initlizeChildNode(this.currentXML, cb, varName);
                var id;
                var stateIds = this.stateIds;
                if (stateIds.length > 0) {
                    length = stateIds.length;
                    for (var i = 0; i < length; i++) {
                        id = stateIds[i];
                        cb.addCodeLine("this." + id + "_i();");
                    }
                    cb.addEmptyLine();
                }
                var skinParts = this.skinParts;
                var skinPartStr = "[]";
                length = skinParts.length;
                if (length > 0) {
                    for (i = 0; i < length; i++) {
                        skinParts[i] = "\"" + skinParts[i] + "\"";
                    }
                    skinPartStr = "[" + skinParts.join(",") + "]";
                }
                var skinPartFunc = new sys.EXFunction();
                skinPartFunc.name = "skinParts";
                skinPartFunc.isGet = true;
                var skinPartCB = new sys.EXCodeBlock();
                skinPartCB.addReturn(skinPartStr);
                skinPartFunc.codeBlock = skinPartCB;
                this.currentClass.addFunction(skinPartFunc);
                this.currentXML.attributes.id = "";
                //生成视图状态代码
                this.createStates(this.currentXML);
                var states;
                var node = this.currentXML;
                var nodeClassName = this.getClassNameOfNode(node);
                var attributes = node.attributes;
                var keys = Object.keys(attributes);
                var keysLength = keys.length;
                for (var m = 0; m < keysLength; m++) {
                    var itemName = keys[m];
                    var value = attributes[itemName];
                    var index = itemName.indexOf(".");
                    if (index != -1) {
                        var key = itemName.substring(0, index);
                        key = this.formatKey(key, value);
                        var itemValue = this.formatValue(key, value, node);
                        if (!itemValue) {
                            continue;
                        }
                        var stateName = itemName.substr(index + 1);
                        states = this.getStateByName(stateName, node);
                        var stateLength = states.length;
                        if (stateLength > 0) {
                            for (i = 0; i < stateLength; i++) {
                                var state = states[i];
                                state.addOverride(new sys.EXSetProperty("", key, itemValue));
                            }
                        }
                    }
                }
                //打印视图状态初始化代码
                var stateCode = this.stateCode;
                length = stateCode.length;
                if (length > 0) {
                    var indentStr = "	";
                    cb.addCodeLine("this.states = [");
                    var first = true;
                    for (i = 0; i < length; i++) {
                        state = stateCode[i];
                        if (first)
                            first = false;
                        else
                            cb.addCodeLine(indentStr + ",");
                        var codes = state.toCode().split("\n");
                        var codeIndex = 0;
                        while (codeIndex < codes.length) {
                            var code = codes[codeIndex];
                            if (code)
                                cb.addCodeLine(indentStr + code);
                            codeIndex++;
                        }
                    }
                    cb.addCodeLine("];");
                }
                //生成绑定代码
                var bindings = this.bindings;
                length = bindings.length;
                if (length > 0) {
                    cb.addEmptyLine();
                    for (i = 0; i < length; i++) {
                        var binding = bindings[i];
                        cb.addCodeLine(binding.toCode());
                    }
                }
                this.currentClass.constructCode = cb;
            };
            /**
             * @private
             * 是否含有includeIn和excludeFrom属性
             */
            p.isStateNode = function (node) {
                var attributes = node.attributes;
                return attributes.hasOwnProperty("includeIn") || attributes.hasOwnProperty("excludeFrom");
            };
            /**
             * @private
             * 获取视图状态名称列表
             */
            p.getStateNames = function () {
                var root = this.currentXML;
                var className = sys.exmlConfig.getClassNameById(root.localName, root.namespace);
                var type = sys.exmlConfig.getPropertyType("states", className);
                if (type != TYPE_STATE) {
                    return;
                }
                var statesValue = root.attributes["states"];
                if (statesValue) {
                    delete root.attributes["states"];
                }
                var stateNames = this.stateNames;
                var stateChildren;
                var children = root.children;
                if (children) {
                    var length = children.length;
                    for (var i = 0; i < length; i++) {
                        var item = children[i];
                        if (item.nodeType == 1 &&
                            item.localName == "states") {
                            item.namespace = sys.NS_W;
                            stateChildren = item.children;
                            break;
                        }
                    }
                }
                if (!stateChildren && !statesValue) {
                    return;
                }
                if (DEBUG) {
                    if (stateChildren && stateChildren.length == 0) {
                        egret.$warn(2102, this.currentClassName, getPropertyStr(item));
                    }
                    if (stateChildren && statesValue) {
                        egret.$warn(2103, this.currentClassName, "states", getPropertyStr(item));
                    }
                }
                if (statesValue) {
                    var states = statesValue.split(",");
                    length = states.length;
                    for (var i = 0; i < length; i++) {
                        var stateName = states[i].trim();
                        if (!stateName) {
                            continue;
                        }
                        if (stateNames.indexOf(stateName) == -1) {
                            stateNames.push(stateName);
                        }
                        this.stateCode.push(new sys.EXState(stateName));
                    }
                    return;
                }
                length = stateChildren.length;
                for (i = 0; i < length; i++) {
                    var state = stateChildren[i];
                    if (state.nodeType != 1) {
                        continue;
                    }
                    var stateGroups = [];
                    var attributes = state.attributes;
                    if (attributes["stateGroups"]) {
                        var groups = attributes.stateGroups.split(",");
                        var len = groups.length;
                        for (var j = 0; j < len; j++) {
                            var group = groups[j].trim();
                            if (group) {
                                if (stateNames.indexOf(group) == -1) {
                                    stateNames.push(group);
                                }
                                stateGroups.push(group);
                            }
                        }
                    }
                    stateName = attributes.name;
                    if (stateNames.indexOf(stateName) == -1) {
                        stateNames.push(stateName);
                    }
                    this.stateCode.push(new sys.EXState(stateName, stateGroups));
                }
            };
            /**
             * @private
             * 解析视图状态代码
             */
            p.createStates = function (parentNode) {
                var items = parentNode.children;
                if (!items) {
                    return;
                }
                var length = items.length;
                for (var i = 0; i < length; i++) {
                    var node = items[i];
                    if (node.nodeType != 1 || this.isInnerClass(node)) {
                        continue;
                    }
                    this.createStates(node);
                    if (node.namespace == sys.NS_W || !node.localName) {
                        continue;
                    }
                    if (this.isProperty(node)) {
                        var prop = node.localName;
                        var index = prop.indexOf(".");
                        var children = node.children;
                        if (index == -1 || !children || children.length == 0) {
                            continue;
                        }
                        var stateName = prop.substring(index + 1);
                        prop = prop.substring(0, index);
                        var className = this.getClassNameOfNode(parentNode);
                        var type = sys.exmlConfig.getPropertyType(prop, className);
                        if (DEBUG) {
                            if (type == TYPE_ARRAY) {
                                egret.$error(2013, this.currentClassName, getPropertyStr(node));
                            }
                            if (children.length > 1) {
                                egret.$error(2011, this.currentClassName, prop, getPropertyStr(node));
                            }
                        }
                        var firstChild = children[0];
                        var value;
                        if (firstChild.nodeType == 1) {
                            this.createFuncForNode(firstChild);
                            this.checkIdForState(firstChild);
                            value = "this." + firstChild.attributes.id;
                        }
                        else {
                            value = this.formatValue(prop, firstChild.text, parentNode);
                        }
                        states = this.getStateByName(stateName, node);
                        var l = states.length;
                        if (l > 0) {
                            for (var j = 0; j < l; j++) {
                                state = states[j];
                                state.addOverride(new sys.EXSetProperty(parentNode.attributes.id, prop, value));
                            }
                        }
                    }
                    else if (this.containsState(node)) {
                        var attributes = node.attributes;
                        var id = attributes.id;
                        var nodeClassName = this.getClassNameOfNode(node);
                        this.checkIdForState(node);
                        var stateName;
                        var states;
                        var state;
                        if (this.isStateNode(node)) {
                            var propertyName = "";
                            var parent = node.parent;
                            if (parent.localName == TYPE_ARRAY)
                                parent = parent.parent;
                            if (parent && parent.parent) {
                                if (this.isProperty(parent))
                                    parent = parent.parent;
                            }
                            if (parent && parent != this.currentXML) {
                                propertyName = parent.attributes.id;
                                this.checkIdForState(parent);
                            }
                            var positionObj = this.findNearNodeId(node);
                            var stateNames = [];
                            if (attributes.includeIn) {
                                stateNames = attributes.includeIn.split(",");
                            }
                            else {
                                var excludeNames = attributes.excludeFrom.split(",");
                                var stateLength = excludeNames.length;
                                for (var j = 0; j < stateLength; j++) {
                                    var name = excludeNames[j];
                                    this.getStateByName(name, node); //检查exlcudeFrom是否含有未定义的视图状态名
                                }
                                stateLength = this.stateCode.length;
                                for (j = 0; j < stateLength; j++) {
                                    state = this.stateCode[j];
                                    if (excludeNames.indexOf(state.name) == -1) {
                                        stateNames.push(state.name);
                                    }
                                }
                            }
                            var len = stateNames.length;
                            for (var k = 0; k < len; k++) {
                                stateName = stateNames[k];
                                states = this.getStateByName(stateName, node);
                                if (states.length > 0) {
                                    var l = states.length;
                                    for (var j = 0; j < l; j++) {
                                        state = states[j];
                                        state.addOverride(new sys.EXAddItems(id, propertyName, positionObj.position, positionObj.relativeTo));
                                    }
                                }
                            }
                        }
                        var names = Object.keys(attributes);
                        var namesLength = names.length;
                        for (var m = 0; m < namesLength; m++) {
                            name = names[m];
                            var value = attributes[name];
                            var index = name.indexOf(".");
                            if (index != -1) {
                                var key = name.substring(0, index);
                                key = this.formatKey(key, value);
                                var isBinding = false;
                                var value = this.formatValue(key, value, node, true, function (vl) {
                                    isBinding = vl;
                                });
                                if (!value) {
                                    continue;
                                }
                                stateName = name.substr(index + 1);
                                states = this.getStateByName(stateName, node);
                                var l = states.length;
                                if (l > 0) {
                                    for (var j = 0; j < l; j++) {
                                        state = states[j];
                                        if (!isBinding) {
                                            state.addOverride(new sys.EXSetProperty(id, key, value));
                                        }
                                        else {
                                            state.addOverride(new sys.EXSetStateProperty(id, key, "\"" + value + "\""));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
            /**
             * @private
             * 检查指定的ID是否创建了类成员变量，若没创建则为其创建。
             */
            p.checkIdForState = function (node) {
                if (!node || this.currentClass.getVariableByName(node.attributes.id)) {
                    return;
                }
                this.createVarForNode(node);
                var id = node.attributes.id;
                var funcName = id + "_i";
                var func = this.currentClass.getFuncByName(funcName);
                if (!func)
                    return;
                var codeLine = "this." + id + " = t;";
                var cb = func.codeBlock;
                if (!cb)
                    return;
                if (!cb.containsCodeLine(codeLine)) {
                    cb.addCodeLineAt(codeLine, 1);
                }
            };
            /**
             * @private
             * 通过视图状态名称获取对应的视图状态
             */
            p.getStateByName = function (name, node) {
                var states = [];
                var stateCode = this.stateCode;
                var length = stateCode.length;
                for (var i = 0; i < length; i++) {
                    var state = stateCode[i];
                    if (state.name == name) {
                        if (states.indexOf(state) == -1)
                            states.push(state);
                    }
                    else if (state.stateGroups.length > 0) {
                        var found = false;
                        var len = state.stateGroups.length;
                        for (var j = 0; j < len; j++) {
                            var g = state.stateGroups[j];
                            if (g == name) {
                                found = true;
                                break;
                            }
                        }
                        if (found) {
                            if (states.indexOf(state) == -1)
                                states.push(state);
                        }
                    }
                }
                if (DEBUG && states.length == 0) {
                    egret.$error(2006, this.currentClassName, name, toXMLString(node));
                }
                return states;
            };
            /**
             * @private
             * 寻找节点的临近节点ID和位置
             */
            p.findNearNodeId = function (node) {
                var parentNode = node.parent;
                var targetId = "";
                var position;
                var index = -1;
                var preItem;
                var afterItem;
                var found = false;
                var children = parentNode.children;
                var length = children.length;
                for (var i = 0; i < length; i++) {
                    var item = children[i];
                    if (this.isProperty(item))
                        continue;
                    if (item == node) {
                        found = true;
                        index = i;
                    }
                    else {
                        if (found && !afterItem && !this.isStateNode(item)) {
                            afterItem = item;
                        }
                    }
                    if (!found && !this.isStateNode(item))
                        preItem = item;
                }
                if (index == 0) {
                    position = 0 /* FIRST */;
                    return { position: position, relativeTo: targetId };
                }
                if (index == length - 1) {
                    position = 1 /* LAST */;
                    return { position: position, relativeTo: targetId };
                }
                if (afterItem) {
                    position = 2 /* BEFORE */;
                    targetId = afterItem.attributes.id;
                    if (targetId) {
                        this.checkIdForState(afterItem);
                        return { position: position, relativeTo: targetId };
                    }
                }
                return { position: 1 /* LAST */, relativeTo: targetId };
            };
            /**
             * @private
             * 获取节点的完整类名，包括模块名
             */
            p.getClassNameOfNode = function (node) {
                var className = sys.exmlConfig.getClassNameById(node.localName, node.namespace);
                if (DEBUG && !className) {
                    egret.$error(2003, this.currentClassName, toXMLString(node));
                }
                return className;
            };
            return EXMLParser;
        })();
        sys.EXMLParser = EXMLParser;
        egret.registerClass(EXMLParser,'eui.sys.EXMLParser');
        if (DEBUG) {
            /**
             * 获取重复的ID名
             */
            function getRepeatedIds(xml) {
                var result = [];
                this.repeatedIdMap = {};
                this.getIds(xml, result);
                return result;
            }
            function getIds(xml, result) {
                if (xml.namespace != sys.NS_W && xml.attributes.id) {
                    var id = xml.attributes.id;
                    if (this.repeatedIdMap[id]) {
                        result.push(toXMLString(xml));
                    }
                    else {
                        this.repeatedIdMap[id] = true;
                    }
                }
                var children = xml.children;
                if (children) {
                    var length = children.length;
                    for (var i = 0; i < length; i++) {
                        var node = children[i];
                        if (this.isInnerClass(node)) {
                            continue;
                        }
                        this.getIds(node, result);
                    }
                }
            }
            function toXMLString(node) {
                if (!node) {
                    return "";
                }
                var str = "  at <" + node.name;
                var attributes = node.attributes;
                var keys = Object.keys(attributes);
                var length = keys.length;
                for (var i = 0; i < length; i++) {
                    var key = keys[i];
                    var value = attributes[key];
                    if (key == "id" && value.substring(0, 2) == "__") {
                        continue;
                    }
                    str += " " + key + "=\"" + value + "\"";
                }
                if (node.children.length == 0) {
                    str += "/>";
                }
                else {
                    str += ">";
                }
                return str;
            }
            /**
             * 清理声明节点里的状态标志
             */
            function checkDeclarations(declarations, list) {
                if (!declarations) {
                    return;
                }
                var children = declarations.children;
                if (children) {
                    var length = children.length;
                    for (var i = 0; i < length; i++) {
                        var node = children[i];
                        if (node.nodeType != 1) {
                            continue;
                        }
                        if (node.attributes.includeIn) {
                            list.push(toXMLString(node));
                        }
                        if (node.attributes.excludeFrom) {
                            list.push(toXMLString(node));
                        }
                        checkDeclarations(node, list);
                    }
                }
            }
            function getPropertyStr(child) {
                var parentStr = toXMLString(child.parent);
                var childStr = toXMLString(child).substring(5);
                return parentStr + "\n      \t" + childStr;
            }
        }
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        /**
         * @private
         * EUI 命名空间
         */
        sys.NS_S = "http://ns.egret.com/eui";
        /**
         * @private
         * Wing命名空间
         */
        sys.NS_W = "http://ns.egret.com/wing";
        var coreClasses = ["Point", "Matrix", "Rectangle"];
        var basicTypes = ["Array", "boolean", "string", "number"];
        var MODULE_NAME = "eui.";
        var hashCount = 0;
        var properties = {};
        /**
         * @private
         */
        var EXMLConfig = (function () {
            function EXMLConfig() {
            }
            var c=EXMLConfig,p=c.prototype;
            /**
             * @private
             */
            p.$describe = function (instance) {
                if (!instance) {
                    return null;
                }
                var prototype = Object.getPrototypeOf(instance);
                if (!prototype) {
                    return null;
                }
                var info;
                if (prototype.hasOwnProperty("__hashCode__")) {
                    info = properties[prototype.__hashCode__];
                    if (info) {
                        return info;
                    }
                }
                var superProto = Object.getPrototypeOf(prototype);
                if (!superProto) {
                    return null;
                }
                var superInstance = getInstanceOf(superProto.constructor);
                var superInfo = this.$describe(superInstance);
                if (superInfo) {
                    function factory() {
                    }
                    factory.prototype = superInfo;
                    info = new factory();
                }
                else {
                    info = {};
                }
                if (DEBUG) {
                    info.__class__ = prototype.constructor.name;
                }
                var keys = Object.keys(prototype).concat(Object.keys(instance));
                var length = keys.length;
                var meta = instance.__meta__;
                for (var i = 0; i < length; i++) {
                    var key = keys[i];
                    if (key == "constructor" || key.charAt(0) == "_" || key.charAt(0) == "$") {
                        continue;
                    }
                    var resultType;
                    if (meta && meta[key]) {
                        resultType = meta[key];
                    }
                    else if (isArray(instance[key])) {
                        resultType = "Array";
                    }
                    else {
                        resultType = typeof instance[key];
                        if (resultType == "function") {
                            continue;
                        }
                        if (basicTypes.indexOf(resultType) == -1) {
                            resultType = "any";
                        }
                    }
                    info[key] = resultType;
                }
                if (Object.getPrototypeOf(superProto)) {
                    prototype.__hashCode__ = hashCount++;
                    properties[prototype.__hashCode__] = info;
                }
                return info;
            };
            /**
             * @private
             * 根据类的短名ID和命名空间获取完整类名(以"."分隔)
             * @param id 类的短名ID
             * @param ns 命名空间
             */
            p.getClassNameById = function (id, ns) {
                if (ns == sys.NS_S) {
                    if (id == "Object") {
                        return id;
                    }
                    if (coreClasses.indexOf(id) != -1) {
                        return "egret." + id;
                    }
                }
                var name = "";
                if (basicTypes.indexOf(id) != -1) {
                    return id;
                }
                if (ns == sys.NS_W) {
                }
                else if (!ns || ns == sys.NS_S) {
                    name = MODULE_NAME + id;
                }
                else {
                    name = ns.substring(0, ns.length - 1) + id;
                }
                if (!getPrototypeOf(name)) {
                    name = "";
                }
                return name;
            };
            /**
             * @private
             * 根据ID获取对应的默认属性
             * @param id 类的短名ID
             * @param ns 命名空间
             * @return 默认属性名
             */
            p.getDefaultPropById = function (id, ns) {
                var className = this.getClassNameById(id, ns);
                var prototype = getPrototypeOf(className);
                var property;
                if (prototype) {
                    property = prototype.__defaultProperty__;
                }
                return property ? property : "";
            };
            /**
             * @private
             * 获取指定属性的类型,返回基本数据类型："boolean","string","number","any"。
             * @param property 属性名
             * @param className 要查询的完整类名
             */
            p.getPropertyType = function (property, className) {
                if (className == "Object") {
                    return "any";
                }
                var resultType = "";
                var prototype = getPrototypeOf(className);
                if (prototype) {
                    if (!prototype.hasOwnProperty("__hashCode__")) {
                        var clazz = egret.getDefinitionByName(className);
                        var instance = getInstanceOf(clazz);
                        if (!instance) {
                            if (DEBUG) {
                                egret.$warn(2104, className);
                            }
                            return resultType;
                        }
                        this.$describe(instance);
                    }
                    var info = properties[prototype.__hashCode__];
                    if (info) {
                        resultType = info[property];
                    }
                }
                return resultType;
            };
            return EXMLConfig;
        })();
        sys.EXMLConfig = EXMLConfig;
        egret.registerClass(EXMLConfig,'eui.sys.EXMLConfig');
        /**
         * @private
         * 判断一个对象是数组
         */
        function isArray(o) {
            return Object.prototype.toString.call(o) === '[object Array]';
        }
        /**
         * @private
         * 获取一个类名对应的prototype引用
         */
        function getPrototypeOf(className) {
            var clazz = egret.getDefinitionByName(className);
            if (!clazz) {
                return null;
            }
            return clazz.prototype;
        }
        /**
         * @private
         * 创建一个类名对应的实例
         */
        function getInstanceOf(clazz) {
            if (!clazz) {
                return null;
            }
            try {
                var instance = new clazz();
            }
            catch (e) {
                return null;
            }
            return instance;
        }
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
/// <reference path="EXMLParser.ts" />
var EXML;
(function (EXML) {
    var parser = new eui.sys.EXMLParser();
    var requestPool = [];
    var callBackMap = {};
    var parsedClasses = {};
    var $prefixURL = "";
    Object.defineProperty(EXML, "prefixURL", {
        get: function () { return $prefixURL; },
        set: function (value) { $prefixURL = value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @language en_US
     * Parsing a text of EXML file for a definition of class. You can declare the <code>class</code> property in the root
     * node of the EXML to register to the global as a class name.
     *
     * It will be fail to register and output a warning if the specified name already exists. You can get a definition
     * of a class through <code>egret.getDefinitionByName(className)</code>.
     *
     * @param text the text of a EXML file.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 解析一个 EXML 文件的文本内容为一个类定义。您可以在 EXML 文件的根节点上声明 class 属性作为要注册到全局的类名。
     * 若指定的类名已经存在，将会注册失败，并输出一个警告。注册成功后，您也可以通过 egret.getDefinitionByName(className) 方法获取这个 EXML 文件对应的类定义。
     *
     * @param text 要解析的 EXML 文件内容。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    function parse(text) {
        return parser.parse(text);
    }
    EXML.parse = parse;
    /**
     * @language en_US
     * Load and parse an external EXML file for a class definition. You can declare the <code>class</code> property in the root
     * node of the EXML to register to the global as a class name.
     *
     * It will be fail to register and output a warning if the specified name already exists. You can get a definition
     * of a class through <code>egret.getDefinitionByName(className)</code>.
     *
     * @param url the path of an EXML file
     * @param callBack method to invoke with an argument of the result when load and parse completed or failed. The argument will be
     * <code>undefined</code> if load or parse failed.
     * @param thisObject <code>this</code> object of callBack
     * @param useCache use cached EXML
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 加载并解析一个外部的 EXML 文件为一个类定义。您可以在 EXML 文件的根节点上声明 class 属性作为要注册到全局的类名。
     * 若指定的类名已经存在，将会注册失败，并输出一个警告。注册成功后，您也可以通过 egret.getDefinitionByName(className) 方法获取这个 EXML 文件对应的类定义。
     *
     * @param url 要加载的 EXML 文件路径
     * @param callBack 加载并解析完成后的回调函数，无论加载成功还是失败，此函数均会被回调。失败时将传入 undefined 作为回调函数参数。
     * @param thisObject 回调函数的 this 引用。
     * @param useCache 使用缓存的EXML
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    function load(url, callBack, thisObject, useCache) {
        if (useCache === void 0) { useCache = false; }
        if (DEBUG) {
            if (!url) {
                egret.$error(1003, "url");
            }
        }
        if (useCache && (url in parsedClasses)) {
            callBack && callBack.call(thisObject, parsedClasses[url], url);
            return;
        }
        var list = callBackMap[url];
        if (list) {
            list.push([callBack, thisObject]);
            return;
        }
        callBackMap[url] = [[callBack, thisObject]];
        request(url, $parseURLContent);
    }
    EXML.load = load;
    /**
     * @private
     */
    function $loadAll(urls, callBack, thisObject, useCache) {
        if (useCache === void 0) { useCache = false; }
        if (!urls || urls.length == 0) {
            callBack && callBack.call(thisObject, [], urls);
            return;
        }
        var exmlContents = [];
        urls.forEach(function (url) {
            var loaded = function (url, text) {
                exmlContents[url] = text;
                exmlContents.push(url);
                if (exmlContents.length == urls.length)
                    onLoadAllFinished(urls, exmlContents, callBack, thisObject);
            };
            if (useCache && (url in parsedClasses)) {
                loaded(url, "");
                return;
            }
            request(url, loaded);
        });
    }
    EXML.$loadAll = $loadAll;
    /**
     * @private
     */
    function onLoadAllFinished(urls, exmlContents, callBack, thisObject) {
        var clazzes = [];
        urls.forEach(function (url, i) {
            if ((url in parsedClasses) && !exmlContents[url]) {
                clazzes[i] = parsedClasses[url];
                return;
            }
            var text = exmlContents[url];
            var clazz = $parseURLContent(url, text);
            clazzes[i] = clazz;
        });
        callBack && callBack.call(thisObject, clazzes, urls);
    }
    /**
     * @private
     */
    function $parseURLContent(url, text) {
        if (text) {
            var clazz = parse(text);
        }
        if (url) {
            parsedClasses[url] = clazz;
            var list = callBackMap[url];
            delete callBackMap[url];
            var length = list ? list.length : 0;
            for (var i = 0; i < length; i++) {
                var arr = list[i];
                if (arr[0] && arr[1])
                    arr[0].call(arr[1], clazz, url);
            }
        }
        return clazz;
    }
    EXML.$parseURLContent = $parseURLContent;
    /**
     * @private
     */
    function request(url, callback) {
        var request = requestPool.pop();
        if (!request) {
            request = new egret.HttpRequest();
        }
        var onRequestLoaded = function (e) {
            request.removeEventListener(egret.Event.COMPLETE, onRequestLoaded, null);
            request.removeEventListener(egret.IOErrorEvent.IO_ERROR, onRequestLoaded, null);
            var text = e.type == egret.Event.COMPLETE ? request.response : "";
            requestPool.push(request);
            callback(url, text);
        };
        request.addEventListener(egret.Event.COMPLETE, onRequestLoaded, null);
        request.addEventListener(egret.IOErrorEvent.IO_ERROR, onRequestLoaded, null);
        var openUrl = url;
        if (url.indexOf("://") == -1) {
            openUrl = $prefixURL + url;
        }
        request.open(openUrl);
        request.responseType = egret.HttpResponseType.TEXT;
        request.send();
    }
})(EXML || (EXML = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015; Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms; with or without
//  modification; are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice; this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice; this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES; INCLUDING; BUT NOT LIMITED TO; THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT; INDIRECT;
//  INCIDENTAL; SPECIAL; EXEMPLARY; OR CONSEQUENTIAL DAMAGES (INCLUDING; BUT NOT
//  LIMITED TO; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE; DATA;
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY; WHETHER IN CONTRACT; STRICT LIABILITY; OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE;
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    egret.$locale_strings = egret.$locale_strings || {};
    egret.$locale_strings["en_US"] = egret.$locale_strings["en_US"] || {};
    var locale_strings = egret.$locale_strings["en_US"];
    //2000-2999
    locale_strings[2001] = "EXML parsing error {0}: EXML file can't be found ";
    locale_strings[2002] = "EXML parsing error : invalid XML file:\n{0}";
    locale_strings[2003] = "EXML parsing error {0}: the class definitions corresponding to nodes can't be found  \n {1}";
    locale_strings[2004] = "EXML parsing error {0}: nodes cannot contain id property with the same name \n {1}";
    locale_strings[2005] = "EXML parsing error {0}: property with the name of '{1}' does not exist on the node, or the property does not have a default value: \n {2}";
    locale_strings[2006] = "EXML parsing error {0}: undefined view state name: '{1}' \n {2}";
    locale_strings[2007] = "EXML parsing error {0}: only UIComponent objects within the container can use the includeIn and excludeFrom properties\n {1}";
    locale_strings[2008] = "EXML parsing error {0}: fail to assign values of '{1}' class to property: '{2}' \n {3}";
    locale_strings[2009] = "EXML parsing error {0}: only one ID can be referenced in the node property value '{}' label; and complex expression is not allowed to use \n {1}";
    locale_strings[2010] = "EXML parsing error {0}: ID referenced by property: '{1}':  '{2}' does not exist \n {3}";
    locale_strings[2011] = "EXML parsing error {0}: fail to assign more than one child nodes to the same property: '{1}' \n {2}";
    locale_strings[2012] = "EXML parsing error {0}: no default property exists on the node; and you must explicitly declare the property name that the child node  is assigned to \n {1}";
    locale_strings[2013] = "EXML parsing error {0}: view state grammar is not allowed to use on property nodes of Array class \n {1} ";
    locale_strings[2014] = "EXML parsing error {0}: assigning the skin class itself to the node property is not allowed \n {1}";
    locale_strings[2015] = "EXML parsing error {0}: class definition referenced by node: {1} does not exist \n {2}";
    locale_strings[2016] = "EXML parsing error {0}: format error of 'scale9Grid' property value on the node: {1}";
    locale_strings[2017] = "EXML parsing error {0}: namespace prefix missing on the node: {1}";
    locale_strings[2018] = "EXML parsing error {0}: format error of 'skinName' property value on the node: {1}";
    locale_strings[2019] = "EXML parsing error {0}: the container’s child item must be visible nodes: {1}";
    locale_strings[2020] = "EXML parsing error {0}: for child nodes in w: Declarations, the includeIn and excludeFrom properties are not allowed to use \n {1}";
    locale_strings[2101] = "EXML parsing warnning : fail to register the class property : {0},there is already a class with the same name in the global,please try to rename the class name for the exml. \n {1}";
    locale_strings[2102] = "EXML parsing warnning {0}: no child node can be found on the property code \n {1}";
    locale_strings[2103] = "EXML parsing warnning {0}: the same property '{1}' on the node is assigned multiple times \n {2}";
    locale_strings[2104] = "Instantiate class {0} error，the parameters of its constructor method must be empty.";
    locale_strings[2201] = "BasicLayout doesn't support virtualization.";
    locale_strings[2202] = "parse skinName error，the parsing result of skinName must be a instance of eui.Skin.";
    locale_strings[2203] = "Could not find the skin class '{0}'。";
    locale_strings[2301] = "parse source failed，could not find asset from URL：{0} .";
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015; Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms; with or without
//  modification; are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice; this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice; this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES; INCLUDING; BUT NOT LIMITED TO; THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT; INDIRECT;
//  INCIDENTAL; SPECIAL; EXEMPLARY; OR CONSEQUENTIAL DAMAGES (INCLUDING; BUT NOT
//  LIMITED TO; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE; DATA;
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY; WHETHER IN CONTRACT; STRICT LIABILITY; OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE;
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    egret.$locale_strings = egret.$locale_strings || {};
    egret.$locale_strings["zh_CN"] = egret.$locale_strings["zh_CN"] || {};
    var locale_strings = egret.$locale_strings["zh_CN"];
    //2000-2999
    //EXML报错信息
    locale_strings[2001] = "EXML解析错误 {0}: 找不到EXML文件";
    locale_strings[2002] = "EXML解析错误: 不是有效的XML文件:\n{0}";
    locale_strings[2003] = "EXML解析错误 {0}: 无法找到节点所对应的类定义\n{1}";
    locale_strings[2004] = "EXML解析错误 {0}: 节点不能含有同名的id属性\n{1}";
    locale_strings[2005] = "EXML解析错误 {0}: 节点上不存在名为'{1}'的属性，或者该属性没有初始值:\n{2}";
    locale_strings[2006] = "EXML解析错误 {0}: 未定义的视图状态名称:'{1}'\n{2}";
    locale_strings[2007] = "EXML解析错误 {0}: 只有处于容器内的 UIComponent 对象可以使用includeIn和excludeFrom属性\n{1}";
    locale_strings[2008] = "EXML解析错误 {0}: 无法将'{1}'类型的值赋给属性:'{2}'\n{3}";
    locale_strings[2009] = "EXML解析错误 {0}: 在节点属性值的‘{}’标签内只能引用一个ID，不允许使用复杂表达式\n{1}";
    locale_strings[2010] = "EXML解析错误 {0}: 属性:'{1}'所引用的ID: '{2}'不存在\n{3}";
    locale_strings[2011] = "EXML解析错误 {0}: 无法将多个子节点赋值给同一个属性:'{1}'\n{2}";
    locale_strings[2012] = "EXML解析错误 {0}: 节点上不存在默认属性，必须显式声明子节点要赋值到的属性名\n{1}";
    locale_strings[2013] = "EXML解析错误 {0}: 类型为Array的属性节点上不允许使用视图状态语法\n{1}";
    locale_strings[2014] = "EXML解析错误 {0}: 不允许将皮肤类自身赋值给节点属性\n{1}";
    locale_strings[2015] = "EXML解析错误 {0}: 节点引用的类定义:{1}不存在\n{2}";
    locale_strings[2016] = "EXML解析错误 {0}: 节点上'scale9Grid'属性值的格式错误:{1}";
    locale_strings[2017] = "EXML解析错误 {0}: 节点上缺少命名空间前缀:{1}";
    locale_strings[2018] = "EXML解析错误 {0}: 节点上'skinName'属性值的格式错误:{1}";
    locale_strings[2019] = "EXML解析错误 {0}: 容器的子项必须是可视节点:{1}";
    locale_strings[2020] = "EXML解析错误 {0}: 在w:Declarations内的子节点，不允许使用includeIn和excludeFrom属性\n{1}";
    //EXML警告信息
    locale_strings[2101] = "EXML解析警告: 在EXML根节点上声明的 class 属性: {0} 注册失败，所对应的类已经存在，请尝试重命名要注册的类名。\n{1}";
    locale_strings[2102] = "EXML解析警告 {0}: 在属性节点上找不到任何子节点\n{1}";
    locale_strings[2103] = "EXML解析警告 {0}: 节点上的同一个属性'{1}'被多次赋值\n{2}";
    locale_strings[2104] = "无法实例化组件：{0} ，请检查该组件构造函数参数是否为空。";
    //EUI 报错与警告信息
    locale_strings[2201] = "BasicLayout 不支持虚拟化。";
    locale_strings[2202] = "皮肤解析出错，属性 skinName 的值必须要能够解析为一个 eui.Skin 的实例。";
    locale_strings[2203] = "找不到指定的皮肤类 '{0}'。";
    locale_strings[2301] = "素材解析失败，找不到URL：{0} 所对应的资源。";
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The BasicLayout class arranges the layout elements according to their individual settings,
     * independent of each-other. BasicLayout, also called absolute layout, requires that you
     * explicitly position each container child.
     * You can use the <code>x</code> and <code>y</code> properties of the child,
     * or constraints to position each child.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/BasicLayoutExample.ts
     */
    /**
     * @language zh_CN
     * BasicLayout 类根据其各个设置彼此独立地排列布局元素。
     * BasicLayout（也称为绝对布局）要求显式定位每个容器子代。
     * 可以使用子代的 <code>x</code> 和 <code>y</code> 属性，或使用约束来定位每个子代。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/BasicLayoutExample.ts
     */
    var BasicLayout = (function (_super) {
        __extends(BasicLayout, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function BasicLayout() {
            _super.call(this);
        }
        var c=BasicLayout,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            _super.prototype.measure.call(this);
            eui.sys.measure(this.$target);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
            var target = this.$target;
            var pos = eui.sys.updateDisplayList(target, unscaledWidth, unscaledHeight);
            target.setContentSize(Math.ceil(pos.x), Math.ceil(pos.y));
        };
        return BasicLayout;
    })(eui.LayoutBase);
    eui.BasicLayout = BasicLayout;
    egret.registerClass(BasicLayout,'eui.BasicLayout');
    if (DEBUG) {
        Object.defineProperty(BasicLayout.prototype, "useVirtualLayout", {
            /**
             * 此布局不支持虚拟布局，设置这个属性无效
             */
            get: function () {
                return this.$useVirtualLayout;
            },
            set: function (value) {
                egret.$error(2201);
            },
            enumerable: true,
            configurable: true
        });
    }
})(eui || (eui = {}));
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        var UIComponentClass = "eui.UIComponent";
        /**
         * @private
         * 一个工具方法，使用BasicLayout规则测量目标对象。
         */
        function measure(target) {
            if (!target) {
                return;
            }
            var width = 0;
            var height = 0;
            var bounds = egret.$TempRectangle;
            var count = target.numChildren;
            for (var i = 0; i < count; i++) {
                var layoutElement = (target.getChildAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                var values = layoutElement.$UIComponent;
                var hCenter = values[4 /* horizontalCenter */];
                var vCenter = values[5 /* verticalCenter */];
                var left = values[0 /* left */];
                var right = values[1 /* right */];
                var top = values[2 /* top */];
                var bottom = values[3 /* bottom */];
                var extX;
                var extY;
                layoutElement.getPreferredBounds(bounds);
                if (!isNaN(left) && !isNaN(right)) {
                    extX = left + right;
                }
                else if (!isNaN(hCenter)) {
                    extX = Math.abs(hCenter) * 2;
                }
                else if (!isNaN(left) || !isNaN(right)) {
                    extX = isNaN(left) ? 0 : left;
                    extX += isNaN(right) ? 0 : right;
                }
                else {
                    extX = bounds.x;
                }
                if (!isNaN(top) && !isNaN(bottom)) {
                    extY = top + bottom;
                }
                else if (!isNaN(vCenter)) {
                    extY = Math.abs(vCenter) * 2;
                }
                else if (!isNaN(top) || !isNaN(bottom)) {
                    extY = isNaN(top) ? 0 : top;
                    extY += isNaN(bottom) ? 0 : bottom;
                }
                else {
                    extY = bounds.y;
                }
                var preferredWidth = bounds.width;
                var preferredHeight = bounds.height;
                width = Math.ceil(Math.max(width, extX + preferredWidth));
                height = Math.ceil(Math.max(height, extY + preferredHeight));
            }
            target.setMeasuredSize(width, height);
        }
        sys.measure = measure;
        /**
         * @private
         * 一个工具方法，使用BasicLayout规则布局目标对象。
         */
        function updateDisplayList(target, unscaledWidth, unscaledHeight) {
            if (!target)
                return;
            var count = target.numChildren;
            var maxX = 0;
            var maxY = 0;
            var bounds = egret.$TempRectangle;
            for (var i = 0; i < count; i++) {
                var layoutElement = (target.getChildAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                var values = layoutElement.$UIComponent;
                var hCenter = values[4 /* horizontalCenter */];
                var vCenter = values[5 /* verticalCenter */];
                var left = values[0 /* left */];
                var right = values[1 /* right */];
                var top = values[2 /* top */];
                var bottom = values[3 /* bottom */];
                var percentWidth = values[6 /* percentWidth */];
                var percentHeight = values[7 /* percentHeight */];
                var childWidth = NaN;
                var childHeight = NaN;
                if (!isNaN(left) && !isNaN(right)) {
                    childWidth = unscaledWidth - right - left;
                }
                else if (!isNaN(percentWidth)) {
                    childWidth = Math.round(unscaledWidth * Math.min(percentWidth * 0.01, 1));
                }
                if (!isNaN(top) && !isNaN(bottom)) {
                    childHeight = unscaledHeight - bottom - top;
                }
                else if (!isNaN(percentHeight)) {
                    childHeight = Math.round(unscaledHeight * Math.min(percentHeight * 0.01, 1));
                }
                layoutElement.setLayoutBoundsSize(childWidth, childHeight);
                layoutElement.getLayoutBounds(bounds);
                var elementWidth = bounds.width;
                var elementHeight = bounds.height;
                var childX = NaN;
                var childY = NaN;
                if (!isNaN(hCenter))
                    childX = Math.round((unscaledWidth - elementWidth) / 2 + hCenter);
                else if (!isNaN(left))
                    childX = left;
                else if (!isNaN(right))
                    childX = unscaledWidth - elementWidth - right;
                else
                    childX = bounds.x;
                if (!isNaN(vCenter))
                    childY = Math.round((unscaledHeight - elementHeight) / 2 + vCenter);
                else if (!isNaN(top))
                    childY = top;
                else if (!isNaN(bottom))
                    childY = unscaledHeight - elementHeight - bottom;
                else
                    childY = bounds.y;
                layoutElement.setLayoutBoundsPosition(childX, childY);
                maxX = Math.max(maxX, childX + elementWidth);
                maxY = Math.max(maxY, childY + elementHeight);
            }
            return egret.$TempPoint.setTo(maxX, maxY);
        }
        sys.updateDisplayList = updateDisplayList;
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
var eui;
(function (eui) {
    var ScrollBasicLayout = (function (_super) {
        __extends(ScrollBasicLayout, _super);
        function ScrollBasicLayout() {
            _super.call(this);
        }
        var c=ScrollBasicLayout,p=c.prototype;
        p.getElementBoundsLeftOfScrollRect = function (scrollRect) {
            var bounds = new egret.Rectangle();
            bounds.left = scrollRect.left - 20;
            bounds.right = scrollRect.left;
            return bounds;
        };
        p.getElementBoundsRightOfScrollRect = function (scrollRect) {
            var bounds = new egret.Rectangle();
            bounds.left = scrollRect.right;
            bounds.right = scrollRect.right + 20;
            return bounds;
        };
        p.getElementBoundsAboveScrollRect = function (scrollRect) {
            var bounds = new egret.Rectangle();
            bounds.top = scrollRect.top - 20;
            bounds.bottom = scrollRect.top;
            return bounds;
        };
        p.getElementBoundsBelowScrollRect = function (scrollRect) {
            var bounds = new egret.Rectangle();
            bounds.top = scrollRect.bottom;
            bounds.bottom = scrollRect.bottom + 20;
            return bounds;
        };
        return ScrollBasicLayout;
    })(eui.BasicLayout);
    eui.ScrollBasicLayout = ScrollBasicLayout;
    egret.registerClass(ScrollBasicLayout,'eui.ScrollBasicLayout');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var AccordionLayout = (function (_super) {
        __extends(AccordionLayout, _super);
        function AccordionLayout() {
            _super.call(this);
        }
        var c=AccordionLayout,p=c.prototype;
        p.measure = function () {
            _super.prototype.measure.call(this);
            var target = this.target;
            var length = target.numElements;
            var maxWidth = 0;
            var maxHeight = 0;
            var bounds = egret.$TempRectangle;
            for (var i = 0; i < length; i++) {
                var element = target.getElementAt(i);
                if (!element || !element.includeInLayout) {
                    continue;
                }
                var button = target.getChildAt(i * 2 + 1);
                button.getPreferredBounds(bounds);
                maxWidth = Math.max(maxWidth, bounds.width);
                maxHeight += bounds.height;
                if (button.selected) {
                    element.getPreferredBounds(bounds);
                    maxWidth = Math.max(maxWidth, bounds.width);
                    maxHeight += bounds.height;
                }
            }
            target.setMeasuredSize(maxWidth, maxHeight);
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            var target = this.target;
            var length = target.numElements;
            var yPos = 0;
            var maxWidth = 0;
            var maxHeight = 0;
            var bounds = egret.$TempRectangle;
            for (var i = 0; i < length; i++) {
                var element = target.getElementAt(i);
                if (!element || !element.includeInLayout) {
                    continue;
                }
                var button = target.getChildAt(i * 2 + 1);
                button.getPreferredBounds(bounds);
                maxWidth = Math.max(maxWidth, bounds.width, button.minWidth);
                if (button.selected) {
                    element.getPreferredBounds(bounds);
                    maxWidth = Math.max(maxWidth, bounds.width, element.minWidth);
                }
            }
            var layoutWidth = Math.max(unscaledWidth, maxWidth);
            for (i = 0; i < length; i++) {
                element = target.getElementAt(i);
                if (!element || !element.includeInLayout) {
                    continue;
                }
                button = target.getChildAt(i * 2 + 1);
                button.visible = element.includeInLayout;
                button.setLayoutBoundsSize(Math.min(layoutWidth, button.maxWidth), NaN);
                button.setLayoutBoundsPosition(0, yPos);
                button.getLayoutBounds(bounds);
                var layoutBoundsHeight = bounds.height;
                yPos += layoutBoundsHeight;
                maxHeight += layoutBoundsHeight;
                if (button.selected) {
                    element.setLayoutBoundsSize(Math.min(layoutWidth, element.maxWidth), NaN);
                    element.setLayoutBoundsPosition(0, yPos);
                    element.getLayoutBounds(bounds);
                    var layoutBoundsHeight_1 = bounds.height;
                    yPos += layoutBoundsHeight_1;
                    maxHeight += layoutBoundsHeight_1;
                }
            }
            target.setContentSize(Math.ceil(maxWidth), Math.ceil(maxHeight));
        };
        return AccordionLayout;
    })(eui.ScrollBasicLayout);
    eui.AccordionLayout = AccordionLayout;
    egret.registerClass(AccordionLayout,'eui.AccordionLayout');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     *
     * @author
     *
     */
    var AttributeQueueLayout = (function (_super) {
        __extends(AttributeQueueLayout, _super);
        function AttributeQueueLayout() {
            _super.call(this);
            /**
             * 横向间隔
             */
            this.hGap = 0;
            /**
             * 纵向间隔
             */
            this.vGap = 0;
            /**
             * 右栏之后再水平中，纵向居中排列的附加控件个数
             */
            this.numAdditional = 0;
            /**
             * 左栏之前在水平居中，纵向居中排列的附加控件个数
             */
            this.numHead = 0;
            /**
             * 行高，如果设置了这值则会固定每行的行高。
             */
            this.rowHeight = NaN;
            this._paddingTop = 0;
            this._paddingBottom = 0;
        }
        var c=AttributeQueueLayout,p=c.prototype;
        d(p, "paddingTop"
            /**
             * 容器的顶边缘与第一个布局元素的顶边缘之间的像素数,若为NaN将使用padding的值，默认值：0。
             */
            ,function () {
                return this._paddingTop;
            }
            ,function (value) {
                if (this._paddingTop == value)
                    return;
                this._paddingTop = value;
                this.invalidateTargetSizeAndDisplayList();
            }
        );
        d(p, "paddingBottom"
            /**
             * 容器的底边缘与最后一个布局元素的底边缘之间的像素数,若为NaN将使用padding的值，默认值：0。
             */
            ,function () {
                return this._paddingBottom;
            }
            ,function (value) {
                if (this._paddingBottom == value)
                    return;
                this._paddingBottom = value;
                this.invalidateTargetSizeAndDisplayList();
            }
        );
        /**
         * 标记目标容器的尺寸和显示列表失效
         */
        p.invalidateTargetSizeAndDisplayList = function () {
            if (this.target) {
                this.target.invalidateSize();
                this.target.invalidateDisplayList();
            }
        };
        p.measure = function () {
            var target = this.target;
            var length = target.numElements;
            var elements = [];
            for (var i = 0; i < length; i++) {
                var elemtnt = target.getElementAt(i);
                if (elemtnt && elemtnt.includeInLayout) {
                    elements.push(target.getElementAt(i));
                }
            }
            length = elements.length;
            if (length % (2 + this.numHead + this.numAdditional) != 0) {
                _super.prototype.measure.call(this);
                return;
            }
            var maxWidth = 0;
            var maxHeight = 0;
            var headMaxWidth = 0;
            var firstMaxWidth = 0;
            var secondMaxWidth = 0;
            var additionalMaxWidth = 0;
            var headMaxWidthArr = [];
            for (i = 0; i < this.numHead; i++) {
                headMaxWidthArr.push(0);
            }
            var additionalMaxWidthArr = [];
            for (i = 0; i < this.numAdditional; i++) {
                additionalMaxWidthArr.push(0);
            }
            for (i = 0; i < length; i += 2 + this.numHead + this.numAdditional) {
                var index = 0;
                for (var j = i; j < i + this.numHead; j++) {
                    if (elements[j].preferredWidth > headMaxWidthArr[index]) {
                        headMaxWidthArr[index] = elements[j].preferredWidth;
                    }
                    index++;
                }
                if (elements[i + this.numHead].preferredWidth > firstMaxWidth) {
                    firstMaxWidth = elements[i + this.numHead].preferredWidth;
                }
                if (elements[i + this.numHead + 1].preferredWidth > secondMaxWidth) {
                    secondMaxWidth = elements[i + this.numHead + 1].preferredWidth;
                }
                index = 0;
                for (j = i + this.numHead + 2; j < i + this.numHead + 2 + this.numAdditional; j++) {
                    if (elements[j].preferredWidth > additionalMaxWidthArr[index]) {
                        additionalMaxWidthArr[index] = elements[j].preferredWidth;
                    }
                    index++;
                }
            }
            for (i = 0; i < headMaxWidthArr.length; i++) {
                headMaxWidth += headMaxWidthArr[i];
            }
            headMaxWidth += this.numHead * this.hGap;
            for (i = 0; i < additionalMaxWidthArr.length; i++) {
                additionalMaxWidth += additionalMaxWidthArr[i];
            }
            additionalMaxWidth += this.numAdditional * this.hGap;
            var preferrRect = new egret.Rectangle();
            this.target.getPreferredBounds(preferrRect);
            if (secondMaxWidth < preferrRect.width - firstMaxWidth - additionalMaxWidth - this.hGap - headMaxWidth) {
                secondMaxWidth = preferrRect.width - firstMaxWidth - additionalMaxWidth - this.hGap - headMaxWidth;
            }
            var currentH = this.paddingTop;
            for (i = 0; i < length; i += 2 + this.numAdditional + this.numHead) {
                //当前行的最大高度
                var maxH = NaN;
                if (isNaN(this.rowHeight)) {
                    for (j = i; j < i + 2 + this.numAdditional + this.numHead; j++) {
                        if (isNaN(maxH))
                            maxH = elements[j].preferredHeight;
                        if (elements[j].preferredHeight > maxH)
                            maxH = elements[j].preferredHeight;
                    }
                }
                else {
                    maxH = this.rowHeight;
                }
                currentH += maxH + this.vGap;
            }
            currentH -= this.vGap;
            currentH += this.paddingBottom;
            if (currentH < 0)
                currentH = 0;
            target.setMeasuredSize(headMaxWidth + firstMaxWidth + this.hGap + secondMaxWidth + additionalMaxWidth, currentH);
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            var target = this.target;
            var length = target.numElements;
            var elements = [];
            for (var i = 0; i < length; i++) {
                var elemtnt = target.getElementAt(i);
                if (elemtnt && elemtnt.includeInLayout) {
                    elements.push(target.getElementAt(i));
                }
            }
            length = elements.length;
            if (length % (2 + this.numHead + this.numAdditional) != 0) {
                _super.prototype.updateDisplayList.call(this, unscaledWidth, unscaledHeight);
                return;
            }
            var maxWidth = 0;
            var maxHeight = 0;
            var headMaxWidth = 0;
            var firstMaxWidth = 0;
            var secondMaxWidth = 0;
            var additionalMaxWidth = 0;
            var layoutBoundsX;
            var layoutBoundsY;
            var layoutBoundsH;
            var layoutBoundsW;
            var headMaxWidthArr = [];
            for (i = 0; i < this.numHead; i++) {
                headMaxWidthArr.push(0);
            }
            var additionalMaxWidthArr = [];
            for (i = 0; i < this.numAdditional; i++) {
                additionalMaxWidthArr.push(0);
            }
            for (i = 0; i < length; i += 2 + this.numHead + this.numAdditional) {
                var index = 0;
                for (var j = i; j < i + this.numHead; j++) {
                    if (elements[j].preferredWidth > headMaxWidthArr[index]) {
                        headMaxWidthArr[index] = elements[j].preferredWidth;
                    }
                    index++;
                }
                if (elements[i + this.numHead].preferredWidth > firstMaxWidth) {
                    firstMaxWidth = elements[i + this.numHead].preferredWidth;
                }
                if (elements[i + this.numHead + 1].preferredWidth > secondMaxWidth) {
                    secondMaxWidth = elements[i + this.numHead + 1].preferredWidth;
                }
                index = 0;
                for (j = i + this.numHead + 2; j < i + this.numHead + 2 + this.numAdditional; j++) {
                    if (elements[j].preferredWidth > additionalMaxWidthArr[index]) {
                        additionalMaxWidthArr[index] = elements[j].preferredWidth;
                    }
                    index++;
                }
            }
            for (i = 0; i < headMaxWidthArr.length; i++) {
                headMaxWidth += headMaxWidthArr[i];
            }
            headMaxWidth += this.numHead * this.hGap;
            for (i = 0; i < additionalMaxWidthArr.length; i++) {
                additionalMaxWidth += additionalMaxWidthArr[i];
            }
            additionalMaxWidth += this.numAdditional * this.hGap;
            var layoutRect = new egret.Rectangle();
            target.getLayoutBounds(layoutRect);
            if (secondMaxWidth < layoutRect.width - firstMaxWidth - additionalMaxWidth - this.hGap - headMaxWidth) {
                secondMaxWidth = layoutRect.width - firstMaxWidth - additionalMaxWidth - this.hGap - headMaxWidth;
            }
            var currentH = this.paddingTop;
            for (i = 0; i < length; i += 2 + this.numAdditional + this.numHead) {
                //当前行的最大高度
                var maxH = NaN;
                if (isNaN(this.rowHeight)) {
                    for (j = i; j < i + 2 + this.numAdditional + this.numHead; j++) {
                        if (isNaN(maxH))
                            maxH = elements[j].layoutBoundsHeight;
                        if (elements[j].layoutBoundsHeight > maxH)
                            maxH = elements[j].layoutBoundsHeight;
                    }
                }
                else {
                    maxH = this.rowHeight;
                }
                //head
                index = 0;
                for (j = i; j < i + this.numHead; j++) {
                    var headLayoutBoundsX = 0;
                    var headLayoutBoundsY = currentH;
                    var headLayoutBoundsW = 0;
                    var headLayoutBoundsH = 0;
                    for (var k = 0; k < index; k++) {
                        headLayoutBoundsX += headMaxWidthArr[k] + this.hGap;
                    }
                    var headElement = elements[j];
                    if (isNaN(headElement.percentHeight)) {
                        headLayoutBoundsY += maxH / 2 - headElement.layoutBoundsHeight / 2;
                        headLayoutBoundsH = headElement.layoutBoundsHeight;
                    }
                    else {
                        headLayoutBoundsH = maxH * headElement.percentHeight / 100;
                    }
                    if (isNaN(headElement.percentWidth)) {
                        headLayoutBoundsX += headMaxWidthArr[index] / 2 - headElement.layoutBoundsWidth / 2;
                        headLayoutBoundsW = headElement.layoutBoundsWidth;
                    }
                    else {
                        headLayoutBoundsW = headMaxWidthArr[index] * headElement.percentWidth / 100;
                    }
                    index++;
                    headElement.setLayoutBoundsPosition(headLayoutBoundsX, headLayoutBoundsY);
                    headElement.setLayoutBoundsSize(headLayoutBoundsW, headLayoutBoundsH);
                }
                var firstElement = elements[i + this.numHead];
                var secondElement = elements[i + this.numHead + 1];
                //first
                layoutBoundsW = NaN;
                layoutBoundsH = NaN;
                if (!isNaN(firstElement.percentWidth))
                    layoutBoundsW = firstMaxWidth * firstElement.percentWidth / 100;
                else
                    layoutBoundsW = firstElement.layoutBoundsWidth;
                if (!isNaN(firstElement.percentHeight))
                    layoutBoundsH = maxH * firstElement.percentHeight / 100;
                else
                    layoutBoundsH = firstElement.layoutBoundsHeight;
                if (isNaN(firstElement.left) && isNaN(firstElement.right)) {
                    layoutBoundsX = headMaxWidth + firstMaxWidth - layoutBoundsW;
                }
                else {
                    if (isNaN(firstElement.left) && !isNaN(firstElement.right)) {
                        var right = firstElement.right;
                        if (right > firstMaxWidth - layoutBoundsW)
                            right = firstMaxWidth - layoutBoundsW;
                        layoutBoundsX = headMaxWidth + firstMaxWidth - layoutBoundsW - right;
                    }
                    else if (!isNaN(firstElement.left) && isNaN(firstElement.right)) {
                        var left = firstElement.left;
                        if (left > firstMaxWidth - layoutBoundsW)
                            left = firstMaxWidth - layoutBoundsW;
                        layoutBoundsX = headMaxWidth + left;
                    }
                    else if (!isNaN(firstElement.left) && !isNaN(firstElement.right)) {
                        left = firstElement.left;
                        right = firstElement.right;
                        if (left + right > firstElement.minWidth) {
                            layoutBoundsX = headMaxWidth + firstMaxWidth / 2 - firstElement.minWidth / 2;
                            layoutBoundsW = firstElement.minWidth;
                        }
                        else {
                            layoutBoundsX = headMaxWidth + left;
                            layoutBoundsW = firstMaxWidth - left - right;
                        }
                    }
                }
                if (isNaN(firstElement.top) && isNaN(firstElement.bottom)) {
                    layoutBoundsY = currentH + maxH / 2 - layoutBoundsH / 2;
                }
                else {
                    if (isNaN(firstElement.top) && !isNaN(firstElement.bottom)) {
                        var bottom = firstElement.bottom;
                        if (bottom > maxH - layoutBoundsH)
                            bottom = maxH - layoutBoundsH;
                        layoutBoundsY = currentH + maxH - layoutBoundsH - bottom;
                    }
                    else if (!isNaN(firstElement.top) && isNaN(firstElement.bottom)) {
                        var top = firstElement.top;
                        if (top > maxH - layoutBoundsH)
                            top = maxH - layoutBoundsH;
                        layoutBoundsY = currentH + top;
                    }
                    else if (!isNaN(firstElement.top) && !isNaN(firstElement.bottom)) {
                        top = firstElement.top;
                        bottom = firstElement.bottom;
                        if (top + bottom > firstElement.minHeight) {
                            layoutBoundsY = currentH + maxH / 2 - firstElement.minHeight / 2;
                            layoutBoundsH = firstElement.minHeight;
                        }
                        else {
                            layoutBoundsY = currentH + top;
                            layoutBoundsH = maxH - top - bottom;
                        }
                    }
                }
                firstElement.setLayoutBoundsSize(layoutBoundsW, layoutBoundsH);
                firstElement.setLayoutBoundsPosition(layoutBoundsX, layoutBoundsY);
                //second
                layoutBoundsW = NaN;
                layoutBoundsH = NaN;
                if (!isNaN(secondElement.percentWidth))
                    layoutBoundsW = secondMaxWidth * secondElement.percentWidth / 100;
                else
                    layoutBoundsW = secondElement.layoutBoundsWidth;
                if (!isNaN(secondElement.percentHeight))
                    layoutBoundsH = maxH * secondElement.percentHeight / 100;
                else
                    layoutBoundsH = secondElement.layoutBoundsHeight;
                secondElement.setLayoutBoundsSize(layoutBoundsW, layoutBoundsH);
                layoutBoundsX = firstMaxWidth + this.hGap + headMaxWidth;
                layoutBoundsY = currentH + maxH / 2 - layoutBoundsH / 2;
                secondElement.setLayoutBoundsPosition(layoutBoundsX, layoutBoundsY);
                //additional
                index = 0;
                for (j = i + this.numHead + 2; j < i + this.numHead + 2 + this.numAdditional; j++) {
                    var additionalLayoutBoundsX = headMaxWidth + firstMaxWidth + this.hGap + secondMaxWidth + this.hGap;
                    var additionalLayoutBoundsY = currentH;
                    var additionalLayoutBoundsW = 0;
                    var additionalLayoutBoundsH = 0;
                    for (k = 0; k < index; k++) {
                        additionalLayoutBoundsX += additionalMaxWidthArr[k] + this.hGap;
                    }
                    var additionalElement = elements[j];
                    if (isNaN(additionalElement.percentHeight)) {
                        if (isNaN(additionalElement.top) && isNaN(additionalElement.bottom)) {
                            additionalLayoutBoundsY = currentH + maxH / 2 - additionalElement.layoutBoundsHeight / 2;
                            additionalLayoutBoundsH = additionalElement.layoutBoundsHeight;
                        }
                        else {
                            if (isNaN(additionalElement.top) && !isNaN(additionalElement.bottom)) {
                                bottom = additionalElement.bottom;
                                if (bottom > maxH - additionalLayoutBoundsH)
                                    bottom = maxH - additionalLayoutBoundsH;
                                additionalLayoutBoundsY = currentH + maxH - additionalLayoutBoundsH - bottom;
                            }
                            else if (!isNaN(additionalElement.top) && isNaN(additionalElement.bottom)) {
                                top = additionalElement.top;
                                if (top > maxH - additionalLayoutBoundsH)
                                    top = maxH - additionalLayoutBoundsH;
                                additionalLayoutBoundsY = currentH + top;
                            }
                            else if (!isNaN(additionalElement.top) && !isNaN(additionalElement.bottom)) {
                                top = additionalElement.top;
                                bottom = additionalElement.bottom;
                                if (top + bottom > additionalElement.minHeight) {
                                    additionalLayoutBoundsY = currentH + maxH / 2 - additionalElement.minHeight / 2;
                                    additionalLayoutBoundsH = additionalElement.minHeight;
                                }
                                else {
                                    additionalLayoutBoundsY = currentH + top;
                                    additionalLayoutBoundsH = maxH - top - bottom;
                                }
                            }
                        }
                    }
                    else {
                        additionalLayoutBoundsH = maxH * additionalElement.percentHeight / 100;
                    }
                    if (isNaN(additionalElement.percentWidth)) {
                        additionalLayoutBoundsX += additionalMaxWidthArr[index] / 2 - additionalElement.layoutBoundsWidth / 2;
                        additionalLayoutBoundsW = additionalElement.layoutBoundsWidth;
                    }
                    else {
                        additionalLayoutBoundsW = additionalMaxWidthArr[index] * additionalElement.percentWidth / 100;
                    }
                    additionalElement.setLayoutBoundsPosition(additionalLayoutBoundsX, additionalLayoutBoundsY);
                    additionalElement.setLayoutBoundsSize(additionalLayoutBoundsW, additionalLayoutBoundsH);
                    index++;
                }
                //end
                currentH += maxH + this.vGap;
            }
            currentH -= this.vGap;
            currentH += this.paddingBottom;
            target.setContentSize(Math.ceil(firstMaxWidth + this.hGap + secondMaxWidth + additionalMaxWidth), Math.ceil(currentH));
            target.invalidateSize();
        };
        return AttributeQueueLayout;
    })(eui.LayoutBase);
    eui.AttributeQueueLayout = AttributeQueueLayout;
    egret.registerClass(AttributeQueueLayout,'eui.AttributeQueueLayout');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The ColumnAlign class defines the possible values for the
     * <code>columnAlign</code> property of the TileLayout class.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/ColumnAlignExample.ts
     */
    /**
     * @language zh_CN
     * ColumnAlign 类为 TileLayout 类的 <code>columnAlign</code> 属性定义可能的值。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/ColumnAlignExample.ts
     */
    var ColumnAlign = (function () {
        function ColumnAlign() {
        }
        var c=ColumnAlign,p=c.prototype;
        /**
         * @language en_US
         * Do not justify the rows.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 不将行两端对齐。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ColumnAlign.LEFT = "left";
        /**
         * @language en_US
         * Justify the rows by increasing the vertical gap.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 通过增大水平间隙将行两端对齐。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ColumnAlign.JUSTIFY_USING_GAP = "justifyUsingGap";
        /**
         * @language en_US
         * Justify the rows by increasing the row height.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 通过增大行高度将行两端对齐。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        ColumnAlign.JUSTIFY_USING_WIDTH = "justifyUsingWidth";
        return ColumnAlign;
    })();
    eui.ColumnAlign = ColumnAlign;
    egret.registerClass(ColumnAlign,'eui.ColumnAlign');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var GridLayout = (function (_super) {
        __extends(GridLayout, _super);
        function GridLayout() {
            var _this = this;
            _super.call(this);
            this.visibleRowIndices = new Array(0);
            this.visibleColumnIndices = new Array(0);
            this.oldVisibleRowIndices = new Array(0);
            this.oldVisibleColumnIndices = new Array(0);
            this.visibleRowBackgrounds = new Array(0);
            this.visibleRowSeparators = new Array(0);
            this.visibleColumnSeparators = new Array(0);
            this.visibleItemRenderers = new Array(0);
            this.hoverIndicator = null;
            this.caretIndicator = null;
            this.editorIndicator = null;
            this.visibleItemRenderersBounds = new egret.Rectangle();
            this.visibleGridBounds = new egret.Rectangle();
            this.freeElementMap = new egret.Dictionary();
            this.elementToFactoryMap = new egret.Dictionary();
            this.oldVerticalScrollPosition = 0;
            this.oldHorizontalScrollPosition = 0;
            this._showCaret = false;
            this.gridItemRendererClassFactories = new egret.Dictionary(true);
            this.layoutRowSeparator = function (separator, rowIndex, _owner) {
                _owner.intializeGridVisualElement(separator, rowIndex);
                var height = separator.preferredHeight;
                var rowCount = _this.gridDimensions.rowCount;
                var bounds = (rowIndex < rowCount) ? _this.gridDimensions.getRowBounds(rowIndex) : _this.gridDimensions.getPadRowBounds(rowIndex);
                if (!bounds)
                    return;
                var x = bounds.x;
                var width = Math.max(bounds.width, _this.visibleGridBounds.right);
                var y = bounds.bottom;
                _owner.layoutGridElement(separator, x, y, width, height);
            };
            this.layoutColumnSeparator = function (separator, columnIndex, _owner) {
                _owner.intializeGridVisualElement(separator, -1, columnIndex);
                var r = _this.visibleItemRenderersBounds;
                var width = separator.preferredWidth;
                var height = Math.max(r.height, _this.visibleGridBounds.height);
                var x = _this.gridDimensions.getCellX(0, columnIndex) + _this.gridDimensions.getColumnWidth(columnIndex);
                var y = r.y;
                _owner.layoutGridElement(separator, x, y, width, height);
            };
            this.visibleSelectionIndicators = new Array(0);
            this.visibleRowSelectionIndices = new Array(0);
            this.visibleColumnSelectionIndices = new Array(0);
            this.layoutRowSelectionIndicator = function (indicator, rowIndex, _owner) {
                _owner.intializeGridVisualElement(indicator, rowIndex);
                _owner.layoutGridElementR(indicator, _this.gridDimensions.getRowBounds(rowIndex));
            };
            this.layoutCellSelectionIndicator = function (indicator, rowIndex, columnIndex) {
                _this.intializeGridVisualElement(indicator, rowIndex, columnIndex);
                _this.layoutGridElementR(indicator, _this.gridDimensions.getCellBounds(rowIndex, columnIndex));
            };
            this.mouseXOffset = 0;
            this.mouseYOffset = 0;
            this.createdGridElement = false;
            this._performanceStatistics = null;
            this._enablePerformanceStatistics = false;
            this.gridDimensions = new eui.GridDimensions();
        }
        var c=GridLayout,p=c.prototype;
        d(p, "useVirtualLayout"
            ,function () {
                return true;
            }
            ,function (value) {
            }
        );
        d(p, "showCaret"
            ,function () {
                return this._showCaret;
            }
            ,function (show) {
                if (this.caretIndicator)
                    this.caretIndicator.visible = show;
                this._showCaret = show;
            }
        );
        p.clearVirtualLayoutCache = function () {
            this.freeGridElements(this.visibleRowBackgrounds);
            this.freeGridElements(this.visibleRowSeparators);
            this.visibleRowIndices.length = 0;
            this.freeGridElements(this.visibleColumnSeparators);
            this.visibleColumnIndices.length = 0;
            this.freeItemRenderers(this.visibleItemRenderers);
            this.clearSelectionIndicators();
            this.freeGridElement(this.hoverIndicator);
            this.hoverIndicator = null;
            this.freeGridElement(this.caretIndicator);
            this.caretIndicator = null;
            this.freeGridElement(this.editorIndicator);
            this.editorIndicator = null;
            this.visibleItemRenderersBounds.setEmpty();
            this.visibleGridBounds.setEmpty();
        };
        p.getElementBounds = function (index) {
            var columns = (this.grid) ? this.grid.columns : null;
            if (!columns)
                return null;
            var columnsLength = columns.length;
            var rowIndex = index / columnsLength;
            var columnIndex = index - (rowIndex * columnsLength);
            return this.gridDimensions.getCellBounds(rowIndex, columnIndex);
        };
        p.getElementBoundsAboveScrollRect = function (scrollRect) {
            var y = Math.max(0, scrollRect.top - 1);
            var rowIndex = this.gridDimensions.getRowIndexAt(scrollRect.x, y);
            return this.gridDimensions.getRowBounds(rowIndex);
        };
        p.getElementBoundsBelowScrollRect = function (scrollRect) {
            var maxY = Math.max(0, this.gridDimensions.getContentHeight() - 1);
            var y = Math.min(maxY, scrollRect.bottom + 1);
            var rowIndex = this.gridDimensions.getRowIndexAt(scrollRect.x, y);
            return this.gridDimensions.getRowBounds(rowIndex);
        };
        p.getElementBoundsLeftOfScrollRect = function (scrollRect) {
            var x = Math.max(0, scrollRect.left - 1);
            var columnIndex = this.gridDimensions.getColumnIndexAt(x, scrollRect.y);
            return this.gridDimensions.getColumnBounds(columnIndex);
        };
        p.getElementBoundsRightOfScrollRect = function (scrollRect) {
            var maxX = Math.max(0, this.gridDimensions.getContentWidth() - 1);
            var x = Math.min(maxX, scrollRect.right + 1);
            var columnIndex = this.gridDimensions.getColumnIndexAt(x, scrollRect.y);
            return this.gridDimensions.getColumnBounds(columnIndex);
        };
        p.scrollPositionChanged = function () {
            if (!this.grid)
                return;
            this.grid.hoverRowIndex = -1;
            this.grid.hoverColumnIndex = -1;
            _super.prototype.scrollPositionChanged.call(this);
            var hspChanged = this.oldHorizontalScrollPosition != this.target.scrollH;
            var vspChanged = this.oldVerticalScrollPosition != this.target.scrollV;
            this.oldHorizontalScrollPosition = this.target.scrollH;
            this.oldVerticalScrollPosition = this.target.scrollV;
            var invalidate;
            if (this.visibleRowIndices.length == 0 || this.visibleColumnIndices.length == 0)
                invalidate = true;
            if (!invalidate && vspChanged) {
                var oldFirstRowIndex = this.visibleRowIndices[0];
                var oldLastRowIndex = this.visibleRowIndices[this.visibleRowIndices.length - 1];
                var newFirstRowIndex = this.gridDimensions.getRowIndexAt(this.target.scrollH, this.target.scrollV);
                var newLastRowIndex = this.gridDimensions.getRowIndexAt(this.target.scrollH, this.target.scrollV + this.target.height);
                if (oldFirstRowIndex != newFirstRowIndex || oldLastRowIndex != newLastRowIndex)
                    invalidate = true;
            }
            if (!invalidate && hspChanged) {
                var oldFirstColIndex = this.visibleColumnIndices[0];
                var oldLastColIndex = this.visibleColumnIndices[this.visibleColumnIndices.length - 1];
                var newFirstColIndex = this.gridDimensions.getColumnIndexAt(this.target.scrollH, this.target.scrollV);
                var newLastColIndex = this.gridDimensions.getColumnIndexAt(this.target.scrollH + this.target.width, this.target.scrollV);
                if (oldFirstColIndex != newFirstColIndex || oldLastColIndex != newLastColIndex)
                    invalidate = true;
            }
            if (invalidate) {
                var reason = "none";
                if (vspChanged && hspChanged)
                    reason = "bothScrollPositions";
                else if (vspChanged)
                    reason = "verticalScrollPosition";
                else if (hspChanged)
                    reason = "horizontalScrollPosition";
                this.grid.invalidateDisplayListFor(reason);
            }
        };
        p.measure = function () {
            if (!this.grid)
                return;
            var startTime = 0;
            if (this.enablePerformanceStatistics)
                startTime = egret.getTimer();
            this.updateTypicalCellSizes();
            var measuredRowCount = this.grid.requestedRowCount;
            if (measuredRowCount == -1) {
                var rowCount = this.gridDimensions.rowCount;
                if (this.grid.requestedMaxRowCount != -1)
                    measuredRowCount = Math.min(this.grid.requestedMaxRowCount, rowCount);
                if (this.grid.requestedMinRowCount != -1)
                    measuredRowCount = Math.max(this.grid.requestedMinRowCount, measuredRowCount);
            }
            var measuredWidth = this.gridDimensions.getTypicalContentWidth(this.grid.requestedColumnCount);
            var measuredHeight = this.gridDimensions.getTypicalContentHeight(measuredRowCount);
            var measuredMinWidth = this.gridDimensions.getTypicalContentWidth(this.grid.requestedMinColumnCount);
            var measuredMinHeight = this.gridDimensions.getTypicalContentHeight(this.grid.requestedMinRowCount);
            this.grid.measuredWidth = Math.ceil(measuredWidth);
            this.grid.measuredHeight = Math.ceil(measuredHeight);
            if (this.enablePerformanceStatistics) {
                var elapsedTime = egret.getTimer() - startTime;
                this.performanceStatistics["measureTimes"].push(elapsedTime);
            }
        };
        p.updateDisplayList = function (unscaledWidth, unscaledHeight) {
            if (!this.grid)
                return;
            var startTime = 0;
            if (this.enablePerformanceStatistics) {
                startTime = egret.getTimer();
                if (this.performanceStatistics["updateDisplayListStartTime"] === undefined)
                    this.performanceStatistics["updateDisplayListStartTime"] = startTime;
            }
            var columns = this.grid.columns;
            var lastVisibleColumnIndex = (columns) ? this.grid.getPreviousVisibleColumnIndex(this.grid.columns.length) : -1;
            if (!columns || lastVisibleColumnIndex < 0)
                return;
            var backgroundLayer = this.getLayer("backgroundLayer");
            var selectionLayer = this.getLayer("selectionLayer");
            var editorIndicatorLayer = this.getLayer("editorIndicatorLayer");
            var rendererLayer = this.getLayer("rendererLayer");
            var overlayLayer = this.getLayer("overlayLayer");
            var completeLayoutNeeded = this.grid.isInvalidateDisplayListReason("verticalScrollPosition") || this.grid.isInvalidateDisplayListReason("horizontalScrollPosition");
            if (completeLayoutNeeded) {
                this.oldVisibleRowIndices = this.visibleRowIndices;
                this.oldVisibleColumnIndices = this.visibleColumnIndices;
                var scrollX = Math.max(0, this.target.scrollH);
                var scrollY = Math.max(0, this.target.scrollV);
                this.visibleGridBounds.x = scrollX;
                this.visibleGridBounds.y = scrollY;
                this.visibleGridBounds.width = unscaledWidth;
                this.visibleGridBounds.height = unscaledHeight;
                this.layoutColumns(scrollX, scrollY, unscaledWidth);
                this.layoutItemRenderers(rendererLayer, scrollX, scrollY, unscaledWidth, unscaledHeight);
                var contentWidth = Math.ceil(this.gridDimensions.getContentWidth());
                var contentHeight = Math.ceil(this.gridDimensions.getContentHeight());
                this.grid.setContentSize(contentWidth, contentHeight);
                var paddedRowCount = this.gridDimensions.rowCount;
                if ((scrollY == 0) && (contentHeight < unscaledHeight)) {
                    var unusedHeight = unscaledHeight - this.gridDimensions.getContentHeight();
                    paddedRowCount += Math.ceil(unusedHeight / this.gridDimensions.defaultRowHeight);
                }
                for (var rowIndex = this.gridDimensions.rowCount; rowIndex < paddedRowCount; rowIndex++)
                    this.visibleRowIndices.push(rowIndex);
                var _self = this;
                this.visibleRowBackgrounds = this.layoutLinearElements(this.grid.rowBackground, backgroundLayer, this.visibleRowBackgrounds, this.oldVisibleRowIndices, this.visibleRowIndices, this.layoutRowBackground, _self);
                var lastRowIndex = paddedRowCount - 1;
                this.visibleRowSeparators = this.layoutLinearElements(this.grid.rowSeparator, overlayLayer, this.visibleRowSeparators, this.oldVisibleRowIndices, this.visibleRowIndices, this.layoutRowSeparator, _self, lastRowIndex);
                var _self = this;
                this.visibleColumnSeparators = this.layoutLinearElements(this.grid.columnSeparator, overlayLayer, this.visibleColumnSeparators, this.oldVisibleColumnIndices, this.visibleColumnIndices, this.layoutColumnSeparator, _self, lastVisibleColumnIndex);
                this.oldVisibleRowIndices.length = 0;
                this.oldVisibleColumnIndices.length = 0;
            }
            if (completeLayoutNeeded || this.grid.isInvalidateDisplayListReason("hoverIndicator"))
                this.layoutHoverIndicator(backgroundLayer);
            if (completeLayoutNeeded || this.grid.isInvalidateDisplayListReason("selectionIndicator"))
                this.layoutSelectionIndicators(selectionLayer);
            if (completeLayoutNeeded || this.grid.isInvalidateDisplayListReason("caretIndicator"))
                this.layoutCaretIndicator(overlayLayer);
            if (completeLayoutNeeded || this.grid.isInvalidateDisplayListReason("editorIndicator"))
                this.layoutEditorIndicator(editorIndicatorLayer);
            if (!completeLayoutNeeded)
                this.updateVisibleItemRenderers();
            this.grid.validateNow();
            if (this.enablePerformanceStatistics) {
                var endTime = egret.getTimer();
                var cellCount = this.visibleRowIndices.length * this.visibleColumnIndices.length;
                this.performanceStatistics["updateDisplayListEndTime"] = endTime;
                this.performanceStatistics["updateDisplayListTimes"].push(endTime - startTime);
                this.performanceStatistics["updateDisplayListRectangles"].push(this.visibleGridBounds.clone());
                this.performanceStatistics["updateDisplayListCellCounts"].push(cellCount);
            }
        };
        p.updateVisibleItemRenderers = function () {
            var grid = this.grid;
            var rowSelectionMode = this.isRowSelectionMode();
            var cellSelectionMode = this.isCellSelectionMode();
            if (!rowSelectionMode && !cellSelectionMode)
                return;
            for (var renderer_key_a in this.visibleItemRenderers) {
                var renderer = this.visibleItemRenderers[renderer_key_a];
                var rowIndex = renderer.rowIndex;
                var columnIndex = renderer.columnIndex;
                var oldSelected = renderer.selected;
                var oldShowsCaret = renderer.showsCaret;
                var oldHovered = renderer.hovered;
                if (rowSelectionMode) {
                    renderer.selected = grid.selectionContainsIndex(rowIndex);
                    renderer.showsCaret = grid.caretRowIndex == rowIndex;
                    renderer.hovered = grid.hoverRowIndex == rowIndex;
                }
                else if (cellSelectionMode) {
                    renderer.selected = grid.selectionContainsCell(rowIndex, columnIndex);
                    renderer.showsCaret = (grid.caretRowIndex == rowIndex) && (grid.caretColumnIndex == columnIndex);
                    renderer.hovered = (grid.hoverRowIndex == rowIndex) && (grid.hoverColumnIndex == columnIndex);
                }
                if ((oldSelected != renderer.selected) || (oldShowsCaret != renderer.showsCaret) || (oldHovered != renderer.hovered))
                    renderer.prepare(true);
            }
        };
        d(p, "grid"
            ,function () {
                return this.target;
            }
            ,function (value) {
                egret.superSetter(eui.GridLayout, this, "grid", value);
            }
        );
        p.getLayer = function (name) {
            var grid = this.grid;
            if (!grid)
                return null;
            return grid.getChildByName(name);
        };
        p.getGridColumn = function (columnIndex) {
            var columns = this.grid.columns;
            if ((columns == null) || (columnIndex >= columns.length) || (columnIndex < 0))
                return null;
            return columns.getItemAt(columnIndex);
        };
        p.getDataProviderItem = function (rowIndex) {
            var dataProvider = this.grid.dataProvider;
            if ((dataProvider == null) || (rowIndex >= dataProvider.length) || (rowIndex < 0))
                return null;
            return dataProvider.getItemAt(rowIndex);
        };
        GridLayout.clampColumnWidth = function (width, column) {
            var minColumnWidth = column.minWidth;
            var maxColumnWidth = column.maxWidth;
            if (!isNaN(minColumnWidth))
                width = Math.max(width, minColumnWidth);
            if (!isNaN(maxColumnWidth))
                width = Math.min(width, maxColumnWidth);
            return width;
        };
        p.createTypicalItemRenderer = function (columnIndex) {
            var rendererLayer = this.getLayer("rendererLayer");
            if (!rendererLayer)
                return null;
            var typicalItem = this.grid.typicalItem;
            if (typicalItem == null)
                typicalItem = this.getDataProviderItem(0);
            var column = this.getGridColumn(columnIndex);
            var factory = this.itemToRenderer(column, typicalItem);
            var renderer = this.allocateGridElement(factory);
            rendererLayer.addChild(renderer);
            this.initializeItemRenderer(renderer, 0, columnIndex, this.grid.typicalItem, false);
            var columnWidth = column.width;
            if (isNaN(columnWidth)) {
                if ("width" in renderer)
                    columnWidth = renderer["width"];
            }
            if (isNaN(columnWidth))
                columnWidth = 4096;
            this.layoutItemRenderer(renderer, 0, 0, columnWidth, NaN);
            return renderer;
        };
        p.updateVisibleTypicalCellSizes = function (width, scrollX, firstVisibleColumnIndex) {
            var rendererLayer = this.getLayer("rendererLayer");
            if (!rendererLayer)
                return;
            var gridDimensions = this.gridDimensions;
            var columnCount = gridDimensions.columnCount;
            var startCellX = gridDimensions.getCellX(0, firstVisibleColumnIndex);
            var columnGap = gridDimensions.columnGap;
            for (var columnIndex = firstVisibleColumnIndex; (width > 0) && (columnIndex >= 0) && (columnIndex < columnCount); columnIndex = this.grid.getNextVisibleColumnIndex(columnIndex)) {
                var cellHeight = gridDimensions.getTypicalCellHeight(columnIndex);
                var cellWidth = gridDimensions.getTypicalCellWidth(columnIndex);
                var column = this.getGridColumn(columnIndex);
                if (!isNaN(column.width)) {
                    cellWidth = column.width;
                    gridDimensions.setTypicalCellWidth(columnIndex, cellWidth);
                }
                if (isNaN(cellWidth) || isNaN(cellHeight)) {
                    var renderer = this.createTypicalItemRenderer(columnIndex);
                    if (isNaN(cellWidth)) {
                        cellWidth = eui.GridLayout.clampColumnWidth(renderer.preferredWidth, column);
                        gridDimensions.setTypicalCellWidth(columnIndex, cellWidth);
                    }
                    if (isNaN(cellHeight)) {
                        cellHeight = renderer.preferredHeight;
                        gridDimensions.setTypicalCellHeight(columnIndex, cellHeight);
                    }
                    rendererLayer.removeChild(renderer);
                    this.freeGridElement(renderer);
                }
                if (columnIndex == firstVisibleColumnIndex)
                    width -= startCellX + cellWidth - scrollX;
                else
                    width -= cellWidth + columnGap;
            }
        };
        p.updateTypicalCellSizes = function () {
            var rendererLayer = this.getLayer("rendererLayer");
            if (!rendererLayer)
                return;
            var gridDimensions = this.gridDimensions;
            var columnCount = gridDimensions.columnCount;
            var columnGap = gridDimensions.columnGap;
            var requestedColumnCount = this.grid.requestedColumnCount;
            var measuredColumnCount = 0;
            for (var columnIndex = 0; (columnIndex < columnCount); columnIndex++) {
                var cellHeight = gridDimensions.getTypicalCellHeight(columnIndex);
                var cellWidth = gridDimensions.getTypicalCellWidth(columnIndex);
                var column = this.getGridColumn(columnIndex);
                if (!column.visible) {
                    gridDimensions.setTypicalCellWidth(columnIndex, 0);
                    gridDimensions.setTypicalCellHeight(columnIndex, 0);
                    continue;
                }
                if (!isNaN(column.width)) {
                    cellWidth = column.width;
                    gridDimensions.setTypicalCellWidth(columnIndex, cellWidth);
                }
                var needTypicalRenderer = (requestedColumnCount == -1) || (measuredColumnCount < requestedColumnCount);
                if (needTypicalRenderer && (isNaN(cellWidth) || isNaN(cellHeight))) {
                    var renderer = this.createTypicalItemRenderer(columnIndex);
                    if (isNaN(cellWidth)) {
                        cellWidth = eui.GridLayout.clampColumnWidth(renderer.preferredWidth, column);
                        gridDimensions.setTypicalCellWidth(columnIndex, cellWidth);
                    }
                    if (isNaN(cellHeight)) {
                        cellHeight = renderer.preferredHeight;
                        gridDimensions.setTypicalCellHeight(columnIndex, cellHeight);
                    }
                    rendererLayer.removeChild(renderer);
                    this.freeGridElement(renderer);
                }
                measuredColumnCount++;
            }
        };
        p.layoutColumns = function (scrollX, scrollY, width) {
            var gridDimensions = this.gridDimensions;
            var columnCount = gridDimensions.columnCount;
            if (columnCount <= 0)
                return;
            var firstVisibleColumnIndex = gridDimensions.getColumnIndexAt(scrollX, scrollY);
            this.updateVisibleTypicalCellSizes(width, scrollX, firstVisibleColumnIndex);
            var columnGap = gridDimensions.columnGap;
            var startCellX = gridDimensions.getCellX(0, firstVisibleColumnIndex);
            var availableWidth = width;
            var flexibleColumnCount = 0;
            for (var columnIndex = firstVisibleColumnIndex; (availableWidth > 0) && (columnIndex >= 0) && (columnIndex < columnCount); columnIndex = this.grid.getNextVisibleColumnIndex(columnIndex)) {
                var columnWidth = gridDimensions.getTypicalCellWidth(columnIndex);
                var gridColumn = this.getGridColumn(columnIndex);
                if (isNaN(gridColumn.width)) {
                    flexibleColumnCount += 1;
                    columnWidth = eui.GridLayout.clampColumnWidth(columnWidth, gridColumn);
                }
                else
                    columnWidth = gridColumn.width;
                gridDimensions.setColumnWidth(columnIndex, columnWidth);
                if (columnIndex == firstVisibleColumnIndex)
                    availableWidth -= startCellX + columnWidth - scrollX;
                else
                    availableWidth -= columnWidth + columnGap;
            }
            if ((scrollX != 0) || (availableWidth < 1.0) || (flexibleColumnCount == 0))
                return;
            var columnWidthDelta = Math.ceil(availableWidth / flexibleColumnCount);
            for (columnIndex = firstVisibleColumnIndex; (columnIndex >= 0) && (columnIndex < columnCount) && (availableWidth >= 1.0); columnIndex = this.grid.getNextVisibleColumnIndex(columnIndex)) {
                gridColumn = this.getGridColumn(columnIndex);
                if (isNaN(gridColumn.width)) {
                    var oldColumnWidth = gridDimensions.getColumnWidth(columnIndex);
                    columnWidth = oldColumnWidth + Math.min(availableWidth, columnWidthDelta);
                    columnWidth = eui.GridLayout.clampColumnWidth(columnWidth, gridColumn);
                    gridDimensions.setColumnWidth(columnIndex, columnWidth);
                    availableWidth -= (columnWidth - oldColumnWidth);
                }
            }
        };
        p.itemToRenderer = function (column, dataItem) {
            return column.itemToRenderer(dataItem);
        };
        p.layoutItemRenderers = function (rendererLayer, scrollX, scrollY, width, height) {
            if (!rendererLayer)
                return;
            var rowIndex = 0;
            var colIndex = 0;
            var gridDimensions = this.gridDimensions;
            var rowCount = gridDimensions.rowCount;
            var colCount = gridDimensions.columnCount;
            var rowGap = gridDimensions.rowGap;
            var colGap = gridDimensions.columnGap;
            var startColIndex = gridDimensions.getColumnIndexAt(scrollX, scrollY);
            var startRowIndex = gridDimensions.getRowIndexAt(scrollX, scrollY);
            var startCellX = gridDimensions.getCellX(startRowIndex, startColIndex);
            var startCellY = gridDimensions.getCellY(startRowIndex, startColIndex);
            var newVisibleColumnIndices = new Array();
            var availableWidth = width;
            var column;
            for (colIndex = startColIndex; (availableWidth > 0) && (colIndex >= 0) && (colIndex < colCount); colIndex = this.grid.getNextVisibleColumnIndex(colIndex)) {
                newVisibleColumnIndices.push(colIndex);
                var columnWidth = gridDimensions.getColumnWidth(colIndex);
                if (colIndex == startColIndex)
                    availableWidth -= startCellX + columnWidth - scrollX;
                else
                    availableWidth -= columnWidth + colGap;
            }
            var newVisibleRowIndices = new Array();
            var newVisibleItemRenderers = new Array();
            var cellX = startCellX;
            var cellY = startCellY;
            var availableHeight = height;
            for (rowIndex = startRowIndex; (availableHeight > 0) && (rowIndex >= 0) && (rowIndex < rowCount); rowIndex++) {
                newVisibleRowIndices.push(rowIndex);
                var rowHeight = gridDimensions.getRowHeight(rowIndex);
                var colIndex_key_a;
                for (colIndex_key_a in newVisibleColumnIndices) {
                    colIndex = newVisibleColumnIndices[colIndex_key_a];
                    var renderer = this.takeVisibleItemRenderer(rowIndex, colIndex);
                    if (!renderer) {
                        var dataItem = this.getDataProviderItem(rowIndex);
                        column = this.getGridColumn(colIndex);
                        var factory = this.itemToRenderer(column, dataItem);
                        renderer = this.allocateGridElement(factory);
                    }
                    if (renderer.parent != rendererLayer)
                        rendererLayer.addChild(renderer);
                    newVisibleItemRenderers.push(renderer);
                    this.initializeItemRenderer(renderer, rowIndex, colIndex);
                    var colWidth = gridDimensions.getColumnWidth(colIndex);
                    this.layoutItemRenderer(renderer, cellX, cellY, colWidth, rowHeight);
                    var preferredRowHeight = renderer.preferredHeight;
                    gridDimensions.setCellHeight(rowIndex, colIndex, preferredRowHeight);
                    cellX += colWidth + colGap;
                }
                var finalRowHeight = gridDimensions.getRowHeight(rowIndex);
                if (rowHeight != finalRowHeight) {
                    var visibleColumnsLength = newVisibleColumnIndices.length;
                    rowHeight = finalRowHeight;
                    var colIndex_key_a;
                    for (colIndex_key_a in newVisibleColumnIndices) {
                        colIndex = newVisibleColumnIndices[colIndex_key_a];
                        var rowOffset = newVisibleRowIndices.indexOf(rowIndex);
                        var colOffset = newVisibleColumnIndices.indexOf(colIndex);
                        var index = (rowOffset * visibleColumnsLength) + colOffset;
                        renderer = newVisibleItemRenderers[index];
                        var rendererX = renderer.layoutBoundsX;
                        var rendererY = renderer.layoutBoundsY;
                        var rendererWidth = renderer.layoutBoundsWidth;
                        this.layoutItemRenderer(renderer, rendererX, rendererY, rendererWidth, rowHeight);
                        gridDimensions.setCellHeight(rowIndex, colIndex, renderer.preferredHeight);
                    }
                }
                cellX = startCellX;
                cellY += rowHeight + rowGap;
                if (rowIndex == startRowIndex)
                    availableHeight -= startCellY + rowHeight - scrollY;
                else
                    availableHeight -= rowHeight + rowGap;
            }
            for (var oldRenderer_key_a in this.visibleItemRenderers) {
                var oldRenderer = this.visibleItemRenderers[oldRenderer_key_a];
                this.freeItemRenderer(oldRenderer);
                if (oldRenderer)
                    oldRenderer.discard(true);
            }
            if ((newVisibleRowIndices.length > 0) && (newVisibleColumnIndices.length > 0)) {
                var lastRowIndex = newVisibleRowIndices[newVisibleRowIndices.length - 1];
                var lastColIndex = newVisibleColumnIndices[newVisibleColumnIndices.length - 1];
                var lastCellR = gridDimensions.getCellBounds(lastRowIndex, lastColIndex);
                this.visibleItemRenderersBounds.x = startCellX;
                this.visibleItemRenderersBounds.y = startCellY;
                this.visibleItemRenderersBounds.width = lastCellR.x + lastCellR.width - startCellX;
                this.visibleItemRenderersBounds.height = lastCellR.y + lastCellR.height - startCellY;
            }
            else {
                this.visibleItemRenderersBounds.setEmpty();
            }
            this.visibleItemRenderers = newVisibleItemRenderers;
            this.visibleRowIndices = newVisibleRowIndices;
            this.visibleColumnIndices = newVisibleColumnIndices;
        };
        p.invalidateCell = function (rowIndex, columnIndex) {
            var renderer = this.getVisibleItemRenderer(rowIndex, columnIndex);
            if (!renderer)
                return;
            if (this.itemRendererFunctionValueChanged(renderer)) {
                renderer.grid.invalidateDisplayList();
                return;
            }
            this.initializeItemRenderer(renderer, rowIndex, columnIndex);
            var rendererX = renderer.layoutBoundsX;
            var rendererY = renderer.layoutBoundsY;
            var rendererWidth = renderer.layoutBoundsWidth;
            var rendererHeight = renderer.layoutBoundsHeight;
            this.layoutItemRenderer(renderer, rendererX, rendererY, rendererWidth, rendererHeight);
            var preferredRendererHeight = renderer.preferredHeight;
            if (this.gridDimensions.variableRowHeight && (rendererHeight != preferredRendererHeight))
                this.grid.invalidateDisplayList();
        };
        p.itemRendererFunctionValueChanged = function (renderer) {
            var column = renderer.column;
            if (!column || (column.itemRendererFunction === null))
                return false;
            var factory = this.itemToRenderer(column, renderer["data"]);
            return factory !== this.elementToFactoryMap.getItem(renderer);
        };
        p.getVisibleItemRendererIndex = function (rowIndex, columnIndex) {
            if ((this.visibleRowIndices == null) || (this.visibleColumnIndices == null))
                return -1;
            var rowOffset = this.visibleRowIndices.indexOf(rowIndex);
            var colOffset = this.visibleColumnIndices.indexOf(columnIndex);
            if ((rowOffset == -1) || (colOffset == -1))
                return -1;
            var index = (rowOffset * this.visibleColumnIndices.length) + colOffset;
            return index;
        };
        p.getVisibleItemRenderer = function (rowIndex, columnIndex) {
            var index = this.getVisibleItemRendererIndex(rowIndex, columnIndex);
            if (index == -1 || index >= this.visibleItemRenderers.length)
                return null;
            var renderer = this.visibleItemRenderers[index];
            return renderer;
        };
        p.takeVisibleItemRenderer = function (rowIndex, columnIndex) {
            var index = this.getVisibleItemRendererIndex(rowIndex, columnIndex);
            if (index == -1 || index >= this.visibleItemRenderers.length)
                return null;
            var renderer = this.visibleItemRenderers[index];
            this.visibleItemRenderers[index] = null;
            if (renderer && this.itemRendererFunctionValueChanged(renderer)) {
                this.freeItemRenderer(renderer);
                return null;
            }
            return renderer;
        };
        p.initializeItemRenderer = function (renderer, rowIndex, columnIndex, dataItem, visible) {
            if (dataItem === void 0) { dataItem = null; }
            if (visible === void 0) { visible = true; }
            renderer.visible = visible;
            var gridColumn = this.getGridColumn(columnIndex);
            if (gridColumn) {
                renderer.rowIndex = rowIndex;
                renderer.column = gridColumn;
                if (dataItem == null)
                    dataItem = this.getDataProviderItem(rowIndex);
                renderer.label = gridColumn.itemToLabel(dataItem);
                if (this.isRowSelectionMode()) {
                    renderer.selected = this.grid.selectionContainsIndex(rowIndex);
                    renderer.showsCaret = this.grid.caretRowIndex == rowIndex;
                    renderer.hovered = this.grid.hoverRowIndex == rowIndex;
                }
                else if (this.isCellSelectionMode()) {
                    renderer.selected = this.grid.selectionContainsCell(rowIndex, columnIndex);
                    renderer.showsCaret = (this.grid.caretRowIndex == rowIndex) && (this.grid.caretColumnIndex == columnIndex);
                    renderer.hovered = (this.grid.hoverRowIndex == rowIndex) && (this.grid.hoverColumnIndex == columnIndex);
                }
                renderer["data"] = dataItem;
                if (this.grid.dataGrid)
                    renderer.ownerChanged(this.grid.dataGrid);
                renderer.prepare(!this.createdGridElement);
            }
        };
        p.freeItemRenderer = function (renderer) {
            if (!renderer)
                return;
            this.freeGridElement(renderer);
        };
        p.freeItemRenderers = function (renderers) {
            for (var renderer_key_a in renderers) {
                var renderer = renderers[renderer_key_a];
                this.freeItemRenderer(renderer);
            }
            renderers.length = 0;
        };
        p.layoutLinearElements = function (factory, layer, oldVisibleElements, oldVisibleIndices, newVisibleIndices, layoutFunction, _owner, lastIndex) {
            if (lastIndex === void 0) { lastIndex = -1; }
            if (!layer)
                return new Array(0);
            this.discardGridElementsIfFactoryChanged(factory, layer, oldVisibleElements);
            if (factory == null)
                return new Array(0);
            this.freeLinearElements(oldVisibleElements, oldVisibleIndices, newVisibleIndices, lastIndex);
            var newVisibleElementCount = newVisibleIndices.length;
            var newVisibleElements = new Array(newVisibleElementCount);
            for (var index = 0; index < newVisibleElementCount; index++) {
                var newEltIndex = newVisibleIndices[index];
                if (newEltIndex == lastIndex) {
                    newVisibleElements.length = index;
                    break;
                }
                var eltOffset = oldVisibleIndices.indexOf(newEltIndex);
                var elt = (eltOffset != -1 && eltOffset < oldVisibleElements.length) ? oldVisibleElements[eltOffset] : null;
                if (elt == null)
                    elt = this.allocateGridElement(factory);
                newVisibleElements[index] = elt;
                layer.addChild(elt);
                elt.visible = true;
                layoutFunction(elt, newEltIndex, _owner);
            }
            return newVisibleElements;
        };
        p.layoutCellElements = function (factory, layer, oldVisibleElements, oldVisibleRowIndices, oldVisibleColumnIndices, newVisibleRowIndices, newVisibleColumnIndices, layoutFunction) {
            if (!layer)
                return new Array(0);
            if (this.discardGridElementsIfFactoryChanged(factory, layer, oldVisibleElements)) {
                oldVisibleRowIndices.length = 0;
                oldVisibleColumnIndices.length = 0;
            }
            if (factory == null)
                return new Array(0);
            var newVisibleElementCount = newVisibleRowIndices.length;
            var newVisibleElements = new Array(newVisibleElementCount);
            this.freeCellElements(oldVisibleElements, newVisibleElements, oldVisibleRowIndices, newVisibleRowIndices, oldVisibleColumnIndices, newVisibleColumnIndices);
            for (var index = 0; index < newVisibleElementCount; index++) {
                var newEltRowIndex = newVisibleRowIndices[index];
                var newEltColumnIndex = newVisibleColumnIndices[index];
                var elt = newVisibleElements[index];
                if (elt == null) {
                    elt = this.allocateGridElement(factory);
                    newVisibleElements[index] = elt;
                }
                layer.addChild(elt);
                elt.visible = true;
                layoutFunction(elt, newEltRowIndex, newEltColumnIndex);
            }
            return newVisibleElements;
        };
        p.discardGridElementsIfFactoryChanged = function (factory, layer, oldVisibleElements) {
            if ((oldVisibleElements.length) > 0 && (factory != this.elementToFactoryMap.getItem(oldVisibleElements[0]))) {
                for (var oldElt_key_a in oldVisibleElements) {
                    var oldElt = oldVisibleElements[oldElt_key_a];
                    layer.removeChild(oldElt);
                    this.freeGridElement(oldElt);
                }
                oldVisibleElements.length = 0;
                return true;
            }
            return false;
        };
        p.freeLinearElements = function (elements, oldIndices, newIndices, lastIndex) {
            for (var i = 0; i < elements.length; i++) {
                var offset = newIndices.indexOf(oldIndices[i]);
                if ((oldIndices[i] == lastIndex) || (offset == -1)) {
                    var elt = elements[i];
                    if (elt) {
                        this.freeGridElement(elt);
                        elements[i] = null;
                    }
                }
            }
        };
        p.freeCellElements = function (elements, newElements, oldRowIndices, newRowIndices, oldColumnIndices, newColumnIndices) {
            var freeElement = true;
            var numNewCells = newRowIndices.length;
            var newIndex = 0;
            for (var i = 0; i < elements.length; i++) {
                var elt = elements[i];
                if (elt == null)
                    continue;
                var oldRowIndex = oldRowIndices[i];
                var oldColumnIndex = oldColumnIndices[i];
                for (; newIndex < numNewCells; newIndex++) {
                    var newRowIndex = newRowIndices[newIndex];
                    var newColumnIndex = newColumnIndices[newIndex];
                    if (newRowIndex == oldRowIndex) {
                        if (newColumnIndex == oldColumnIndex) {
                            newElements[newIndex] = elt;
                            freeElement = false;
                            break;
                        }
                        else if (newColumnIndex > oldColumnIndex) {
                            break;
                        }
                    }
                    else if (newRowIndex > oldRowIndex) {
                        break;
                    }
                }
                if (freeElement)
                    this.freeGridElement(elt);
                freeElement = true;
            }
            elements.length = 0;
        };
        p.layoutRowBackground = function (rowBackground, rowIndex) {
            var rowCount = this.gridDimensions.rowCount;
            var bounds = (rowIndex < rowCount) ? this.gridDimensions.getRowBounds(rowIndex) : this.gridDimensions.getPadRowBounds(rowIndex);
            if (!bounds)
                return;
            if ((rowIndex < rowCount) && (bounds.width == 0))
                bounds.width = this.visibleGridBounds.width;
            this.intializeGridVisualElement(rowBackground, rowIndex);
            this.layoutGridElementR(rowBackground, bounds);
        };
        p.isRowSelectionMode = function () {
            var mode = this.grid.selectionMode;
            return mode == eui.GridSelectionMode.SINGLE_ROW || mode == eui.GridSelectionMode.MULTIPLE_ROWS;
        };
        p.isCellSelectionMode = function () {
            var mode = this.grid.selectionMode;
            return mode == eui.GridSelectionMode.SINGLE_CELL || mode == eui.GridSelectionMode.MULTIPLE_CELLS;
        };
        p.layoutSelectionIndicators = function (layer) {
            var selectionIndicatorFactory = this.grid.selectionIndicator;
            if (this.isRowSelectionMode()) {
                if (this.visibleColumnSelectionIndices.length > 0)
                    this.clearSelectionIndicators();
                var oldVisibleRowSelectionIndices = this.visibleRowSelectionIndices;
                this.visibleRowSelectionIndices = new Array();
                for (var rowIndex_key_a in this.visibleRowIndices) {
                    var rowIndex = this.visibleRowIndices[rowIndex_key_a];
                    if (this.grid.selectionContainsIndex(rowIndex)) {
                        this.visibleRowSelectionIndices.push(rowIndex);
                    }
                }
                var _self = this;
                this.visibleSelectionIndicators = this.layoutLinearElements(selectionIndicatorFactory, layer, this.visibleSelectionIndicators, oldVisibleRowSelectionIndices, this.visibleRowSelectionIndices, this.layoutRowSelectionIndicator, _self);
                return;
            }
            if (this.visibleRowSelectionIndices.length > 0 && this.visibleColumnSelectionIndices.length == 0) {
                this.clearSelectionIndicators();
            }
            if (this.isCellSelectionMode()) {
                oldVisibleRowSelectionIndices = this.visibleRowSelectionIndices;
                var oldVisibleColumnSelectionIndices = this.visibleColumnSelectionIndices;
                this.visibleRowSelectionIndices = new Array();
                this.visibleColumnSelectionIndices = new Array();
                var rowIndex_key_a;
                for (rowIndex_key_a in this.visibleRowIndices) {
                    rowIndex = this.visibleRowIndices[rowIndex_key_a];
                    for (var columnIndex_key_a in this.visibleColumnIndices) {
                        var columnIndex = this.visibleColumnIndices[columnIndex_key_a];
                        if (this.grid.selectionContainsCell(rowIndex, columnIndex)) {
                            this.visibleRowSelectionIndices.push(rowIndex);
                            this.visibleColumnSelectionIndices.push(columnIndex);
                        }
                    }
                }
                this.visibleSelectionIndicators = this.layoutCellElements(selectionIndicatorFactory, layer, this.visibleSelectionIndicators, oldVisibleRowSelectionIndices, oldVisibleColumnSelectionIndices, this.visibleRowSelectionIndices, this.visibleColumnSelectionIndices, this.layoutCellSelectionIndicator);
                return;
            }
            if (this.visibleColumnSelectionIndices.length > 0)
                this.clearSelectionIndicators();
        };
        p.clearSelectionIndicators = function () {
            this.freeGridElements(this.visibleSelectionIndicators);
            this.visibleRowSelectionIndices.length = 0;
            this.visibleColumnSelectionIndices.length = 0;
        };
        p.layoutIndicator = function (layer, indicatorFactory, indicator, rowIndex, columnIndex) {
            if (!layer)
                return null;
            if (indicator && (indicatorFactory != this.elementToFactoryMap.getItem(indicator))) {
                this.removeGridElement(indicator);
                indicator = null;
                if (indicatorFactory == null)
                    return null;
            }
            if (rowIndex == -1 || this.grid.selectionMode == eui.GridSelectionMode.NONE || (this.isCellSelectionMode() && (this.grid.getNextVisibleColumnIndex(columnIndex - 1) != columnIndex))) {
                if (indicator)
                    indicator.visible = false;
                return indicator;
            }
            if (!indicator && indicatorFactory)
                indicator = this.createGridElement(indicatorFactory);
            if (indicator) {
                var bounds = this.isRowSelectionMode() ? this.gridDimensions.getRowBounds(rowIndex) : this.gridDimensions.getCellBounds(rowIndex, columnIndex);
                this.intializeGridVisualElement(indicator, rowIndex, columnIndex);
                if (indicatorFactory == this.grid.caretIndicator && bounds) {
                    if (this.isCellSelectionMode() && (columnIndex < this.grid.columns.length - 1))
                        bounds.width += 1;
                    if ((rowIndex < this.grid.dataProvider.length - 1) || (this.visibleRowIndices.length > this.grid.dataProvider.length))
                        bounds.height += 1;
                }
                this.layoutGridElementR(indicator, bounds);
                layer.addChild(indicator);
                indicator.visible = true;
            }
            return indicator;
        };
        p.layoutHoverIndicator = function (layer) {
            var rowIndex = this.grid.hoverRowIndex;
            var columnIndex = this.grid.hoverColumnIndex;
            var factory = this.grid.hoverIndicator;
            this.hoverIndicator = this.layoutIndicator(layer, factory, this.hoverIndicator, rowIndex, columnIndex);
        };
        p.layoutCaretIndicator = function (layer) {
            var rowIndex = this.grid.caretRowIndex;
            var colIndex = this.grid.caretColumnIndex;
            var factory = this.grid.caretIndicator;
            this.caretIndicator = this.layoutIndicator(layer, factory, this.caretIndicator, rowIndex, colIndex);
            if (this.caretIndicator && !this._showCaret)
                this.caretIndicator.visible = this._showCaret;
        };
        p.layoutEditorIndicator = function (layer) {
            var dataGrid = this.grid.dataGrid;
            if (!dataGrid)
                return;
            var rowIndex = dataGrid.editorRowIndex;
            var columnIndex = dataGrid.editorColumnIndex;
            var indicatorFactory = dataGrid.editorIndicator;
            if (this.editorIndicator && (indicatorFactory != this.elementToFactoryMap.getItem(this.editorIndicator))) {
                this.removeGridElement(this.editorIndicator);
                this.editorIndicator = null;
                if (indicatorFactory == null)
                    return;
            }
            if (rowIndex == -1 || columnIndex == -1) {
                if (this.editorIndicator)
                    this.editorIndicator.visible = false;
                return;
            }
            if (!this.editorIndicator && indicatorFactory)
                this.editorIndicator = this.createGridElement(indicatorFactory);
            if (this.editorIndicator) {
                var bounds = this.gridDimensions.getCellBounds(rowIndex, columnIndex);
                this.intializeGridVisualElement(this.editorIndicator, rowIndex, columnIndex);
                this.layoutGridElementR(this.editorIndicator, bounds);
                layer.addChild(this.editorIndicator);
                this.editorIndicator.visible = true;
            }
        };
        p.dataProviderCollectionChanged = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.ADD:
                    {
                        this.dataProviderCollectionAdd(event);
                        break;
                    }
                case eui.CollectionEventKind.REMOVE:
                    {
                        this.dataProviderCollectionRemove(event);
                        break;
                    }
                case eui.CollectionEventKindEX.MOVE:
                    {
                        break;
                    }
                case eui.CollectionEventKind.REFRESH:
                case eui.CollectionEventKind.RESET:
                    {
                        this.dataProviderCollectionReset(event);
                        break;
                    }
                case eui.CollectionEventKind.UPDATE:
                    {
                        this.dataProviderCollectionUpdate(event);
                        break;
                    }
                case eui.CollectionEventKind.REPLACE:
                    {
                        break;
                    }
            }
        };
        p.dataProviderCollectionAdd = function (event) {
            var insertIndex = event.location;
            var insertLength = event.items.length;
            this.incrementIndicesGTE(this.visibleRowIndices, insertIndex, insertLength);
            this.incrementIndicesGTE(this.visibleRowSelectionIndices, insertIndex, insertLength);
        };
        p.dataProviderCollectionRemove = function (event) {
            var eventItemsLength = event.items.length;
            var firstRemoveIndex = event.location;
            var lastRemoveIndex = event.location + event.items.length - 1;
            var firstVisibleOffset = -1;
            var lastVisibleOffset = -1;
            for (var offset = 0; offset < this.visibleRowIndices.length; offset++) {
                var rowIndex = this.visibleRowIndices[offset];
                if ((rowIndex >= firstRemoveIndex) && (rowIndex <= lastRemoveIndex)) {
                    if (firstVisibleOffset == -1)
                        firstVisibleOffset = lastVisibleOffset = offset;
                    else
                        lastVisibleOffset = offset;
                }
                else if (rowIndex > lastRemoveIndex) {
                    this.visibleRowIndices[offset] = rowIndex - eventItemsLength;
                }
            }
            if ((firstVisibleOffset != -1) && (lastVisibleOffset != -1)) {
                var removeCount = (lastVisibleOffset - firstVisibleOffset) + 1;
                this.visibleRowIndices.splice(firstVisibleOffset, removeCount);
                if (lastVisibleOffset < this.visibleRowBackgrounds.length)
                    this.freeGridElements(this.visibleRowBackgrounds.splice(firstVisibleOffset, removeCount));
                if (lastVisibleOffset < this.visibleRowSeparators.length)
                    this.freeGridElements(this.visibleRowSeparators.splice(firstVisibleOffset, removeCount));
                var visibleColCount = this.visibleColumnIndices.length;
                var firstRendererOffset = firstVisibleOffset * visibleColCount;
                this.freeItemRenderers(this.visibleItemRenderers.splice(firstRendererOffset, removeCount * visibleColCount));
            }
        };
        p.incrementIndicesGTE = function (indices, insertIndex, delta) {
            var indicesLength = indices.length;
            for (var i = 0; i < indicesLength; i++) {
                var index = indices[i];
                if (index >= insertIndex) {
                    indices[i] = index + delta;
                }
            }
        };
        p.dataProviderCollectionReset = function (event) {
            this.clearVirtualLayoutCache();
        };
        p.dataProviderCollectionUpdate = function (event) {
            var data;
            var itemsLength = event.items.length;
            var itemRenderersLength = this.visibleItemRenderers.length;
            for (var i = 0; i < itemsLength; i++) {
                data = event.items[i];
                for (var j = 0; j < itemRenderersLength; j++) {
                    var renderer = this.visibleItemRenderers[j];
                    if (renderer && renderer["data"] == data) {
                        this.freeItemRenderer(renderer);
                        this.visibleItemRenderers[j] = null;
                    }
                }
            }
        };
        p.columnsCollectionChanged = function (event) {
            switch (event.kind) {
                case eui.CollectionEventKind.UPDATE:
                    {
                        this.clearVirtualLayoutCache();
                        break;
                    }
                default:
                    {
                        this.clearVirtualLayoutCache();
                        if (this.grid)
                            this.grid.setContentSize(0, 0);
                        break;
                    }
            }
        };
        p.createGridElement = function (factory) {
            this.createdGridElement = true;
            var element = new factory();
            this.elementToFactoryMap.setItem(element, factory);
            return element;
        };
        p.allocateGridElement = function (factory) {
            this.createdGridElement = false;
            var elements = this.freeElementMap.getItem(factory);
            if (elements) {
                var element = elements.pop();
                if (elements.length == 0)
                    this.freeElementMap.delItem(factory);
                if (element)
                    return element;
            }
            return this.createGridElement(factory);
        };
        p.freeGridElement = function (element) {
            if (!element)
                return false;
            element.visible = false;
            var factory = this.elementToFactoryMap.getItem(element);
            if (!factory)
                return false;
            var freeElements = this.freeElementMap.getItem(factory);
            if (!freeElements) {
                freeElements = new Array();
                this.freeElementMap.setItem(factory, freeElements);
            }
            freeElements.push(element);
            return true;
        };
        p.freeGridElements = function (elements) {
            for (var elt_key_a in elements) {
                var elt = elements[elt_key_a];
                this.freeGridElement(elt);
            }
            elements.length = 0;
        };
        p.removeGridElement = function (element) {
            var factory = this.elementToFactoryMap.getItem(element);
            var freeElements = (factory) ? this.freeElementMap.getItem(factory) : null;
            if (freeElements) {
                var index = freeElements.indexOf(element);
                if (index != -1)
                    freeElements.splice(index, 1);
                if (freeElements.length == 0)
                    this.freeElementMap.delItem(factory);
            }
            this.elementToFactoryMap.delItem(element);
            element.visible = false;
            var parent = element.parent; //<eui.IVisualElementContainer>
            if (parent)
                parent.removeElement(element);
        };
        p.layoutItemRenderer = function (renderer, x, y, width, height) {
            var startTime = 0;
            if (this.enablePerformanceStatistics)
                startTime = egret.getTimer();
            if (!isNaN(width) || !isNaN(height)) {
                //                        if(egret.is(renderer,"egret.managers.ILayoutManagerClient")) {
                //                            var validateClientRenderer: egret.managers.ILayoutManagerClient = <egret.managers.ILayoutManagerClient>flash.As3As(renderer,null,"egret.managers.ILayoutManagerClient");
                //                            egret.core.UIGlobals.layoutManager.validateClient(validateClientRenderer,true);
                //                        }
                renderer.setLayoutBoundsSize(width, height);
            }
            if ((egret.is(renderer, "eui.IInvalidating"))) {
                //                        var validateNowRenderer: egret.core.IInvalidating = <egret.core.IInvalidating>flash.As3As(renderer,null,"egret.core.IInvalidating");
                renderer.validateNow();
            }
            renderer.setLayoutBoundsPosition(x, y);
            if (this.enablePerformanceStatistics) {
                var elapsedTime = egret.getTimer() - startTime;
                this.performanceStatistics["layoutGridElementTimes"].push(elapsedTime);
            }
        };
        p.layoutGridElementR = function (elt, bounds) {
            if (bounds)
                this.layoutGridElement(elt, bounds.x, bounds.y, bounds.width, bounds.height);
        };
        p.layoutGridElement = function (elt, x, y, width, height) {
            var temp = egret.$TempRectangle;
            if (width > eui.GridLayout.MAX_ELEMENT_SIZE) {
                var scrollX = Math.max(0, this.target.scrollH);
                this.grid.getLayoutBounds(temp);
                var gridWidth = temp.width; //this.grid.layoutBoundsWidth;
                var newX = Math.max(x, scrollX - eui.GridLayout.ELEMENT_EDGE_PAD);
                var newRight = Math.min(x + width, scrollX + gridWidth + eui.GridLayout.ELEMENT_EDGE_PAD);
                x = newX;
                width = newRight - newX;
            }
            if (height > eui.GridLayout.MAX_ELEMENT_SIZE) {
                var scrollY = Math.max(0, this.target.scrollV);
                this.grid.getLayoutBounds(temp);
                var gridHeight = temp.width; //this.grid.layoutBoundsHeight;
                var newY = Math.max(y, scrollY - eui.GridLayout.ELEMENT_EDGE_PAD);
                var newBottom = Math.min(y + height, scrollY + gridHeight + eui.GridLayout.ELEMENT_EDGE_PAD);
                y = newY;
                height = newBottom - newY;
            }
            elt.setLayoutBoundsSize(width, height);
            elt.setLayoutBoundsPosition(x, y);
        };
        p.intializeGridVisualElement = function (elt, rowIndex, columnIndex) {
            if (rowIndex === void 0) { rowIndex = -1; }
            if (columnIndex === void 0) { columnIndex = -1; }
            var gridVisualElement = elt; //<eui.IGridVisualElement>
            if (gridVisualElement && gridVisualElement.prepareGridVisualElement) {
                gridVisualElement.prepareGridVisualElement(this.grid, rowIndex, columnIndex);
            }
        };
        p.getVisibleRowIndices = function () {
            return this.visibleRowIndices.concat();
        };
        p.getVisibleColumnIndices = function () {
            return this.visibleColumnIndices.concat();
        };
        p.getCellBounds = function (rowIndex, columnIndex) {
            return this.gridDimensions.getCellBounds(rowIndex, columnIndex);
        };
        p.getRowBounds = function (rowIndex) {
            return this.gridDimensions.getRowBounds(rowIndex);
        };
        p.getColumnBounds = function (columnIndex) {
            return this.gridDimensions.getColumnBounds(columnIndex);
        };
        p.getRowIndexAt = function (x, y) {
            return this.gridDimensions.getRowIndexAt(x, y);
        };
        p.getColumnIndexAt = function (x, y) {
            return this.gridDimensions.getColumnIndexAt(x, y);
        };
        p.getCellAt = function (x, y) {
            var rowIndex = this.gridDimensions.getRowIndexAt(x, y);
            var columnIndex = this.gridDimensions.getColumnIndexAt(x, y);
            if ((rowIndex == -1) || (columnIndex == -1))
                return null;
            return new eui.CellPosition(rowIndex, columnIndex);
        };
        p.getCellsAt = function (x, y, w, h) {
            var cells = new Array();
            if (w <= 0 || h <= 0)
                return cells;
            var topLeft = this.getCellAt(x, y);
            var bottomRight = this.getCellAt(x + w, y + h);
            if (!topLeft || !bottomRight)
                return cells;
            for (var rowIndex = topLeft.rowIndex; rowIndex <= bottomRight.rowIndex; rowIndex++) {
                for (var columnIndex = topLeft.columnIndex; columnIndex <= bottomRight.columnIndex; columnIndex++) {
                    cells.push(new eui.CellPosition(rowIndex, columnIndex));
                }
            }
            return cells;
        };
        p.getItemRendererAt = function (rowIndex, columnIndex) {
            var visibleItemRenderer = this.getVisibleItemRenderer(rowIndex, columnIndex);
            if (visibleItemRenderer)
                return visibleItemRenderer;
            var rendererLayer = this.getLayer("rendererLayer");
            if (!rendererLayer)
                return null;
            var dataItem = this.getDataProviderItem(rowIndex);
            var column = this.getGridColumn(columnIndex);
            if (dataItem == null || column == null)
                return null;
            if (!column.visible)
                return null;
            var factory = this.itemToRenderer(column, dataItem);
            var renderer = new factory();
            this.createdGridElement = true;
            rendererLayer.addChild(renderer);
            this.initializeItemRenderer(renderer, rowIndex, columnIndex, dataItem, false);
            var bounds = this.gridDimensions.getCellBounds(rowIndex, columnIndex);
            if (bounds == null)
                return null;
            this.layoutItemRenderer(renderer, bounds.x, bounds.y, bounds.width, bounds.height);
            rendererLayer.removeChild(renderer);
            renderer.visible = false;
            return renderer;
        };
        p.isCellVisible = function (rowIndex, columnIndex) {
            if (rowIndex == -1 && columnIndex == -1)
                return false;
            return ((rowIndex == -1) || (this.visibleRowIndices.indexOf(rowIndex) != -1)) && ((columnIndex == -1) || (this.visibleColumnIndices.indexOf(columnIndex) != -1));
        };
        d(p, "performanceStatistics"
            ,function () {
                return this._performanceStatistics;
            }
            ,function (value) {
                egret.superSetter(eui.GridLayout, this, "performanceStatistics", value);
            }
        );
        d(p, "enablePerformanceStatistics"
            ,function () {
                return this._enablePerformanceStatistics;
            }
            ,function (value) {
                if (value == this._enablePerformanceStatistics)
                    return;
                if (value)
                    this._performanceStatistics = { updateDisplayListTimes: new Array(), updateDisplayListRectangles: new Array(), updateDisplayListCellCounts: new Array(), measureTimes: new Array(), layoutGridElementTimes: new Array() };
                this._enablePerformanceStatistics = value;
            }
        );
        return GridLayout;
    })(eui.LayoutBase);
    eui.GridLayout = GridLayout;
    egret.registerClass(GridLayout,'eui.GridLayout');
})(eui || (eui = {}));
eui.GridLayout._embeddedFontRegistryExists = false;
eui.GridLayout.embeddedFontRegistryExistsInitialized = false;
eui.GridLayout.MAX_ELEMENT_SIZE = 8192;
eui.GridLayout.ELEMENT_EDGE_PAD = 512;
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * Linear layout base class, usually as the parent class of
     * <code>HorizontalLayout</code> and <code>VerticalLayout</code>.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 线性布局基类，通常作为 <code>HorizontalLayout</code> 和 <code>VerticalLayout</code> 的父类。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var LinearLayoutBase = (function (_super) {
        __extends(LinearLayoutBase, _super);
        function LinearLayoutBase() {
            _super.apply(this, arguments);
            /**
             * @private
             */
            this.$horizontalAlign = "left";
            /**
             * @private
             */
            this.$verticalAlign = "top";
            /**
             * @private
             */
            this.$gap = 6;
            /**
             * @private
             */
            this.$paddingLeft = 0;
            /**
             * @private
             */
            this.$paddingRight = 0;
            /**
             * @private
             */
            this.$paddingTop = 0;
            /**
             * @private
             */
            this.$paddingBottom = 0;
            /**
             * @language en_US
             * An Array of the virtual layout elements size cache.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 虚拟布局使用的尺寸缓存。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.elementSizeTable = [];
            /**
             * @language en_US
             * The first element index in the view of the virtual layout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 虚拟布局使用的当前视图中的第一个元素索引
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.startIndex = -1;
            /**
             * @language en_US
             * The last element index in the view of the virtual layout
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 虚拟布局使用的当前视图中的最后一个元素的索引
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.endIndex = -1;
            /**
             * @language en_US
             * A Flag of the first element and the end element has been calculated.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 视图的第一个和最后一个元素的索引值已经计算好的标志
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.indexInViewCalculated = false;
            /**
             * @language en_US
             * The maximum size of elements
             *
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 子元素最大的尺寸
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            this.maxElementSize = 0;
        }
        var c=LinearLayoutBase,p=c.prototype;
        d(p, "horizontalAlign"
            /**
             * @language en_US
             * The horizontal alignment of layout elements.
             * <p>The <code>egret.HorizontalAlign</code> and <code>eui.JustifyAlign</code> class
             * defines the possible values for this property.</p>
             *
             * @default "left"
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 布局元素的水平对齐策略。
             * <p><code>egret.HorizontalAlign</code> 和
             * <code>eui.JustifyAlign</code>类定义此属性的可能值。<p>
             *
             * @default "left"
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$horizontalAlign;
            }
            ,function (value) {
                if (this.$horizontalAlign == value)
                    return;
                this.$horizontalAlign = value;
                if (this.$target)
                    this.$target.invalidateDisplayList();
            }
        );
        d(p, "verticalAlign"
            /**
             * @language en_US
             * The vertical alignment of layout elements.
             * <p>The <code>egret.VerticalAlign</code> and <code>eui.JustifyAlign</code> class
             * defines the possible values for this property.</p>
             *
             * @default "top"
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 布局元素的垂直对齐策略。请使用 VerticalAlign 定义的常量。
             * <p><code>egret.VerticalAlign</code> 和
             * <code>eui.JustifyAlign</code>类定义此属性的可能值。<p>
             *
             * @default "top"
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$verticalAlign;
            }
            ,function (value) {
                if (this.$verticalAlign == value)
                    return;
                this.$verticalAlign = value;
                if (this.$target)
                    this.$target.invalidateDisplayList();
            }
        );
        d(p, "gap"
            /**
             * @language en_US
             * The space between layout elements, in pixels.
             *
             * @default 6
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 布局元素之间的间隔（以像素为单位）。
             *
             * @default 6
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$gap;
            }
            ,function (value) {
                value = +value || 0;
                if (this.$gap === value)
                    return;
                this.$gap = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingLeft"
            /**
             * @language en_US
             * Number of pixels between the container's left edge
             * and the left edge of the first layout element.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 容器的左边缘与第一个布局元素的左边缘之间的像素数。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$paddingLeft;
            }
            ,function (value) {
                value = +value || 0;
                if (this.$paddingLeft === value)
                    return;
                this.$paddingLeft = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingRight"
            /**
             * @language en_US
             * Number of pixels between the container's right edge
             * and the right edge of the last layout element.
             *
             *  @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 容器的右边缘与最后一个布局元素的右边缘之间的像素数。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$paddingRight;
            }
            ,function (value) {
                value = +value || 0;
                if (this.$paddingRight === value)
                    return;
                this.$paddingRight = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingTop"
            /**
             * @language en_US
             * The minimum number of pixels between the container's top edge and
             * the top of all the container's layout elements.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 容器的顶边缘与所有容器的布局元素的顶边缘之间的最少像素数。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$paddingTop;
            }
            ,function (value) {
                value = +value || 0;
                if (this.$paddingTop === value)
                    return;
                this.$paddingTop = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingBottom"
            /**
             * @language en_US
             * The minimum number of pixels between the container's bottom edge and
             * the bottom of all the container's layout elements.
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 容器的底边缘与所有容器的布局元素的底边缘之间的最少像素数。
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this.$paddingBottom;
            }
            ,function (value) {
                value = +value || 0;
                if (this.$paddingBottom === value)
                    return;
                this.$paddingBottom = value;
                this.invalidateTargetLayout();
            }
        );
        /**
         * @language en_US
         * Convenience function for subclasses that invalidates the
         * target's size and displayList so that both layout's <code>measure()</code>
         * and <code>updateDisplayList</code> methods get called.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 失效目标容器的尺寸和显示列表的简便方法，调用目标容器的
         * <code>measure()</code>和<code>updateDisplayList</code>方法
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.invalidateTargetLayout = function () {
            var target = this.$target;
            if (target) {
                target.invalidateSize();
                target.invalidateDisplayList();
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            if (!this.$target)
                return;
            if (this.$useVirtualLayout) {
                this.measureVirtual();
            }
            else {
                this.measureReal();
            }
        };
        /**
         * @language en_US
         * Compute exact values for measuredWidth and measuredHeight.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 计算目标容器 measuredWidth 和 measuredHeight 的精确值
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measureReal = function () {
        };
        /**
         * @language en_US
         * Compute potentially approximate values for measuredWidth and measuredHeight.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 计算目标容器 measuredWidth 和 measuredHeight 的近似值
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measureVirtual = function () {
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (width, height) {
            var target = this.$target;
            if (!target)
                return;
            if (target.numElements == 0) {
                target.setContentSize(Math.ceil(this.$paddingLeft + this.$paddingRight), Math.ceil(this.$paddingTop + this.$paddingBottom));
                return;
            }
            if (this.$useVirtualLayout) {
                this.updateDisplayListVirtual(width, height);
            }
            else {
                this.updateDisplayListReal(width, height);
            }
        };
        /**
         * @language en_US
         * Gets the starting position of the specified index element
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 获取指定索引元素的起始位置
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getStartPosition = function (index) {
            return 0;
        };
        /**
         * @language en_US
         * Gets the size of the specified index element
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 获取指定索引元素的尺寸
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementSize = function (index) {
            return 0;
        };
        /**
         * @language en_US
         * Gets the sum of the size of cached elements
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 获取缓存的子对象尺寸总和
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementTotalSize = function () {
            return 0;
        };
        /**
         * @inheritDoc
         *
         * @param index
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.elementRemoved = function (index) {
            if (!this.$useVirtualLayout)
                return;
            _super.prototype.elementRemoved.call(this, index);
            this.elementSizeTable.splice(index, 1);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.clearVirtualLayoutCache = function () {
            if (!this.$useVirtualLayout)
                return;
            this.elementSizeTable = [];
            this.maxElementSize = 0;
        };
        /**
         * @language en_US
         * The binary search to find the specified index position of the display object
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 折半查找法寻找指定位置的显示对象索引
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.findIndexAt = function (x, i0, i1) {
            var index = ((i0 + i1) * 0.5) | 0;
            var elementX = this.getStartPosition(index);
            var elementWidth = this.getElementSize(index);
            if ((x >= elementX) && (x < elementX + elementWidth + this.$gap))
                return index;
            else if (i0 == i1)
                return -1;
            else if (x < elementX)
                return this.findIndexAt(x, i0, Math.max(i0, index - 1));
            else
                return this.findIndexAt(x, Math.min(index + 1, i1), i1);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.scrollPositionChanged = function () {
            _super.prototype.scrollPositionChanged.call(this);
            if (this.$useVirtualLayout) {
                var changed = this.getIndexInView();
                if (changed) {
                    this.indexInViewCalculated = true;
                    this.target.invalidateDisplayList();
                }
            }
        };
        /**
         * @language en_US
         * Get the index of the first and last element in the view,
         * and to return whether or not to change.
         *
         * @return has the index changed
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 获取视图中第一个和最后一个元素的索引,返回是否发生改变。
         *
         * @return 索引是否已改变
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getIndexInView = function () {
            return false;
        };
        /**
         * @language en_US
         * Update the layout of the virtualized elements
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 更新虚拟布局的显示列表
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayListVirtual = function (width, height) {
        };
        /**
         * @language en_US
         * Update the layout of the reality elements
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 更新真实布局的显示列表
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayListReal = function (width, height) {
        };
        /**
         * @language en_US
         * Allocate blank area for each variable size element.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 为每个可变尺寸的子项分配空白区域。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.flexChildrenProportionally = function (spaceForChildren, spaceToDistribute, totalPercent, childInfoArray) {
            var numElements = childInfoArray.length;
            var done;
            do {
                done = true;
                var unused = spaceToDistribute -
                    (spaceForChildren * totalPercent / 100);
                if (unused > 0)
                    spaceToDistribute -= unused;
                else
                    unused = 0;
                var spacePerPercent = spaceToDistribute / totalPercent;
                for (var i = 0; i < numElements; i++) {
                    var childInfo = childInfoArray[i];
                    var size = childInfo.percent * spacePerPercent;
                    if (size < childInfo.min) {
                        var min = childInfo.min;
                        childInfo.size = min;
                        childInfoArray[i] = childInfoArray[--numElements];
                        childInfoArray[numElements] = childInfo;
                        totalPercent -= childInfo.percent;
                        if (unused >= min) {
                            unused -= min;
                        }
                        else {
                            spaceToDistribute -= min - unused;
                            unused = 0;
                        }
                        done = false;
                        break;
                    }
                    else if (size > childInfo.max) {
                        var max = childInfo.max;
                        childInfo.size = max;
                        childInfoArray[i] = childInfoArray[--numElements];
                        childInfoArray[numElements] = childInfo;
                        totalPercent -= childInfo.percent;
                        if (unused >= max) {
                            unused -= max;
                        }
                        else {
                            spaceToDistribute -= max - unused;
                            unused = 0;
                        }
                        done = false;
                        break;
                    }
                    else {
                        childInfo.size = size;
                    }
                }
            } while (!done);
        };
        return LinearLayoutBase;
    })(eui.LayoutBase);
    eui.LinearLayoutBase = LinearLayoutBase;
    egret.registerClass(LinearLayoutBase,'eui.LinearLayoutBase');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        /**
         * @private
         */
        var ChildInfo = (function () {
            function ChildInfo() {
                /**
                 * @private
                 */
                this.layoutElement = null;
                /**
                 * @private
                 */
                this.size = 0;
                /**
                 * @private
                 */
                this.percent = NaN;
                /**
                 * @private
                 */
                this.min = NaN;
                /**
                 * @private
                 */
                this.max = NaN;
            }
            var c=ChildInfo,p=c.prototype;
            return ChildInfo;
        })();
        sys.ChildInfo = ChildInfo;
        egret.registerClass(ChildInfo,'eui.sys.ChildInfo');
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var UIComponentClass = "eui.UIComponent";
    /**
     * @language en_US
     * The HorizontalLayout class arranges the layout elements in a horizontal sequence,
     * left to right, with optional gaps between the elements and optional padding
     * around the elements.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/HorizontalLayoutExample.ts
     */
    /**
     * @language zh_CN
     * HorizontalLayout 类按水平顺序从左到右排列布局元素，在元素和围绕元素的可选填充之间带有可选间隙。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/HorizontalLayoutExample.ts
     */
    var HorizontalLayout = (function (_super) {
        __extends(HorizontalLayout, _super);
        function HorizontalLayout() {
            _super.apply(this, arguments);
        }
        var c=HorizontalLayout,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measureReal = function () {
            var target = this.$target;
            var count = target.numElements;
            var numElements = count;
            var measuredWidth = 0;
            var measuredHeight = 0;
            var bounds = egret.$TempRectangle;
            for (var i = 0; i < count; i++) {
                var layoutElement = (target.getElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    numElements--;
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                measuredWidth += bounds.width;
                measuredHeight = Math.max(measuredHeight, bounds.height);
            }
            measuredWidth += (numElements - 1) * this.$gap;
            var hPadding = this.$paddingLeft + this.$paddingRight;
            var vPadding = this.$paddingTop + this.$paddingBottom;
            target.setMeasuredSize(measuredWidth + hPadding, measuredHeight + vPadding);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measureVirtual = function () {
            var target = this.$target;
            var typicalWidth = this.$typicalWidth;
            var measuredWidth = this.getElementTotalSize();
            var measuredHeight = Math.max(this.maxElementSize, this.$typicalHeight);
            var bounds = egret.$TempRectangle;
            var endIndex = this.endIndex;
            var elementSizeTable = this.elementSizeTable;
            for (var index = this.startIndex; index < endIndex; index++) {
                var layoutElement = (target.getElementAt(index));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                measuredWidth += bounds.width;
                measuredWidth -= isNaN(elementSizeTable[index]) ? typicalWidth : elementSizeTable[index];
                measuredHeight = Math.max(measuredHeight, bounds.height);
            }
            var hPadding = this.$paddingLeft + this.$paddingRight;
            var vPadding = this.$paddingTop + this.$paddingBottom;
            target.setMeasuredSize(measuredWidth + hPadding, measuredHeight + vPadding);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayListReal = function (width, height) {
            var target = this.$target;
            var paddingL = this.$paddingLeft;
            var paddingR = this.$paddingRight;
            var paddingT = this.$paddingTop;
            var paddingB = this.$paddingBottom;
            var gap = this.$gap;
            var targetWidth = Math.max(0, width - paddingL - paddingR);
            var targetHeight = Math.max(0, height - paddingT - paddingB);
            var hJustify = this.$horizontalAlign == eui.JustifyAlign.JUSTIFY;
            var vJustify = this.$verticalAlign == eui.JustifyAlign.JUSTIFY || this.$verticalAlign == eui.JustifyAlign.CONTENT_JUSTIFY;
            var vAlign = 0;
            if (!vJustify) {
                if (this.$verticalAlign == egret.VerticalAlign.MIDDLE) {
                    vAlign = 0.5;
                }
                else if (this.$verticalAlign == egret.VerticalAlign.BOTTOM) {
                    vAlign = 1;
                }
            }
            var count = target.numElements;
            var numElements = count;
            var x = paddingL;
            var y = paddingT;
            var i;
            var layoutElement;
            var totalPreferredWidth = 0;
            var totalPercentWidth = 0;
            var childInfoArray = [];
            var childInfo;
            var widthToDistribute = targetWidth;
            var maxElementHeight = this.maxElementSize;
            var bounds = egret.$TempRectangle;
            for (i = 0; i < count; i++) {
                var layoutElement = (target.getElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    numElements--;
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                maxElementHeight = Math.max(maxElementHeight, bounds.height);
                if (hJustify) {
                    totalPreferredWidth += bounds.width;
                }
                else {
                    var values = layoutElement.$UIComponent;
                    if (!isNaN(values[6 /* percentWidth */])) {
                        totalPercentWidth += values[6 /* percentWidth */];
                        childInfo = new eui.sys.ChildInfo();
                        childInfo.layoutElement = layoutElement;
                        childInfo.percent = values[6 /* percentWidth */];
                        childInfo.min = values[12 /* minWidth */];
                        childInfo.max = values[13 /* maxWidth */];
                        childInfoArray.push(childInfo);
                    }
                    else {
                        widthToDistribute -= bounds.width;
                    }
                }
            }
            widthToDistribute -= gap * (numElements - 1);
            widthToDistribute = widthToDistribute > 0 ? widthToDistribute : 0;
            var excessSpace = targetWidth - totalPreferredWidth - gap * (numElements - 1);
            var averageWidth;
            var largeChildrenCount = numElements;
            var widthDic = {};
            if (hJustify) {
                if (excessSpace < 0) {
                    averageWidth = widthToDistribute / numElements;
                    for (i = 0; i < count; i++) {
                        layoutElement = (target.getElementAt(i));
                        if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                            continue;
                        }
                        layoutElement.getPreferredBounds(bounds);
                        if (bounds.width <= averageWidth) {
                            widthToDistribute -= bounds.width;
                            largeChildrenCount--;
                            continue;
                        }
                    }
                    widthToDistribute = widthToDistribute > 0 ? widthToDistribute : 0;
                }
            }
            else {
                if (totalPercentWidth > 0) {
                    this.flexChildrenProportionally(targetWidth, widthToDistribute, totalPercentWidth, childInfoArray);
                    var roundOff = 0;
                    var length = childInfoArray.length;
                    for (i = 0; i < length; i++) {
                        childInfo = childInfoArray[i];
                        var childSize = Math.round(childInfo.size + roundOff);
                        roundOff += childInfo.size - childSize;
                        widthDic[childInfo.layoutElement.$hashCode] = childSize;
                        widthToDistribute -= childSize;
                    }
                    widthToDistribute = widthToDistribute > 0 ? widthToDistribute : 0;
                }
            }
            if (this.$horizontalAlign == egret.HorizontalAlign.CENTER) {
                x = paddingL + widthToDistribute * 0.5;
            }
            else if (this.$horizontalAlign == egret.HorizontalAlign.RIGHT) {
                x = paddingL + widthToDistribute;
            }
            var maxX = paddingL;
            var maxY = paddingT;
            var dx = 0;
            var dy = 0;
            var justifyHeight = Math.ceil(targetHeight);
            if (this.$verticalAlign == eui.JustifyAlign.CONTENT_JUSTIFY)
                justifyHeight = Math.ceil(Math.max(targetHeight, maxElementHeight));
            roundOff = 0;
            var layoutElementWidth;
            var childWidth;
            for (i = 0; i < count; i++) {
                var exceesHeight = 0;
                layoutElement = (target.getElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                layoutElementWidth = NaN;
                if (hJustify) {
                    childWidth = NaN;
                    if (excessSpace > 0) {
                        childWidth = widthToDistribute * bounds.width / totalPreferredWidth;
                    }
                    else if (excessSpace < 0 && bounds.width > averageWidth) {
                        childWidth = widthToDistribute / largeChildrenCount;
                    }
                    if (!isNaN(childWidth)) {
                        layoutElementWidth = Math.round(childWidth + roundOff);
                        roundOff += childWidth - layoutElementWidth;
                    }
                }
                else {
                    layoutElementWidth = widthDic[layoutElement.$hashCode];
                }
                if (vJustify) {
                    y = paddingT;
                    layoutElement.setLayoutBoundsSize(layoutElementWidth, justifyHeight);
                    layoutElement.getLayoutBounds(bounds);
                }
                else {
                    var layoutElementHeight = NaN;
                    var values = layoutElement.$UIComponent;
                    if (!isNaN(layoutElement.percentHeight)) {
                        var percent = Math.min(100, values[7 /* percentHeight */]);
                        layoutElementHeight = Math.round(targetHeight * percent * 0.01);
                    }
                    layoutElement.setLayoutBoundsSize(layoutElementWidth, layoutElementHeight);
                    layoutElement.getLayoutBounds(bounds);
                    exceesHeight = (targetHeight - bounds.height) * vAlign;
                    exceesHeight = exceesHeight > 0 ? exceesHeight : 0;
                    y = paddingT + exceesHeight;
                }
                layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
                dx = Math.ceil(bounds.width);
                dy = Math.ceil(bounds.height);
                maxX = Math.max(maxX, x + dx);
                maxY = Math.max(maxY, y + dy);
                x += dx + gap;
            }
            this.maxElementSize = maxElementHeight;
            target.setContentSize(maxX + paddingR, maxY + paddingB);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayListVirtual = function (width, height) {
            var target = this.$target;
            if (this.indexInViewCalculated)
                this.indexInViewCalculated = false;
            else
                this.getIndexInView();
            var paddingR = this.$paddingRight;
            var paddingT = this.$paddingTop;
            var paddingB = this.$paddingBottom;
            var gap = this.$gap;
            var contentWidth;
            var numElements = target.numElements;
            if (this.startIndex == -1 || this.endIndex == -1) {
                contentWidth = this.getStartPosition(numElements) - gap + paddingR;
                target.setContentSize(contentWidth, target.contentHeight);
                return;
            }
            var endIndex = this.endIndex;
            target.setVirtualElementIndicesInView(this.startIndex, endIndex);
            //获取垂直布局参数
            var justify = this.$verticalAlign == eui.JustifyAlign.JUSTIFY || this.$verticalAlign == eui.JustifyAlign.CONTENT_JUSTIFY;
            var contentJustify = this.$verticalAlign == eui.JustifyAlign.CONTENT_JUSTIFY;
            var vAlign = 0;
            if (!justify) {
                if (this.$verticalAlign == egret.VerticalAlign.MIDDLE) {
                    vAlign = 0.5;
                }
                else if (this.$verticalAlign == egret.VerticalAlign.BOTTOM) {
                    vAlign = 1;
                }
            }
            var bounds = egret.$TempRectangle;
            var targetHeight = Math.max(0, height - paddingT - paddingB);
            var justifyHeight = Math.ceil(targetHeight);
            var layoutElement;
            var typicalHeight = this.$typicalHeight;
            var typicalWidth = this.$typicalWidth;
            var maxElementHeight = this.maxElementSize;
            var oldMaxH = Math.max(typicalHeight, this.maxElementSize);
            if (contentJustify) {
                for (var index = this.startIndex; index <= endIndex; index++) {
                    layoutElement = (target.getVirtualElementAt(index));
                    if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                        continue;
                    }
                    layoutElement.getPreferredBounds(bounds);
                    maxElementHeight = Math.max(maxElementHeight, bounds.height);
                }
                justifyHeight = Math.ceil(Math.max(targetHeight, maxElementHeight));
            }
            var x = 0;
            var y = 0;
            var contentHeight = 0;
            var oldElementSize;
            var needInvalidateSize = false;
            var elementSizeTable = this.elementSizeTable;
            //对可见区域进行布局
            for (var i = this.startIndex; i <= endIndex; i++) {
                var exceesHeight = 0;
                layoutElement = (target.getVirtualElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                if (!contentJustify) {
                    maxElementHeight = Math.max(maxElementHeight, bounds.height);
                }
                if (justify) {
                    y = paddingT;
                    layoutElement.setLayoutBoundsSize(NaN, justifyHeight);
                    layoutElement.getLayoutBounds(bounds);
                }
                else {
                    layoutElement.getLayoutBounds(bounds);
                    exceesHeight = (targetHeight - bounds.height) * vAlign;
                    exceesHeight = exceesHeight > 0 ? exceesHeight : 0;
                    y = paddingT + exceesHeight;
                }
                contentHeight = Math.max(contentHeight, bounds.height);
                if (!needInvalidateSize) {
                    oldElementSize = isNaN(elementSizeTable[i]) ? typicalWidth : elementSizeTable[i];
                    if (oldElementSize != bounds.width)
                        needInvalidateSize = true;
                }
                elementSizeTable[i] = bounds.width;
                x = this.getStartPosition(i);
                layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
            }
            contentHeight += paddingT + paddingB;
            contentWidth = this.getStartPosition(numElements) - gap + paddingR;
            this.maxElementSize = maxElementHeight;
            target.setContentSize(contentWidth, contentHeight);
            if (needInvalidateSize || oldMaxH < this.maxElementSize) {
                target.invalidateSize();
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getStartPosition = function (index) {
            if (!this.$useVirtualLayout) {
                if (this.$target) {
                    var element = this.$target.getElementAt(index);
                    if (element) {
                        return element.x;
                    }
                }
            }
            var typicalWidth = this.$typicalWidth;
            var startPos = this.$paddingLeft;
            var gap = this.$gap;
            var elementSizeTable = this.elementSizeTable;
            for (var i = 0; i < index; i++) {
                var w = elementSizeTable[i];
                if (isNaN(w)) {
                    w = typicalWidth;
                }
                startPos += w + gap;
            }
            return startPos;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementSize = function (index) {
            if (this.$useVirtualLayout) {
                var size = this.elementSizeTable[index];
                if (isNaN(size)) {
                    size = this.$typicalWidth;
                }
                return size;
            }
            if (this.$target) {
                return this.$target.getElementAt(index).width;
            }
            return 0;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementTotalSize = function () {
            var typicalWidth = this.$typicalWidth;
            var gap = this.$gap;
            var totalSize = 0;
            var length = this.$target.numElements;
            var elementSizeTable = this.elementSizeTable;
            for (var i = 0; i < length; i++) {
                var w = elementSizeTable[i];
                if (isNaN(w)) {
                    w = typicalWidth;
                }
                totalSize += w + gap;
            }
            totalSize -= gap;
            return totalSize;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.elementAdded = function (index) {
            if (!this.useVirtualLayout)
                return;
            _super.prototype.elementAdded.call(this, index);
            this.elementSizeTable.splice(index, 0, this.$typicalWidth);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getIndexInView = function () {
            var target = this.$target;
            if (!target || target.numElements == 0) {
                this.startIndex = this.endIndex = -1;
                return false;
            }
            var values = target.$UIComponent;
            if (values[10 /* width */] <= 0 || values[11 /* height */] <= 0) {
                this.startIndex = this.endIndex = -1;
                return false;
            }
            var numElements = target.numElements;
            var contentWidth = this.getStartPosition(numElements - 1) +
                this.elementSizeTable[numElements - 1] + this.$paddingRight;
            var minVisibleX = target.scrollH;
            if (minVisibleX > contentWidth - this.$paddingRight) {
                this.startIndex = -1;
                this.endIndex = -1;
                return false;
            }
            var maxVisibleX = target.scrollH + values[10 /* width */];
            if (maxVisibleX < this.$paddingLeft) {
                this.startIndex = -1;
                this.endIndex = -1;
                return false;
            }
            var oldStartIndex = this.startIndex;
            var oldEndIndex = this.endIndex;
            this.startIndex = this.findIndexAt(minVisibleX, 0, numElements - 1);
            if (this.startIndex == -1)
                this.startIndex = 0;
            this.endIndex = this.findIndexAt(maxVisibleX, 0, numElements - 1);
            if (this.endIndex == -1)
                this.endIndex = numElements - 1;
            return oldStartIndex != this.startIndex || oldEndIndex != this.endIndex;
        };
        return HorizontalLayout;
    })(eui.LinearLayoutBase);
    eui.HorizontalLayout = HorizontalLayout;
    egret.registerClass(HorizontalLayout,'eui.HorizontalLayout');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The JustifyAlign class defines the possible values for the
     * <code>horizontalAlign</code> 和 <code>verticalAlign</code> property of
     * Layout class.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/JustifyAlignExample.ts
     */
    /**
     * @language zh_CN
     * JustifyAlign 定义布局类中 horizontalAlign 与 verticalAlign 属性需要的两端对齐常量值。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/JustifyAlignExample.ts
     */
    var JustifyAlign = (function () {
        function JustifyAlign() {
        }
        var c=JustifyAlign,p=c.prototype;
        /**
         * @language en_US
         * Justify the children with respect to the container.
         * This uniformly sizes all children to be the same size as the
         * container.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 相对于容器对齐子代。这会将所有子代的大小统一调整为与容器相同的尺寸。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        JustifyAlign.JUSTIFY = "justify";
        /**
         * @language en_US
         * Content justify the children width/height respect to the container.
         * This uniformly sizes all children to be the content width/height of the container.
         * The content width/height of the container is the size of the largest child.
         * If all children are smaller than the width/height of the container, then
         * all the children will be sized to the width/height of the container.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 相对于容器对子代进行内容对齐。这会将所有子代的大小统一调整为容器的内容宽度/高度。
         * 容器的内容宽度/高度是最大子代的大小。如果所有子代都小于容器的宽度/高度，则会将所有子代的大小调整为容器的宽度/高度。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        JustifyAlign.CONTENT_JUSTIFY = "contentJustify";
        return JustifyAlign;
    })();
    eui.JustifyAlign = JustifyAlign;
    egret.registerClass(JustifyAlign,'eui.JustifyAlign');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The RowAlign class defines the possible values for the
     * <code>rowAlign</code> property of the TileLayout class.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/RowAlignExample.ts
     */
    /**
     * @language zh_CN
     * RowAlign 类为 TileLayout 类的 <code>rowAlign</code> 属性定义可能的值。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/RowAlignExample.ts
     */
    var RowAlign = (function () {
        function RowAlign() {
        }
        var c=RowAlign,p=c.prototype;
        /**
         * @language en_US
         * Do not justify the rows.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 不进行两端对齐。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        RowAlign.TOP = "top";
        /**
         * @language en_US
         * Justify the rows by increasing the vertical gap.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 通过增大垂直间隙将行两端对齐。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        RowAlign.JUSTIFY_USING_GAP = "justifyUsingGap";
        /**
         * @language en_US
         * Justify the rows by increasing the row height.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 通过增大行高度将行两端对齐。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        RowAlign.JUSTIFY_USING_HEIGHT = "justifyUsingHeight";
        return RowAlign;
    })();
    eui.RowAlign = RowAlign;
    egret.registerClass(RowAlign,'eui.RowAlign');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var UIComponentClass = "eui.UIComponent";
    /**
     * @language en_US
     * The TileLayout class arranges layout elements in columns and rows
     * of equally-sized cells.
     * The TileLayout class uses a number of properties that control orientation,
     * count, size, gap and justification of the columns and the rows
     * as well as element alignment within the cells.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/TileLayoutExample.ts
     */
    /**
     * @language zh_CN
     * TileLayout 类在单元格大小相等的列和行中排列布局元素。
     * TileLayout 类使用许多属性来控制列和行的方向、计数、大小、间隙和两端对齐以及单元格内的元素对齐。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/TileLayoutExample.ts
     */
    var TileLayout = (function (_super) {
        __extends(TileLayout, _super);
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 构造函数。
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function TileLayout() {
            _super.call(this);
            /**
             * @private
             * 标记horizontalGap被显式指定过
             */
            this.explicitHorizontalGap = NaN;
            /**
             * @private
             */
            this._horizontalGap = 6;
            /**
             * @private
             * 标记verticalGap被显式指定过
             */
            this.explicitVerticalGap = NaN;
            /**
             * @private
             */
            this._verticalGap = 6;
            /**
             * @private
             */
            this._columnCount = -1;
            /**
             * @private
             */
            this._requestedColumnCount = 0;
            /**
             * @private
             */
            this._rowCount = -1;
            /**
             * @private
             */
            this._requestedRowCount = 0;
            /**
             * @private
             * 外部显式指定的列宽
             */
            this.explicitColumnWidth = NaN;
            /**
             * @private
             */
            this._columnWidth = NaN;
            /**
             * @private
             * 外部显式指定的行高
             */
            this.explicitRowHeight = NaN;
            /**
             * @private
             */
            this._rowHeight = NaN;
            /**
             * @private
             */
            this._paddingLeft = 0;
            /**
             * @private
             */
            this._paddingRight = 0;
            /**
             * @private
             */
            this._paddingTop = 0;
            /**
             * @private
             */
            this._paddingBottom = 0;
            /**
             * @private
             */
            this._horizontalAlign = eui.JustifyAlign.JUSTIFY;
            /**
             * @private
             */
            this._verticalAlign = eui.JustifyAlign.JUSTIFY;
            /**
             * @private
             */
            this._columnAlign = eui.ColumnAlign.LEFT;
            /**
             * @private
             */
            this._rowAlign = eui.RowAlign.TOP;
            /**
             * @private
             */
            this._orientation = eui.TileOrientation.ROWS;
            /**
             * @private
             * 缓存的最大子对象宽度
             */
            this.maxElementWidth = 0;
            /**
             * @private
             * 缓存的最大子对象高度
             */
            this.maxElementHeight = 0;
            /**
             * @private
             * 当前视图中的第一个元素索引
             */
            this.startIndex = -1;
            /**
             * @private
             * 当前视图中的最后一个元素的索引
             */
            this.endIndex = -1;
            /**
             * @private
             * 视图的第一个和最后一个元素的索引值已经计算好的标志
             */
            this.indexInViewCalculated = false;
        }
        var c=TileLayout,p=c.prototype;
        d(p, "horizontalGap"
            /**
             * @language en_US
             * Horizontal space between columns, in pixels.
             *
             * @default 6
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 列之间的水平空间（以像素为单位）。
             *
             * @default 6
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._horizontalGap;
            }
            ,function (value) {
                value = +value;
                if (value === this._horizontalGap)
                    return;
                this.explicitHorizontalGap = value;
                this._horizontalGap = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "verticalGap"
            /**
             * @language en_US
             * Vertical space between rows, in pixels.
             *
             * @default 6
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 行之间的垂直空间（以像素为单位）。
             *
             * @default 6
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._verticalGap;
            }
            ,function (value) {
                value = +value;
                if (value === this._verticalGap)
                    return;
                this.explicitVerticalGap = value;
                this._verticalGap = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "columnCount"
            /**
             * @language en_US
             * Contain the actual column count.
             *
             * @default -1
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             *  实际列计数。
             *
             * @default -1
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._columnCount;
            }
        );
        d(p, "requestedColumnCount"
            /**
             * @language en_US
             * Number of columns to be displayed.
             * <p>Set to 0 to allow the TileLayout to determine
             * the column count automatically.</p>
             * <p>If the <code>orientation</code> property is set to <code>TileOrientation.ROWS</code>,
             * then setting this property has no effect
             * In this case, the <code>rowCount</code> is explicitly set, and the
             * container width is explicitly set. </p>
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 要显示的列数。
             * <p>设置为 0 会允许 TileLayout 自动确定列计数。</p>
             * <p>如果将 <code>orientation</code> 属性设置为 <code>TileOrientation.ROWS</code>，
             * 则设置此属性不会产生任何效果。这种情况下，会显式设置 code>rowCount</code>，并显式设置容器宽度。</p>
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._requestedColumnCount;
            }
            ,function (value) {
                value = +value || 0;
                if (this._requestedColumnCount === value)
                    return;
                this._requestedColumnCount = value;
                this._columnCount = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "rowCount"
            /**
             * @language en_US
             * The row count.
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             *  行计数。
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._rowCount;
            }
        );
        d(p, "requestedRowCount"
            /**
             * @language en_US
             * Number of rows to be displayed.
             * <p>Set to 0 to remove explicit override and allow the TileLayout to determine
             * the row count automatically.</p>
             * <p>If the <code>orientation</code> property is set to
             * <code>TileOrientation.COLUMNS</code>, setting this property has no effect.
             * in this case, <code>columnCount</code> is explicitly set, and the
             * container height is explicitly set.</p>
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 要显示的行数。
             * <code>设置为 -1 会删除显式覆盖并允许 TileLayout 自动确定行计数。</code>
             * <code>如果将 <code>orientation</code> 属性设置为 <code>TileOrientation.COLUMNS</code>，
             * 则设置此属性不会产生任何效果。这种情况下，会显式设置 <code>columnCount</code>，并显式设置容器高度。</code>
             *
             * @default 0
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._requestedRowCount;
            }
            ,function (value) {
                value = +value || 0;
                if (this._requestedRowCount == value)
                    return;
                this._requestedRowCount = value;
                this._rowCount = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "columnWidth"
            /**
             * @language en_US
             * Contain the actual column width, in pixels.
             * <p>If not explicitly set, the column width is
             * determined from the width of the widest element. </p>
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 包含实际列宽（以像素为单位）。
             * <p>若未显式设置，则从根据最宽的元素的宽度确定列宽度。</p>
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._columnWidth;
            }
            ,function (value) {
                value = +value;
                if (value === this._columnWidth)
                    return;
                this.explicitColumnWidth = value;
                this._columnWidth = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "rowHeight"
            /**
             * @language en_US
             * The row height, in pixels.
             * <p>If not explicitly set, the row height is
             * determined from the maximum of elements' height.</p>
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 行高（以像素为单位）。
             * <p>如果未显式设置，则从元素的高度的最大值确定行高度。<p>
             *
             * @default NaN
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._rowHeight;
            }
            ,function (value) {
                value = +value;
                if (value === this._rowHeight)
                    return;
                this.explicitRowHeight = value;
                this._rowHeight = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingLeft"
            /**
             * @copy eui.LinearLayoutBase#paddingLeft
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._paddingLeft;
            }
            ,function (value) {
                value = +value || 0;
                if (this._paddingLeft == value)
                    return;
                this._paddingLeft = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingRight"
            /**
             * @copy eui.LinearLayoutBase#paddingRight
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._paddingRight;
            }
            ,function (value) {
                value = +value || 0;
                if (this._paddingRight === value)
                    return;
                this._paddingRight = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingTop"
            /**
             * @copy eui.LinearLayoutBase#paddingTop
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._paddingTop;
            }
            ,function (value) {
                value = +value || 0;
                if (this._paddingTop == value)
                    return;
                this._paddingTop = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "paddingBottom"
            /**
             * @copy eui.LinearLayoutBase#paddingBottom
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._paddingBottom;
            }
            ,function (value) {
                value = +value || 0;
                if (this._paddingBottom === value)
                    return;
                this._paddingBottom = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "horizontalAlign"
            /**
             * @language en_US
             * Specifies how to align the elements within the cells in the horizontal direction.
             * Supported values are
             * HorizontalAlign.LEFT、HorizontalAlign.CENTER、
             * HorizontalAlign.RIGHT、JustifyAlign.JUSTIFY。
             *
             * @default <code>JustifyAlign.JUSTIFY</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 指定如何在水平方向上对齐单元格内的元素。支持的值有
             * HorizontalAlign.LEFT、HorizontalAlign.CENTER、
             * HorizontalAlign.RIGHT、JustifyAlign.JUSTIFY。
             *
             * @default <code>JustifyAlign.JUSTIFY</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._horizontalAlign;
            }
            ,function (value) {
                if (this._horizontalAlign == value)
                    return;
                this._horizontalAlign = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "verticalAlign"
            /**
             * @language en_US
             * 指定如何在垂直方向上对齐单元格内的元素。
             * 支持的值有 VerticalAlign.TOP、VerticalAlign.MIDDLE、
             * VerticalAlign.BOTTOM、JustifyAlign.JUSTIFY。
             * 默认值：JustifyAlign.JUSTIFY。
             *
             * @default <code>eui.JustifyAlign.JUSTIFY</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * Specifies how to align the elements within the cells in the vertical direction.
             * Supported values are
             * VerticalAlign.TOP、VerticalAlign.MIDDLE、
             * VerticalAlign.BOTTOM、JustifyAlign.JUSTIFY。
             *
             * @default <code>eui.JustifyAlign.JUSTIFY</code>
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._verticalAlign;
            }
            ,function (value) {
                if (this._verticalAlign == value)
                    return;
                this._verticalAlign = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "columnAlign"
            /**
             * @language en_US
             * Specifies how to justify the fully visible columns to the container width.
             *
             * <p>When set to <code>ColumnAlign.LEFT</code> it turns column justification off.
             *  There may be partially visible columns or whitespace between the last column and
             *  the right edge of the container.  This is the default value.</p>
             *
             * <p>When set to <code>ColumnAlign.JUSTIFY_USING_GAP</code> the <code>horizontalGap</code>
             * actual value increases so that
             * the last fully visible column right edge aligns with the container's right edge.
             * In case there is only a single fully visible column, the <code>horizontalGap</code> actual value
             * increases so that it pushes any partially visible column beyond the right edge
             * of the container.
             * Note that explicitly setting the <code>horizontalGap</code> property does not turn off
             * justification. It only determines the initial gap value.
             * Justification may increases it.</p>
             *
             * <p>When set to <code>ColumnAlign.JUSTIFY_USING_WIDTH</code> the <code>columnWidth</code>
             * actual value increases so that
             * the last fully visible column right edge aligns with the container's right edge.
             * Note that explicitly setting the <code>columnWidth</code> property does not turn off justification.
             * It only determines the initial column width value.
             * Justification may increases it.</p>
             *
             * @default ColumnAlign.LEFT
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 指定如何将完全可见列与容器宽度对齐。
             *
             * <p>设置为 <code>ColumnAlign.LEFT</code> 时，它会关闭列两端对齐。
             * 在容器的最后一列和右边缘之间可能存在部分可见的列或空白。这是默认值。</p>
             *
             * <p>设置为 <code>ColumnAlign.JUSTIFY_USING_GAP</code> 时，<code>horizontalGap</code> 的实际值将增大，
             * 这样最后一个完全可见列右边缘会与容器的右边缘对齐。仅存在一个完全可见列时，
             * <code>horizontalGap</code> 的实际值将增大，这样它会将任何部分可见列推到容器的右边缘之外。
             * 请注意显式设置 <code>horizontalGap</code> 属性不会关闭两端对齐。它仅确定初始间隙值。两端对齐可能会增大它。</p>
             *
             * <p>设置为 <code>ColumnAlign.JUSTIFY_USING_WIDTH</code> 时，<code>columnWidth</code> 的实际值将增大，
             * 这样最后一个完全可见列右边缘会与容器的右边缘对齐。请注意显式设置 <code>columnWidth</code> 属性不会关闭两端对齐。
             * 它仅确定初始列宽度值。两端对齐可能会增大它。</p>
             *
             * @default ColumnAlign.LEFT
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._columnAlign;
            }
            ,function (value) {
                if (this._columnAlign == value)
                    return;
                this._columnAlign = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "rowAlign"
            /**
             * @language en_US
             * Specifies how to justify the fully visible rows to the container height.
             *
             * <p>When set to <code>RowAlign.TOP</code> it turns column justification off.
             * There might be partially visible rows or whitespace between the last row and
             * the bottom edge of the container.  This is the default value.</p>
             *
             * <p>When set to <code>RowAlign.JUSTIFY_USING_GAP</code> the <code>verticalGap</code>
             * actual value increases so that
             * the last fully visible row bottom edge aligns with the container's bottom edge.
             * In case there is only a single fully visible row, the value of <code>verticalGap</code>
             * increases so that it pushes any partially visible row beyond the bottom edge
             * of the container.  Note that explicitly setting the <code>verticalGap</code> does not turn off
             * justification, but just determines the initial gap value.
             * Justification can then increases it.</p>
             *
             * <p>When set to <code>RowAlign.JUSTIFY_USING_HEIGHT</code> the <code>rowHeight</code>
             * actual value increases so that
             * the last fully visible row bottom edge aligns with the container's bottom edge.  Note that
             * explicitly setting the <code>rowHeight</code> does not turn off justification, but
             * determines the initial row height value.
             * Justification can then increase it.</p>
             *
             * @default RowAlign.TOP
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 指定如何将完全可见行与容器高度对齐。
             *
             * <p>设置为 <code>RowAlign.TOP</code> 时，它会关闭列两端对齐。
             * 在容器的最后一行和底边缘之间可能存在部分可见的行或空白。这是默认值。</p>
             *
             * <p>设置为 <code>RowAlign.JUSTIFY_USING_GAP</code> 时，<code>verticalGap</code> 的实际值会增大，
             * 这样最后一个完全可见行底边缘会与容器的底边缘对齐。仅存在一个完全可见行时，<code>verticalGap</code> 的值会增大，
             * 这样它会将任何部分可见行推到容器的底边缘之外。请注意，显式设置 <code>verticalGap</code>
             * 不会关闭两端对齐，而只是确定初始间隙值。两端对齐接着可以增大它。</p>
             *
             * <p>设置为 <code>RowAlign.JUSTIFY_USING_HEIGHT</code> 时，<code>rowHeight</code> 的实际值会增大，
             * 这样最后一个完全可见行底边缘会与容器的底边缘对齐。请注意，显式设置 <code>rowHeight</code>
             * 不会关闭两端对齐，而只是确定初始行高度值。两端对齐接着可以增大它。</p>
             *
             * @default RowAlign.TOP
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._rowAlign;
            }
            ,function (value) {
                if (this._rowAlign == value)
                    return;
                this._rowAlign = value;
                this.invalidateTargetLayout();
            }
        );
        d(p, "orientation"
            /**
             * @language en_US
             * Specifies whether elements are arranged row by row or
             * column by column.
             *
             * @default TileOrientation.ROWS
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            /**
             * @language zh_CN
             * 指定是逐行还是逐列排列元素。
             *
             * @default TileOrientation.ROWS
             *
             * @version Egret 2.4
             * @version eui 1.0
             * @platform Web,Native
             */
            ,function () {
                return this._orientation;
            }
            ,function (value) {
                if (this._orientation == value)
                    return;
                this._orientation = value;
                this.invalidateTargetLayout();
            }
        );
        /**
         * @private
         * 标记目标容器的尺寸和显示列表失效
         */
        p.invalidateTargetLayout = function () {
            var target = this.$target;
            if (target) {
                target.invalidateSize();
                target.invalidateDisplayList();
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measure = function () {
            var target = this.$target;
            if (!target)
                return;
            var savedColumnCount = this._columnCount;
            var savedRowCount = this._rowCount;
            var savedColumnWidth = this._columnWidth;
            var savedRowHeight = this._rowHeight;
            var measuredWidth = 0;
            var measuredHeight = 0;
            var values = target.$UIComponent;
            this.calculateRowAndColumn(values[8 /* explicitWidth */], values[9 /* explicitHeight */]);
            var columnCount = this._requestedColumnCount > 0 ? this._requestedColumnCount : this._columnCount;
            var rowCount = this._requestedRowCount > 0 ? this._requestedRowCount : this._rowCount;
            var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
            var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
            if (columnCount > 0) {
                measuredWidth = columnCount * (this._columnWidth + horizontalGap) - horizontalGap;
            }
            if (rowCount > 0) {
                measuredHeight = rowCount * (this._rowHeight + verticalGap) - verticalGap;
            }
            var hPadding = this._paddingLeft + this._paddingRight;
            var vPadding = this._paddingTop + this._paddingBottom;
            target.setMeasuredSize(measuredWidth + hPadding, measuredHeight + vPadding);
            this._columnCount = savedColumnCount;
            this._rowCount = savedRowCount;
            this._columnWidth = savedColumnWidth;
            this._rowHeight = savedRowHeight;
        };
        /**
         * @private
         * 计算行和列的尺寸及数量
         */
        p.calculateRowAndColumn = function (explicitWidth, explicitHeight) {
            var target = this.$target;
            var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
            var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
            this._rowCount = this._columnCount = -1;
            var numElements = target.numElements;
            var count = numElements;
            for (var index = 0; index < count; index++) {
                var layoutElement = (target.getElementAt(index));
                if (layoutElement && (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout)) {
                    numElements--;
                    continue;
                }
            }
            if (numElements == 0) {
                this._rowCount = this._columnCount = 0;
                return;
            }
            if (isNaN(this.explicitColumnWidth) || isNaN(this.explicitRowHeight))
                this.updateMaxElementSize();
            if (isNaN(this.explicitColumnWidth)) {
                this._columnWidth = this.maxElementWidth;
            }
            else {
                this._columnWidth = this.explicitColumnWidth;
            }
            if (isNaN(this.explicitRowHeight)) {
                this._rowHeight = this.maxElementHeight;
            }
            else {
                this._rowHeight = this.explicitRowHeight;
            }
            var itemWidth = this._columnWidth + horizontalGap;
            //防止出现除数为零的情况
            if (itemWidth <= 0)
                itemWidth = 1;
            var itemHeight = this._rowHeight + verticalGap;
            if (itemHeight <= 0)
                itemHeight = 1;
            var orientedByColumns = (this._orientation == eui.TileOrientation.COLUMNS);
            var widthHasSet = !isNaN(explicitWidth);
            var heightHasSet = !isNaN(explicitHeight);
            var paddingL = this._paddingLeft;
            var paddingR = this._paddingRight;
            var paddingT = this._paddingTop;
            var paddingB = this._paddingBottom;
            if (this._requestedColumnCount > 0 || this._requestedRowCount > 0) {
                if (this._requestedRowCount > 0)
                    this._rowCount = Math.min(this._requestedRowCount, numElements);
                if (this._requestedColumnCount > 0)
                    this._columnCount = Math.min(this._requestedColumnCount, numElements);
            }
            else if (!widthHasSet && !heightHasSet) {
                var side = Math.sqrt(numElements * itemWidth * itemHeight);
                if (orientedByColumns) {
                    this._rowCount = Math.max(1, Math.round(side / itemHeight));
                }
                else {
                    this._columnCount = Math.max(1, Math.round(side / itemWidth));
                }
            }
            else if (widthHasSet && (!heightHasSet || !orientedByColumns)) {
                var targetWidth = Math.max(0, explicitWidth - paddingL - paddingR);
                this._columnCount = Math.floor((targetWidth + horizontalGap) / itemWidth);
                this._columnCount = Math.max(1, Math.min(this._columnCount, numElements));
            }
            else {
                var targetHeight = Math.max(0, explicitHeight - paddingT - paddingB);
                this._rowCount = Math.floor((targetHeight + verticalGap) / itemHeight);
                this._rowCount = Math.max(1, Math.min(this._rowCount, numElements));
            }
            if (this._rowCount == -1)
                this._rowCount = Math.max(1, Math.ceil(numElements / this._columnCount));
            if (this._columnCount == -1)
                this._columnCount = Math.max(1, Math.ceil(numElements / this._rowCount));
            if (this._requestedColumnCount > 0 && this._requestedRowCount > 0) {
                if (this._orientation == eui.TileOrientation.ROWS)
                    this._rowCount = Math.max(1, Math.ceil(numElements / this._requestedColumnCount));
                else
                    this._columnCount = Math.max(1, Math.ceil(numElements / this._requestedRowCount));
            }
        };
        /**
         * @private
         * 更新最大子对象尺寸
         */
        p.updateMaxElementSize = function () {
            if (!this.$target)
                return;
            if (this.$useVirtualLayout) {
                this.maxElementWidth = Math.max(this.maxElementWidth, this.$typicalWidth);
                this.maxElementHeight = Math.max(this.maxElementHeight, this.$typicalHeight);
                this.doUpdateMaxElementSize(this.startIndex, this.endIndex);
            }
            else {
                this.doUpdateMaxElementSize(0, this.$target.numElements - 1);
            }
        };
        /**
         * @private
         * 更新虚拟布局的最大子对象尺寸
         */
        p.doUpdateMaxElementSize = function (startIndex, endIndex) {
            var maxElementWidth = this.maxElementWidth;
            var maxElementHeight = this.maxElementHeight;
            var bounds = egret.$TempRectangle;
            var target = this.$target;
            if ((startIndex != -1) && (endIndex != -1)) {
                for (var index = startIndex; index <= endIndex; index++) {
                    var elt = target.getVirtualElementAt(index);
                    if (!egret.is(elt, UIComponentClass) || !elt.$includeInLayout) {
                        continue;
                    }
                    elt.getPreferredBounds(bounds);
                    maxElementWidth = Math.max(maxElementWidth, bounds.width);
                    maxElementHeight = Math.max(maxElementHeight, bounds.height);
                }
            }
            this.maxElementWidth = maxElementWidth;
            this.maxElementHeight = maxElementHeight;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.clearVirtualLayoutCache = function () {
            _super.prototype.clearVirtualLayoutCache.call(this);
            this.maxElementWidth = 0;
            this.maxElementHeight = 0;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.scrollPositionChanged = function () {
            if (this.$useVirtualLayout) {
                var changed = this.getIndexInView();
                if (changed) {
                    this.indexInViewCalculated = true;
                    this.$target.invalidateDisplayList();
                }
            }
        };
        /**
         * @private
         * 获取视图中第一个和最后一个元素的索引,返回是否发生改变
         */
        p.getIndexInView = function () {
            if (!this.$target || this.$target.numElements == 0) {
                this.startIndex = this.endIndex = -1;
                return false;
            }
            var target = this.$target;
            var numElements = target.numElements;
            if (!this.$useVirtualLayout) {
                this.startIndex = 0;
                this.endIndex = numElements - 1;
                return false;
            }
            var values = target.$UIComponent;
            if (values[10 /* width */] == 0 || values[11 /* height */] == 0) {
                this.startIndex = this.endIndex = -1;
                return false;
            }
            var oldStartIndex = this.startIndex;
            var oldEndIndex = this.endIndex;
            var paddingL = this._paddingLeft;
            var paddingT = this._paddingTop;
            var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
            var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
            if (this._orientation == eui.TileOrientation.COLUMNS) {
                var itemWidth = this._columnWidth + horizontalGap;
                if (itemWidth <= 0) {
                    this.startIndex = 0;
                    this.endIndex = numElements - 1;
                    return false;
                }
                var minVisibleX = target.scrollH;
                var maxVisibleX = minVisibleX + values[10 /* width */];
                var startColumn = Math.floor((minVisibleX - paddingL) / itemWidth);
                if (startColumn < 0)
                    startColumn = 0;
                var endColumn = Math.ceil((maxVisibleX - paddingL) / itemWidth);
                if (endColumn < 0)
                    endColumn = 0;
                this.startIndex = Math.min(numElements - 1, Math.max(0, startColumn * this._rowCount));
                this.endIndex = Math.min(numElements - 1, Math.max(0, endColumn * this._rowCount - 1));
            }
            else {
                var itemHeight = this._rowHeight + verticalGap;
                if (itemHeight <= 0) {
                    this.startIndex = 0;
                    this.endIndex = numElements - 1;
                    return false;
                }
                var minVisibleY = target.scrollV;
                var maxVisibleY = minVisibleY + values[11 /* height */];
                var startRow = Math.floor((minVisibleY - paddingT) / itemHeight);
                if (startRow < 0)
                    startRow = 0;
                var endRow = Math.ceil((maxVisibleY - paddingT) / itemHeight);
                if (endRow < 0)
                    endRow = 0;
                this.startIndex = Math.min(numElements - 1, Math.max(0, startRow * this._columnCount));
                this.endIndex = Math.min(numElements - 1, Math.max(0, endRow * this._columnCount - 1));
            }
            return this.startIndex != oldStartIndex || this.endIndex != oldEndIndex;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayList = function (width, height) {
            _super.prototype.updateDisplayList.call(this, width, height);
            if (!this.$target)
                return;
            var target = this.$target;
            var paddingL = this._paddingLeft;
            var paddingR = this._paddingRight;
            var paddingT = this._paddingTop;
            var paddingB = this._paddingBottom;
            if (this.indexInViewCalculated) {
                this.indexInViewCalculated = false;
            }
            else {
                this.calculateRowAndColumn(width, height);
                if (this._rowCount == 0 || this._columnCount == 0) {
                    target.setContentSize(paddingL + paddingR, paddingT + paddingB);
                    return;
                }
                this.adjustForJustify(width, height);
                this.getIndexInView();
            }
            if (this.$useVirtualLayout) {
                this.calculateRowAndColumn(width, height);
                this.adjustForJustify(width, height);
            }
            if (this.startIndex == -1 || this.endIndex == -1) {
                target.setContentSize(0, 0);
                return;
            }
            var endIndex = this.endIndex;
            target.setVirtualElementIndicesInView(this.startIndex, endIndex);
            var elt;
            var x;
            var y;
            var columnIndex;
            var rowIndex;
            var orientedByColumns = (this._orientation == eui.TileOrientation.COLUMNS);
            var index = this.startIndex;
            var horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
            var verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
            var rowCount = this._rowCount;
            var columnCount = this._columnCount;
            var columnWidth = this._columnWidth;
            var rowHeight = this._rowHeight;
            for (var i = this.startIndex; i <= endIndex; i++) {
                if (this.$useVirtualLayout) {
                    elt = (this.target.getVirtualElementAt(i));
                }
                else {
                    elt = (this.target.getElementAt(i));
                }
                if (!egret.is(elt, UIComponentClass) || !elt.$includeInLayout) {
                    continue;
                }
                if (orientedByColumns) {
                    columnIndex = Math.ceil((index + 1) / rowCount) - 1;
                    rowIndex = Math.ceil((index + 1) % rowCount) - 1;
                    if (rowIndex == -1)
                        rowIndex = rowCount - 1;
                }
                else {
                    columnIndex = Math.ceil((index + 1) % columnCount) - 1;
                    if (columnIndex == -1)
                        columnIndex = columnCount - 1;
                    rowIndex = Math.ceil((index + 1) / columnCount) - 1;
                }
                x = columnIndex * (columnWidth + horizontalGap) + paddingL;
                y = rowIndex * (rowHeight + verticalGap) + paddingT;
                this.sizeAndPositionElement(elt, x, y, columnWidth, rowHeight);
                index++;
            }
            var hPadding = paddingL + paddingR;
            var vPadding = paddingT + paddingB;
            var contentWidth = (columnWidth + horizontalGap) * columnCount - horizontalGap;
            var contentHeight = (rowHeight + verticalGap) * rowCount - verticalGap;
            target.setContentSize(contentWidth + hPadding, contentHeight + vPadding);
        };
        /**
         * @private
         * 为单个元素布局
         */
        p.sizeAndPositionElement = function (element, cellX, cellY, cellWidth, cellHeight) {
            var elementWidth = NaN;
            var elementHeight = NaN;
            var values = element.$UIComponent;
            if (this._horizontalAlign == eui.JustifyAlign.JUSTIFY)
                elementWidth = cellWidth;
            else if (!isNaN(values[6 /* percentWidth */]))
                elementWidth = cellWidth * values[6 /* percentWidth */] * 0.01;
            if (this._verticalAlign == eui.JustifyAlign.JUSTIFY)
                elementHeight = cellHeight;
            else if (!isNaN(values[7 /* percentHeight */]))
                elementHeight = cellHeight * values[7 /* percentHeight */] * 0.01;
            element.setLayoutBoundsSize(Math.round(elementWidth), Math.round(elementHeight));
            var x = cellX;
            var bounds = egret.$TempRectangle;
            element.getLayoutBounds(bounds);
            switch (this._horizontalAlign) {
                case egret.HorizontalAlign.RIGHT:
                    x += cellWidth - bounds.width;
                    break;
                case egret.HorizontalAlign.CENTER:
                    x = cellX + (cellWidth - bounds.width) / 2;
                    break;
            }
            var y = cellY;
            switch (this._verticalAlign) {
                case egret.VerticalAlign.BOTTOM:
                    y += cellHeight - bounds.height;
                    break;
                case egret.VerticalAlign.MIDDLE:
                    y += (cellHeight - bounds.height) / 2;
                    break;
            }
            element.setLayoutBoundsPosition(Math.round(x), Math.round(y));
        };
        /**
         * @private
         * 为两端对齐调整间隔或格子尺寸
         */
        p.adjustForJustify = function (width, height) {
            var paddingL = this._paddingLeft;
            var paddingR = this._paddingRight;
            var paddingT = this._paddingTop;
            var paddingB = this._paddingBottom;
            var targetWidth = Math.max(0, width - paddingL - paddingR);
            var targetHeight = Math.max(0, height - paddingT - paddingB);
            if (!isNaN(this.explicitVerticalGap))
                this._verticalGap = this.explicitVerticalGap;
            if (!isNaN(this.explicitHorizontalGap))
                this._horizontalGap = this.explicitHorizontalGap;
            this._verticalGap = isNaN(this._verticalGap) ? 0 : this._verticalGap;
            this._horizontalGap = isNaN(this._horizontalGap) ? 0 : this._horizontalGap;
            var offsetY = targetHeight - this._rowHeight * this._rowCount;
            var offsetX = targetWidth - this._columnWidth * this._columnCount;
            var gapCount;
            if (offsetY > 0) {
                if (this._rowAlign == eui.RowAlign.JUSTIFY_USING_GAP) {
                    gapCount = Math.max(1, this._rowCount - 1);
                    this._verticalGap = offsetY / gapCount;
                }
                else if (this._rowAlign == eui.RowAlign.JUSTIFY_USING_HEIGHT) {
                    if (this._rowCount > 0) {
                        this._rowHeight += (offsetY - (this._rowCount - 1) * this._verticalGap) / this._rowCount;
                    }
                }
            }
            if (offsetX > 0) {
                if (this._columnAlign == eui.ColumnAlign.JUSTIFY_USING_GAP) {
                    gapCount = Math.max(1, this._columnCount - 1);
                    this._horizontalGap = offsetX / gapCount;
                }
                else if (this._columnAlign == eui.ColumnAlign.JUSTIFY_USING_WIDTH) {
                    if (this._columnCount > 0) {
                        this._columnWidth += (offsetX - (this._columnCount - 1) * this._horizontalGap) / this._columnCount;
                    }
                }
            }
        };
        return TileLayout;
    })(eui.LayoutBase);
    eui.TileLayout = TileLayout;
    egret.registerClass(TileLayout,'eui.TileLayout');
    if (DEBUG) {
        egret.$markReadOnly(TileLayout, "columnCount");
        egret.$markReadOnly(TileLayout, "rowCount");
    }
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The TileOrientation class defines the possible values for the
     * <code>orientation</code> property of the TileLayout class.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/TileOrientationExample.ts
     */
    /**
     * @language zh_CN
     * TileOrientation 类为 TileLayout 类的 <code>orientation</code> 属性定义可能的值。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/TileOrientationExample.ts
     */
    var TileOrientation = (function () {
        function TileOrientation() {
        }
        var c=TileOrientation,p=c.prototype;
        /**
         * @language en_US
         * Arranges elements row by row.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 逐行排列元素。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        TileOrientation.ROWS = "rows";
        /**
         * @language en_US
         * Arranges elements column by column.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 逐列排列元素。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        TileOrientation.COLUMNS = "columns";
        return TileOrientation;
    })();
    eui.TileOrientation = TileOrientation;
    egret.registerClass(TileOrientation,'eui.TileOrientation');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var UIComponentClass = "eui.UIComponent";
    /**
     * @language en_US
     * The VerticalLayout class arranges the layout elements in a vertical sequence,
     * top to bottom, with optional gaps between the elements and optional padding
     * around the sequence of elements.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/VerticalLayoutExample.ts
     */
    /**
     * @language zh_CN
     * VerticalLayout 类按垂直顺序从上向下排列布局元素，在元素和围绕元素顺序的可选填充之间带有可选间隙。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     * @includeExample  extension/eui/layout/VerticalLayoutExample.ts
     */
    var VerticalLayout = (function (_super) {
        __extends(VerticalLayout, _super);
        function VerticalLayout() {
            _super.apply(this, arguments);
        }
        var c=VerticalLayout,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measureReal = function () {
            var target = this.$target;
            var count = target.numElements;
            var numElements = count;
            var measuredWidth = 0;
            var measuredHeight = 0;
            var bounds = egret.$TempRectangle;
            for (var i = 0; i < count; i++) {
                var layoutElement = (target.getElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    numElements--;
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                measuredHeight += bounds.height;
                measuredWidth = Math.max(measuredWidth, bounds.width);
            }
            measuredHeight += (numElements - 1) * this.$gap;
            var hPadding = this.$paddingLeft + this.$paddingRight;
            var vPadding = this.$paddingTop + this.$paddingBottom;
            target.setMeasuredSize(measuredWidth + hPadding, measuredHeight + vPadding);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.measureVirtual = function () {
            var target = this.$target;
            var typicalHeight = this.$typicalHeight;
            var measuredHeight = this.getElementTotalSize();
            var measuredWidth = Math.max(this.maxElementSize, this.$typicalWidth);
            var bounds = egret.$TempRectangle;
            var endIndex = this.endIndex;
            var elementSizeTable = this.elementSizeTable;
            for (var index = this.startIndex; index < endIndex; index++) {
                var layoutElement = (target.getElementAt(index));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                measuredHeight += bounds.height;
                measuredHeight -= isNaN(elementSizeTable[index]) ? typicalHeight : elementSizeTable[index];
                measuredWidth = Math.max(measuredWidth, bounds.width);
            }
            var hPadding = this.$paddingLeft + this.$paddingRight;
            var vPadding = this.$paddingTop + this.$paddingBottom;
            target.setMeasuredSize(measuredWidth + hPadding, measuredHeight + vPadding);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayListReal = function (width, height) {
            var target = this.$target;
            var paddingL = this.$paddingLeft;
            var paddingR = this.$paddingRight;
            var paddingT = this.$paddingTop;
            var paddingB = this.$paddingBottom;
            var gap = this.$gap;
            var targetWidth = Math.max(0, width - paddingL - paddingR);
            var targetHeight = Math.max(0, height - paddingT - paddingB);
            var vJustify = this.$verticalAlign == eui.JustifyAlign.JUSTIFY;
            var hJustify = this.$horizontalAlign == eui.JustifyAlign.JUSTIFY || this.$horizontalAlign == eui.JustifyAlign.CONTENT_JUSTIFY;
            var hAlign = 0;
            if (!hJustify) {
                if (this.$horizontalAlign == egret.HorizontalAlign.CENTER) {
                    hAlign = 0.5;
                }
                else if (this.$horizontalAlign == egret.HorizontalAlign.RIGHT) {
                    hAlign = 1;
                }
            }
            var count = target.numElements;
            var numElements = count;
            var x = paddingL;
            var y = paddingT;
            var i;
            var layoutElement;
            var totalPreferredHeight = 0;
            var totalPercentHeight = 0;
            var childInfoArray = [];
            var childInfo;
            var heightToDistribute = targetHeight;
            var maxElementWidth = this.maxElementSize;
            var bounds = egret.$TempRectangle;
            for (i = 0; i < count; i++) {
                var layoutElement = (target.getElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    numElements--;
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                maxElementWidth = Math.max(maxElementWidth, bounds.width);
                if (vJustify) {
                    totalPreferredHeight += bounds.height;
                }
                else {
                    var values = layoutElement.$UIComponent;
                    if (!isNaN(values[7 /* percentHeight */])) {
                        totalPercentHeight += values[7 /* percentHeight */];
                        childInfo = new eui.sys.ChildInfo();
                        childInfo.layoutElement = layoutElement;
                        childInfo.percent = values[7 /* percentHeight */];
                        childInfo.min = values[14 /* minHeight */];
                        childInfo.max = values[15 /* maxHeight */];
                        childInfoArray.push(childInfo);
                    }
                    else {
                        heightToDistribute -= bounds.height;
                    }
                }
            }
            heightToDistribute -= gap * (numElements - 1);
            heightToDistribute = heightToDistribute > 0 ? heightToDistribute : 0;
            var excessSpace = targetHeight - totalPreferredHeight - gap * (numElements - 1);
            var averageHeight;
            var largeChildrenCount = numElements;
            var heightDic = {};
            if (vJustify) {
                if (excessSpace < 0) {
                    averageHeight = heightToDistribute / numElements;
                    for (i = 0; i < count; i++) {
                        layoutElement = (target.getElementAt(i));
                        if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                            continue;
                        }
                        layoutElement.getPreferredBounds(bounds);
                        if (bounds.height <= averageHeight) {
                            heightToDistribute -= bounds.height;
                            largeChildrenCount--;
                            continue;
                        }
                    }
                    heightToDistribute = heightToDistribute > 0 ? heightToDistribute : 0;
                }
            }
            else {
                if (totalPercentHeight > 0) {
                    this.flexChildrenProportionally(targetHeight, heightToDistribute, totalPercentHeight, childInfoArray);
                    var roundOff = 0;
                    var length = childInfoArray.length;
                    for (i = 0; i < length; i++) {
                        childInfo = childInfoArray[i];
                        var childSize = Math.round(childInfo.size + roundOff);
                        roundOff += childInfo.size - childSize;
                        heightDic[childInfo.layoutElement.$hashCode] = childSize;
                        heightToDistribute -= childSize;
                    }
                    heightToDistribute = heightToDistribute > 0 ? heightToDistribute : 0;
                }
            }
            if (this.$verticalAlign == egret.VerticalAlign.MIDDLE) {
                y = paddingT + heightToDistribute * 0.5;
            }
            else if (this.$verticalAlign == egret.VerticalAlign.BOTTOM) {
                y = paddingT + heightToDistribute;
            }
            var maxX = paddingL;
            var maxY = paddingT;
            var dx = 0;
            var dy = 0;
            var justifyWidth = Math.ceil(targetWidth);
            if (this.$horizontalAlign == eui.JustifyAlign.CONTENT_JUSTIFY)
                justifyWidth = Math.ceil(Math.max(targetWidth, maxElementWidth));
            roundOff = 0;
            var layoutElementHeight;
            var childHeight;
            for (i = 0; i < count; i++) {
                var exceesWidth = 0;
                layoutElement = (target.getElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                layoutElementHeight = NaN;
                if (vJustify) {
                    childHeight = NaN;
                    if (excessSpace > 0) {
                        childHeight = heightToDistribute * bounds.height / totalPreferredHeight;
                    }
                    else if (excessSpace < 0 && bounds.height > averageHeight) {
                        childHeight = heightToDistribute / largeChildrenCount;
                    }
                    if (!isNaN(childHeight)) {
                        layoutElementHeight = Math.round(childHeight + roundOff);
                        roundOff += childHeight - layoutElementHeight;
                    }
                }
                else {
                    layoutElementHeight = heightDic[layoutElement.$hashCode];
                }
                if (hJustify) {
                    x = paddingL;
                    layoutElement.setLayoutBoundsSize(justifyWidth, layoutElementHeight);
                    layoutElement.getLayoutBounds(bounds);
                }
                else {
                    var layoutElementWidth = NaN;
                    var values = layoutElement.$UIComponent;
                    if (!isNaN(values[6 /* percentWidth */])) {
                        var percent = Math.min(100, values[6 /* percentWidth */]);
                        layoutElementWidth = Math.round(targetWidth * percent * 0.01);
                    }
                    layoutElement.setLayoutBoundsSize(layoutElementWidth, layoutElementHeight);
                    layoutElement.getLayoutBounds(bounds);
                    exceesWidth = (targetWidth - bounds.width) * hAlign;
                    exceesWidth = exceesWidth > 0 ? exceesWidth : 0;
                    x = paddingL + exceesWidth;
                }
                layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
                dx = Math.ceil(bounds.width);
                dy = Math.ceil(bounds.height);
                maxX = Math.max(maxX, x + dx);
                maxY = Math.max(maxY, y + dy);
                y += dy + gap;
            }
            this.maxElementSize = maxElementWidth;
            target.setContentSize(maxX + paddingR, maxY + paddingB);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.updateDisplayListVirtual = function (width, height) {
            var target = this.$target;
            if (this.indexInViewCalculated)
                this.indexInViewCalculated = false;
            else
                this.getIndexInView();
            var paddingB = this.$paddingBottom;
            var paddingL = this.$paddingLeft;
            var paddingR = this.$paddingRight;
            var gap = this.$gap;
            var contentHeight;
            var numElements = target.numElements;
            if (this.startIndex == -1 || this.endIndex == -1) {
                contentHeight = this.getStartPosition(numElements) - gap + paddingB;
                target.setContentSize(target.contentWidth, contentHeight);
                return;
            }
            var endIndex = this.endIndex;
            target.setVirtualElementIndicesInView(this.startIndex, endIndex);
            //获取垂直布局参数
            var justify = this.$horizontalAlign == eui.JustifyAlign.JUSTIFY || this.$horizontalAlign == eui.JustifyAlign.CONTENT_JUSTIFY;
            var contentJustify = this.$horizontalAlign == eui.JustifyAlign.CONTENT_JUSTIFY;
            var hAlign = 0;
            if (!justify) {
                if (this.$horizontalAlign == egret.HorizontalAlign.CENTER) {
                    hAlign = 0.5;
                }
                else if (this.$horizontalAlign == egret.HorizontalAlign.RIGHT) {
                    hAlign = 1;
                }
            }
            var bounds = egret.$TempRectangle;
            var targetWidth = Math.max(0, width - paddingL - paddingR);
            var justifyWidth = Math.ceil(targetWidth);
            var layoutElement;
            var typicalHeight = this.$typicalHeight;
            var typicalWidth = this.$typicalWidth;
            var maxElementWidth = this.maxElementSize;
            var oldMaxW = Math.max(typicalWidth, this.maxElementSize);
            if (contentJustify) {
                for (var index = this.startIndex; index <= endIndex; index++) {
                    layoutElement = (target.getVirtualElementAt(index));
                    if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                        continue;
                    }
                    layoutElement.getPreferredBounds(bounds);
                    maxElementWidth = Math.max(maxElementWidth, bounds.width);
                }
                justifyWidth = Math.ceil(Math.max(targetWidth, maxElementWidth));
            }
            var x = 0;
            var y = 0;
            var contentWidth = 0;
            var oldElementSize;
            var needInvalidateSize = false;
            var elementSizeTable = this.elementSizeTable;
            //对可见区域进行布局
            for (var i = this.startIndex; i <= endIndex; i++) {
                var exceesWidth = 0;
                layoutElement = (target.getVirtualElementAt(i));
                if (!egret.is(layoutElement, UIComponentClass) || !layoutElement.$includeInLayout) {
                    continue;
                }
                layoutElement.getPreferredBounds(bounds);
                if (!contentJustify) {
                    maxElementWidth = Math.max(maxElementWidth, bounds.width);
                }
                if (justify) {
                    x = paddingL;
                    layoutElement.setLayoutBoundsSize(justifyWidth, NaN);
                    layoutElement.getLayoutBounds(bounds);
                }
                else {
                    layoutElement.getLayoutBounds(bounds);
                    exceesWidth = (targetWidth - bounds.width) * hAlign;
                    exceesWidth = exceesWidth > 0 ? exceesWidth : 0;
                    x = paddingL + exceesWidth;
                }
                contentWidth = Math.max(contentWidth, bounds.width);
                if (!needInvalidateSize) {
                    oldElementSize = isNaN(elementSizeTable[i]) ? typicalHeight : elementSizeTable[i];
                    if (oldElementSize != bounds.height)
                        needInvalidateSize = true;
                }
                elementSizeTable[i] = bounds.height;
                y = this.getStartPosition(i);
                layoutElement.setLayoutBoundsPosition(Math.round(x), Math.round(y));
            }
            contentWidth += paddingL + paddingR;
            contentHeight = this.getStartPosition(numElements) - gap + paddingB;
            this.maxElementSize = maxElementWidth;
            target.setContentSize(contentWidth, contentHeight);
            if (needInvalidateSize || oldMaxW < this.maxElementSize) {
                target.invalidateSize();
            }
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getStartPosition = function (index) {
            if (!this.$useVirtualLayout) {
                if (this.$target) {
                    var element = this.$target.getElementAt(index);
                    if (element) {
                        return element.y;
                    }
                }
            }
            var typicalHeight = this.$typicalHeight;
            var startPos = this.$paddingTop;
            var gap = this.$gap;
            var elementSizeTable = this.elementSizeTable;
            for (var i = 0; i < index; i++) {
                var h = elementSizeTable[i];
                if (isNaN(h)) {
                    h = typicalHeight;
                }
                startPos += h + gap;
            }
            return startPos;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementSize = function (index) {
            if (this.$useVirtualLayout) {
                var size = this.elementSizeTable[index];
                if (isNaN(size)) {
                    size = this.$typicalHeight;
                }
                return size;
            }
            if (this.$target) {
                return this.$target.getElementAt(index).height;
            }
            return 0;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getElementTotalSize = function () {
            var typicalHeight = this.$typicalHeight;
            var gap = this.$gap;
            var totalSize = 0;
            var length = this.$target.numElements;
            var elementSizeTable = this.elementSizeTable;
            for (var i = 0; i < length; i++) {
                var h = elementSizeTable[i];
                if (isNaN(h)) {
                    h = typicalHeight;
                }
                totalSize += h + gap;
            }
            totalSize -= gap;
            return totalSize;
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.elementAdded = function (index) {
            if (!this.$useVirtualLayout)
                return;
            _super.prototype.elementAdded.call(this, index);
            this.elementSizeTable.splice(index, 0, this.$typicalHeight);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.getIndexInView = function () {
            var target = this.$target;
            if (!target || target.numElements == 0) {
                this.startIndex = this.endIndex = -1;
                return false;
            }
            var values = target.$UIComponent;
            if (values[10 /* width */] == 0 || values[11 /* height */] == 0) {
                this.startIndex = this.endIndex = -1;
                return false;
            }
            var numElements = target.numElements;
            var contentHeight = this.getStartPosition(numElements - 1) +
                this.elementSizeTable[numElements - 1] + this.$paddingBottom;
            var minVisibleY = target.scrollV;
            if (minVisibleY > contentHeight - this.$paddingBottom) {
                this.startIndex = -1;
                this.endIndex = -1;
                return false;
            }
            var maxVisibleY = target.scrollV + values[11 /* height */];
            if (maxVisibleY < this.$paddingTop) {
                this.startIndex = -1;
                this.endIndex = -1;
                return false;
            }
            var oldStartIndex = this.startIndex;
            var oldEndIndex = this.endIndex;
            this.startIndex = this.findIndexAt(minVisibleY, 0, numElements - 1);
            if (this.startIndex == -1)
                this.startIndex = 0;
            this.endIndex = this.findIndexAt(maxVisibleY, 0, numElements - 1);
            if (this.endIndex == -1)
                this.endIndex = numElements - 1;
            return oldStartIndex != this.startIndex || oldEndIndex != this.endIndex;
        };
        /**
         * 确定根据 NavigationUnit、基于当前处于焦点的项目和用户输入要导航到哪个项目的委派方法
         */
        p.getNavigationDestinationIndex = function (currentIndex, navigationUnit, loop) {
            if (loop === void 0) { loop = false; }
            if (!this.target || this.target.numElements < 1)
                return -1;
            var maxIndex = this.target.numElements - 1;
            if (currentIndex == -1) {
                if (navigationUnit == eui.NavigationUnit.UP)
                    return -1;
                if (navigationUnit == eui.NavigationUnit.DOWN)
                    return 0;
            }
            currentIndex = Math.max(0, Math.min(maxIndex, currentIndex));
            var newIndex;
            var bounds;
            var y;
            switch (navigationUnit) {
                case eui.NavigationUnit.UP:
                    newIndex = currentIndex - 1;
                    if (newIndex < 0 && this.keyboardUpAndDownLoop)
                        newIndex = maxIndex;
                    break;
                case eui.NavigationUnit.DOWN:
                    newIndex = currentIndex + 1;
                    if (newIndex > maxIndex && this.keyboardUpAndDownLoop)
                        newIndex = 0;
                    break;
                case eui.NavigationUnit.PAGE_UP:
                    var firstIndex = this.findIndexAt(this.target.scrollRect.top, 0, this.target.numElements - 1);
                    var lastIndex = this.findIndexAt(this.target.scrollRect.bottom, 0, this.target.numElements - 1);
                    var firstFullyVisible = firstIndex;
                    if (this.fractionOfElementInView(firstFullyVisible) < 1)
                        firstFullyVisible += 1;
                    if (firstFullyVisible < currentIndex && currentIndex <= lastIndex)
                        newIndex = firstFullyVisible;
                    else {
                        if (currentIndex == firstFullyVisible || currentIndex == firstIndex)
                            y = this.getVerticalScrollPositionDelta(eui.NavigationUnit.PAGE_UP) + this.getScrollRect().top;
                        else
                            y = this.getElementBounds(currentIndex).bottom - this.getScrollRect().height;
                        newIndex = currentIndex - 1;
                        while (0 <= newIndex) {
                            bounds = this.getElementBounds(newIndex);
                            if (bounds && bounds.top < y) {
                                newIndex = Math.min(currentIndex - 1, newIndex + 1);
                                break;
                            }
                            newIndex--;
                        }
                    }
                    break;
                case eui.NavigationUnit.PAGE_DOWN:
                    firstIndex = this.findIndexAt(this.target.scrollRect.top, 0, this.target.numElements - 1);
                    lastIndex = this.findIndexAt(this.target.scrollRect.bottom, 0, this.target.numElements - 1);
                    var lastFullyVisible = lastIndex;
                    if (this.fractionOfElementInView(lastFullyVisible) < 1)
                        lastFullyVisible -= 1;
                    if (firstIndex <= currentIndex && currentIndex < lastFullyVisible)
                        newIndex = lastFullyVisible;
                    else {
                        if (currentIndex == lastFullyVisible || currentIndex == lastIndex)
                            y = this.getVerticalScrollPositionDelta(eui.NavigationUnit.PAGE_DOWN) + this.getScrollRect().bottom;
                        else
                            y = this.getElementBounds(currentIndex).top + this.getScrollRect().height;
                        newIndex = currentIndex + 1;
                        while (newIndex <= maxIndex) {
                            bounds = this.getElementBounds(newIndex);
                            if (bounds && bounds.bottom > y) {
                                newIndex = Math.max(currentIndex + 1, newIndex - 1);
                                break;
                            }
                            newIndex++;
                        }
                    }
                    break;
                default:
                    return _super.prototype.getNavigationDestinationIndex.call(this, currentIndex, navigationUnit);
            }
            return Math.max(0, Math.min(maxIndex, newIndex));
        };
        /**
         * @inheritDoc
         */
        p.getElementBounds = function (index) {
            if (!this.useVirtualLayout)
                return _super.prototype.getElementBounds.call(this, index);
            var g = this.target;
            if (!g || (index < 0) || (index >= g.numElements))
                return null;
            var bounds = new egret.Rectangle();
            var typicalWidth = this.typicalLayoutRect ? this.typicalLayoutRect.width : 71;
            bounds.x = 0;
            bounds.width = typicalWidth;
            bounds.top = this.getStartPosition(index);
            bounds.bottom = this.getElementSize(index) + bounds.top;
            return bounds;
        };
        d(p, "typicalLayoutRect"
            /**
             * 由虚拟布局所使用，以估计尚未滚动到视图中的布局元素的大小。
             */
            ,function () {
                return this._typicalLayoutRect;
            }
            ,function (value) {
                if (this._typicalLayoutRect == value)
                    return;
                this._typicalLayoutRect = value;
                if (this.target)
                    this.target.invalidateSize();
            }
        );
        /**
         * 如果指定的索引完全在视图中，则返回 1.0；如果不在视图中，则返回 0.0；
         * 如果部分处于视图中，则返回在 0.0 和 1.0 之间的一个值（表示处于视图中的部分的百分比）。
         */
        p.fractionOfElementInView = function (index) {
            var g = this.target;
            if (!g)
                return 0.0;
            if ((index < 0) || (index >= g.numElements))
                return 0.0;
            if (!this.target.scrollEnabled)
                return 1.0;
            var eltY;
            var eltHeight;
            if (this.useVirtualLayout) {
                eltY = this.getStartPosition(index);
                eltHeight = this.getElementSize(index);
            }
            else {
                var elt = (g.getElementAt(index));
                if (!elt || !elt.includeInLayout)
                    return 0.0;
                eltY = elt.layoutBoundsY;
                eltHeight = elt.layoutBoundsHeight;
            }
            var y0 = g.scrollV; //verticalScrollPosition;
            var y1 = y0 + g.height;
            var iy0 = eltY;
            var iy1 = iy0 + eltHeight;
            if (iy0 >= iy1)
                return 1.0;
            if ((iy0 >= y0) && (iy1 <= y1))
                return 1.0;
            if (iy1 <= y0 || iy0 >= y1)
                return 0.0;
            return (Math.min(y1, iy1) - Math.max(y0, iy0)) / (iy1 - iy0);
        };
        return VerticalLayout;
    })(eui.LinearLayoutBase);
    eui.VerticalLayout = VerticalLayout;
    egret.registerClass(VerticalLayout,'eui.VerticalLayout');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DragManager = (function (_super) {
        __extends(DragManager, _super);
        function DragManager() {
            _super.apply(this, arguments);
        }
        var c=DragManager,p=c.prototype;
        DragManager.getImpl = function (target) {
            var stage = target.stage;
            if (!stage) {
                return;
            }
            var impl = DragManager.implMap[stage.hashCode];
            if (!impl) {
                impl = new eui.DragManagerImpl();
                DragManager.implMap[stage.hashCode] = impl;
            }
            return impl;
        };
        d(p, "impl",undefined
            ,function (value) {
                egret.superSetter(DragManager, this, "impl", value);
            }
        );
        DragManager.getIsDragging = function (dragInitiator) {
            var impl = DragManager.getImpl(dragInitiator);
            if (impl) {
                return impl.getIsDragging();
            }
            return false;
        };
        DragManager.setIsDragging = function (dragInitiator, value) {
            var impl = DragManager.getImpl(dragInitiator);
            if (impl) {
                impl.setIsDragging(value);
            }
        };
        DragManager.doDrag = function (dragInitiator, dragSource, dragImage, xOffset, yOffset, imageAlpha) {
            if (dragImage === void 0) { dragImage = null; }
            if (xOffset === void 0) { xOffset = 0; }
            if (yOffset === void 0) { yOffset = 0; }
            if (imageAlpha === void 0) { imageAlpha = 0.5; }
            var impl = DragManager.getImpl(dragInitiator);
            if (impl) {
                impl.doDrag(dragInitiator, dragSource, dragImage, xOffset, yOffset, imageAlpha);
            }
        };
        DragManager.acceptDragDrop = function (target) {
            var impl = DragManager.getImpl(target);
            if (impl) {
                impl.acceptDragDrop(target);
            }
        };
        DragManager.endDrag = function (target) {
            if (target === void 0) { target = null; }
            if (!impl) {
                for (var hasCode in DragManager.implMap) {
                    var impl = DragManager.implMap[hasCode];
                    if (impl) {
                        impl.endDrag();
                    }
                }
                return;
            }
            var impl = DragManager.getImpl(target);
            if (impl) {
                impl.endDrag();
            }
        };
        DragManager.implMap = {};
        return DragManager;
    })(egret.HashObject);
    eui.DragManager = DragManager;
    egret.registerClass(DragManager,'eui.DragManager');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DragManagerImpl = (function (_super) {
        __extends(DragManagerImpl, _super);
        function DragManagerImpl() {
            _super.call(this);
            this._isDragging = false;
        }
        var c=DragManagerImpl,p=c.prototype;
        p.getIsDragging = function () {
            return this._isDragging;
        };
        p.setIsDragging = function (value) {
            this._isDragging = value;
        };
        p.doDrag = function (dragInitiator, dragSource, dragImage, xOffset, yOffset, imageAlpha) {
            if (dragImage === void 0) { dragImage = null; }
            if (xOffset === void 0) { xOffset = 0; }
            if (yOffset === void 0) { yOffset = 0; }
            if (imageAlpha === void 0) { imageAlpha = 0.5; }
            if (this._isDragging)
                return;
            this._isDragging = true;
            this.dragInitiator = dragInitiator;
            this.dragProxy = new eui.DragProxy(dragInitiator, dragSource);
            var stage = dragInitiator.stage;
            if (!stage)
                return;
            stage.addChild(this.dragProxy);
            if (dragImage) {
                this.dragProxy.addChild(dragImage);
            }
            this.dragProxy.alpha = imageAlpha;
            var mouseX = stage.mouseX;
            var mouseY = stage.mouseY;
            var proxyOrigin = dragInitiator.localToGlobal(-xOffset, -yOffset);
            this.dragProxy.xOffset = mouseX - proxyOrigin.x;
            this.dragProxy.yOffset = mouseY - proxyOrigin.y;
            this.dragProxy.x = proxyOrigin.x;
            this.dragProxy.y = proxyOrigin.y;
            this.dragProxy.startX = this.dragProxy.x;
            this.dragProxy.startY = this.dragProxy.y;
            if (dragImage)
                dragImage.cacheAsBitmap = true;
        };
        p.acceptDragDrop = function (target) {
            if (this.dragProxy)
                this.dragProxy.target = target;
        };
        p.endDrag = function () {
            if (this.dragProxy) {
                this.dragProxy.endDrag();
                if (this.dragProxy.parent) {
                    this.dragProxy.parent.removeChild(this.dragProxy);
                }
                if (this.dragProxy.numChildren > 0)
                    this.dragProxy.removeChildAt(0);
                this.dragProxy = null;
            }
            this.dragInitiator = null;
            this._isDragging = false;
        };
        return DragManagerImpl;
    })(egret.HashObject);
    eui.DragManagerImpl = DragManagerImpl;
    egret.registerClass(DragManagerImpl,'eui.DragManagerImpl',["eui.IDragManager"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DragProxy = (function (_super) {
        __extends(DragProxy, _super);
        function DragProxy(dragInitiator, dragSource) {
            _super.call(this);
            this.xOffset = NaN;
            this.yOffset = NaN;
            this.startX = NaN;
            this.startY = NaN;
            this.target = null;
            this.touchChildren = false;
            this.touchEnabled = false;
            this.dragInitiator = dragInitiator;
            this.dragSource = dragSource;
            this.stageRoot = dragInitiator.stage;
            this.stageRoot.addEventListener(egret.MouseEvent.MOUSE_MOVE, this.mouseMoveHandler, this);
            this.stageRoot.addEventListener(egret.MouseEvent.MOUSE_UP, this.mouseUpHandler, this);
            this.stageRoot.addEventListener(egret.Event.MOUSE_LEAVE, this.mouseLeaveHandler, this);
        }
        var c=DragProxy,p=c.prototype;
        p.createChildren = function () {
            _super.prototype.createChildren.call(this);
            if (!this.stageRoot.focus)
                this.setFocus();
        };
        p.dispatchDragEvent = function (type, mouseEvent, eventTarget) {
            var dragEvent = new eui.DragEvent(type);
            var pt = new egret.Point();
            dragEvent.dragInitiator = this.dragInitiator;
            dragEvent.dragSource = this.dragSource;
            if (mouseEvent) {
                dragEvent.ctrlKey = mouseEvent.ctrlKey;
                dragEvent.altKey = mouseEvent.altKey;
                dragEvent.shiftKey = mouseEvent.shiftKey;
            }
            if (this.lastMouseEvent && this.lastMouseEvent.target && eventTarget) {
                pt.x = this.lastMouseEvent.localX;
                pt.y = this.lastMouseEvent.localY;
                pt = this.lastMouseEvent.target.localToGlobal(pt.x, pt.y);
                pt = eventTarget.globalToLocal(pt.x, pt.y);
                dragEvent["targetChanged"] = false;
                dragEvent["_localX"] = pt.x;
                dragEvent["_localY"] = pt.y;
            }
            (eventTarget).dispatchEvent(dragEvent);
        };
        p.mouseMoveHandler = function (event) {
            var _self__ = this;
            var dragEvent;
            var dropTarget;
            var i = 0;
            this.lastMouseEvent = event;
            var pt = new egret.Point();
            var point = new egret.Point(event.localX, event.localY);
            if (!event.target)
                return;
            var stagePoint = event.target.localToGlobal(point.x, point.y);
            point = this.stageRoot.globalToLocal(stagePoint.x, stagePoint.y);
            var mouseX = point.x;
            var mouseY = point.y;
            this.x = mouseX - this.xOffset;
            this.y = mouseY - this.yOffset;
            if (!event) {
                return;
            }
            var targetList;
            targetList = [];
            DragProxy.getObjectsUnderPoint(this.stageRoot, stagePoint, targetList);
            var newTarget = null;
            var targetIndex = targetList.length - 1;
            while (targetIndex >= 0) {
                newTarget = targetList[targetIndex];
                if (newTarget != this && !_self__.contains(newTarget))
                    break;
                targetIndex--;
            }
            if (this.target) {
                var foundIt = false;
                this.oldTarget = this.target;
                dropTarget = newTarget;
                while (dropTarget) {
                    if (dropTarget == this.target) {
                        this.dispatchDragEvent(eui.DragEvent.DRAG_OVER, event, dropTarget);
                        foundIt = true;
                        break;
                    }
                    else {
                        this.dispatchDragEvent(eui.DragEvent.DRAG_ENTER, event, dropTarget);
                        if (this.target == dropTarget) {
                            foundIt = false;
                            break;
                        }
                    }
                    dropTarget = dropTarget.parent;
                }
                if (!foundIt) {
                    this.dispatchDragEvent(eui.DragEvent.DRAG_EXIT, event, this.oldTarget);
                    if (this.target == this.oldTarget)
                        this.target = null;
                    if (this.onUnderPointDisable != null) {
                        this.onUnderPointDisable();
                    }
                }
                else {
                    if (this.onUnderPointEnable != null) {
                        this.onUnderPointEnable();
                    }
                }
            }
            if (!this.target) {
                dropTarget = newTarget;
                while (dropTarget) {
                    if (dropTarget != this) {
                        this.dispatchDragEvent(eui.DragEvent.DRAG_ENTER, event, dropTarget);
                        if (this.target)
                            break;
                    }
                    dropTarget = dropTarget.parent;
                }
                if (this.onUnderPointDisable != null) {
                    this.onUnderPointDisable();
                }
            }
        };
        p.mouseLeaveHandler = function (event) {
            if (this.target) {
                this.dispatchDragEvent(eui.DragEvent.DRAG_EXIT, null, this.target);
            }
            this.target = null;
        };
        p.mouseUpHandler = function (event) {
            if (this.onExit != null) {
                this.onExit();
            }
            var ed = this.stageRoot;
            ed.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.mouseMoveHandler, this);
            ed.removeEventListener(egret.MouseEvent.MOUSE_UP, this.mouseUpHandler, this);
            var dragEvent;
            if (this.target) {
                dragEvent = new eui.DragEvent(eui.DragEvent.DRAG_DROP);
                dragEvent.dragInitiator = this.dragInitiator;
                dragEvent.dragSource = this.dragSource;
                if (event) {
                    dragEvent.ctrlKey = event.ctrlKey;
                    dragEvent.altKey = event.altKey;
                    dragEvent.shiftKey = event.shiftKey;
                }
                var pt = new egret.Point();
                if (this.lastMouseEvent) {
                    pt.x = this.lastMouseEvent.localX;
                    pt.y = this.lastMouseEvent.localY;
                    if (this.lastMouseEvent.target) {
                        pt = this.lastMouseEvent.target.localToGlobal(pt.x, pt.y);
                        pt = this.target.globalToLocal(pt.x, pt.y);
                    }
                }
                dragEvent["targetChanged"] = false;
                dragEvent["_localX"] = pt.x;
                dragEvent["_localY"] = pt.y;
                this.target.dispatchEvent(dragEvent);
            }
            else {
            }
            this.lastMouseEvent = null;
            this.effectEndHandler();
        };
        p.effectEndHandler = function () {
            eui.DragManager.endDrag();
        };
        DragProxy.getObjectsUnderPoint = function (obj, pt, arr) {
            if (!egret.is(obj, "egret.Stage") && !obj.visible)
                return;
            var minP = obj.localToGlobal(0, 0);
            var maxP = obj.localToGlobal(obj.width, obj.height);
            if (egret.is(obj, "egret.Stage") || (pt.x >= minP.x && pt.y >= minP.y && pt.x <= maxP.x && pt.y <= maxP.y)) {
                if (egret.is(obj, "egret.Stage") || (obj && obj.touchEnabled))
                    arr.push(obj);
                if (egret.is(obj, "egret.DisplayObjectContainer")) {
                    var doc = obj;
                    if (doc.touchChildren && doc.numChildren) {
                        var n = doc.numChildren;
                        for (var i = 0; i < n; i++) {
                            var child = doc.getChildAt(i);
                            this.getObjectsUnderPoint(child, pt, arr);
                        }
                    }
                }
            }
        };
        p.endDrag = function () {
            var dragEvent = new eui.DragEvent(eui.DragEvent.DRAG_COMPLETE);
            dragEvent.dragInitiator = this.dragInitiator;
            dragEvent.dragSource = this.dragSource;
            dragEvent.relatedObject = this.target;
            this.dragInitiator.dispatchEvent(dragEvent);
            if (this.target) {
                this.target.dispatchEvent(dragEvent);
            }
            this.stageRoot.removeEventListener(egret.MouseEvent.MOUSE_MOVE, this.mouseMoveHandler, this);
            this.stageRoot.removeEventListener(egret.MouseEvent.MOUSE_UP, this.mouseUpHandler, this);
            this.stageRoot.removeEventListener(egret.Event.MOUSE_LEAVE, this.mouseLeaveHandler, this);
            this.dragInitiator = null;
            this.dragSource = null;
            this.stageRoot = null;
            this.target = null;
            this.oldTarget = null;
        };
        return DragProxy;
    })(eui.Component);
    eui.DragProxy = DragProxy;
    egret.registerClass(DragProxy,'eui.DragProxy');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var DragSource = (function (_super) {
        __extends(DragSource, _super);
        function DragSource() {
            _super.call(this);
            this.dataHolder = {};
            this.formatHandlers = {};
            this._formats = [];
        }
        var c=DragSource,p=c.prototype;
        d(p, "formats"
            ,function () {
                return this._formats;
            }
            ,function (value) {
                egret.superSetter(eui.DragSource, this, "formats", value);
            }
        );
        p.addData = function (data, format) {
            this._formats.push(format);
            this.dataHolder[format] = data;
        };
        p.addHandler = function (handler, format) {
            this._formats.push(format);
            this.formatHandlers[format] = handler;
        };
        p.dataForFormat = function (format) {
            var data = this.dataHolder[format];
            if (data)
                return data;
            if (this.formatHandlers[format])
                return this.formatHandlers[format]();
            return null;
        };
        p.hasFormat = function (format) {
            var n = this._formats.length;
            for (var i = 0; i < n; i++) {
                if (this._formats[i] == format)
                    return true;
            }
            return false;
        };
        return DragSource;
    })(egret.HashObject);
    eui.DragSource = DragSource;
    egret.registerClass(DragSource,'eui.DragSource');
})(eui || (eui = {}));
var eui;
(function (eui) {
    var FocusManager = (function () {
        function FocusManager() {
        }
        var c=FocusManager,p=c.prototype;
        d(p, "stage"
            /**
             * 舞台引用
             */
            ,function () {
                return this._stage;
            }
            ,function (value) {
                if (this._stage == value)
                    return;
                var s = this._stage ? this.stage : value;
                if (value) {
                    s.addEventListener(egret.MouseEvent.MOUSE_DOWN, this.onMouseDown, this);
                    s.addEventListener(egret.FocusEvent.MOUSE_FOCUS_CHANGE, this.mouseFocusChangeHandler, this);
                    s.addEventListener(egret.Event.ACTIVATE, this.activateHandler, this);
                    s.addEventListener(egret.FocusEvent.FOCUS_IN, this.focusInHandler, this, true);
                }
                else {
                    s.removeEventListener(egret.MouseEvent.MOUSE_DOWN, this.onMouseDown, this);
                    s.removeEventListener(egret.FocusEvent.MOUSE_FOCUS_CHANGE, this.mouseFocusChangeHandler, this);
                    s.removeEventListener(egret.Event.ACTIVATE, this.activateHandler, this);
                    s.removeEventListener(egret.FocusEvent.FOCUS_IN, this.focusInHandler, this, true);
                }
                this._stage = value;
            }
        );
        /**
         * 屏蔽FP原始的焦点处理过程
         */
        p.mouseFocusChangeHandler = function (event) {
            if (event.isDefaultPrevented())
                return;
            if (event.relatedObject instanceof egret.TextField) {
                var tf = event.relatedObject;
                if (tf.type == "input") {
                    return;
                }
            }
            event.preventDefault();
        };
        /**
         * 鼠标按下事件
       */
        p.onMouseDown = function (event) {
            var focus = this.getTopLevelFocusTarget(event.target);
            if (!focus)
                return;
            if ((focus != this.currentFocus || this.stage.focus != null) && !(focus instanceof egret.TextField)) {
                focus.setFocus();
                egret.log(focus);
            }
        };
        /**
         * 焦点改变时更新currentFocus
       */
        p.focusInHandler = function (event) {
            this.currentFocus = this.getTopLevelFocusTarget(event.target);
        };
        /**
         * 获取鼠标按下点的焦点对象
       */
        p.getTopLevelFocusTarget = function (target) {
            while (target) {
                if (egret.is(target, "eui.IFocusTarget") &&
                    target.focusEnabled &&
                    target.enabled) {
                    return target;
                }
                target = target.parent;
            }
            return null;
        };
        /**
         * 窗口激活时重新设置焦点
       */
        p.activateHandler = function (event) {
            if (this.currentFocus)
                this.currentFocus.setFocus();
        };
        return FocusManager;
    })();
    eui.FocusManager = FocusManager;
    egret.registerClass(FocusManager,'eui.FocusManager',["eui.IFocusManager"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 弹框管理器
     * @author
     *
     */
    var PopUpManager = (function () {
        function PopUpManager() {
        }
        var c=PopUpManager,p=c.prototype;
        d(PopUpManager, "impl"
            ,function () {
                if (!PopUpManager._impl) {
                    PopUpManager._impl = new eui.PopUpManagerImpl();
                }
                return PopUpManager._impl;
            }
        );
        /**
         * 添加一个弹出项
         * 若重复添加则会移除上一次弹出
         * @param panel 弹出项
         * @param parent 弹出父级
         * @param isMid 是否居中
         * @param isModal 是否模态
         *
         * 返回是否成功添加
         */
        PopUpManager.popUp = function (panel, parent, isMid, isModal) {
            return PopUpManager.impl.popUp(panel, parent, isMid, isModal);
        };
        /**
         * 移除弹出项
         * @param panel
         *
         * 返回是否成功移除
         *
         */
        PopUpManager.removePopup = function (panel) {
            return PopUpManager.impl.removePopup(panel);
        };
        return PopUpManager;
    })();
    eui.PopUpManager = PopUpManager;
    egret.registerClass(PopUpManager,'eui.PopUpManager');
})(eui || (eui = {}));
var eui;
(function (eui) {
    /**
     * 弹框管理器默认实现类
     * @author
     *
     */
    var PopUpManagerImpl = (function () {
        function PopUpManagerImpl() {
            this.popUps = new Array();
            this.maskData = new MaskData();
        }
        var c=PopUpManagerImpl,p=c.prototype;
        /**
         * 添加一个弹出项
         * 若重复添加则会移除上一次弹出
         * @param panel 弹出项
         * @param parent 弹出父级
         * @param isMid 是否居中
         * @param isModal 是否模态
         */
        p.popUp = function (panel, parent, isMid, isModal) {
            var data = this.getInitPopUpData(panel);
            data.popUp = panel;
            data.popUpParent = parent;
            if (isMid) {
                var parentWidth = egret.is(parent, "egret.Stage") ? parent.stageWidth : parent.width;
                var parentHeight = egret.is(parent, "egret.Stage") ? parent.stageHeight : parent.height;
                var horizontalX = Math.floor((parentWidth - panel.width) / 2);
                var vertivalY = Math.floor((parentHeight - panel.height) / 2);
                panel.x = horizontalX;
                panel.y = vertivalY;
                panel.addEventListener(egret.Event.REMOVED, this.removeByOther, this);
            }
            if (isModal) {
                parent.addChild(this.getMask(data));
            }
            parent.addChild(panel);
            this.popUps.push(data);
            return true;
        };
        p.getMask = function (popupdata) {
            var modelRect = new eui.Rect();
            modelRect.width = popupdata.popUpParent.width;
            modelRect.touchEnabled = true;
            modelRect.height = popupdata.popUpParent.height;
            modelRect.fillColor = this.maskData.color;
            modelRect.alpha = this.maskData.alpha;
            popupdata.mask = modelRect;
            return modelRect;
        };
        /**
         * 避免弹出项被外部移除
         * 模态无法自动移除
         * @param e
         */
        p.removeByOther = function (e) {
            var data = this.getDataByPopup(e.currentTarget);
            if (data.mask && data.mask.parent) {
                data.mask.parent.removeChild(data.mask);
            }
            this.removePopUpListener(data.popUp);
        };
        p.removePopUpListener = function (popup) {
            popup.removeEventListener(egret.Event.REMOVED, this.removeByOther, this);
        };
        /**
         * 获取一个初始化完成后的弹出数据项
         * @param popUp
         */
        p.getInitPopUpData = function (popUp) {
            var data = this.getDataByPopup(popUp);
            if (data) {
                this.removePopup(data);
                data.mask = null;
            }
            else {
                data = new PopUpData();
            }
            return data;
        };
        p.getDataByPopup = function (popUp) {
            for (var i = 0; i < this.popUps.length; ++i) {
                if (this.popUps[i].popUp == popUp)
                    return this.popUps[i];
            }
            return null;
        };
        p.deleteData = function (data) {
            for (var i = 0; i < this.popUps.length; ++i) {
                if (this.popUps[i] == data) {
                    this.popUps.splice(i, 1);
                    return;
                }
            }
        };
        /**
         * 移除弹出的面板
         * @param panel
         */
        p.removePopup = function (panel) {
            var data;
            if (egret.is(panel, "egret.DisplayObject")) {
                this.removePopUpListener(panel);
                data = this.getDataByPopup(panel);
            }
            else if (panel instanceof PopUpData) {
                data = panel;
            }
            else {
                return false;
            }
            if (data) {
                this.removePopUpListener(data.popUp);
                this.deleteData(data);
                if (data.mask && data.mask.parent) {
                    data.mask.parent.removeChild(data.mask);
                }
                data.popUpParent.removeChild(data.popUp);
                return true;
            }
            return false;
        };
        return PopUpManagerImpl;
    })();
    eui.PopUpManagerImpl = PopUpManagerImpl;
    egret.registerClass(PopUpManagerImpl,'eui.PopUpManagerImpl');
    var PopUpData = (function () {
        function PopUpData() {
        }
        var c=PopUpData,p=c.prototype;
        return PopUpData;
    })();
    eui.PopUpData = PopUpData;
    egret.registerClass(PopUpData,'eui.PopUpData');
    var MaskData = (function () {
        function MaskData(color, alpha) {
            if (color === void 0) { color = 0x000000; }
            if (alpha === void 0) { alpha = .5; }
            this.color = color;
            this.alpha = alpha;
        }
        var c=MaskData,p=c.prototype;
        return MaskData;
    })();
    eui.MaskData = MaskData;
    egret.registerClass(MaskData,'eui.MaskData');
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The operation of adding a state to view.
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * 视图添加状态显示元素操作
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var AddItems = (function () {
        /**
         * @language en_US
         * Constructor.
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个AddItems实例
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function AddItems(target, propertyName, position, relativeTo) {
            this.target = target;
            this.propertyName = propertyName;
            this.position = position;
            this.relativeTo = relativeTo;
        }
        var c=AddItems,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.apply = function (host, parent) {
            var index;
            var relative = host[this.relativeTo];
            var target = host[this.target];
            var container = this.propertyName ? host[this.propertyName] : parent;
            if (!target || !container)
                return;
            switch (this.position) {
                case 0 /* FIRST */:
                    index = 0;
                    break;
                case 1 /* LAST */:
                    index = -1;
                    break;
                case 2 /* BEFORE */:
                    index = container.getChildIndex(relative);
                    break;
                case 3 /* AFTER */:
                    index = container.getChildIndex(relative) + 1;
                    break;
            }
            if (index == -1) {
                index = container.numChildren;
            }
            if (egret.is(container, "eui.Component")) {
                container.$Component[8 /* skin */].$elementsContent.push(target);
            }
            container.addChildAt(target, index);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.remove = function (host, parent) {
            var container = this.propertyName ? host[this.propertyName] : parent;
            var target = host[this.target];
            if (!target || !container)
                return;
            if (target.$parent === container) {
                container.removeChild(target);
            }
            if (egret.is(container, "eui.Component")) {
                var arr = container.$Component[8 /* skin */].$elementsContent;
                var idx = arr.indexOf(target);
                if (idx > -1) {
                    arr.splice(idx, 1);
                }
            }
        };
        return AddItems;
    })();
    eui.AddItems = AddItems;
    egret.registerClass(AddItems,'eui.AddItems',["eui.IOverride"]);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The SetProperty class specifies a property value that is in effect only
     * during the parent view state.
     * You use this class in the <code>overrides</code> property of the State class.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * SetProperty 类指定只在父视图状态期间有效的属性值。可以在 State 类的 overrides 属性中使用该类。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var SetProperty = (function () {
        /**
         * @language en_US
         * Constructor.
         *
         * @param target The object whose property is being set.
         * By default, EUI uses the immediate parent of the State object.
         * @param name The property to set.
         * @param value The value of the property in the view state.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个SetProperty实例。
         *
         * @param target 要设置其属性的对象。默认情况下，EUI 使用 State 对象的直接父级。
         * @param name 要设置的属性。
         * @param value 视图状态中的属性值。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function SetProperty(target, name, value) {
            this.target = target;
            this.name = name;
            this.value = value;
        }
        var c=SetProperty,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.apply = function (host, parent) {
            var obj = this.target ? host[this.target] : host;
            if (!obj)
                return;
            this.oldValue = obj[this.name];
            this.setPropertyValue(obj, this.name, this.value, this.oldValue);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        p.remove = function (host, parent) {
            var obj = this.target ? host[this.target] : host;
            if (!obj)
                return;
            this.setPropertyValue(obj, this.name, this.oldValue, this.oldValue);
            this.oldValue = null;
        };
        /**
         * @private
         * 设置属性值
         */
        p.setPropertyValue = function (obj, name, value, valueForType) {
            if (value === undefined || value === null)
                obj[name] = value;
            else if (typeof (valueForType) == "number")
                obj[name] = +value;
            else if (typeof (valueForType) == "boolean")
                obj[name] = this.toBoolean(value);
            else
                obj[name] = value;
        };
        /**
         * @private
         * 转成Boolean值
         */
        p.toBoolean = function (value) {
            if (typeof (value) == "string")
                return value.toLowerCase() == "true";
            return value != false;
        };
        return SetProperty;
    })();
    eui.SetProperty = SetProperty;
    egret.registerClass(SetProperty,'eui.SetProperty',["eui.IOverride"]);
})(eui || (eui = {}));
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    /**
     * @language en_US
     * The SetProperty class specifies a property value that is in effect only
     * during the parent view state.
     * You use this class in the <code>overrides</code> property of the State class.
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    /**
     * @language zh_CN
     * SetProperty 类指定只在父视图状态期间有效的属性值。可以在 State 类的 overrides 属性中使用该类。
     *
     * @version Egret 2.4
     * @version eui 1.0
     * @platform Web,Native
     */
    var SetStateProperty = (function () {
        /**
         * @language en_US
         * Constructor.
         *
         * @param target The object whose property is being set.
         * By default, EUI uses the immediate parent of the State object.
         * @param name The property to set.
         * @param value The value of the property in the view state.
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        /**
         * @language zh_CN
         * 创建一个SetProperty实例。
         *
         * @param target 要设置其属性的对象。默认情况下，EUI 使用 State 对象的直接父级。
         * @param name 要设置的属性。
         * @param value 视图状态中的属性值。
         *
         * @version Egret 2.4
         * @version eui 1.0
         * @platform Web,Native
         */
        function SetStateProperty(host, chain, target, prop) {
            this.host = host;
            this.chain = chain;
            this.target = target;
            this.prop = prop;
        }
        var c=SetStateProperty,p=c.prototype;
        /**
         * @inheritDoc
         *
         * @version Egret 3.0
         * @version eui 1.0
         * @platform Web,Native
         */
        p.apply = function (host, parent) {
            if (!this.target) {
                return;
            }
            if (this.oldValue) {
                this.setPropertyValue(this.target, this.prop, this.oldValue, this.oldValue);
            }
            if (this.target[this.prop]) {
                this.oldValue = this.target[this.prop];
            }
            var chain = [];
            for (var i = 0, len = this.chain.length; i < len; i++) {
                chain[i] = this.chain[i];
            }
            eui.Binding.bindProperty(this.host, chain, this.target, this.prop);
        };
        /**
         * @inheritDoc
         *
         * @version Egret 3.0
         * @version eui 1.0
         * @platform Web,Native
         */
        p.remove = function (host, parent) {
            if (!this.target) {
                return;
            }
            var oldValue = this.oldValue;
            if (this.target[this.prop]) {
                this.oldValue = this.target[this.prop];
            }
            if (oldValue) {
                this.setPropertyValue(this.target, this.prop, oldValue, oldValue);
            }
        };
        /**
         * @private
         * 设置属性值
         */
        p.setPropertyValue = function (obj, name, value, valueForType) {
            if (value === undefined || value === null)
                obj[name] = value;
            else if (typeof (valueForType) == "number")
                obj[name] = +value;
            else if (typeof (valueForType) == "boolean")
                obj[name] = this.toBoolean(value);
            else
                obj[name] = value;
        };
        /**
         * @private
         * 转成Boolean值
         */
        p.toBoolean = function (value) {
            if (typeof (value) == "string")
                return value.toLowerCase() == "true";
            return value != false;
        };
        return SetStateProperty;
    })();
    eui.SetStateProperty = SetStateProperty;
    egret.registerClass(SetStateProperty,'eui.SetStateProperty',["eui.IOverride"]);
})(eui || (eui = {}));
var eui;
(function (eui) {
    var BoxElementIdUtil = (function (_super) {
        __extends(BoxElementIdUtil, _super);
        function BoxElementIdUtil() {
            _super.apply(this, arguments);
        }
        var c=BoxElementIdUtil,p=c.prototype;
        BoxElementIdUtil.newId = function () {
            var id = 0;
            while (eui.BoxElementIdUtil.checkHas(id)) {
                id++;
            }
            eui.BoxElementIdUtil.addId(id);
            return id;
        };
        BoxElementIdUtil.checkHas = function (id) {
            for (var i = 0; i < eui.BoxElementIdUtil.idArr.length; i++) {
                if (id == eui.BoxElementIdUtil.idArr[i]) {
                    return true;
                }
            }
            return false;
        };
        BoxElementIdUtil.addId = function (id) {
            if (eui.BoxElementIdUtil.checkHas(id) == false) {
                eui.BoxElementIdUtil.idArr.push(id);
            }
        };
        return BoxElementIdUtil;
    })(egret.HashObject);
    eui.BoxElementIdUtil = BoxElementIdUtil;
    egret.registerClass(BoxElementIdUtil,'eui.BoxElementIdUtil');
})(eui || (eui = {}));
eui.BoxElementIdUtil.idArr = [];
//////////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2014-2015, Egret Technology Inc.
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the Egret nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY EGRET AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
//  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL EGRET AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
//  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE, DATA,
//  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////////////////
var eui;
(function (eui) {
    var sys;
    (function (sys) {
        var SOLUTION_TOLERANCE = 0.1;
        var MIN_MAX_TOLERANCE = 0.1;
        /**
         * @private
         */
        var MatrixUtil = (function () {
            function MatrixUtil() {
            }
            var c=MatrixUtil,p=c.prototype;
            /**
             * @private
             */
            MatrixUtil.fitBounds = function (width, height, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, minWidth, minHeight, maxWidth, maxHeight) {
                if (isNaN(width) && isNaN(height))
                    return egret.Point.create(preferredWidth, preferredHeight);
                var newMinWidth = (minWidth < MIN_MAX_TOLERANCE) ? 0 : minWidth - MIN_MAX_TOLERANCE;
                var newMinHeight = (minHeight < MIN_MAX_TOLERANCE) ? 0 : minHeight - MIN_MAX_TOLERANCE;
                var newMaxWidth = maxWidth + MIN_MAX_TOLERANCE;
                var newMaxHeight = maxHeight + MIN_MAX_TOLERANCE;
                var actualSize;
                if (!isNaN(width) && !isNaN(height)) {
                    actualSize = calcUBoundsToFitTBounds(width, height, matrix, newMinWidth, newMinHeight, newMaxWidth, newMaxHeight);
                    if (!actualSize) {
                        var actualSize1;
                        actualSize1 = fitTBoundsWidth(width, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, newMinWidth, newMinHeight, newMaxWidth, newMaxHeight);
                        if (actualSize1) {
                            var fitHeight = transformSize(actualSize1.x, actualSize1.y, matrix).height;
                            if (fitHeight - SOLUTION_TOLERANCE > height) {
                                egret.Point.release(actualSize1);
                                actualSize1 = null;
                            }
                        }
                        var actualSize2;
                        actualSize2 = fitTBoundsHeight(height, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, newMinWidth, newMinHeight, newMaxWidth, newMaxHeight);
                        if (actualSize2) {
                            var fitWidth = transformSize(actualSize2.x, actualSize2.y, matrix).width;
                            if (fitWidth - SOLUTION_TOLERANCE > width) {
                                egret.Point.release(actualSize2);
                                actualSize2 = null;
                            }
                        }
                        if (actualSize1 && actualSize2) {
                            actualSize = ((actualSize1.x * actualSize1.y) > (actualSize2.x * actualSize2.y)) ? actualSize1 : actualSize2;
                        }
                        else if (actualSize1) {
                            actualSize = actualSize1;
                        }
                        else {
                            actualSize = actualSize2;
                        }
                        egret.Point.release(actualSize1);
                        egret.Point.release(actualSize2);
                    }
                    return actualSize;
                }
                else if (!isNaN(width)) {
                    return fitTBoundsWidth(width, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, newMinWidth, newMinHeight, newMaxWidth, newMaxHeight);
                }
                else {
                    return fitTBoundsHeight(height, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, newMinWidth, newMinHeight, newMaxWidth, newMaxHeight);
                }
            };
            return MatrixUtil;
        })();
        sys.MatrixUtil = MatrixUtil;
        egret.registerClass(MatrixUtil,'eui.sys.MatrixUtil');
        /**
         * @private
         */
        function fitTBoundsWidth(width, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, minWidth, minHeight, maxWidth, maxHeight) {
            var actualSize;
            if (!isNaN(explicitWidth) && isNaN(explicitHeight)) {
                actualSize = calcUBoundsToFitTBoundsWidth(width, matrix, explicitWidth, preferredHeight, explicitWidth, minHeight, explicitWidth, maxHeight);
                if (actualSize)
                    return actualSize;
            }
            else if (isNaN(explicitWidth) && !isNaN(explicitHeight)) {
                actualSize = calcUBoundsToFitTBoundsWidth(width, matrix, preferredWidth, explicitHeight, minWidth, explicitHeight, maxWidth, explicitHeight);
                if (actualSize)
                    return actualSize;
            }
            actualSize = calcUBoundsToFitTBoundsWidth(width, matrix, preferredWidth, preferredHeight, minWidth, minHeight, maxWidth, maxHeight);
            return actualSize;
        }
        /**
         * @private
         */
        function fitTBoundsHeight(height, matrix, explicitWidth, explicitHeight, preferredWidth, preferredHeight, minWidth, minHeight, maxWidth, maxHeight) {
            var actualSize;
            if (!isNaN(explicitWidth) && isNaN(explicitHeight)) {
                actualSize = calcUBoundsToFitTBoundsHeight(height, matrix, explicitWidth, preferredHeight, explicitWidth, minHeight, explicitWidth, maxHeight);
                if (actualSize)
                    return actualSize;
            }
            else if (isNaN(explicitWidth) && !isNaN(explicitHeight)) {
                actualSize = calcUBoundsToFitTBoundsHeight(height, matrix, preferredWidth, explicitHeight, minWidth, explicitHeight, maxWidth, explicitHeight);
                if (actualSize)
                    return actualSize;
            }
            actualSize = calcUBoundsToFitTBoundsHeight(height, matrix, preferredWidth, preferredHeight, minWidth, minHeight, maxWidth, maxHeight);
            return actualSize;
        }
        /**
         * @private
         */
        function calcUBoundsToFitTBoundsHeight(h, matrix, preferredX, preferredY, minX, minY, maxX, maxY) {
            var b = matrix.b;
            var d = matrix.d;
            if (-1.0e-9 < b && b < +1.0e-9)
                b = 0;
            if (-1.0e-9 < d && d < +1.0e-9)
                d = 0;
            if (b == 0 && d == 0)
                return null;
            if (b == 0 && d == 0)
                return null;
            if (b == 0)
                return egret.Point.create(preferredX, h / Math.abs(d));
            else if (d == 0)
                return egret.Point.create(h / Math.abs(b), preferredY);
            var d1 = (b * d >= 0) ? d : -d;
            var s;
            var x;
            var y;
            if (d1 != 0 && preferredX > 0) {
                var invD1 = 1 / d1;
                preferredX = Math.max(minX, Math.min(maxX, preferredX));
                x = preferredX;
                y = (h - b * x) * invD1;
                if (minY <= y && y <= maxY &&
                    b * x + d1 * y >= 0) {
                    s = egret.Point.create(x, y);
                }
                y = (-h - b * x) * invD1;
                if (minY <= y && y <= maxY &&
                    b * x + d1 * y < 0) {
                    if (!s || transformSize(s.x, s.y, matrix).width > transformSize(x, y, matrix).width) {
                        egret.Point.release(s);
                        s = egret.Point.create(x, y);
                    }
                }
            }
            if (b != 0 && preferredY > 0) {
                var invB = 1 / b;
                preferredY = Math.max(minY, Math.min(maxY, preferredY));
                y = preferredY;
                x = (h - d1 * y) * invB;
                if (minX <= x && x <= maxX &&
                    b * x + d1 * y >= 0) {
                    if (!s || transformSize(s.x, s.y, matrix).width > transformSize(x, y, matrix).width)
                        s = egret.Point.create(x, y);
                }
                x = (-h - d1 * y) * invB;
                if (minX <= x && x <= maxX &&
                    b * x + d1 * y < 0) {
                    if (!s || transformSize(s.x, s.y, matrix).width > transformSize(x, y, matrix).width) {
                        egret.Point.release(s);
                        s = egret.Point.create(x, y);
                    }
                }
            }
            if (s)
                return s;
            var a = matrix.a;
            var c = matrix.c;
            var c1 = (a * c >= 0) ? c : -c;
            return solveEquation(b, d1, h, minX, minY, maxX, maxY, a, c1);
        }
        /**
         * @private
         */
        function calcUBoundsToFitTBoundsWidth(w, matrix, preferredX, preferredY, minX, minY, maxX, maxY) {
            var a = matrix.a;
            var c = matrix.c;
            if (-1.0e-9 < a && a < +1.0e-9)
                a = 0;
            if (-1.0e-9 < c && c < +1.0e-9)
                c = 0;
            if (a == 0 && c == 0)
                return null;
            if (a == 0)
                return egret.Point.create(preferredX, w / Math.abs(c));
            else if (c == 0)
                return egret.Point.create(w / Math.abs(a), preferredY);
            var c1 = (a * c >= 0) ? c : -c;
            var s;
            var x;
            var y;
            if (c1 != 0 && preferredX > 0) {
                var invC1 = 1 / c1;
                preferredX = Math.max(minX, Math.min(maxX, preferredX));
                x = preferredX;
                y = (w - a * x) * invC1;
                if (minY <= y && y <= maxY &&
                    a * x + c1 * y >= 0) {
                    s = egret.Point.create(x, y);
                }
                y = (-w - a * x) * invC1;
                if (minY <= y && y <= maxY &&
                    a * x + c1 * y < 0) {
                    if (!s || transformSize(s.x, s.y, matrix).height > transformSize(x, y, matrix).height) {
                        egret.Point.release(s);
                        s = egret.Point.create(x, y);
                    }
                }
            }
            if (a != 0 && preferredY > 0) {
                var invA = 1 / a;
                preferredY = Math.max(minY, Math.min(maxY, preferredY));
                y = preferredY;
                x = (w - c1 * y) * invA;
                if (minX <= x && x <= maxX &&
                    a * x + c1 * y >= 0) {
                    if (!s || transformSize(s.x, s.y, matrix).height > transformSize(x, y, matrix).height) {
                        egret.Point.release(s);
                        s = egret.Point.create(x, y);
                    }
                }
                x = (-w - c1 * y) * invA;
                if (minX <= x && x <= maxX &&
                    a * x + c1 * y < 0) {
                    if (!s || transformSize(s.x, s.y, matrix).height > transformSize(x, y, matrix).height) {
                        egret.Point.release(s);
                        s = egret.Point.create(x, y);
                    }
                }
            }
            if (s)
                return s;
            var b = matrix.b;
            var d = matrix.d;
            var d1 = (b * d >= 0) ? d : -d;
            return solveEquation(a, c1, w, minX, minY, maxX, maxY, b, d1);
        }
        /**
         * @private
         */
        function solveEquation(a, c, w, minX, minY, maxX, maxY, b, d) {
            if (a == 0 || c == 0)
                return null;
            var x;
            var y;
            var A = (w - minX * a) / c;
            var B = (w - maxX * a) / c;
            var rangeMinY = Math.max(minY, Math.min(A, B));
            var rangeMaxY = Math.min(maxY, Math.max(A, B));
            var det = (b * c - a * d);
            if (rangeMinY <= rangeMaxY) {
                if (Math.abs(det) < 1.0e-9) {
                    y = w / (a + c);
                }
                else {
                    y = b * w / det;
                }
                y = Math.max(rangeMinY, Math.min(y, rangeMaxY));
                x = (w - c * y) / a;
                return egret.Point.create(x, y);
            }
            A = -(minX * a + w) / c;
            B = -(maxX * a + w) / c;
            rangeMinY = Math.max(minY, Math.min(A, B));
            rangeMaxY = Math.min(maxY, Math.max(A, B));
            if (rangeMinY <= rangeMaxY) {
                if (Math.abs(det) < 1.0e-9) {
                    y = -w / (a + c);
                }
                else {
                    y = -b * w / det;
                }
                y = Math.max(rangeMinY, Math.min(y, rangeMaxY));
                x = (-w - c * y) / a;
                return egret.Point.create(x, y);
            }
            return null;
        }
        /**
         * @private
         */
        function calcUBoundsToFitTBounds(w, h, matrix, minX, minY, maxX, maxY) {
            var a = matrix.a;
            var b = matrix.b;
            var c = matrix.c;
            var d = matrix.d;
            if (-1.0e-9 < a && a < +1.0e-9)
                a = 0;
            if (-1.0e-9 < b && b < +1.0e-9)
                b = 0;
            if (-1.0e-9 < c && c < +1.0e-9)
                c = 0;
            if (-1.0e-9 < d && d < +1.0e-9)
                d = 0;
            if (b == 0 && c == 0) {
                if (a == 0 || d == 0)
                    return null;
                return egret.Point.create(w / Math.abs(a), h / Math.abs(d));
            }
            if (a == 0 && d == 0) {
                if (b == 0 || c == 0)
                    return null;
                return egret.Point.create(h / Math.abs(b), w / Math.abs(c));
            }
            var c1 = (a * c >= 0) ? c : -c;
            var d1 = (b * d >= 0) ? d : -d;
            var det = a * d1 - b * c1;
            if (Math.abs(det) < 1.0e-9) {
                if (c1 == 0 || a == 0 || a == -c1)
                    return null;
                if (Math.abs(a * h - b * w) > 1.0e-9)
                    return null;
                return solveEquation(a, c1, w, minX, minX, maxX, maxY, b, d1);
            }
            var invDet = 1 / det;
            w *= invDet;
            h *= invDet;
            var s;
            s = solveSystem(a, c1, b, d1, w, h);
            if (s &&
                minX <= s.x && s.x <= maxX && minY <= s.y && s.y <= maxY &&
                a * s.x + c1 * s.x >= 0 &&
                b * s.x + d1 * s.y >= 0)
                return s;
            s = solveSystem(a, c1, b, d1, w, -h);
            if (s &&
                minX <= s.x && s.x <= maxX && minY <= s.y && s.y <= maxY &&
                a * s.x + c1 * s.x >= 0 &&
                b * s.x + d1 * s.y < 0)
                return s;
            s = solveSystem(a, c1, b, d1, -w, h);
            if (s &&
                minX <= s.x && s.x <= maxX && minY <= s.y && s.y <= maxY &&
                a * s.x + c1 * s.x < 0 &&
                b * s.x + d1 * s.y >= 0)
                return s;
            s = solveSystem(a, c1, b, d1, -w, -h);
            if (s &&
                minX <= s.x && s.x <= maxX && minY <= s.y && s.y <= maxY &&
                a * s.x + c1 * s.x < 0 &&
                b * s.x + d1 * s.y < 0)
                return s;
            egret.Point.release(s);
            return null;
        }
        /**
         * @private
         */
        function transformSize(width, height, matrix) {
            var bounds = egret.$TempRectangle.setTo(0, 0, width, height);
            matrix.$transformBounds(bounds);
            return bounds;
        }
        /**
         * @private
         */
        function solveSystem(a, c, b, d, mOverDet, nOverDet) {
            return egret.Point.create(d * mOverDet - c * nOverDet, a * nOverDet - b * mOverDet);
        }
    })(sys = eui.sys || (eui.sys = {}));
})(eui || (eui = {}));
var eui;
(function (eui) {
    var MouseEventUtil = (function (_super) {
        __extends(MouseEventUtil, _super);
        function MouseEventUtil() {
            _super.apply(this, arguments);
        }
        var c=MouseEventUtil,p=c.prototype;
        MouseEventUtil.addDownDragUpListeners = function (target, handleDown, handleDrag, handleUp) {
            var f = function (e) {
                var sbr;
                switch (e.type) {
                    case egret.MouseEvent.MOUSE_DOWN:
                        if (e.isDefaultPrevented())
                            break;
                        handleDown(e);
                        sbr = target.stage;
                        sbr["addEventListener"](egret.MouseEvent.MOUSE_MOVE, f, null, true);
                        sbr["addEventListener"](egret.MouseEvent.MOUSE_UP, f, null, true);
                        sbr["addEventListener"]("mouseLeave", f, null, true);
                        break;
                    case egret.MouseEvent.MOUSE_MOVE:
                        handleDrag(e);
                        break;
                    case egret.MouseEvent.MOUSE_UP:
                        handleUp(e);
                        sbr = target.stage;
                        sbr["removeEventListener"](egret.MouseEvent.MOUSE_MOVE, f, null, true);
                        sbr["removeEventListener"](egret.MouseEvent.MOUSE_UP, f, null, true);
                        sbr["removeEventListener"]("mouseLeave", f, null, true);
                        break;
                    case "removeHandler":
                        target.removeEventListener("removeHandler", f, null);
                        target.removeEventListener(egret.MouseEvent.MOUSE_DOWN, f, null);
                        sbr = target.stage;
                        sbr["removeEventListener"](egret.MouseEvent.MOUSE_MOVE, f, null, true);
                        sbr["removeEventListener"](egret.MouseEvent.MOUSE_UP, f, null, true);
                        sbr["removeEventListener"]("mouseLeave", f, null, true);
                        break;
                }
            };
            target.addEventListener(egret.MouseEvent.MOUSE_DOWN, f, null);
            target.addEventListener("removeHandler", f, null);
        };
        return MouseEventUtil;
    })(egret.HashObject);
    eui.MouseEventUtil = MouseEventUtil;
    egret.registerClass(MouseEventUtil,'eui.MouseEventUtil');
})(eui || (eui = {}));
var egret;
(function (egret) {
    var utils;
    (function (utils) {
        function tr(key) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            return key;
        }
        utils.tr = tr;
    })(utils = egret.utils || (egret.utils = {}));
})(egret || (egret = {}));
